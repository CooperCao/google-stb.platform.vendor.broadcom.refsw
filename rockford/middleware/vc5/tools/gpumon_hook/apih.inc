/*=============================================================================
Broadcom Proprietary and Confidential. (c)2016 Broadcom.
All rights reserved.
=============================================================================*/
/* Auto-generated by running gen_hook_tables.py
 * DO NOT EDIT!
 */

#if EGL_VERSION_1_0
EGLBoolean (*real_eglChooseConfig)(EGLDisplay dpy, const EGLint *attrib_list, EGLConfig *configs, EGLint config_size, EGLint *num_config);
EGLBoolean (*real_eglCopyBuffers)(EGLDisplay dpy, EGLSurface surface, EGLNativePixmapType target);
EGLContext (*real_eglCreateContext)(EGLDisplay dpy, EGLConfig config, EGLContext share_context, const EGLint *attrib_list);
EGLSurface (*real_eglCreatePbufferSurface)(EGLDisplay dpy, EGLConfig config, const EGLint *attrib_list);
EGLSurface (*real_eglCreatePixmapSurface)(EGLDisplay dpy, EGLConfig config, EGLNativePixmapType pixmap, const EGLint *attrib_list);
EGLSurface (*real_eglCreateWindowSurface)(EGLDisplay dpy, EGLConfig config, EGLNativeWindowType win, const EGLint *attrib_list);
EGLBoolean (*real_eglDestroyContext)(EGLDisplay dpy, EGLContext ctx);
EGLBoolean (*real_eglDestroySurface)(EGLDisplay dpy, EGLSurface surface);
EGLBoolean (*real_eglGetConfigAttrib)(EGLDisplay dpy, EGLConfig config, EGLint attribute, EGLint *value);
EGLBoolean (*real_eglGetConfigs)(EGLDisplay dpy, EGLConfig *configs, EGLint config_size, EGLint *num_config);
EGLDisplay (*real_eglGetCurrentDisplay)(void);
EGLSurface (*real_eglGetCurrentSurface)(EGLint readdraw);
EGLDisplay (*real_eglGetDisplay)(EGLNativeDisplayType display_id);
EGLint (*real_eglGetError)(void);
__eglMustCastToProperFunctionPointerType (*real_eglGetProcAddress)(const char *procname);
EGLBoolean (*real_eglInitialize)(EGLDisplay dpy, EGLint *major, EGLint *minor);
EGLBoolean (*real_eglMakeCurrent)(EGLDisplay dpy, EGLSurface draw, EGLSurface read, EGLContext ctx);
EGLBoolean (*real_eglQueryContext)(EGLDisplay dpy, EGLContext ctx, EGLint attribute, EGLint *value);
const char * (*real_eglQueryString)(EGLDisplay dpy, EGLint name);
EGLBoolean (*real_eglQuerySurface)(EGLDisplay dpy, EGLSurface surface, EGLint attribute, EGLint *value);
EGLBoolean (*real_eglSwapBuffers)(EGLDisplay dpy, EGLSurface surface);
EGLBoolean (*real_eglTerminate)(EGLDisplay dpy);
EGLBoolean (*real_eglWaitGL)(void);
EGLBoolean (*real_eglWaitNative)(EGLint engine);
#endif /* EGL_VERSION_1_0*/

#if EGL_VERSION_1_1
EGLBoolean (*real_eglBindTexImage)(EGLDisplay dpy, EGLSurface surface, EGLint buffer);
EGLBoolean (*real_eglReleaseTexImage)(EGLDisplay dpy, EGLSurface surface, EGLint buffer);
EGLBoolean (*real_eglSurfaceAttrib)(EGLDisplay dpy, EGLSurface surface, EGLint attribute, EGLint value);
EGLBoolean (*real_eglSwapInterval)(EGLDisplay dpy, EGLint interval);
#endif /* EGL_VERSION_1_1*/

#if EGL_VERSION_1_2
EGLBoolean (*real_eglBindAPI)(EGLenum api);
EGLenum (*real_eglQueryAPI)(void);
EGLSurface (*real_eglCreatePbufferFromClientBuffer)(EGLDisplay dpy, EGLenum buftype, EGLClientBuffer buffer, EGLConfig config, const EGLint *attrib_list);
EGLBoolean (*real_eglReleaseThread)(void);
EGLBoolean (*real_eglWaitClient)(void);
#endif /* EGL_VERSION_1_2*/

#if EGL_VERSION_1_3
#endif /* EGL_VERSION_1_3*/

#if EGL_VERSION_1_4
EGLContext (*real_eglGetCurrentContext)(void);
#endif /* EGL_VERSION_1_4*/

#if EGL_VERSION_1_5
EGLSync (*real_eglCreateSync)(EGLDisplay dpy, EGLenum type, const EGLAttrib *attrib_list);
EGLBoolean (*real_eglDestroySync)(EGLDisplay dpy, EGLSync sync);
EGLint (*real_eglClientWaitSync)(EGLDisplay dpy, EGLSync sync, EGLint flags, EGLTime timeout);
EGLBoolean (*real_eglGetSyncAttrib)(EGLDisplay dpy, EGLSync sync, EGLint attribute, EGLAttrib *value);
EGLImage (*real_eglCreateImage)(EGLDisplay dpy, EGLContext ctx, EGLenum target, EGLClientBuffer buffer, const EGLAttrib *attrib_list);
EGLBoolean (*real_eglDestroyImage)(EGLDisplay dpy, EGLImage image);
EGLDisplay (*real_eglGetPlatformDisplay)(EGLenum platform, void *native_display, const EGLAttrib *attrib_list);
EGLSurface (*real_eglCreatePlatformWindowSurface)(EGLDisplay dpy, EGLConfig config, void *native_window, const EGLAttrib *attrib_list);
EGLSurface (*real_eglCreatePlatformPixmapSurface)(EGLDisplay dpy, EGLConfig config, void *native_pixmap, const EGLAttrib *attrib_list);
EGLBoolean (*real_eglWaitSync)(EGLDisplay dpy, EGLSync sync, EGLint flags);
#endif /* EGL_VERSION_1_5*/

#if GL_ES_VERSION_2_0
void (*real_glActiveTexture)(GLenum texture);
void (*real_glAttachShader)(GLuint program, GLuint shader);
void (*real_glBindAttribLocation)(GLuint program, GLuint index, const GLchar *name);
void (*real_glBindBuffer)(GLenum target, GLuint buffer);
void (*real_glBindFramebuffer)(GLenum target, GLuint framebuffer);
void (*real_glBindRenderbuffer)(GLenum target, GLuint renderbuffer);
void (*real_glBindTexture)(GLenum target, GLuint texture);
void (*real_glBlendColor)(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
void (*real_glBlendEquation)(GLenum mode);
void (*real_glBlendEquationSeparate)(GLenum modeRGB, GLenum modeAlpha);
void (*real_glBlendFunc)(GLenum sfactor, GLenum dfactor);
void (*real_glBlendFuncSeparate)(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);
void (*real_glBufferData)(GLenum target, GLsizeiptr size, const void *data, GLenum usage);
void (*real_glBufferSubData)(GLenum target, GLintptr offset, GLsizeiptr size, const void *data);
GLenum (*real_glCheckFramebufferStatus)(GLenum target);
void (*real_glClear)(GLbitfield mask);
void (*real_glClearColor)(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
void (*real_glClearDepthf)(GLfloat d);
void (*real_glClearStencil)(GLint s);
void (*real_glColorMask)(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha);
void (*real_glCompileShader)(GLuint shader);
void (*real_glCompressedTexImage2D)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *data);
void (*real_glCompressedTexSubImage2D)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data);
void (*real_glCopyTexImage2D)(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
void (*real_glCopyTexSubImage2D)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
GLuint (*real_glCreateProgram)(void);
GLuint (*real_glCreateShader)(GLenum type);
void (*real_glCullFace)(GLenum mode);
void (*real_glDeleteBuffers)(GLsizei n, const GLuint *buffers);
void (*real_glDeleteFramebuffers)(GLsizei n, const GLuint *framebuffers);
void (*real_glDeleteProgram)(GLuint program);
void (*real_glDeleteRenderbuffers)(GLsizei n, const GLuint *renderbuffers);
void (*real_glDeleteShader)(GLuint shader);
void (*real_glDeleteTextures)(GLsizei n, const GLuint *textures);
void (*real_glDepthFunc)(GLenum func);
void (*real_glDepthMask)(GLboolean flag);
void (*real_glDepthRangef)(GLfloat n, GLfloat f);
void (*real_glDetachShader)(GLuint program, GLuint shader);
void (*real_glDisable)(GLenum cap);
void (*real_glDisableVertexAttribArray)(GLuint index);
void (*real_glDrawArrays)(GLenum mode, GLint first, GLsizei count);
void (*real_glDrawElements)(GLenum mode, GLsizei count, GLenum type, const void *indices);
void (*real_glEnable)(GLenum cap);
void (*real_glEnableVertexAttribArray)(GLuint index);
void (*real_glFinish)(void);
void (*real_glFlush)(void);
void (*real_glFramebufferRenderbuffer)(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
void (*real_glFramebufferTexture2D)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
void (*real_glFrontFace)(GLenum mode);
void (*real_glGenBuffers)(GLsizei n, GLuint *buffers);
void (*real_glGenerateMipmap)(GLenum target);
void (*real_glGenFramebuffers)(GLsizei n, GLuint *framebuffers);
void (*real_glGenRenderbuffers)(GLsizei n, GLuint *renderbuffers);
void (*real_glGenTextures)(GLsizei n, GLuint *textures);
void (*real_glGetActiveAttrib)(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name);
void (*real_glGetActiveUniform)(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name);
void (*real_glGetAttachedShaders)(GLuint program, GLsizei maxCount, GLsizei *count, GLuint *shaders);
GLint (*real_glGetAttribLocation)(GLuint program, const GLchar *name);
void (*real_glGetBooleanv)(GLenum pname, GLboolean *data);
void (*real_glGetBufferParameteriv)(GLenum target, GLenum pname, GLint *params);
GLenum (*real_glGetError)(void);
void (*real_glGetFloatv)(GLenum pname, GLfloat *data);
void (*real_glGetFramebufferAttachmentParameteriv)(GLenum target, GLenum attachment, GLenum pname, GLint *params);
void (*real_glGetIntegerv)(GLenum pname, GLint *data);
void (*real_glGetProgramiv)(GLuint program, GLenum pname, GLint *params);
void (*real_glGetProgramInfoLog)(GLuint program, GLsizei bufSize, GLsizei *length, GLchar *infoLog);
void (*real_glGetRenderbufferParameteriv)(GLenum target, GLenum pname, GLint *params);
void (*real_glGetShaderiv)(GLuint shader, GLenum pname, GLint *params);
void (*real_glGetShaderInfoLog)(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *infoLog);
void (*real_glGetShaderPrecisionFormat)(GLenum shadertype, GLenum precisiontype, GLint *range, GLint *precision);
void (*real_glGetShaderSource)(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *source);
const GLubyte * (*real_glGetString)(GLenum name);
void (*real_glGetTexParameterfv)(GLenum target, GLenum pname, GLfloat *params);
void (*real_glGetTexParameteriv)(GLenum target, GLenum pname, GLint *params);
void (*real_glGetUniformfv)(GLuint program, GLint location, GLfloat *params);
void (*real_glGetUniformiv)(GLuint program, GLint location, GLint *params);
GLint (*real_glGetUniformLocation)(GLuint program, const GLchar *name);
void (*real_glGetVertexAttribfv)(GLuint index, GLenum pname, GLfloat *params);
void (*real_glGetVertexAttribiv)(GLuint index, GLenum pname, GLint *params);
void (*real_glGetVertexAttribPointerv)(GLuint index, GLenum pname, void **pointer);
void (*real_glHint)(GLenum target, GLenum mode);
GLboolean (*real_glIsBuffer)(GLuint buffer);
GLboolean (*real_glIsEnabled)(GLenum cap);
GLboolean (*real_glIsFramebuffer)(GLuint framebuffer);
GLboolean (*real_glIsProgram)(GLuint program);
GLboolean (*real_glIsRenderbuffer)(GLuint renderbuffer);
GLboolean (*real_glIsShader)(GLuint shader);
GLboolean (*real_glIsTexture)(GLuint texture);
void (*real_glLineWidth)(GLfloat width);
void (*real_glLinkProgram)(GLuint program);
void (*real_glPixelStorei)(GLenum pname, GLint param);
void (*real_glPolygonOffset)(GLfloat factor, GLfloat units);
void (*real_glReadPixels)(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, void *pixels);
void (*real_glReleaseShaderCompiler)(void);
void (*real_glRenderbufferStorage)(GLenum target, GLenum internalformat, GLsizei width, GLsizei height);
void (*real_glSampleCoverage)(GLfloat value, GLboolean invert);
void (*real_glScissor)(GLint x, GLint y, GLsizei width, GLsizei height);
void (*real_glShaderBinary)(GLsizei count, const GLuint *shaders, GLenum binaryformat, const void *binary, GLsizei length);
void (*real_glShaderSource)(GLuint shader, GLsizei count, const GLchar *const*string, const GLint *length);
void (*real_glStencilFunc)(GLenum func, GLint ref, GLuint mask);
void (*real_glStencilFuncSeparate)(GLenum face, GLenum func, GLint ref, GLuint mask);
void (*real_glStencilMask)(GLuint mask);
void (*real_glStencilMaskSeparate)(GLenum face, GLuint mask);
void (*real_glStencilOp)(GLenum fail, GLenum zfail, GLenum zpass);
void (*real_glStencilOpSeparate)(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass);
void (*real_glTexImage2D)(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void *pixels);
void (*real_glTexParameterf)(GLenum target, GLenum pname, GLfloat param);
void (*real_glTexParameterfv)(GLenum target, GLenum pname, const GLfloat *params);
void (*real_glTexParameteri)(GLenum target, GLenum pname, GLint param);
void (*real_glTexParameteriv)(GLenum target, GLenum pname, const GLint *params);
void (*real_glTexSubImage2D)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels);
void (*real_glUniform1f)(GLint location, GLfloat v0);
void (*real_glUniform1fv)(GLint location, GLsizei count, const GLfloat *value);
void (*real_glUniform1i)(GLint location, GLint v0);
void (*real_glUniform1iv)(GLint location, GLsizei count, const GLint *value);
void (*real_glUniform2f)(GLint location, GLfloat v0, GLfloat v1);
void (*real_glUniform2fv)(GLint location, GLsizei count, const GLfloat *value);
void (*real_glUniform2i)(GLint location, GLint v0, GLint v1);
void (*real_glUniform2iv)(GLint location, GLsizei count, const GLint *value);
void (*real_glUniform3f)(GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
void (*real_glUniform3fv)(GLint location, GLsizei count, const GLfloat *value);
void (*real_glUniform3i)(GLint location, GLint v0, GLint v1, GLint v2);
void (*real_glUniform3iv)(GLint location, GLsizei count, const GLint *value);
void (*real_glUniform4f)(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
void (*real_glUniform4fv)(GLint location, GLsizei count, const GLfloat *value);
void (*real_glUniform4i)(GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
void (*real_glUniform4iv)(GLint location, GLsizei count, const GLint *value);
void (*real_glUniformMatrix2fv)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
void (*real_glUniformMatrix3fv)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
void (*real_glUniformMatrix4fv)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
void (*real_glUseProgram)(GLuint program);
void (*real_glValidateProgram)(GLuint program);
void (*real_glVertexAttrib1f)(GLuint index, GLfloat x);
void (*real_glVertexAttrib1fv)(GLuint index, const GLfloat *v);
void (*real_glVertexAttrib2f)(GLuint index, GLfloat x, GLfloat y);
void (*real_glVertexAttrib2fv)(GLuint index, const GLfloat *v);
void (*real_glVertexAttrib3f)(GLuint index, GLfloat x, GLfloat y, GLfloat z);
void (*real_glVertexAttrib3fv)(GLuint index, const GLfloat *v);
void (*real_glVertexAttrib4f)(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
void (*real_glVertexAttrib4fv)(GLuint index, const GLfloat *v);
void (*real_glVertexAttribPointer)(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void *pointer);
void (*real_glViewport)(GLint x, GLint y, GLsizei width, GLsizei height);
#endif /* GL_ES_VERSION_2_0*/

#if GL_ES_VERSION_3_0
void (*real_glReadBuffer)(GLenum src);
void (*real_glDrawRangeElements)(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices);
void (*real_glTexImage3D)(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels);
void (*real_glTexSubImage3D)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels);
void (*real_glCopyTexSubImage3D)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
void (*real_glCompressedTexImage3D)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *data);
void (*real_glCompressedTexSubImage3D)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data);
void (*real_glGenQueries)(GLsizei n, GLuint *ids);
void (*real_glDeleteQueries)(GLsizei n, const GLuint *ids);
GLboolean (*real_glIsQuery)(GLuint id);
void (*real_glBeginQuery)(GLenum target, GLuint id);
void (*real_glEndQuery)(GLenum target);
void (*real_glGetQueryiv)(GLenum target, GLenum pname, GLint *params);
void (*real_glGetQueryObjectuiv)(GLuint id, GLenum pname, GLuint *params);
GLboolean (*real_glUnmapBuffer)(GLenum target);
void (*real_glGetBufferPointerv)(GLenum target, GLenum pname, void **params);
void (*real_glDrawBuffers)(GLsizei n, const GLenum *bufs);
void (*real_glUniformMatrix2x3fv)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
void (*real_glUniformMatrix3x2fv)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
void (*real_glUniformMatrix2x4fv)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
void (*real_glUniformMatrix4x2fv)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
void (*real_glUniformMatrix3x4fv)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
void (*real_glUniformMatrix4x3fv)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
void (*real_glBlitFramebuffer)(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
void (*real_glRenderbufferStorageMultisample)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
void (*real_glFramebufferTextureLayer)(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer);
void * (*real_glMapBufferRange)(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access);
void (*real_glFlushMappedBufferRange)(GLenum target, GLintptr offset, GLsizeiptr length);
void (*real_glBindVertexArray)(GLuint array);
void (*real_glDeleteVertexArrays)(GLsizei n, const GLuint *arrays);
void (*real_glGenVertexArrays)(GLsizei n, GLuint *arrays);
GLboolean (*real_glIsVertexArray)(GLuint array);
void (*real_glGetIntegeri_v)(GLenum target, GLuint index, GLint *data);
void (*real_glBeginTransformFeedback)(GLenum primitiveMode);
void (*real_glEndTransformFeedback)(void);
void (*real_glBindBufferRange)(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
void (*real_glBindBufferBase)(GLenum target, GLuint index, GLuint buffer);
void (*real_glTransformFeedbackVaryings)(GLuint program, GLsizei count, const GLchar *const*varyings, GLenum bufferMode);
void (*real_glGetTransformFeedbackVarying)(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name);
void (*real_glVertexAttribIPointer)(GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer);
void (*real_glGetVertexAttribIiv)(GLuint index, GLenum pname, GLint *params);
void (*real_glGetVertexAttribIuiv)(GLuint index, GLenum pname, GLuint *params);
void (*real_glVertexAttribI4i)(GLuint index, GLint x, GLint y, GLint z, GLint w);
void (*real_glVertexAttribI4ui)(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
void (*real_glVertexAttribI4iv)(GLuint index, const GLint *v);
void (*real_glVertexAttribI4uiv)(GLuint index, const GLuint *v);
void (*real_glGetUniformuiv)(GLuint program, GLint location, GLuint *params);
GLint (*real_glGetFragDataLocation)(GLuint program, const GLchar *name);
void (*real_glUniform1ui)(GLint location, GLuint v0);
void (*real_glUniform2ui)(GLint location, GLuint v0, GLuint v1);
void (*real_glUniform3ui)(GLint location, GLuint v0, GLuint v1, GLuint v2);
void (*real_glUniform4ui)(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
void (*real_glUniform1uiv)(GLint location, GLsizei count, const GLuint *value);
void (*real_glUniform2uiv)(GLint location, GLsizei count, const GLuint *value);
void (*real_glUniform3uiv)(GLint location, GLsizei count, const GLuint *value);
void (*real_glUniform4uiv)(GLint location, GLsizei count, const GLuint *value);
void (*real_glClearBufferiv)(GLenum buffer, GLint drawbuffer, const GLint *value);
void (*real_glClearBufferuiv)(GLenum buffer, GLint drawbuffer, const GLuint *value);
void (*real_glClearBufferfv)(GLenum buffer, GLint drawbuffer, const GLfloat *value);
void (*real_glClearBufferfi)(GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil);
const GLubyte * (*real_glGetStringi)(GLenum name, GLuint index);
void (*real_glCopyBufferSubData)(GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
void (*real_glGetUniformIndices)(GLuint program, GLsizei uniformCount, const GLchar *const*uniformNames, GLuint *uniformIndices);
void (*real_glGetActiveUniformsiv)(GLuint program, GLsizei uniformCount, const GLuint *uniformIndices, GLenum pname, GLint *params);
GLuint (*real_glGetUniformBlockIndex)(GLuint program, const GLchar *uniformBlockName);
void (*real_glGetActiveUniformBlockiv)(GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint *params);
void (*real_glGetActiveUniformBlockName)(GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformBlockName);
void (*real_glUniformBlockBinding)(GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding);
void (*real_glDrawArraysInstanced)(GLenum mode, GLint first, GLsizei count, GLsizei instancecount);
void (*real_glDrawElementsInstanced)(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount);
GLsync (*real_glFenceSync)(GLenum condition, GLbitfield flags);
GLboolean (*real_glIsSync)(GLsync sync);
void (*real_glDeleteSync)(GLsync sync);
GLenum (*real_glClientWaitSync)(GLsync sync, GLbitfield flags, GLuint64 timeout);
void (*real_glWaitSync)(GLsync sync, GLbitfield flags, GLuint64 timeout);
void (*real_glGetInteger64v)(GLenum pname, GLint64 *data);
void (*real_glGetSynciv)(GLsync sync, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values);
void (*real_glGetInteger64i_v)(GLenum target, GLuint index, GLint64 *data);
void (*real_glGetBufferParameteri64v)(GLenum target, GLenum pname, GLint64 *params);
void (*real_glGenSamplers)(GLsizei count, GLuint *samplers);
void (*real_glDeleteSamplers)(GLsizei count, const GLuint *samplers);
GLboolean (*real_glIsSampler)(GLuint sampler);
void (*real_glBindSampler)(GLuint unit, GLuint sampler);
void (*real_glSamplerParameteri)(GLuint sampler, GLenum pname, GLint param);
void (*real_glSamplerParameteriv)(GLuint sampler, GLenum pname, const GLint *param);
void (*real_glSamplerParameterf)(GLuint sampler, GLenum pname, GLfloat param);
void (*real_glSamplerParameterfv)(GLuint sampler, GLenum pname, const GLfloat *param);
void (*real_glGetSamplerParameteriv)(GLuint sampler, GLenum pname, GLint *params);
void (*real_glGetSamplerParameterfv)(GLuint sampler, GLenum pname, GLfloat *params);
void (*real_glVertexAttribDivisor)(GLuint index, GLuint divisor);
void (*real_glBindTransformFeedback)(GLenum target, GLuint id);
void (*real_glDeleteTransformFeedbacks)(GLsizei n, const GLuint *ids);
void (*real_glGenTransformFeedbacks)(GLsizei n, GLuint *ids);
GLboolean (*real_glIsTransformFeedback)(GLuint id);
void (*real_glPauseTransformFeedback)(void);
void (*real_glResumeTransformFeedback)(void);
void (*real_glGetProgramBinary)(GLuint program, GLsizei bufSize, GLsizei *length, GLenum *binaryFormat, void *binary);
void (*real_glProgramBinary)(GLuint program, GLenum binaryFormat, const void *binary, GLsizei length);
void (*real_glProgramParameteri)(GLuint program, GLenum pname, GLint value);
void (*real_glInvalidateFramebuffer)(GLenum target, GLsizei numAttachments, const GLenum *attachments);
void (*real_glInvalidateSubFramebuffer)(GLenum target, GLsizei numAttachments, const GLenum *attachments, GLint x, GLint y, GLsizei width, GLsizei height);
void (*real_glTexStorage2D)(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height);
void (*real_glTexStorage3D)(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth);
void (*real_glGetInternalformativ)(GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint *params);
#endif /* GL_ES_VERSION_3_0*/

#if GL_ES_VERSION_3_1
void (*real_glDispatchCompute)(GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z);
void (*real_glDispatchComputeIndirect)(GLintptr indirect);
void (*real_glDrawArraysIndirect)(GLenum mode, const void *indirect);
void (*real_glDrawElementsIndirect)(GLenum mode, GLenum type, const void *indirect);
void (*real_glFramebufferParameteri)(GLenum target, GLenum pname, GLint param);
void (*real_glGetFramebufferParameteriv)(GLenum target, GLenum pname, GLint *params);
void (*real_glGetProgramInterfaceiv)(GLuint program, GLenum programInterface, GLenum pname, GLint *params);
GLuint (*real_glGetProgramResourceIndex)(GLuint program, GLenum programInterface, const GLchar *name);
void (*real_glGetProgramResourceName)(GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name);
void (*real_glGetProgramResourceiv)(GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum *props, GLsizei bufSize, GLsizei *length, GLint *params);
GLint (*real_glGetProgramResourceLocation)(GLuint program, GLenum programInterface, const GLchar *name);
void (*real_glUseProgramStages)(GLuint pipeline, GLbitfield stages, GLuint program);
void (*real_glActiveShaderProgram)(GLuint pipeline, GLuint program);
GLuint (*real_glCreateShaderProgramv)(GLenum type, GLsizei count, const GLchar *const*strings);
void (*real_glBindProgramPipeline)(GLuint pipeline);
void (*real_glDeleteProgramPipelines)(GLsizei n, const GLuint *pipelines);
void (*real_glGenProgramPipelines)(GLsizei n, GLuint *pipelines);
GLboolean (*real_glIsProgramPipeline)(GLuint pipeline);
void (*real_glGetProgramPipelineiv)(GLuint pipeline, GLenum pname, GLint *params);
void (*real_glProgramUniform1i)(GLuint program, GLint location, GLint v0);
void (*real_glProgramUniform2i)(GLuint program, GLint location, GLint v0, GLint v1);
void (*real_glProgramUniform3i)(GLuint program, GLint location, GLint v0, GLint v1, GLint v2);
void (*real_glProgramUniform4i)(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
void (*real_glProgramUniform1ui)(GLuint program, GLint location, GLuint v0);
void (*real_glProgramUniform2ui)(GLuint program, GLint location, GLuint v0, GLuint v1);
void (*real_glProgramUniform3ui)(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2);
void (*real_glProgramUniform4ui)(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
void (*real_glProgramUniform1f)(GLuint program, GLint location, GLfloat v0);
void (*real_glProgramUniform2f)(GLuint program, GLint location, GLfloat v0, GLfloat v1);
void (*real_glProgramUniform3f)(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
void (*real_glProgramUniform4f)(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
void (*real_glProgramUniform1iv)(GLuint program, GLint location, GLsizei count, const GLint *value);
void (*real_glProgramUniform2iv)(GLuint program, GLint location, GLsizei count, const GLint *value);
void (*real_glProgramUniform3iv)(GLuint program, GLint location, GLsizei count, const GLint *value);
void (*real_glProgramUniform4iv)(GLuint program, GLint location, GLsizei count, const GLint *value);
void (*real_glProgramUniform1uiv)(GLuint program, GLint location, GLsizei count, const GLuint *value);
void (*real_glProgramUniform2uiv)(GLuint program, GLint location, GLsizei count, const GLuint *value);
void (*real_glProgramUniform3uiv)(GLuint program, GLint location, GLsizei count, const GLuint *value);
void (*real_glProgramUniform4uiv)(GLuint program, GLint location, GLsizei count, const GLuint *value);
void (*real_glProgramUniform1fv)(GLuint program, GLint location, GLsizei count, const GLfloat *value);
void (*real_glProgramUniform2fv)(GLuint program, GLint location, GLsizei count, const GLfloat *value);
void (*real_glProgramUniform3fv)(GLuint program, GLint location, GLsizei count, const GLfloat *value);
void (*real_glProgramUniform4fv)(GLuint program, GLint location, GLsizei count, const GLfloat *value);
void (*real_glProgramUniformMatrix2fv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
void (*real_glProgramUniformMatrix3fv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
void (*real_glProgramUniformMatrix4fv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
void (*real_glProgramUniformMatrix2x3fv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
void (*real_glProgramUniformMatrix3x2fv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
void (*real_glProgramUniformMatrix2x4fv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
void (*real_glProgramUniformMatrix4x2fv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
void (*real_glProgramUniformMatrix3x4fv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
void (*real_glProgramUniformMatrix4x3fv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
void (*real_glValidateProgramPipeline)(GLuint pipeline);
void (*real_glGetProgramPipelineInfoLog)(GLuint pipeline, GLsizei bufSize, GLsizei *length, GLchar *infoLog);
void (*real_glBindImageTexture)(GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format);
void (*real_glGetBooleani_v)(GLenum target, GLuint index, GLboolean *data);
void (*real_glMemoryBarrier)(GLbitfield barriers);
void (*real_glMemoryBarrierByRegion)(GLbitfield barriers);
void (*real_glTexStorage2DMultisample)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
void (*real_glGetMultisamplefv)(GLenum pname, GLuint index, GLfloat *val);
void (*real_glSampleMaski)(GLuint maskNumber, GLbitfield mask);
void (*real_glGetTexLevelParameteriv)(GLenum target, GLint level, GLenum pname, GLint *params);
void (*real_glGetTexLevelParameterfv)(GLenum target, GLint level, GLenum pname, GLfloat *params);
void (*real_glBindVertexBuffer)(GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride);
void (*real_glVertexAttribFormat)(GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset);
void (*real_glVertexAttribIFormat)(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
void (*real_glVertexAttribBinding)(GLuint attribindex, GLuint bindingindex);
void (*real_glVertexBindingDivisor)(GLuint bindingindex, GLuint divisor);
#endif /* GL_ES_VERSION_3_1*/

#if GL_ES_VERSION_3_2
void (*real_glBlendBarrier)(void);
void (*real_glCopyImageSubData)(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth);
void (*real_glDebugMessageControl)(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled);
void (*real_glDebugMessageInsert)(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf);
void (*real_glDebugMessageCallback)(GLDEBUGPROC callback, const void *userParam);
GLuint (*real_glGetDebugMessageLog)(GLuint count, GLsizei bufSize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog);
void (*real_glPushDebugGroup)(GLenum source, GLuint id, GLsizei length, const GLchar *message);
void (*real_glPopDebugGroup)(void);
void (*real_glObjectLabel)(GLenum identifier, GLuint name, GLsizei length, const GLchar *label);
void (*real_glGetObjectLabel)(GLenum identifier, GLuint name, GLsizei bufSize, GLsizei *length, GLchar *label);
void (*real_glObjectPtrLabel)(const void *ptr, GLsizei length, const GLchar *label);
void (*real_glGetObjectPtrLabel)(const void *ptr, GLsizei bufSize, GLsizei *length, GLchar *label);
void (*real_glGetPointerv)(GLenum pname, void **params);
void (*real_glEnablei)(GLenum target, GLuint index);
void (*real_glDisablei)(GLenum target, GLuint index);
void (*real_glBlendEquationi)(GLuint buf, GLenum mode);
void (*real_glBlendEquationSeparatei)(GLuint buf, GLenum modeRGB, GLenum modeAlpha);
void (*real_glBlendFunci)(GLuint buf, GLenum src, GLenum dst);
void (*real_glBlendFuncSeparatei)(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);
void (*real_glColorMaski)(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a);
GLboolean (*real_glIsEnabledi)(GLenum target, GLuint index);
void (*real_glDrawElementsBaseVertex)(GLenum mode, GLsizei count, GLenum type, const void *indices, GLint basevertex);
void (*real_glDrawRangeElementsBaseVertex)(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices, GLint basevertex);
void (*real_glDrawElementsInstancedBaseVertex)(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex);
void (*real_glFramebufferTexture)(GLenum target, GLenum attachment, GLuint texture, GLint level);
void (*real_glPrimitiveBoundingBox)(GLfloat minX, GLfloat minY, GLfloat minZ, GLfloat minW, GLfloat maxX, GLfloat maxY, GLfloat maxZ, GLfloat maxW);
GLenum (*real_glGetGraphicsResetStatus)(void);
void (*real_glReadnPixels)(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void *data);
void (*real_glGetnUniformfv)(GLuint program, GLint location, GLsizei bufSize, GLfloat *params);
void (*real_glGetnUniformiv)(GLuint program, GLint location, GLsizei bufSize, GLint *params);
void (*real_glGetnUniformuiv)(GLuint program, GLint location, GLsizei bufSize, GLuint *params);
void (*real_glMinSampleShading)(GLfloat value);
void (*real_glPatchParameteri)(GLenum pname, GLint value);
void (*real_glTexParameterIiv)(GLenum target, GLenum pname, const GLint *params);
void (*real_glTexParameterIuiv)(GLenum target, GLenum pname, const GLuint *params);
void (*real_glGetTexParameterIiv)(GLenum target, GLenum pname, GLint *params);
void (*real_glGetTexParameterIuiv)(GLenum target, GLenum pname, GLuint *params);
void (*real_glSamplerParameterIiv)(GLuint sampler, GLenum pname, const GLint *param);
void (*real_glSamplerParameterIuiv)(GLuint sampler, GLenum pname, const GLuint *param);
void (*real_glGetSamplerParameterIiv)(GLuint sampler, GLenum pname, GLint *params);
void (*real_glGetSamplerParameterIuiv)(GLuint sampler, GLenum pname, GLuint *params);
void (*real_glTexBuffer)(GLenum target, GLenum internalformat, GLuint buffer);
void (*real_glTexBufferRange)(GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size);
void (*real_glTexStorage3DMultisample)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
#endif /* GL_ES_VERSION_3_2*/

#if GL_VERSION_ES_CM_1_0
void (*real_glAlphaFunc)(GLenum func, GLfloat ref);
void (*real_glClipPlanef)(GLenum p, const GLfloat *eqn);
void (*real_glColor4f)(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
void (*real_glFogf)(GLenum pname, GLfloat param);
void (*real_glFogfv)(GLenum pname, const GLfloat *params);
void (*real_glFrustumf)(GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f);
void (*real_glGetClipPlanef)(GLenum plane, GLfloat *equation);
void (*real_glGetLightfv)(GLenum light, GLenum pname, GLfloat *params);
void (*real_glGetMaterialfv)(GLenum face, GLenum pname, GLfloat *params);
void (*real_glGetTexEnvfv)(GLenum target, GLenum pname, GLfloat *params);
void (*real_glLightModelf)(GLenum pname, GLfloat param);
void (*real_glLightModelfv)(GLenum pname, const GLfloat *params);
void (*real_glLightf)(GLenum light, GLenum pname, GLfloat param);
void (*real_glLightfv)(GLenum light, GLenum pname, const GLfloat *params);
void (*real_glLoadMatrixf)(const GLfloat *m);
void (*real_glMaterialf)(GLenum face, GLenum pname, GLfloat param);
void (*real_glMaterialfv)(GLenum face, GLenum pname, const GLfloat *params);
void (*real_glMultMatrixf)(const GLfloat *m);
void (*real_glMultiTexCoord4f)(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q);
void (*real_glNormal3f)(GLfloat nx, GLfloat ny, GLfloat nz);
void (*real_glOrthof)(GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f);
void (*real_glPointParameterf)(GLenum pname, GLfloat param);
void (*real_glPointParameterfv)(GLenum pname, const GLfloat *params);
void (*real_glPointSize)(GLfloat size);
void (*real_glRotatef)(GLfloat angle, GLfloat x, GLfloat y, GLfloat z);
void (*real_glScalef)(GLfloat x, GLfloat y, GLfloat z);
void (*real_glTexEnvf)(GLenum target, GLenum pname, GLfloat param);
void (*real_glTexEnvfv)(GLenum target, GLenum pname, const GLfloat *params);
void (*real_glTranslatef)(GLfloat x, GLfloat y, GLfloat z);
void (*real_glAlphaFuncx)(GLenum func, GLfixed ref);
void (*real_glClearColorx)(GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha);
void (*real_glClearDepthx)(GLfixed depth);
void (*real_glClientActiveTexture)(GLenum texture);
void (*real_glClipPlanex)(GLenum plane, const GLfixed *equation);
void (*real_glColor4ub)(GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha);
void (*real_glColor4x)(GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha);
void (*real_glColorPointer)(GLint size, GLenum type, GLsizei stride, const void *pointer);
void (*real_glDepthRangex)(GLfixed n, GLfixed f);
void (*real_glDisableClientState)(GLenum array);
void (*real_glEnableClientState)(GLenum array);
void (*real_glFogx)(GLenum pname, GLfixed param);
void (*real_glFogxv)(GLenum pname, const GLfixed *param);
void (*real_glFrustumx)(GLfixed l, GLfixed r, GLfixed b, GLfixed t, GLfixed n, GLfixed f);
void (*real_glGetClipPlanex)(GLenum plane, GLfixed *equation);
void (*real_glGetFixedv)(GLenum pname, GLfixed *params);
void (*real_glGetLightxv)(GLenum light, GLenum pname, GLfixed *params);
void (*real_glGetMaterialxv)(GLenum face, GLenum pname, GLfixed *params);
void (*real_glGetTexEnviv)(GLenum target, GLenum pname, GLint *params);
void (*real_glGetTexEnvxv)(GLenum target, GLenum pname, GLfixed *params);
void (*real_glGetTexParameterxv)(GLenum target, GLenum pname, GLfixed *params);
void (*real_glLightModelx)(GLenum pname, GLfixed param);
void (*real_glLightModelxv)(GLenum pname, const GLfixed *param);
void (*real_glLightx)(GLenum light, GLenum pname, GLfixed param);
void (*real_glLightxv)(GLenum light, GLenum pname, const GLfixed *params);
void (*real_glLineWidthx)(GLfixed width);
void (*real_glLoadIdentity)(void);
void (*real_glLoadMatrixx)(const GLfixed *m);
void (*real_glLogicOp)(GLenum opcode);
void (*real_glMaterialx)(GLenum face, GLenum pname, GLfixed param);
void (*real_glMaterialxv)(GLenum face, GLenum pname, const GLfixed *param);
void (*real_glMatrixMode)(GLenum mode);
void (*real_glMultMatrixx)(const GLfixed *m);
void (*real_glMultiTexCoord4x)(GLenum texture, GLfixed s, GLfixed t, GLfixed r, GLfixed q);
void (*real_glNormal3x)(GLfixed nx, GLfixed ny, GLfixed nz);
void (*real_glNormalPointer)(GLenum type, GLsizei stride, const void *pointer);
void (*real_glOrthox)(GLfixed l, GLfixed r, GLfixed b, GLfixed t, GLfixed n, GLfixed f);
void (*real_glPointParameterx)(GLenum pname, GLfixed param);
void (*real_glPointParameterxv)(GLenum pname, const GLfixed *params);
void (*real_glPointSizex)(GLfixed size);
void (*real_glPolygonOffsetx)(GLfixed factor, GLfixed units);
void (*real_glPopMatrix)(void);
void (*real_glPushMatrix)(void);
void (*real_glRotatex)(GLfixed angle, GLfixed x, GLfixed y, GLfixed z);
void (*real_glSampleCoveragex)(GLclampx value, GLboolean invert);
void (*real_glScalex)(GLfixed x, GLfixed y, GLfixed z);
void (*real_glShadeModel)(GLenum mode);
void (*real_glTexCoordPointer)(GLint size, GLenum type, GLsizei stride, const void *pointer);
void (*real_glTexEnvi)(GLenum target, GLenum pname, GLint param);
void (*real_glTexEnvx)(GLenum target, GLenum pname, GLfixed param);
void (*real_glTexEnviv)(GLenum target, GLenum pname, const GLint *params);
void (*real_glTexEnvxv)(GLenum target, GLenum pname, const GLfixed *params);
void (*real_glTexParameterx)(GLenum target, GLenum pname, GLfixed param);
void (*real_glTexParameterxv)(GLenum target, GLenum pname, const GLfixed *params);
void (*real_glTranslatex)(GLfixed x, GLfixed y, GLfixed z);
void (*real_glVertexPointer)(GLint size, GLenum type, GLsizei stride, const void *pointer);
#endif /* GL_VERSION_ES_CM_1_0*/

#if EGL_KHR_cl_event2
EGLSyncKHR (*real_eglCreateSync64KHR)(EGLDisplay dpy, EGLenum type, const EGLAttribKHR *attrib_list);
#endif /* EGL_KHR_cl_event2*/

#if EGL_KHR_create_context
#endif /* EGL_KHR_create_context*/

#if EGL_KHR_create_context_no_error
#endif /* EGL_KHR_create_context_no_error*/

#if EGL_KHR_fence_sync
EGLSyncKHR (*real_eglCreateSyncKHR)(EGLDisplay dpy, EGLenum type, const EGLint *attrib_list);
EGLBoolean (*real_eglDestroySyncKHR)(EGLDisplay dpy, EGLSyncKHR sync);
EGLint (*real_eglClientWaitSyncKHR)(EGLDisplay dpy, EGLSyncKHR sync, EGLint flags, EGLTimeKHR timeout);
EGLBoolean (*real_eglGetSyncAttribKHR)(EGLDisplay dpy, EGLSyncKHR sync, EGLint attribute, EGLint *value);
#endif /* EGL_KHR_fence_sync*/

#if EGL_KHR_get_all_proc_addresses
#endif /* EGL_KHR_get_all_proc_addresses*/

#if EGL_KHR_gl_colorspace
#endif /* EGL_KHR_gl_colorspace*/

#if EGL_KHR_gl_renderbuffer_image
#endif /* EGL_KHR_gl_renderbuffer_image*/

#if EGL_KHR_gl_texture_2D_image
#endif /* EGL_KHR_gl_texture_2D_image*/

#if EGL_KHR_gl_texture_cubemap_image
#endif /* EGL_KHR_gl_texture_cubemap_image*/

#if EGL_KHR_image
EGLImageKHR (*real_eglCreateImageKHR)(EGLDisplay dpy, EGLContext ctx, EGLenum target, EGLClientBuffer buffer, const EGLint *attrib_list);
EGLBoolean (*real_eglDestroyImageKHR)(EGLDisplay dpy, EGLImageKHR image);
#endif /* EGL_KHR_image*/

#if EGL_KHR_image_base
#endif /* EGL_KHR_image_base*/

#if EGL_KHR_image_pixmap
#endif /* EGL_KHR_image_pixmap*/

#if EGL_KHR_platform_android
#endif /* EGL_KHR_platform_android*/

#if EGL_KHR_platform_x11
#endif /* EGL_KHR_platform_x11*/

#if EGL_KHR_surfaceless_context
#endif /* EGL_KHR_surfaceless_context*/

#if EGL_KHR_wait_sync
EGLint (*real_eglWaitSyncKHR)(EGLDisplay dpy, EGLSyncKHR sync, EGLint flags);
#endif /* EGL_KHR_wait_sync*/

#if GL_KHR_debug
void (*real_glDebugMessageControlKHR)(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled);
void (*real_glDebugMessageInsertKHR)(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf);
void (*real_glDebugMessageCallbackKHR)(GLDEBUGPROCKHR callback, const void *userParam);
GLuint (*real_glGetDebugMessageLogKHR)(GLuint count, GLsizei bufSize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog);
void (*real_glPushDebugGroupKHR)(GLenum source, GLuint id, GLsizei length, const GLchar *message);
void (*real_glPopDebugGroupKHR)(void);
void (*real_glObjectLabelKHR)(GLenum identifier, GLuint name, GLsizei length, const GLchar *label);
void (*real_glGetObjectLabelKHR)(GLenum identifier, GLuint name, GLsizei bufSize, GLsizei *length, GLchar *label);
void (*real_glObjectPtrLabelKHR)(const void *ptr, GLsizei length, const GLchar *label);
void (*real_glGetObjectPtrLabelKHR)(const void *ptr, GLsizei bufSize, GLsizei *length, GLchar *label);
void (*real_glGetPointervKHR)(GLenum pname, void **params);
#endif /* GL_KHR_debug*/

#if GL_KHR_texture_compression_astc_ldr
#endif /* GL_KHR_texture_compression_astc_ldr*/

#if GL_OES_EGL_image
void (*real_glEGLImageTargetTexture2DOES)(GLenum target, GLeglImageOES image);
void (*real_glEGLImageTargetRenderbufferStorageOES)(GLenum target, GLeglImageOES image);
#endif /* GL_OES_EGL_image*/

#if GL_OES_EGL_image_external
#endif /* GL_OES_EGL_image_external*/

#if GL_OES_EGL_image_external_essl3
#endif /* GL_OES_EGL_image_external_essl3*/

#if GL_OES_compressed_ETC1_RGB8_texture
#endif /* GL_OES_compressed_ETC1_RGB8_texture*/

#if GL_OES_compressed_paletted_texture
#endif /* GL_OES_compressed_paletted_texture*/

#if GL_OES_depth24
#endif /* GL_OES_depth24*/

#if GL_OES_depth32
#endif /* GL_OES_depth32*/

#if GL_OES_draw_texture
void (*real_glDrawTexsOES)(GLshort x, GLshort y, GLshort z, GLshort width, GLshort height);
void (*real_glDrawTexiOES)(GLint x, GLint y, GLint z, GLint width, GLint height);
void (*real_glDrawTexxOES)(GLfixed x, GLfixed y, GLfixed z, GLfixed width, GLfixed height);
void (*real_glDrawTexsvOES)(const GLshort *coords);
void (*real_glDrawTexivOES)(const GLint *coords);
void (*real_glDrawTexxvOES)(const GLfixed *coords);
void (*real_glDrawTexfOES)(GLfloat x, GLfloat y, GLfloat z, GLfloat width, GLfloat height);
void (*real_glDrawTexfvOES)(const GLfloat *coords);
#endif /* GL_OES_draw_texture*/

#if GL_OES_framebuffer_object
GLboolean (*real_glIsRenderbufferOES)(GLuint renderbuffer);
void (*real_glBindRenderbufferOES)(GLenum target, GLuint renderbuffer);
void (*real_glDeleteRenderbuffersOES)(GLsizei n, const GLuint *renderbuffers);
void (*real_glGenRenderbuffersOES)(GLsizei n, GLuint *renderbuffers);
void (*real_glRenderbufferStorageOES)(GLenum target, GLenum internalformat, GLsizei width, GLsizei height);
void (*real_glGetRenderbufferParameterivOES)(GLenum target, GLenum pname, GLint *params);
GLboolean (*real_glIsFramebufferOES)(GLuint framebuffer);
void (*real_glBindFramebufferOES)(GLenum target, GLuint framebuffer);
void (*real_glDeleteFramebuffersOES)(GLsizei n, const GLuint *framebuffers);
void (*real_glGenFramebuffersOES)(GLsizei n, GLuint *framebuffers);
GLenum (*real_glCheckFramebufferStatusOES)(GLenum target);
void (*real_glFramebufferRenderbufferOES)(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
void (*real_glFramebufferTexture2DOES)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
void (*real_glGetFramebufferAttachmentParameterivOES)(GLenum target, GLenum attachment, GLenum pname, GLint *params);
void (*real_glGenerateMipmapOES)(GLenum target);
#endif /* GL_OES_framebuffer_object*/

#if GL_OES_mapbuffer
void * (*real_glMapBufferOES)(GLenum target, GLenum access);
GLboolean (*real_glUnmapBufferOES)(GLenum target);
void (*real_glGetBufferPointervOES)(GLenum target, GLenum pname, void **params);
#endif /* GL_OES_mapbuffer*/

#if GL_OES_matrix_palette
void (*real_glCurrentPaletteMatrixOES)(GLuint matrixpaletteindex);
void (*real_glLoadPaletteFromModelViewMatrixOES)(void);
void (*real_glMatrixIndexPointerOES)(GLint size, GLenum type, GLsizei stride, const void *pointer);
void (*real_glWeightPointerOES)(GLint size, GLenum type, GLsizei stride, const void *pointer);
#endif /* GL_OES_matrix_palette*/

#if GL_OES_packed_depth_stencil
#endif /* GL_OES_packed_depth_stencil*/

#if GL_OES_point_size_array
void (*real_glPointSizePointerOES)(GLenum type, GLsizei stride, const void *pointer);
#endif /* GL_OES_point_size_array*/

#if GL_OES_query_matrix
GLbitfield (*real_glQueryMatrixxOES)(GLfixed *mantissa, GLint *exponent);
#endif /* GL_OES_query_matrix*/

#if GL_OES_rgb8_rgba8
#endif /* GL_OES_rgb8_rgba8*/

#if GL_OES_standard_derivatives
#endif /* GL_OES_standard_derivatives*/

#if GL_OES_stencil8
#endif /* GL_OES_stencil8*/

#if GL_OES_surfaceless_context
#endif /* GL_OES_surfaceless_context*/

#if GL_OES_texture_npot
#endif /* GL_OES_texture_npot*/

#if GL_OES_texture_stencil8
#endif /* GL_OES_texture_stencil8*/

#if GL_OES_vertex_array_object
void (*real_glBindVertexArrayOES)(GLuint array);
void (*real_glDeleteVertexArraysOES)(GLsizei n, const GLuint *arrays);
void (*real_glGenVertexArraysOES)(GLsizei n, GLuint *arrays);
GLboolean (*real_glIsVertexArrayOES)(GLuint array);
#endif /* GL_OES_vertex_array_object*/

#if GL_OES_vertex_half_float
#endif /* GL_OES_vertex_half_float*/

#if EGL_ANDROID_framebuffer_target
#endif /* EGL_ANDROID_framebuffer_target*/

#if EGL_ANDROID_image_native_buffer
#endif /* EGL_ANDROID_image_native_buffer*/

#if EGL_ANDROID_native_fence_sync
EGLint (*real_eglDupNativeFenceFDANDROID)(EGLDisplay dpy, EGLSyncKHR sync);
#endif /* EGL_ANDROID_native_fence_sync*/

#if EGL_ANDROID_recordable
#endif /* EGL_ANDROID_recordable*/

#if EGL_BRCM_event_monitor
EGLint (*real_eglGetEventConstantBRCM)(EGLenum pname);
EGLBoolean (*real_eglGetEventTrackInfoBRCM)(EGLint event, EGLint nameStrSize, char *trackNameStr);
EGLBoolean (*real_eglGetEventInfoBRCM)(EGLint event, EGLint nameStrSize, char *nameStr, EGLint *numDataFields);
EGLBoolean (*real_eglGetEventDataFieldInfoBRCM)(EGLint event, EGLint field, EGLint nameStrSize, char *nameStr, EGLBoolean *isSigned, EGLint *numBytes);
EGLBoolean (*real_eglSetEventCollectionBRCM)(EGLenum pname);
EGLBoolean (*real_eglGetEventDataBRCM)(EGLint dataBufferBytes, void *data, EGLint *bytesWritten, EGLBoolean *overflowed, EGLuint64BRCM *timebase);
#endif /* EGL_BRCM_event_monitor*/

#if EGL_BRCM_gl_framebuffer_image
#endif /* EGL_BRCM_gl_framebuffer_image*/

#if EGL_BRCM_image_update_control
EGLBoolean (*real_eglImageUpdateParameterivBRCM)(EGLDisplay dpy, EGLImageKHR image, EGLenum pname, const EGLint *params);
EGLBoolean (*real_eglImageUpdateParameteriBRCM)(EGLDisplay dpy, EGLImageKHR image, EGLenum pname, EGLint param);
#endif /* EGL_BRCM_image_update_control*/

#if EGL_BRCM_performance_counters
EGLint (*real_eglGetPerfCounterConstantBRCM)(EGLenum pname);
EGLBoolean (*real_eglGetPerfCounterGroupInfoBRCM)(EGLint group, EGLint nameStrSize, GLchar *groupNameStr, EGLint *numCounters, EGLint *maxActiveCounters);
EGLBoolean (*real_eglGetPerfCounterInfoBRCM)(EGLint group, EGLint counter, EGLuint64BRCM *minValue, EGLuint64BRCM *maxValue, EGLuint64BRCM *denominator, EGLint nameStrSize, char *nameStr, EGLint unitStrSize, char *unitStr);
EGLBoolean (*real_eglSetPerfCountingBRCM)(EGLenum pname);
EGLBoolean (*real_eglChoosePerfCountersBRCM)(EGLBoolean enable, EGLint group, EGLint numCounters, EGLint *counterList);
EGLBoolean (*real_eglGetPerfCounterDataBRCM)(EGLint dataBufferBytes, void *data, EGLint *bytesWritten, EGLBoolean resetCounters);
#endif /* EGL_BRCM_performance_counters*/

#if EGL_BRCM_platform_nexus
#endif /* EGL_BRCM_platform_nexus*/

#if EGL_EXT_client_extensions
#endif /* EGL_EXT_client_extensions*/

#if EGL_EXT_create_context_robustness
#endif /* EGL_EXT_create_context_robustness*/

#if EGL_EXT_platform_base
EGLDisplay (*real_eglGetPlatformDisplayEXT)(EGLenum platform, void *native_display, const EGLint *attrib_list);
EGLSurface (*real_eglCreatePlatformWindowSurfaceEXT)(EGLDisplay dpy, EGLConfig config, void *native_window, const EGLint *attrib_list);
EGLSurface (*real_eglCreatePlatformPixmapSurfaceEXT)(EGLDisplay dpy, EGLConfig config, void *native_pixmap, const EGLint *attrib_list);
#endif /* EGL_EXT_platform_base*/

#if EGL_EXT_platform_x11
#endif /* EGL_EXT_platform_x11*/

#if GL_BRCM_base_instance
void (*real_glDrawArraysInstancedBaseInstanceBRCM)(GLenum mode, GLint first, GLsizei count, GLsizei instancecount, GLuint baseinstance);
void (*real_glDrawElementsInstancedBaseInstanceBRCM)(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLuint baseinstance);
void (*real_glDrawElementsInstancedBaseVertexBaseInstanceBRCM)(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex, GLuint baseinstance);
#endif /* GL_BRCM_base_instance*/

#if GL_BRCM_mirror_once_border
#endif /* GL_BRCM_mirror_once_border*/

#if GL_BRCM_multi_draw_indirect
void (*real_glMultiDrawArraysIndirectBRCM)(GLenum mode, const void *indirect, GLsizei drawcount, GLsizei stride);
void (*real_glMultiDrawElementsIndirectBRCM)(GLenum mode, GLenum type, const void *indirect, GLsizei drawcount, GLsizei stride);
#endif /* GL_BRCM_multi_draw_indirect*/

#if GL_BRCM_polygon_mode
void (*real_glPolygonModeBRCM)(GLenum mode);
#endif /* GL_BRCM_polygon_mode*/

#if GL_BRCM_provoking_vertex
void (*real_glProvokingVertexBRCM)(GLenum mode);
#endif /* GL_BRCM_provoking_vertex*/

#if GL_BRCM_texture_1D
void (*real_glTexImage1DBRCM)(GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
#endif /* GL_BRCM_texture_1D*/

#if GL_BRCM_texture_mirror_swap
#endif /* GL_BRCM_texture_mirror_swap*/

#if GL_BRCM_texture_norm16
#endif /* GL_BRCM_texture_norm16*/

#if GL_EXT_color_buffer_float
#endif /* GL_EXT_color_buffer_float*/

#if GL_EXT_debug_marker
void (*real_glInsertEventMarkerEXT)(GLsizei length, const GLchar *marker);
void (*real_glPushGroupMarkerEXT)(GLsizei length, const GLchar *marker);
void (*real_glPopGroupMarkerEXT)(void);
#endif /* GL_EXT_debug_marker*/

#if GL_EXT_discard_framebuffer
void (*real_glDiscardFramebufferEXT)(GLenum target, GLsizei numAttachments, const GLenum *attachments);
#endif /* GL_EXT_discard_framebuffer*/

#if GL_EXT_draw_elements_base_vertex
void (*real_glDrawElementsBaseVertexEXT)(GLenum mode, GLsizei count, GLenum type, const void *indices, GLint basevertex);
void (*real_glDrawRangeElementsBaseVertexEXT)(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices, GLint basevertex);
void (*real_glDrawElementsInstancedBaseVertexEXT)(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex);
void (*real_glMultiDrawElementsBaseVertexEXT)(GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei primcount, const GLint *basevertex);
#endif /* GL_EXT_draw_elements_base_vertex*/

#if GL_EXT_multisampled_render_to_texture
void (*real_glRenderbufferStorageMultisampleEXT)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
void (*real_glFramebufferTexture2DMultisampleEXT)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLsizei samples);
#endif /* GL_EXT_multisampled_render_to_texture*/

#if GL_EXT_robustness
GLenum (*real_glGetGraphicsResetStatusEXT)(void);
void (*real_glReadnPixelsEXT)(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void *data);
void (*real_glGetnUniformfvEXT)(GLuint program, GLint location, GLsizei bufSize, GLfloat *params);
void (*real_glGetnUniformivEXT)(GLuint program, GLint location, GLsizei bufSize, GLint *params);
#endif /* GL_EXT_robustness*/

#if GL_EXT_shader_texture_lod
#endif /* GL_EXT_shader_texture_lod*/

#if GL_EXT_texture_filter_anisotropic
#endif /* GL_EXT_texture_filter_anisotropic*/

#if GL_EXT_texture_format_BGRA8888
#endif /* GL_EXT_texture_format_BGRA8888*/

#if GL_EXT_texture_sRGB_R8
#endif /* GL_EXT_texture_sRGB_R8*/

#if GL_EXT_texture_sRGB_RG8
#endif /* GL_EXT_texture_sRGB_RG8*/
