/*=============================================================================
Broadcom Proprietary and Confidential. (c)2016 Broadcom.
All rights reserved.
=============================================================================*/
/* Auto-generated by running gen_hook_tables.py
 * DO NOT EDIT!
 */

#if EGL_VERSION_1_0
HOOK(eglChooseConfig);
HOOK(eglCopyBuffers);
HOOK(eglCreateContext);
HOOK(eglCreatePbufferSurface);
HOOK(eglCreatePixmapSurface);
HOOK(eglCreateWindowSurface);
HOOK(eglDestroyContext);
HOOK(eglDestroySurface);
HOOK(eglGetConfigAttrib);
HOOK(eglGetConfigs);
HOOK(eglGetCurrentDisplay);
HOOK(eglGetCurrentSurface);
HOOK(eglGetDisplay);
HOOK(eglGetError);
HOOK(eglGetProcAddress);
HOOK(eglInitialize);
HOOK(eglMakeCurrent);
HOOK(eglQueryContext);
HOOK(eglQueryString);
HOOK(eglQuerySurface);
HOOK(eglSwapBuffers);
HOOK(eglTerminate);
HOOK(eglWaitGL);
HOOK(eglWaitNative);
#endif /* EGL_VERSION_1_0*/

#if EGL_VERSION_1_1
HOOK(eglBindTexImage);
HOOK(eglReleaseTexImage);
HOOK(eglSurfaceAttrib);
HOOK(eglSwapInterval);
#endif /* EGL_VERSION_1_1*/

#if EGL_VERSION_1_2
HOOK(eglBindAPI);
HOOK(eglQueryAPI);
HOOK(eglCreatePbufferFromClientBuffer);
HOOK(eglReleaseThread);
HOOK(eglWaitClient);
#endif /* EGL_VERSION_1_2*/

#if EGL_VERSION_1_3
#endif /* EGL_VERSION_1_3*/

#if EGL_VERSION_1_4
HOOK(eglGetCurrentContext);
#endif /* EGL_VERSION_1_4*/

#if EGL_VERSION_1_5
HOOK(eglCreateSync);
HOOK(eglDestroySync);
HOOK(eglClientWaitSync);
HOOK(eglGetSyncAttrib);
HOOK(eglCreateImage);
HOOK(eglDestroyImage);
HOOK(eglGetPlatformDisplay);
HOOK(eglCreatePlatformWindowSurface);
HOOK(eglCreatePlatformPixmapSurface);
HOOK(eglWaitSync);
#endif /* EGL_VERSION_1_5*/

#if GL_ES_VERSION_2_0
HOOK(glActiveTexture);
HOOK(glAttachShader);
HOOK(glBindAttribLocation);
HOOK(glBindBuffer);
HOOK(glBindFramebuffer);
HOOK(glBindRenderbuffer);
HOOK(glBindTexture);
HOOK(glBlendColor);
HOOK(glBlendEquation);
HOOK(glBlendEquationSeparate);
HOOK(glBlendFunc);
HOOK(glBlendFuncSeparate);
HOOK(glBufferData);
HOOK(glBufferSubData);
HOOK(glCheckFramebufferStatus);
HOOK(glClear);
HOOK(glClearColor);
HOOK(glClearDepthf);
HOOK(glClearStencil);
HOOK(glColorMask);
HOOK(glCompileShader);
HOOK(glCompressedTexImage2D);
HOOK(glCompressedTexSubImage2D);
HOOK(glCopyTexImage2D);
HOOK(glCopyTexSubImage2D);
HOOK(glCreateProgram);
HOOK(glCreateShader);
HOOK(glCullFace);
HOOK(glDeleteBuffers);
HOOK(glDeleteFramebuffers);
HOOK(glDeleteProgram);
HOOK(glDeleteRenderbuffers);
HOOK(glDeleteShader);
HOOK(glDeleteTextures);
HOOK(glDepthFunc);
HOOK(glDepthMask);
HOOK(glDepthRangef);
HOOK(glDetachShader);
HOOK(glDisable);
HOOK(glDisableVertexAttribArray);
HOOK(glDrawArrays);
HOOK(glDrawElements);
HOOK(glEnable);
HOOK(glEnableVertexAttribArray);
HOOK(glFinish);
HOOK(glFlush);
HOOK(glFramebufferRenderbuffer);
HOOK(glFramebufferTexture2D);
HOOK(glFrontFace);
HOOK(glGenBuffers);
HOOK(glGenerateMipmap);
HOOK(glGenFramebuffers);
HOOK(glGenRenderbuffers);
HOOK(glGenTextures);
HOOK(glGetActiveAttrib);
HOOK(glGetActiveUniform);
HOOK(glGetAttachedShaders);
HOOK(glGetAttribLocation);
HOOK(glGetBooleanv);
HOOK(glGetBufferParameteriv);
HOOK(glGetError);
HOOK(glGetFloatv);
HOOK(glGetFramebufferAttachmentParameteriv);
HOOK(glGetIntegerv);
HOOK(glGetProgramiv);
HOOK(glGetProgramInfoLog);
HOOK(glGetRenderbufferParameteriv);
HOOK(glGetShaderiv);
HOOK(glGetShaderInfoLog);
HOOK(glGetShaderPrecisionFormat);
HOOK(glGetShaderSource);
HOOK(glGetString);
HOOK(glGetTexParameterfv);
HOOK(glGetTexParameteriv);
HOOK(glGetUniformfv);
HOOK(glGetUniformiv);
HOOK(glGetUniformLocation);
HOOK(glGetVertexAttribfv);
HOOK(glGetVertexAttribiv);
HOOK(glGetVertexAttribPointerv);
HOOK(glHint);
HOOK(glIsBuffer);
HOOK(glIsEnabled);
HOOK(glIsFramebuffer);
HOOK(glIsProgram);
HOOK(glIsRenderbuffer);
HOOK(glIsShader);
HOOK(glIsTexture);
HOOK(glLineWidth);
HOOK(glLinkProgram);
HOOK(glPixelStorei);
HOOK(glPolygonOffset);
HOOK(glReadPixels);
HOOK(glReleaseShaderCompiler);
HOOK(glRenderbufferStorage);
HOOK(glSampleCoverage);
HOOK(glScissor);
HOOK(glShaderBinary);
HOOK(glShaderSource);
HOOK(glStencilFunc);
HOOK(glStencilFuncSeparate);
HOOK(glStencilMask);
HOOK(glStencilMaskSeparate);
HOOK(glStencilOp);
HOOK(glStencilOpSeparate);
HOOK(glTexImage2D);
HOOK(glTexParameterf);
HOOK(glTexParameterfv);
HOOK(glTexParameteri);
HOOK(glTexParameteriv);
HOOK(glTexSubImage2D);
HOOK(glUniform1f);
HOOK(glUniform1fv);
HOOK(glUniform1i);
HOOK(glUniform1iv);
HOOK(glUniform2f);
HOOK(glUniform2fv);
HOOK(glUniform2i);
HOOK(glUniform2iv);
HOOK(glUniform3f);
HOOK(glUniform3fv);
HOOK(glUniform3i);
HOOK(glUniform3iv);
HOOK(glUniform4f);
HOOK(glUniform4fv);
HOOK(glUniform4i);
HOOK(glUniform4iv);
HOOK(glUniformMatrix2fv);
HOOK(glUniformMatrix3fv);
HOOK(glUniformMatrix4fv);
HOOK(glUseProgram);
HOOK(glValidateProgram);
HOOK(glVertexAttrib1f);
HOOK(glVertexAttrib1fv);
HOOK(glVertexAttrib2f);
HOOK(glVertexAttrib2fv);
HOOK(glVertexAttrib3f);
HOOK(glVertexAttrib3fv);
HOOK(glVertexAttrib4f);
HOOK(glVertexAttrib4fv);
HOOK(glVertexAttribPointer);
HOOK(glViewport);
#endif /* GL_ES_VERSION_2_0*/

#if GL_ES_VERSION_3_0
HOOK(glReadBuffer);
HOOK(glDrawRangeElements);
HOOK(glTexImage3D);
HOOK(glTexSubImage3D);
HOOK(glCopyTexSubImage3D);
HOOK(glCompressedTexImage3D);
HOOK(glCompressedTexSubImage3D);
HOOK(glGenQueries);
HOOK(glDeleteQueries);
HOOK(glIsQuery);
HOOK(glBeginQuery);
HOOK(glEndQuery);
HOOK(glGetQueryiv);
HOOK(glGetQueryObjectuiv);
HOOK(glUnmapBuffer);
HOOK(glGetBufferPointerv);
HOOK(glDrawBuffers);
HOOK(glUniformMatrix2x3fv);
HOOK(glUniformMatrix3x2fv);
HOOK(glUniformMatrix2x4fv);
HOOK(glUniformMatrix4x2fv);
HOOK(glUniformMatrix3x4fv);
HOOK(glUniformMatrix4x3fv);
HOOK(glBlitFramebuffer);
HOOK(glRenderbufferStorageMultisample);
HOOK(glFramebufferTextureLayer);
HOOK(glMapBufferRange);
HOOK(glFlushMappedBufferRange);
HOOK(glBindVertexArray);
HOOK(glDeleteVertexArrays);
HOOK(glGenVertexArrays);
HOOK(glIsVertexArray);
HOOK(glGetIntegeri_v);
HOOK(glBeginTransformFeedback);
HOOK(glEndTransformFeedback);
HOOK(glBindBufferRange);
HOOK(glBindBufferBase);
HOOK(glTransformFeedbackVaryings);
HOOK(glGetTransformFeedbackVarying);
HOOK(glVertexAttribIPointer);
HOOK(glGetVertexAttribIiv);
HOOK(glGetVertexAttribIuiv);
HOOK(glVertexAttribI4i);
HOOK(glVertexAttribI4ui);
HOOK(glVertexAttribI4iv);
HOOK(glVertexAttribI4uiv);
HOOK(glGetUniformuiv);
HOOK(glGetFragDataLocation);
HOOK(glUniform1ui);
HOOK(glUniform2ui);
HOOK(glUniform3ui);
HOOK(glUniform4ui);
HOOK(glUniform1uiv);
HOOK(glUniform2uiv);
HOOK(glUniform3uiv);
HOOK(glUniform4uiv);
HOOK(glClearBufferiv);
HOOK(glClearBufferuiv);
HOOK(glClearBufferfv);
HOOK(glClearBufferfi);
HOOK(glGetStringi);
HOOK(glCopyBufferSubData);
HOOK(glGetUniformIndices);
HOOK(glGetActiveUniformsiv);
HOOK(glGetUniformBlockIndex);
HOOK(glGetActiveUniformBlockiv);
HOOK(glGetActiveUniformBlockName);
HOOK(glUniformBlockBinding);
HOOK(glDrawArraysInstanced);
HOOK(glDrawElementsInstanced);
HOOK(glFenceSync);
HOOK(glIsSync);
HOOK(glDeleteSync);
HOOK(glClientWaitSync);
HOOK(glWaitSync);
HOOK(glGetInteger64v);
HOOK(glGetSynciv);
HOOK(glGetInteger64i_v);
HOOK(glGetBufferParameteri64v);
HOOK(glGenSamplers);
HOOK(glDeleteSamplers);
HOOK(glIsSampler);
HOOK(glBindSampler);
HOOK(glSamplerParameteri);
HOOK(glSamplerParameteriv);
HOOK(glSamplerParameterf);
HOOK(glSamplerParameterfv);
HOOK(glGetSamplerParameteriv);
HOOK(glGetSamplerParameterfv);
HOOK(glVertexAttribDivisor);
HOOK(glBindTransformFeedback);
HOOK(glDeleteTransformFeedbacks);
HOOK(glGenTransformFeedbacks);
HOOK(glIsTransformFeedback);
HOOK(glPauseTransformFeedback);
HOOK(glResumeTransformFeedback);
HOOK(glGetProgramBinary);
HOOK(glProgramBinary);
HOOK(glProgramParameteri);
HOOK(glInvalidateFramebuffer);
HOOK(glInvalidateSubFramebuffer);
HOOK(glTexStorage2D);
HOOK(glTexStorage3D);
HOOK(glGetInternalformativ);
#endif /* GL_ES_VERSION_3_0*/

#if GL_ES_VERSION_3_1
HOOK(glDispatchCompute);
HOOK(glDispatchComputeIndirect);
HOOK(glDrawArraysIndirect);
HOOK(glDrawElementsIndirect);
HOOK(glFramebufferParameteri);
HOOK(glGetFramebufferParameteriv);
HOOK(glGetProgramInterfaceiv);
HOOK(glGetProgramResourceIndex);
HOOK(glGetProgramResourceName);
HOOK(glGetProgramResourceiv);
HOOK(glGetProgramResourceLocation);
HOOK(glUseProgramStages);
HOOK(glActiveShaderProgram);
HOOK(glCreateShaderProgramv);
HOOK(glBindProgramPipeline);
HOOK(glDeleteProgramPipelines);
HOOK(glGenProgramPipelines);
HOOK(glIsProgramPipeline);
HOOK(glGetProgramPipelineiv);
HOOK(glProgramUniform1i);
HOOK(glProgramUniform2i);
HOOK(glProgramUniform3i);
HOOK(glProgramUniform4i);
HOOK(glProgramUniform1ui);
HOOK(glProgramUniform2ui);
HOOK(glProgramUniform3ui);
HOOK(glProgramUniform4ui);
HOOK(glProgramUniform1f);
HOOK(glProgramUniform2f);
HOOK(glProgramUniform3f);
HOOK(glProgramUniform4f);
HOOK(glProgramUniform1iv);
HOOK(glProgramUniform2iv);
HOOK(glProgramUniform3iv);
HOOK(glProgramUniform4iv);
HOOK(glProgramUniform1uiv);
HOOK(glProgramUniform2uiv);
HOOK(glProgramUniform3uiv);
HOOK(glProgramUniform4uiv);
HOOK(glProgramUniform1fv);
HOOK(glProgramUniform2fv);
HOOK(glProgramUniform3fv);
HOOK(glProgramUniform4fv);
HOOK(glProgramUniformMatrix2fv);
HOOK(glProgramUniformMatrix3fv);
HOOK(glProgramUniformMatrix4fv);
HOOK(glProgramUniformMatrix2x3fv);
HOOK(glProgramUniformMatrix3x2fv);
HOOK(glProgramUniformMatrix2x4fv);
HOOK(glProgramUniformMatrix4x2fv);
HOOK(glProgramUniformMatrix3x4fv);
HOOK(glProgramUniformMatrix4x3fv);
HOOK(glValidateProgramPipeline);
HOOK(glGetProgramPipelineInfoLog);
HOOK(glBindImageTexture);
HOOK(glGetBooleani_v);
HOOK(glMemoryBarrier);
HOOK(glMemoryBarrierByRegion);
HOOK(glTexStorage2DMultisample);
HOOK(glGetMultisamplefv);
HOOK(glSampleMaski);
HOOK(glGetTexLevelParameteriv);
HOOK(glGetTexLevelParameterfv);
HOOK(glBindVertexBuffer);
HOOK(glVertexAttribFormat);
HOOK(glVertexAttribIFormat);
HOOK(glVertexAttribBinding);
HOOK(glVertexBindingDivisor);
#endif /* GL_ES_VERSION_3_1*/

#if GL_ES_VERSION_3_2
HOOK(glBlendBarrier);
HOOK(glCopyImageSubData);
HOOK(glDebugMessageControl);
HOOK(glDebugMessageInsert);
HOOK(glDebugMessageCallback);
HOOK(glGetDebugMessageLog);
HOOK(glPushDebugGroup);
HOOK(glPopDebugGroup);
HOOK(glObjectLabel);
HOOK(glGetObjectLabel);
HOOK(glObjectPtrLabel);
HOOK(glGetObjectPtrLabel);
HOOK(glGetPointerv);
HOOK(glEnablei);
HOOK(glDisablei);
HOOK(glBlendEquationi);
HOOK(glBlendEquationSeparatei);
HOOK(glBlendFunci);
HOOK(glBlendFuncSeparatei);
HOOK(glColorMaski);
HOOK(glIsEnabledi);
HOOK(glDrawElementsBaseVertex);
HOOK(glDrawRangeElementsBaseVertex);
HOOK(glDrawElementsInstancedBaseVertex);
HOOK(glFramebufferTexture);
HOOK(glPrimitiveBoundingBox);
HOOK(glGetGraphicsResetStatus);
HOOK(glReadnPixels);
HOOK(glGetnUniformfv);
HOOK(glGetnUniformiv);
HOOK(glGetnUniformuiv);
HOOK(glMinSampleShading);
HOOK(glPatchParameteri);
HOOK(glTexParameterIiv);
HOOK(glTexParameterIuiv);
HOOK(glGetTexParameterIiv);
HOOK(glGetTexParameterIuiv);
HOOK(glSamplerParameterIiv);
HOOK(glSamplerParameterIuiv);
HOOK(glGetSamplerParameterIiv);
HOOK(glGetSamplerParameterIuiv);
HOOK(glTexBuffer);
HOOK(glTexBufferRange);
HOOK(glTexStorage3DMultisample);
#endif /* GL_ES_VERSION_3_2*/

#if GL_VERSION_ES_CM_1_0
HOOK(glAlphaFunc);
HOOK(glClipPlanef);
HOOK(glColor4f);
HOOK(glFogf);
HOOK(glFogfv);
HOOK(glFrustumf);
HOOK(glGetClipPlanef);
HOOK(glGetLightfv);
HOOK(glGetMaterialfv);
HOOK(glGetTexEnvfv);
HOOK(glLightModelf);
HOOK(glLightModelfv);
HOOK(glLightf);
HOOK(glLightfv);
HOOK(glLoadMatrixf);
HOOK(glMaterialf);
HOOK(glMaterialfv);
HOOK(glMultMatrixf);
HOOK(glMultiTexCoord4f);
HOOK(glNormal3f);
HOOK(glOrthof);
HOOK(glPointParameterf);
HOOK(glPointParameterfv);
HOOK(glPointSize);
HOOK(glRotatef);
HOOK(glScalef);
HOOK(glTexEnvf);
HOOK(glTexEnvfv);
HOOK(glTranslatef);
HOOK(glAlphaFuncx);
HOOK(glClearColorx);
HOOK(glClearDepthx);
HOOK(glClientActiveTexture);
HOOK(glClipPlanex);
HOOK(glColor4ub);
HOOK(glColor4x);
HOOK(glColorPointer);
HOOK(glDepthRangex);
HOOK(glDisableClientState);
HOOK(glEnableClientState);
HOOK(glFogx);
HOOK(glFogxv);
HOOK(glFrustumx);
HOOK(glGetClipPlanex);
HOOK(glGetFixedv);
HOOK(glGetLightxv);
HOOK(glGetMaterialxv);
HOOK(glGetTexEnviv);
HOOK(glGetTexEnvxv);
HOOK(glGetTexParameterxv);
HOOK(glLightModelx);
HOOK(glLightModelxv);
HOOK(glLightx);
HOOK(glLightxv);
HOOK(glLineWidthx);
HOOK(glLoadIdentity);
HOOK(glLoadMatrixx);
HOOK(glLogicOp);
HOOK(glMaterialx);
HOOK(glMaterialxv);
HOOK(glMatrixMode);
HOOK(glMultMatrixx);
HOOK(glMultiTexCoord4x);
HOOK(glNormal3x);
HOOK(glNormalPointer);
HOOK(glOrthox);
HOOK(glPointParameterx);
HOOK(glPointParameterxv);
HOOK(glPointSizex);
HOOK(glPolygonOffsetx);
HOOK(glPopMatrix);
HOOK(glPushMatrix);
HOOK(glRotatex);
HOOK(glSampleCoveragex);
HOOK(glScalex);
HOOK(glShadeModel);
HOOK(glTexCoordPointer);
HOOK(glTexEnvi);
HOOK(glTexEnvx);
HOOK(glTexEnviv);
HOOK(glTexEnvxv);
HOOK(glTexParameterx);
HOOK(glTexParameterxv);
HOOK(glTranslatex);
HOOK(glVertexPointer);
#endif /* GL_VERSION_ES_CM_1_0*/

#if EGL_KHR_cl_event2
HOOK(eglCreateSync64KHR);
#endif /* EGL_KHR_cl_event2*/

#if EGL_KHR_create_context
#endif /* EGL_KHR_create_context*/

#if EGL_KHR_create_context_no_error
#endif /* EGL_KHR_create_context_no_error*/

#if EGL_KHR_fence_sync
HOOK(eglCreateSyncKHR);
HOOK(eglDestroySyncKHR);
HOOK(eglClientWaitSyncKHR);
HOOK(eglGetSyncAttribKHR);
#endif /* EGL_KHR_fence_sync*/

#if EGL_KHR_get_all_proc_addresses
#endif /* EGL_KHR_get_all_proc_addresses*/

#if EGL_KHR_gl_colorspace
#endif /* EGL_KHR_gl_colorspace*/

#if EGL_KHR_gl_renderbuffer_image
#endif /* EGL_KHR_gl_renderbuffer_image*/

#if EGL_KHR_gl_texture_2D_image
#endif /* EGL_KHR_gl_texture_2D_image*/

#if EGL_KHR_gl_texture_cubemap_image
#endif /* EGL_KHR_gl_texture_cubemap_image*/

#if EGL_KHR_image
HOOK(eglCreateImageKHR);
HOOK(eglDestroyImageKHR);
#endif /* EGL_KHR_image*/

#if EGL_KHR_image_base
#endif /* EGL_KHR_image_base*/

#if EGL_KHR_image_pixmap
#endif /* EGL_KHR_image_pixmap*/

#if EGL_KHR_platform_android
#endif /* EGL_KHR_platform_android*/

#if EGL_KHR_platform_x11
#endif /* EGL_KHR_platform_x11*/

#if EGL_KHR_surfaceless_context
#endif /* EGL_KHR_surfaceless_context*/

#if EGL_KHR_wait_sync
HOOK(eglWaitSyncKHR);
#endif /* EGL_KHR_wait_sync*/

#if GL_KHR_debug
HOOK(glDebugMessageControlKHR);
HOOK(glDebugMessageInsertKHR);
HOOK(glDebugMessageCallbackKHR);
HOOK(glGetDebugMessageLogKHR);
HOOK(glPushDebugGroupKHR);
HOOK(glPopDebugGroupKHR);
HOOK(glObjectLabelKHR);
HOOK(glGetObjectLabelKHR);
HOOK(glObjectPtrLabelKHR);
HOOK(glGetObjectPtrLabelKHR);
HOOK(glGetPointervKHR);
#endif /* GL_KHR_debug*/

#if GL_KHR_texture_compression_astc_ldr
#endif /* GL_KHR_texture_compression_astc_ldr*/

#if GL_OES_EGL_image
HOOK(glEGLImageTargetTexture2DOES);
HOOK(glEGLImageTargetRenderbufferStorageOES);
#endif /* GL_OES_EGL_image*/

#if GL_OES_EGL_image_external
#endif /* GL_OES_EGL_image_external*/

#if GL_OES_EGL_image_external_essl3
#endif /* GL_OES_EGL_image_external_essl3*/

#if GL_OES_compressed_ETC1_RGB8_texture
#endif /* GL_OES_compressed_ETC1_RGB8_texture*/

#if GL_OES_compressed_paletted_texture
#endif /* GL_OES_compressed_paletted_texture*/

#if GL_OES_depth24
#endif /* GL_OES_depth24*/

#if GL_OES_depth32
#endif /* GL_OES_depth32*/

#if GL_OES_draw_texture
HOOK(glDrawTexsOES);
HOOK(glDrawTexiOES);
HOOK(glDrawTexxOES);
HOOK(glDrawTexsvOES);
HOOK(glDrawTexivOES);
HOOK(glDrawTexxvOES);
HOOK(glDrawTexfOES);
HOOK(glDrawTexfvOES);
#endif /* GL_OES_draw_texture*/

#if GL_OES_framebuffer_object
HOOK(glIsRenderbufferOES);
HOOK(glBindRenderbufferOES);
HOOK(glDeleteRenderbuffersOES);
HOOK(glGenRenderbuffersOES);
HOOK(glRenderbufferStorageOES);
HOOK(glGetRenderbufferParameterivOES);
HOOK(glIsFramebufferOES);
HOOK(glBindFramebufferOES);
HOOK(glDeleteFramebuffersOES);
HOOK(glGenFramebuffersOES);
HOOK(glCheckFramebufferStatusOES);
HOOK(glFramebufferRenderbufferOES);
HOOK(glFramebufferTexture2DOES);
HOOK(glGetFramebufferAttachmentParameterivOES);
HOOK(glGenerateMipmapOES);
#endif /* GL_OES_framebuffer_object*/

#if GL_OES_mapbuffer
HOOK(glMapBufferOES);
HOOK(glUnmapBufferOES);
HOOK(glGetBufferPointervOES);
#endif /* GL_OES_mapbuffer*/

#if GL_OES_matrix_palette
HOOK(glCurrentPaletteMatrixOES);
HOOK(glLoadPaletteFromModelViewMatrixOES);
HOOK(glMatrixIndexPointerOES);
HOOK(glWeightPointerOES);
#endif /* GL_OES_matrix_palette*/

#if GL_OES_packed_depth_stencil
#endif /* GL_OES_packed_depth_stencil*/

#if GL_OES_point_size_array
HOOK(glPointSizePointerOES);
#endif /* GL_OES_point_size_array*/

#if GL_OES_query_matrix
HOOK(glQueryMatrixxOES);
#endif /* GL_OES_query_matrix*/

#if GL_OES_rgb8_rgba8
#endif /* GL_OES_rgb8_rgba8*/

#if GL_OES_standard_derivatives
#endif /* GL_OES_standard_derivatives*/

#if GL_OES_stencil8
#endif /* GL_OES_stencil8*/

#if GL_OES_surfaceless_context
#endif /* GL_OES_surfaceless_context*/

#if GL_OES_texture_npot
#endif /* GL_OES_texture_npot*/

#if GL_OES_texture_stencil8
#endif /* GL_OES_texture_stencil8*/

#if GL_OES_vertex_array_object
HOOK(glBindVertexArrayOES);
HOOK(glDeleteVertexArraysOES);
HOOK(glGenVertexArraysOES);
HOOK(glIsVertexArrayOES);
#endif /* GL_OES_vertex_array_object*/

#if GL_OES_vertex_half_float
#endif /* GL_OES_vertex_half_float*/

#if EGL_ANDROID_framebuffer_target
#endif /* EGL_ANDROID_framebuffer_target*/

#if EGL_ANDROID_image_native_buffer
#endif /* EGL_ANDROID_image_native_buffer*/

#if EGL_ANDROID_native_fence_sync
HOOK(eglDupNativeFenceFDANDROID);
#endif /* EGL_ANDROID_native_fence_sync*/

#if EGL_ANDROID_recordable
#endif /* EGL_ANDROID_recordable*/

#if EGL_BRCM_event_monitor
HOOK(eglGetEventConstantBRCM);
HOOK(eglGetEventTrackInfoBRCM);
HOOK(eglGetEventInfoBRCM);
HOOK(eglGetEventDataFieldInfoBRCM);
HOOK(eglSetEventCollectionBRCM);
HOOK(eglGetEventDataBRCM);
#endif /* EGL_BRCM_event_monitor*/

#if EGL_BRCM_gl_framebuffer_image
#endif /* EGL_BRCM_gl_framebuffer_image*/

#if EGL_BRCM_image_update_control
HOOK(eglImageUpdateParameterivBRCM);
HOOK(eglImageUpdateParameteriBRCM);
#endif /* EGL_BRCM_image_update_control*/

#if EGL_BRCM_performance_counters
HOOK(eglGetPerfCounterConstantBRCM);
HOOK(eglGetPerfCounterGroupInfoBRCM);
HOOK(eglGetPerfCounterInfoBRCM);
HOOK(eglSetPerfCountingBRCM);
HOOK(eglChoosePerfCountersBRCM);
HOOK(eglGetPerfCounterDataBRCM);
#endif /* EGL_BRCM_performance_counters*/

#if EGL_BRCM_platform_nexus
#endif /* EGL_BRCM_platform_nexus*/

#if EGL_EXT_client_extensions
#endif /* EGL_EXT_client_extensions*/

#if EGL_EXT_create_context_robustness
#endif /* EGL_EXT_create_context_robustness*/

#if EGL_EXT_platform_base
HOOK(eglGetPlatformDisplayEXT);
HOOK(eglCreatePlatformWindowSurfaceEXT);
HOOK(eglCreatePlatformPixmapSurfaceEXT);
#endif /* EGL_EXT_platform_base*/

#if EGL_EXT_platform_x11
#endif /* EGL_EXT_platform_x11*/

#if GL_BRCM_base_instance
HOOK(glDrawArraysInstancedBaseInstanceBRCM);
HOOK(glDrawElementsInstancedBaseInstanceBRCM);
HOOK(glDrawElementsInstancedBaseVertexBaseInstanceBRCM);
#endif /* GL_BRCM_base_instance*/

#if GL_BRCM_mirror_once_border
#endif /* GL_BRCM_mirror_once_border*/

#if GL_BRCM_multi_draw_indirect
HOOK(glMultiDrawArraysIndirectBRCM);
HOOK(glMultiDrawElementsIndirectBRCM);
#endif /* GL_BRCM_multi_draw_indirect*/

#if GL_BRCM_polygon_mode
HOOK(glPolygonModeBRCM);
#endif /* GL_BRCM_polygon_mode*/

#if GL_BRCM_provoking_vertex
HOOK(glProvokingVertexBRCM);
#endif /* GL_BRCM_provoking_vertex*/

#if GL_BRCM_texture_1D
HOOK(glTexImage1DBRCM);
#endif /* GL_BRCM_texture_1D*/

#if GL_BRCM_texture_mirror_swap
#endif /* GL_BRCM_texture_mirror_swap*/

#if GL_BRCM_texture_norm16
#endif /* GL_BRCM_texture_norm16*/

#if GL_EXT_color_buffer_float
#endif /* GL_EXT_color_buffer_float*/

#if GL_EXT_debug_marker
HOOK(glInsertEventMarkerEXT);
HOOK(glPushGroupMarkerEXT);
HOOK(glPopGroupMarkerEXT);
#endif /* GL_EXT_debug_marker*/

#if GL_EXT_discard_framebuffer
HOOK(glDiscardFramebufferEXT);
#endif /* GL_EXT_discard_framebuffer*/

#if GL_EXT_draw_elements_base_vertex
HOOK(glDrawElementsBaseVertexEXT);
HOOK(glDrawRangeElementsBaseVertexEXT);
HOOK(glDrawElementsInstancedBaseVertexEXT);
HOOK(glMultiDrawElementsBaseVertexEXT);
#endif /* GL_EXT_draw_elements_base_vertex*/

#if GL_EXT_multisampled_render_to_texture
HOOK(glRenderbufferStorageMultisampleEXT);
HOOK(glFramebufferTexture2DMultisampleEXT);
#endif /* GL_EXT_multisampled_render_to_texture*/

#if GL_EXT_robustness
HOOK(glGetGraphicsResetStatusEXT);
HOOK(glReadnPixelsEXT);
HOOK(glGetnUniformfvEXT);
HOOK(glGetnUniformivEXT);
#endif /* GL_EXT_robustness*/

#if GL_EXT_shader_texture_lod
#endif /* GL_EXT_shader_texture_lod*/

#if GL_EXT_texture_filter_anisotropic
#endif /* GL_EXT_texture_filter_anisotropic*/

#if GL_EXT_texture_format_BGRA8888
#endif /* GL_EXT_texture_format_BGRA8888*/

#if GL_EXT_texture_sRGB_R8
#endif /* GL_EXT_texture_sRGB_R8*/

#if GL_EXT_texture_sRGB_RG8
#endif /* GL_EXT_texture_sRGB_RG8*/
