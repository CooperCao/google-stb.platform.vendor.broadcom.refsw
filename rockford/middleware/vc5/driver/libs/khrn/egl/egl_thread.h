/*=============================================================================
Broadcom Proprietary and Confidential. (c)2013 Broadcom.
All rights reserved.

Project  :  khronos

FILE DESCRIPTION
=============================================================================*/

#ifndef EGL_THREAD_H
#define EGL_THREAD_H

#include "vcos.h"
#include <stdbool.h>
#include <EGL/eglplatform.h>
#include "egl_types.h"

struct egl_thread
{
   // keep a linked list of all threads
   struct egl_thread  *next;

   EGL_CONTEXT_T      *contexts[API_COUNT];

   /* The "current context" is contexts[current_api] */
   egl_api_t          current_api;

   /*
    * The error generated by the last call (including EGL_SUCCESS if the last
    * call was successful)
    */
   EGLint             error;

   /* Needed for specific error detection in the extensions */
   bool               perf_counters_acquired;
   bool               events_acquired;

#ifndef NDEBUG
   /*
    * Counts how many times the current thread has locked the GL lock. Used
    * for assertions.
    */
   int                locked_count;
#endif
};

/*
 * Set thread->error to error but only if it is currently set to EGL_SUCCESS.
 * That way thread->error contains the error code for the first thing that
 * went wrong. It's cleared at the start of all EGL API calls by
 * egl_initialized.
 *
 * Returns false if the thread local storage doesn't even exist.
 */
extern bool egl_thread_set_error(EGLint error);

/*
 * Get the thread-local storage for the current thread. Create if it doesn't exist.
 */
extern EGL_THREAD_T *egl_thread_get(void);

/* Get the current context for the current API in the current thread */
extern EGL_CONTEXT_T *egl_thread_get_context(void);

/* Translate internal names for apis back to EGLenums */
/* TODO: This doesn't really look like the right place for this */
extern EGLenum egl_name_from_api(egl_api_t api);

/* Release a thread.  If the refcnt is 0, then the v3d is closed */
extern EGLBoolean egl_release_thread(void);

#endif /* EGL_THREAD_H */
