version31 version32:
#
# Common Functions
#
   highp float frexp(highp float x, out highp int   e);
   highp vec2  frexp(highp vec2  x, out highp ivec2 e);
   highp vec3  frexp(highp vec3  x, out highp ivec3 e);
   highp vec4  frexp(highp vec4  x, out highp ivec4 e);
   highp float ldexp(highp float x, highp int   e);
   highp vec2  ldexp(highp vec2  x, highp ivec2 e);
   highp vec3  ldexp(highp vec3  x, highp ivec3 e);
   highp vec4  ldexp(highp vec4  x, highp ivec4 e);

   int   mix(int   x, int   y, bool  a);
   ivec2 mix(ivec2 x, ivec2 y, bvec2 a);
   ivec3 mix(ivec3 x, ivec3 y, bvec3 a);
   ivec4 mix(ivec4 x, ivec4 y, bvec4 a);

   uint  mix(uint  x, uint  y, bool  a);
   uvec2 mix(uvec2 x, uvec2 y, bvec2 a);
   uvec3 mix(uvec3 x, uvec3 y, bvec3 a);
   uvec4 mix(uvec4 x, uvec4 y, bvec4 a);

   bool  mix(bool  x, bool  y, bool  a);
   bvec2 mix(bvec2 x, bvec2 y, bvec2 a);
   bvec3 mix(bvec3 x, bvec3 y, bvec3 a);
   bvec4 mix(bvec4 x, bvec4 y, bvec4 a);

#
# Packing Functions
#
   highp uint packUnorm4x8(mediump vec4 v);
   highp uint packSnorm4x8(mediump vec4 v);
   mediump vec4 unpackUnorm4x8(highp uint v);
   mediump vec4 unpackSnorm4x8(highp uint v);

#
# Integer Functions
#
   int   bitfieldExtract(int   value, int offset, int bits);
   ivec2 bitfieldExtract(ivec2 value, int offset, int bits);
   ivec3 bitfieldExtract(ivec3 value, int offset, int bits);
   ivec4 bitfieldExtract(ivec4 value, int offset, int bits);
   uint  bitfieldExtract(uint  value, int offset, int bits);
   uvec2 bitfieldExtract(uvec2 value, int offset, int bits);
   uvec3 bitfieldExtract(uvec3 value, int offset, int bits);
   uvec4 bitfieldExtract(uvec4 value, int offset, int bits);

   int   bitfieldInsert(int   base, int   insert, int offset, int bits);
   ivec2 bitfieldInsert(ivec2 base, ivec2 insert, int offset, int bits);
   ivec3 bitfieldInsert(ivec3 base, ivec3 insert, int offset, int bits);
   ivec4 bitfieldInsert(ivec4 base, ivec4 insert, int offset, int bits);

   highp uint  bitfieldReverse(highp uint  value);
   highp uvec2 bitfieldReverse(highp uvec2 value);
   highp uvec3 bitfieldReverse(highp uvec3 value);
   highp uvec4 bitfieldReverse(highp uvec4 value);
   highp int   bitfieldReverse(highp int   value);
   highp ivec2 bitfieldReverse(highp ivec2 value);
   highp ivec3 bitfieldReverse(highp ivec3 value);
   highp ivec4 bitfieldReverse(highp ivec4 value);

   lowp int   bitCount(uint  value);
   lowp ivec2 bitCount(uvec2 value);
   lowp ivec3 bitCount(uvec3 value);
   lowp ivec4 bitCount(uvec4 value);
   lowp int   bitCount(int   value);
   lowp ivec2 bitCount(ivec2 value);
   lowp ivec3 bitCount(ivec3 value);
   lowp ivec4 bitCount(ivec4 value);

   lowp int   findLSB(uint  value);
   lowp ivec2 findLSB(uvec2 value);
   lowp ivec3 findLSB(uvec3 value);
   lowp ivec4 findLSB(uvec4 value);
   lowp int   findLSB(int   value);
   lowp ivec2 findLSB(ivec2 value);
   lowp ivec3 findLSB(ivec3 value);
   lowp ivec4 findLSB(ivec4 value);

   lowp int   findMSB(uint  value);
   lowp ivec2 findMSB(uvec2 value);
   lowp ivec3 findMSB(uvec3 value);
   lowp ivec4 findMSB(uvec4 value);
   lowp int   findMSB(int   value);
   lowp ivec2 findMSB(ivec2 value);
   lowp ivec3 findMSB(ivec3 value);
   lowp ivec4 findMSB(ivec4 value);

   highp uint  uaddCarry(highp uint  x, highp uint  y, out lowp uint  carry);
   highp uvec2 uaddCarry(highp uvec2 x, highp uvec2 y, out lowp uvec2 carry);
   highp uvec3 uaddCarry(highp uvec3 x, highp uvec3 y, out lowp uvec3 carry);
   highp uvec4 uaddCarry(highp uvec4 x, highp uvec4 y, out lowp uvec4 carry);

   highp uint  usubBorrow(highp uint  x, highp uint  y, out lowp uint  borrow);
   highp uvec2 usubBorrow(highp uvec2 x, highp uvec2 y, out lowp uvec2 borrow);
   highp uvec3 usubBorrow(highp uvec3 x, highp uvec3 y, out lowp uvec3 borrow);
   highp uvec4 usubBorrow(highp uvec4 x, highp uvec4 y, out lowp uvec4 borrow);

   void umulExtended(highp uint  x, highp uint  y, out highp uint  msb, out highp uint  lsb);
   void umulExtended(highp uvec2 x, highp uvec2 y, out highp uvec2 msb, out highp uvec2 lsb);
   void umulExtended(highp uvec3 x, highp uvec3 y, out highp uvec3 msb, out highp uvec3 lsb);
   void umulExtended(highp uvec4 x, highp uvec4 y, out highp uvec4 msb, out highp uvec4 lsb);
   void imulExtended(highp int   x, highp int   y, out highp int   msb, out highp int   lsb);
   void imulExtended(highp ivec2 x, highp ivec2 y, out highp ivec2 msb, out highp ivec2 lsb);
   void imulExtended(highp ivec3 x, highp ivec3 y, out highp ivec3 msb, out highp ivec3 lsb);
   void imulExtended(highp ivec4 x, highp ivec4 y, out highp ivec4 msb, out highp ivec4 lsb);

#
# Texture Functions
#
   highp ivec2 textureSize(sampler2DMS sampler);
   highp ivec2 textureSize(isampler2DMS sampler);
   highp ivec2 textureSize(usampler2DMS sampler);

   vec4  texelFetch ( sampler2DMS sampler, ivec2 P, int s);
   ivec4 texelFetch (isampler2DMS sampler, ivec2 P, int s);
   uvec4 texelFetch (usampler2DMS sampler, ivec2 P, int s);

   vec4  textureGather(sampler2D sampler, vec2 coord);
   vec4  textureGather(sampler2D sampler, vec2 coord, int comp);
   ivec4 textureGather(isampler2D sampler, vec2 coord);
   ivec4 textureGather(isampler2D sampler, vec2 coord, int comp);
   uvec4 textureGather(usampler2D sampler, vec2 coord);
   uvec4 textureGather(usampler2D sampler, vec2 coord, int comp);
   vec4  textureGather(sampler2DShadow sampler, vec2 coord, float refZ);
   vec4  textureGather(samplerCube sampler, vec3 coord);
   vec4  textureGather(samplerCube sampler, vec3 coord, int comp);
   ivec4 textureGather(isamplerCube sampler, vec3 coord);
   ivec4 textureGather(isamplerCube sampler, vec3 coord, int comp);
   uvec4 textureGather(usamplerCube sampler, vec3 coord);
   uvec4 textureGather(usamplerCube sampler, vec3 coord, int comp);
   vec4  textureGather(samplerCubeShadow sampler, vec3 coord, float refZ);
   vec4  textureGather(sampler2DArray sampler, vec3 coord);
   vec4  textureGather(sampler2DArray sampler, vec3 coord, int comp);
   ivec4 textureGather(isampler2DArray sampler, vec3 coord);
   ivec4 textureGather(isampler2DArray sampler, vec3 coord, int comp);
   uvec4 textureGather(usampler2DArray sampler, vec3 coord);
   uvec4 textureGather(usampler2DArray sampler, vec3 coord, int comp);
   vec4  textureGather(sampler2DArrayShadow sampler, vec3 coord, float refZ);
   vec4  textureGatherOffset(sampler2D sampler, vec2 coord, ivec2 offset);
   vec4  textureGatherOffset(sampler2D sampler, vec2 coord, ivec2 offset, int comp);
   ivec4 textureGatherOffset(isampler2D sampler, vec2 coord, ivec2 offset);
   ivec4 textureGatherOffset(isampler2D sampler, vec2 coord, ivec2 offset, int comp);
   uvec4 textureGatherOffset(usampler2D sampler, vec2 coord, ivec2 offset);
   uvec4 textureGatherOffset(usampler2D sampler, vec2 coord, ivec2 offset, int comp);
   vec4  textureGatherOffset(sampler2DShadow sampler, vec2 coord, float refZ, ivec2 offset);
   vec4  textureGatherOffset(sampler2DArray sampler, vec3 coord, ivec2 offset);
   vec4  textureGatherOffset(sampler2DArray sampler, vec3 coord, ivec2 offset, int comp);
   ivec4 textureGatherOffset(isampler2DArray sampler, vec3 coord, ivec2 offset);
   ivec4 textureGatherOffset(isampler2DArray sampler, vec3 coord, ivec2 offset, int comp);
   uvec4 textureGatherOffset(usampler2DArray sampler, vec3 coord, ivec2 offset);
   uvec4 textureGatherOffset(usampler2DArray sampler, vec3 coord, ivec2 offset, int comp);
   vec4  textureGatherOffset(sampler2DArrayShadow sampler, vec3 coord, float refZ, ivec2 offset);

#
# Image Load/Store Functions
#
   highp ivec2 imageSize(readonly writeonly  image2D image);
   highp ivec2 imageSize(readonly writeonly iimage2D image);
   highp ivec2 imageSize(readonly writeonly uimage2D image);
   highp ivec3 imageSize(readonly writeonly  image3D image);
   highp ivec3 imageSize(readonly writeonly iimage3D image);
   highp ivec3 imageSize(readonly writeonly uimage3D image);
   highp ivec2 imageSize(readonly writeonly  imageCube image);
   highp ivec2 imageSize(readonly writeonly iimageCube image);
   highp ivec2 imageSize(readonly writeonly uimageCube image);
   highp ivec3 imageSize(readonly writeonly  image2DArray image);
   highp ivec3 imageSize(readonly writeonly iimage2DArray image);
   highp ivec3 imageSize(readonly writeonly uimage2DArray image);

   highp  vec4 imageLoad(readonly  image2D image, ivec2 P);
   highp ivec4 imageLoad(readonly iimage2D image, ivec2 P);
   highp uvec4 imageLoad(readonly uimage2D image, ivec2 P);
   highp  vec4 imageLoad(readonly  image3D image, ivec3 P);
   highp ivec4 imageLoad(readonly iimage3D image, ivec3 P);
   highp uvec4 imageLoad(readonly uimage3D image, ivec3 P);
   highp  vec4 imageLoad(readonly  imageCube image, ivec3 P);
   highp ivec4 imageLoad(readonly iimageCube image, ivec3 P);
   highp uvec4 imageLoad(readonly uimageCube image, ivec3 P);
   highp  vec4 imageLoad(readonly  image2DArray image, ivec3 P);
   highp ivec4 imageLoad(readonly iimage2DArray image, ivec3 P);
   highp uvec4 imageLoad(readonly uimage2DArray image, ivec3 P);
   highp  vec4 imageStore(writeonly  image2D image, ivec2 P,  vec4 data);
   highp ivec4 imageStore(writeonly iimage2D image, ivec2 P, ivec4 data);
   highp uvec4 imageStore(writeonly uimage2D image, ivec2 P, uvec4 data);
   highp  vec4 imageStore(writeonly  image3D image, ivec3 P,  vec4 data);
   highp ivec4 imageStore(writeonly iimage3D image, ivec3 P, ivec4 data);
   highp uvec4 imageStore(writeonly uimage3D image, ivec3 P, uvec4 data);
   highp  vec4 imageStore(writeonly  imageCube image, ivec3 P,  vec4 data);
   highp ivec4 imageStore(writeonly iimageCube image, ivec3 P, ivec4 data);
   highp uvec4 imageStore(writeonly uimageCube image, ivec3 P, uvec4 data);
   highp  vec4 imageStore(writeonly  image2DArray image, ivec3 P,  vec4 data);
   highp ivec4 imageStore(writeonly iimage2DArray image, ivec3 P, ivec4 data);
   highp uvec4 imageStore(writeonly uimage2DArray image, ivec3 P, uvec4 data);

#
# Atomic Counter Functions
#
   uint atomicCounterIncrement(atomic_uint c);
   uint atomicCounterDecrement(atomic_uint c);
   uint atomicCounter         (atomic_uint c);

#
# Atomic Functions
#
   uint atomicAdd(inout uint mem, uint data);
    int atomicAdd(inout  int mem,  int data);
   uint atomicMin(inout uint mem, uint data);
    int atomicMin(inout  int mem,  int data);
   uint atomicMax(inout uint mem, uint data);
    int atomicMax(inout  int mem,  int data);
   uint atomicAnd(inout uint mem, uint data);
    int atomicAnd(inout  int mem,  int data);
   uint atomicOr (inout uint mem, uint data);
    int atomicOr (inout  int mem,  int data);
   uint atomicXor(inout uint mem, uint data);
    int atomicXor(inout  int mem,  int data);
   uint atomicExchange(inout uint mem, uint data);
    int atomicExchange(inout  int mem,  int data);
   uint atomicCompSwap(inout uint mem, uint compare, uint data);
    int atomicCompSwap(inout  int mem,  int compare,  int data);

#
# Synchronisation Functions
#
   void barrier() ;
   void memoryBarrier() ;
   void memoryBarrierAtomicCounter() ;
   void memoryBarrierBuffer() ;
   void memoryBarrierImage () ;
   void memoryBarrierShared() ;
   void groupMemoryBarrier () ;

#
# Global Variables
#
   const mediump int gl_MaxImageUnits;
   const mediump int gl_MaxVertexImageUniforms;
   const mediump int gl_MaxFragmentImageUniforms;
   const mediump int gl_MaxComputeImageUniforms;
   const mediump int gl_MaxCombinedImageUniforms;
   const mediump int gl_MaxCombinedShaderOutputResources;
   const highp ivec3 gl_MaxComputeWorkGroupCount;
   const highp ivec3 gl_MaxComputeWorkGroupSize;
   const mediump int gl_MaxComputeUniformComponents;
   const mediump int gl_MaxComputeTextureImageUnits;
   const mediump int gl_MaxComputeAtomicCounters;
   const mediump int gl_MaxComputeAtomicCounterBuffers;
   const mediump int gl_MaxVertexAtomicCounters;
   const mediump int gl_MaxFragmentAtomicCounters;
   const mediump int gl_MaxCombinedAtomicCounters;
   const mediump int gl_MaxAtomicCounterBindings;
   const mediump int gl_MaxVertexAtomicCounterBuffers;
   const mediump int gl_MaxFragmentAtomicCounterBuffers;
   const mediump int gl_MaxVertexAtomicCounterBuffers;
   const mediump int gl_MaxCombinedAtomicCounterBuffers;
   const mediump int gl_MaxAtomicCounterBufferSize;

   const bool gl_HelperInvocation;
