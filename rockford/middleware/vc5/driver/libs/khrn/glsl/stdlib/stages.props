vertex:
  vec4 texture2DLod(sampler2D sampler, vec2 coord, float lod);
  vec4 texture2DProjLod(sampler2D sampler, vec3 coord, float lod);
  vec4 texture2DProjLod(sampler2D sampler, vec4 coord, float lod);
  vec4 textureCubeLod(samplerCube sampler, vec3 coord, float lod);
  out highp   vec4  gl_Position;
  out highp   float gl_PointSize;
  out mediump float gl_PointSize;
  in highp    int   gl_VertexID;
  in highp    int   gl_InstanceID;

  in highp int __brcm_base_instance;


tess-c:
  in highp int gl_PatchVerticesIn;
  in highp int gl_PrimitiveID;
  in highp int gl_InvocationID;
  patch out highp float gl_TessLevelOuter[4];
  patch out highp float gl_TessLevelInner[2];
  patch out highp vec4  gl_BoundingBox[2];
  patch out highp vec4  gl_BoundingBoxEXT[2];

  void barrier();


tess-e:
  in highp int  gl_PatchVerticesIn;
  in highp int  gl_PrimitiveID;
  in highp vec3 gl_TessCoord;
  patch in highp float gl_TessLevelOuter[4];
  patch in highp float gl_TessLevelInner[2];


geometry:
  void EmitVertex();
  void EndPrimitive();

  in highp int gl_PrimitiveIDIn;
  in highp int gl_InvocationID;

  out highp int gl_PrimitiveID;
  out highp int gl_Layer;


fragment:
  vec4 texture2D    (sampler2D sampler, vec2 coord, float bias);
  vec4 texture2DProj(sampler2D sampler, vec3 coord, float bias);
  vec4 texture2DProj(sampler2D sampler, vec4 coord, float bias);
  vec4 textureCube(samplerCube sampler, vec3 coord, float bias);
  float dFdx(float p);
  vec2 dFdx(vec2 p);
  vec3 dFdx(vec3 p);
  vec4 dFdx(vec4 p);
  float dFdy(float p);
  vec2 dFdy(vec2 p);
  vec3 dFdy(vec3 p);
  vec4 dFdy(vec4 p);
  float fwidth(float p);
  vec2 fwidth(vec2 p);
  vec3 fwidth(vec3 p);
  vec4 fwidth(vec4 p);

  out mediump vec4  gl_FragColor;
  out mediump vec4  gl_FragData[gl_MaxDrawBuffers];
  in  mediump vec4  gl_FragCoord;
  in  highp   vec4  gl_FragCoord;
  in          bool  gl_FrontFacing;
  out highp   float gl_FragDepth;
  in  mediump vec2  gl_PointCoord;
  in          bool  gl_HelperInvocation;
  in  highp   int   gl_PrimitiveID;
  in  mediump float __brcm_LineCoord;

  in  highp   int  gl_Layer;
  in  lowp    int  gl_SampleID;
  in  mediump vec2 gl_SamplePosition;
  in  highp   int  gl_SampleMaskIn[1];
  out highp   int  gl_SampleMask[1];

  uniform lowp int gl_NumSamples;


compute:
  in    uvec3 gl_NumWorkGroups;
  in    uvec3 gl_WorkGroupID;
  in    uvec3 gl_LocalInvocationID;
  in    uvec3 gl_GlobalInvocationID;
  in    uint  gl_LocalInvocationIndex;

  void barrier();
  void memoryBarrierShared();
  void groupMemoryBarrier();
