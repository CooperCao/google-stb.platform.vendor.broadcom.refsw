Name

    BRCM_performance_counters

Name Strings

    EGL_BRCM_performance_counters

Contributors

    Gary Sweet
    Steve Hill
    Roger Nixon

Contact

    Gary Sweet, Broadcom (gsweet 'at' broadcom.com)

Status

    TBD

Version

    Last Modified Date: 05/22/2014

Number

    EGL Extension #???

Dependencies

    None

Overview

    This extension enables the capture and reporting of hardware and software
    performance counters.

Issues

    Should this be an EGL extension?

      Yes, the counters are not just valid for OpenGL ES, but other APIs too.

    Add 64 bit types?

      Yes, EGL doesn't support any 64 bit types so this extension adds a
      uint64 type.

New Types

    EGLuint64BRCM: 64-bit unsigned integer

New Procedures and Functions

    EGLint eglGetPerfCounterConstantBRCM(EGLenum pname)

    EGLBoolean eglGetPerfCounterGroupInfoBRCM(EGLint group,
                                              EGLint nameStrSize, char *groupNameStr,
                                              EGLint *numCounters, EGLint *maxActiveCounters)

    EGLBoolean eglGetPerfCounterInfoBRCM(EGLint group, EGLint counter,
                                         EGLuint64BRCM *minValue, EGLuint64BRCM *maxValue,
                                         EGLuint64BRCM denominator,
                                         EGLint nameStrSize, char *nameStr,
                                         EGLint unitStrSize, char *unitStr)

    EGLBoolean eglSetPerfCountingBRCM(EGLenum pname)

    EGLBoolean eglChoosePerfCountersBRCM(EGLBoolean enable,
                                         EGLint group, EGLint numCounters,
                                         EGLint *counterList)

    EGLBoolean eglGetPerfCounterDataBRCM(EGLint dataBufferBytes,
                                         void *data, EGLint *bytesWritten,
                                         EGLboolean resetCounters)

New Tokens

    Accepted by the <pame> parameter of eglSetPerfCountingBRCM

        EGL_ACQUIRE_COUNTERS_BRCM                  0x33C0
        EGL_RELEASE_COUNTERS_BRCM                  0x33C1
        EGL_START_COUNTERS_BRCM                    0x33C2
        EGL_STOP_COUNTERS_BRCM                     0x33C3

    Accepted by the <pname> parameter of eglGetPerfCounterConstantBRCM

        EGL_NUM_COUNTER_GROUPS_BRCM                0x33C4
        EGL_MAX_COUNTER_STRING_LEN_BRCM            0x33C5

Addition to the EGL specification

    Add a new section called Performance Counters

    Performance counters are organized into groups. Each group has a list of
    counters that belong to the group and can be sampled, and a maximum number
    of counters that can be sampled simultaneously. The number of performance
    counter groups can be queried by passing EGL_NUM_COUNTER_GROUPS_BRCM as the
    <pname> parameter to eglGetPerfCounterConstantBRCM.

    The command

       EGLint eglGetPerfCounterConstantBRCM(EGLenum pname)

    returns an integer value based on the pname enum given.

    The command

       EGLBoolean eglGetPerfCounterGroupInfoBRCM(EGLint group,
                                                 EGLint nameStrSize, char *groupNameStr,
                                                 EGLint *numCounters, EGLint *maxActiveCounters)

    collects information about a particular group.

    The set of valid groups is from 0 to <numGroups> - 1 where <numGroups> is obtained
    by querying EGL_NUM_COUNTER_GROUPS_BRCM using eglGetPerfCounterConstantBRCM.
    For the given <group>, this function returns the name of the group, the total
    number of counters in <numCounters>, and the maximum number of counters that can
    be active in the group simultaneously in <maxActiveCounters>. If <numCounters>
    or <maxActiveCounters> are NULL no information is copied into the respective argument.

    The group name is returned in <groupNameStr>. A maximum of <nameStrSize>
    characters will be copied into the buffer including a null termination. If
    <nameStrSize> is 0 or <groupNameStr> is NULL, no name will be returned. The
    name string will never be longer than EGL_MAX_COUNTER_STRING_LEN_BRCM as queried
    by eglGetPerfCounterConstantBRCM.

    If <group> does not reference a valid group index, an EGL_BAD_PARAMETER error is
    generated.

    Returns EGL_TRUE if no error was generated.

    The command

       EGLBoolean eglGetPerfCounterInfoBRCM(EGLint group, EGLint counter,
                                            EGLuint64BRCM *minValue, EGLuint64BRCM *maxValue,
                                            EGLuint64BRCM denominator,
                                            EGLint nameStrSize, char *nameStr,
                                            EGLint unitStrSize, char *unitStr)

    returns information about an individual <counter> in a <group>. If <group> or
    <counter> are outside the valid range, an EGL_BAD_PARAMETER error is generated.

    The minimum and maximum values allowed in the counter are returned in
    <minValue> and <maxValue> respectively, providing their pointers are not NULL.

    To convert reported counter values to the units specified by <unitStr>, divide
    by <denominator>. For example <unitStr>="KB" might have <denominator>=1024 and a
    reported counter value of 2048 would represent 2KB (i.e. 2048/1024).  <minValue>
    and <maxValue> are specified in units of <unitStr>.

    <nameStr> will receive the name of the counter. Only <nameStrSize> characters
    will be copied into <nameStr> including a null terminator. The name string
    will never be longer than EGL_MAX_COUNTER_STRING_LEN_BRCM as queried by
    eglGetPerfCounterConstantBRCM.

    <unitStr> will receive a string identifying the unit of the counter.
    Only <unitStrSize> characters will be copied into <unitStr> including a null
    terminator. The unit string will never be longer than
    EGL_MAX_COUNTER_STRING_LEN_BRCM as queried by eglGetPerfCounterConstantBRCM.

    Returns EGL_TRUE if no error was generated.

    The command

      EGLBoolean eglSetPerfCountingBRCM(EGLenum pname)

    acquires, release, starts, stops or resets the counting process.

    The performance counters are treated as a system-wide resource.
    Only one client can be using them at any time. To request access to the
    counters, call with EGL_ACQUIRE_COUNTERS_BRCM. To release your exclusive access
    call with EGL_RELEASE_COUNTERS_BRCM.

    After acquistion of the counters, call eglChoosePerfCountersBRCM to enable
    the counters to collect, then:

    Pass EGL_START_COUNTERS_BRCM to start or resume the counting process.
    Pass EGL_STOP_COUNTERS_BRCM to stop the counting process.

    Note: Counters can also be reset via eglGetPerfCounterDataBRCM to ensure data
    collection and reset is atomic, avoiding any loss of data.

    Attempting to acquire counters when they are already acquired by a separate
    client will result in an EGL_BAD_ACCESS error. Attempting to release
    counters when they are not acquired will also result in EGL_BAD_ACCESS.

    Returns EGL_TRUE if no error was generated.

    The command

       EGLBoolean eglChoosePerfCountersBRCM(EGLBoolean enable,
                                            EGLint group, EGLint numCounters,
                                            EGLint *counterList)

    enables or disables (depending on the value of <enable>) a set of counters
    within the group <group>.

    <counterList> will contain <numCounters> uints, each being the index of a
    counter in the group. These counters will be enabled or disabled as
    appropriate. If <numCounters> is 0 or counterList is NULL, all the counters in
    the group are affected. When the number of enabled counters would exceed the
    maximum allowable for a group, only the first maxActiveCounters will be
    enabled.

    Calling eglChoosePerfCountersBRCM while counting is currently active will force
    an implicit reset of the counters. The new counter set will then begin
    counting immediately.

    Calling this function when the counters are not acquired by this client
    will result in a EGL_BAD_ACCESS error.

    Passing an invalid <group> index, or invalid counter indices in <counterList>
    will result in an EGL_BAD_PARAMETER error.

    Returns EGL_TRUE if no error was generated.

    The command

       EGLBoolean eglGetPerfCounterDataBRCM(EGLint dataBufferBytes,
                                           void *data, EGLint *bytesWritten,
                                           EGLboolean resetCounters)

    is used to return the enabled counter values that have been sampled.

    Since a variable number of groups and counters may be active, this function
    can also be used to query the size of the data buffer that is required
    to hold the results. Passing <data> as NULL and/or <dataBufferBytes> as 0
    will return the required number of buffer bytes in <bytesWritten>.

    When <data> is non-null, a maximum of <dataBufferBytes> will be copied into
    <data>. The format of the data in <data> will be as follows:

    For each active counter:
    --------------------------------------------------------------------
    | 32-bit group index | 32-bit counter index | 64-bit counter value |
    --------------------------------------------------------------------

    So, for example, with 10 active counters, 160 bytes will be copied into data.

    If <resetCounters> is true, the counters will be reset to zero after being
    sampled.

    Calling this function when the counters are not acquired by this client
    will result in a EGL_BAD_ACCESS error.

    Returns EGL_TRUE if no error was generated.

Errors
    EGL_BAD_PARAMETER error will be generated if eglGetPerfCounterGroupInfoBRCM is
    passed an invalid group index.

    EGL_BAD_PARAMETER error will be generated if eglGetPerfCounterInfoBRCM is
    passed an invalid group or counter index.

    EGL_BAD_PARAMETER error will be generated if eglChoosePerfCountersBRCM is
    passed an invalid group or counter index.

    EGL_BAD_ACCESS error will be generated if eglChoosePerfCountersBRCM is
    called when the counters are not acquired by this client.

    EGL_BAD_ACCESS error will be generated if eglGetPerfCounterDataBRCM is
    called when the counters are not acquired by this client.

    EGL_BAD_ACCESS error will be generated if eglSetPerfCountingBRCM is
    passed EGL_ACQUIRE_COUNTERS_BRCM and another client has the counters
    acquired.

    EGL_BAD_ACCESS error will be generated if eglSetPerfCountingBRCM is
    passed EGL_RELEASE_COUNTERS_BRCM and this client does not have the counters
    acquired.

    EGL_BAD_PARAMETER error will be generated if eglSetPerfCountingBRCM is
    passed an invalid pname.

Revision History
    #4   (Oct 6, 2014) Steve Hill
         - Clarified <denominator> usage

    #3   (Oct 2, 2014) Gary Sweet
         - Added correct enumerant values

    #2   (May 22, 2014) Gary Sweet
         - Converted to EGL extension

    #1   (April 23, 2014) Gary Sweet
         - Initial draft
