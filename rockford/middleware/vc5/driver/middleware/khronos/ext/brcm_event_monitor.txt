Name

    BRCM_event_monitor

Name Strings

    EGL_BRCM_event_monitor

Contributors

    Gary Sweet
    Steve Hill
    Roger Nixon
    Dave Emett

Contact

    Gary Sweet, Broadcom (gsweet 'at' broadcom.com)

Status

    TBD

Version

    Last Modified Date: 05/22/2014

Number

    EGL Extension #???

Dependencies

    None

Overview

    This extension enables the capture and reporting of hardware and software
    event timelines.

Issues

    Should this be an EGL extension?

      Yes, the counters are not just valid for OpenGL ES, but other APIs too.

    Add 64 bit types?

      Yes, EGL doesn't support any 64 bit types so this extension adds a
      uint64 type.

New Procedures and Functions

    EGLint eglGetEventConstantBRCM(EGLenum pname)

    EGLBoolean eglGetEventTrackInfoBRCM(EGLint track,
                                        EGLint nameStrSize, char *trackNameStr)

    EGLBoolean eglGetEventInfoBRCM(EGLint event,
                                   EGLint nameStrSize, char *nameStr,
                                   EGLint *numDataFields,
                                   EGLint *totalDataBytes)

    EGLBoolean eglGetEventDataFieldInfoBRCM(EGLint event, EGLint field,
                                            EGLint nameStrSize, char *nameStr,
                                            EGLBoolean *isSigned, EGLint *numBytes)

    EGLBoolean eglSetEventCollectionBRCM(EGLenum pname)

    EGLBoolean eglGetEventDataBRCM(EGLint dataBufferBytes,
                                   void *data, EGLint *bytesWritten,
                                   EGLBoolean *lostData,
                                   EGLuint64BRCM *timestampNow)

New Tokens

    Accepted by the <pame> parameter of eglSetPerfCountingBRCM

        EGL_ACQUIRE_EVENTS_BRCM                  0x33D0
        EGL_RELEASE_EVENTS_BRCM                  0x33D1
        EGL_START_EVENTS_BRCM                    0x33D2
        EGL_STOP_EVENTS_BRCM                     0x33D3

    Accepted by the <pname> parameter of eglGetEventConstantBRCM

        EGL_NUM_EVENT_TRACKS_BRCM                0x33D4
        EGL_NUM_EVENTS_BRCM                      0x33D5
        EGL_MAX_EVENT_STRING_LEN_BRCM            0x33D6

Addition to the EGL specification

    Add a new section called Event Capture

    An event timeline is a very useful tool to find performance bottlenecks
    in graphics code. The graphics driver may expose low level timeline data
    for hardware units and certain driver events.

    Each event in a timeline relates to an event track. A track will group
    all related events. A track might be a CPU core index for example, or a specific
    hardware unit.

    The number of tracks can be queried by passing EGL_NUM_EVENT_TRACKS_BRCM as the
    <pname> parameter to eglGetEventConstantBRCM.

    The number of events can be queried by passing EGL_NUM_EVENTS_BRCM as the
    <pname> parameter to eglGetEventConstantBRCM.

    The command

       EGLint eglGetEventConstantBRCM(EGLenum pname)

    returns an integer constant reflecting the given enum.

    The command

       EGLBoolean eglGetEventTrackInfoBRCM(EGLint track,
                                           EGLint nameStrSize, char *trackNameStr)

    returns information about a particular event track.

    For the given <track>, this function returns the name of the track.

    The track name is returned in <trackNameStr>. A maximum of <nameStrSize>
    characters will be copied into the buffer including a null termination. If
    <nameStrSize> is 0 or <trackNameStr> is NULL, no name will be returned. The
    name string will never be longer than EGL_MAX_EVENT_STRING_LEN_BRCM as queried
    by eglGetEventConstantBRCM.

    If <track> does not reference a valid track index, an EGL_BAD_PARAMETER error is
    generated.

    Returns EGL_TRUE if no error was generated.

    The command

       EGLBoolean eglGetEventInfoBRCM(EGLint event,
                                      EGLint nameStrSize, char *nameStr,
                                      EGLint *numDataFields,
                                      EGLint *totalDataBytes)

    retrieves information about an indexed <event>.

    The event name is returned in <nameStr>. A maximum of <nameStrSize>
    characters will be copied into the buffer including a null termination. If
    <nameStrSize> is 0 or <nameStr> is NULL, no name will be returned. The
    name string will never be longer than EGL_MAX_EVENT_STRING_LEN_BRCM as queried
    by eglGetEventConstantBRCM.

    Events can have arbitrary data fields associated with them. The number of
    such fields is returned in <numDataFields>.

    If <event> does not reference a valid event index, an EGL_BAD_PARAMETER error is
    generated.

    Returns EGL_TRUE if no error was generated.

    The command

       EGLBoolean eglGetEventDataFieldInfoBRCM(EGLint event, EGLint field,
                                               EGLint nameStrSize, char *nameStr,
                                               EGLBoolean *isSigned, EGLint *numBytes)

    Retrieves information about the individual data fields in an event
    descriptor. The <event> and <field> indicate the item to retrieve
    information about.

    The field name is returned in <nameStr>. A maximum of <nameStrSize>
    characters will be copied into the buffer including a null termination. If
    <nameStrSize> is 0 or <nameStr> is NULL, no name will be returned. The
    name string will never be longer than EGL_MAX_EVENT_STRING_LEN_BRCM as queried
    by eglGetEventConstantBRCM.

    If the data type of the field is signed, isSigned will be EGL_TRUE.
    If the data type of the field is unsigned, isSigned will be EGL_FALSE.

    <numBytes> indicates the size of the data type. <numBytes> of 4 equates to
    32-bit integer. <numBytes> of 8 would represent a 64-bit integer.

    If <event> or <field> do not reference valid indices, an EGL_BAD_PARAMETER error
    is generated.

    Returns EGL_TRUE if no error was generated.

    The command

       EGLBoolean eglSetEventCollectionBRCM(EGLenum pname)

    starts, stops or resets the event collection process.

    Pass EGL_ACQUIRE_EVENTS_BRCM to request exclusive access to the event sampler.
    Pass EGL_RELEASE_EVENTS_BRCM to relinquish exclusive sampler access.
    Pass EGL_START_EVENTS_BRCM to start or resume the collection process.
    Pass EGL_STOP_EVENTS_BRCM to stop the collection process.

    Note: The collection buffer will be cleared via eglGetEventDataBRCM to ensure data
    collection and reset is atomic, avoiding any loss of data.

    If <pname> is not one of the accepted values, an EGL_BAD_PARAMETER error
    is generated.

    If the event sampler is acquired by another client when 'acquire' is requested
    an EGL_BAD_ACCESS error will be generated.

    Returns EGL_TRUE if no error was generated.

    The command

       EGLBoolean eglGetEventDataBRCM(EGLint dataBufferBytes,
                                      void *data, EGLint *bytesWritten,
                                      EGLBoolean *lostData,
                                      EGLuint64BRCM *timestampNow)

    is used to return the event data values that have been collected.

    Since a variable number of groups and counters may be active, this function
    can also be used to query the size of the data buffer that is required
    to hold the results. Passing <data> as NULL and/or <dataBufferBytes> as 0
    will return the required number of buffer bytes in <bytesWritten>.

    When <data> is non-null, a maximum of <dataBufferBytes> will be copied into
    <data> and the event buffer will be reset. Data not collected by this
    call will be available when called again.

    The format of the data in <data> will be as follows:

    For each event:
    -------------------------------------------------------------------------
    |   64-bit  | 32-bit | 32-bit |   32-bit    |   32-bit   |   variable   |
    | timestamp | track  |   id   | event index | event type | <field_data> |
    -------------------------------------------------------------------------

    The timestamp is a 64-bit unsigned integer representing a number of
    microseconds. The <timestampNow> argument will be filled with the timestamp
    at which the call to the function was made. Using these two values you can
    calculate the absolute time at which the event occurred :
    (timestampNow - timestamp) microseconds ago.

    The <track> field indicates which event track this event relates to.

    The <id> field allows you to match up begin and end events. A begin and end
    for an event will share the same id.

    The event index refers to one of the events enumerated using eglGetEventInfoBRCM.

    The event type will be one of:

        0 - marking the beginning of an event
        1 - marking the end of an event
        2 - marking an event with no timespan

    The field data will consist of a variable number of bytes depending on the
    event. eglGetEventInfoBRCM and eglGetEventDataFieldInfo describe the data that
    makes up the field data block. <totalDataBytes> from eglGetEventInfoBRCM tell
    you exactly how many bytes make up the data, and eglGetEventDataFieldInfo will
    tell you how those bytes are composed.

    <lostData> will be set to true if any of the internal buffers have
    wrapped or been capped since last collected. This will indicate that
    the data is incomplete in some way. You should poll for data more often.

    <lostData> and <timestampNow> may be NULL, in which case they are ignored.

    Returns EGL_TRUE if no error was generated.

Errors
    EGL_BAD_PARAMETER error will be generated if eglGetEventTrackInfoBRCM is
    passed an invalid track index.

    EGL_BAD_PARAMETER error will be generated if eglGetEventDataFieldInfoBRCM is
    passed an invalid event or field index.

    EGL_BAD_PARAMETER error will be generated if eglSetEventCollectionBRCM is
    passed an invalid pname.

    EGL_BAD_ACCESS error will be generated if another client has
    exclusive access when you try to acquire the samplers.

Revision History

    #3   (Oct 2, 2014) Gary Sweet
         - Added correct enumerant values

    #2   (May 22, 2014) Gary Sweet
         - Converted to EGL extension

    #1   (April 23, 2014) Gary Sweet
         - Initial draft
