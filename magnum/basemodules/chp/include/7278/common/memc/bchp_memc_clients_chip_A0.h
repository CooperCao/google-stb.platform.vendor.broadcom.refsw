/***************************************************************************
 * Copyright (C) 2016 Broadcom.  The term "Broadcom" refers to Broadcom Limited and/or its subsidiaries.
 *
 * This program is the proprietary software of Broadcom and/or its licensors,
 * and may only be used, duplicated, modified or distributed pursuant to the terms and
 * conditions of a separate, written license agreement executed between you and Broadcom
 * (an "Authorized License").  Except as set forth in an Authorized License, Broadcom grants
 * no license (express or implied), right to use, or waiver of any kind with respect to the
 * Software, and Broadcom expressly reserves all rights in and to the Software and all
 * intellectual property rights therein.  IF YOU HAVE NO AUTHORIZED LICENSE, THEN YOU
 * HAVE NO RIGHT TO USE THIS SOFTWARE IN ANY WAY, AND SHOULD IMMEDIATELY
 * NOTIFY BROADCOM AND DISCONTINUE ALL USE OF THE SOFTWARE.
 *
 * Except as expressly set forth in the Authorized License,
 *
 * 1.     This program, including its structure, sequence and organization, constitutes the valuable trade
 * secrets of Broadcom, and you shall use all reasonable efforts to protect the confidentiality thereof,
 * and to use this information only in connection with your use of Broadcom integrated circuit products.
 *
 * 2.     TO THE MAXIMUM EXTENT PERMITTED BY LAW, THE SOFTWARE IS PROVIDED "AS IS"
 * AND WITH ALL FAULTS AND BROADCOM MAKES NO PROMISES, REPRESENTATIONS OR
 * WARRANTIES, EITHER EXPRESS, IMPLIED, STATUTORY, OR OTHERWISE, WITH RESPECT TO
 * THE SOFTWARE.  BROADCOM SPECIFICALLY DISCLAIMS ANY AND ALL IMPLIED WARRANTIES
 * OF TITLE, MERCHANTABILITY, NONINFRINGEMENT, FITNESS FOR A PARTICULAR PURPOSE,
 * LACK OF VIRUSES, ACCURACY OR COMPLETENESS, QUIET ENJOYMENT, QUIET POSSESSION
 * OR CORRESPONDENCE TO DESCRIPTION. YOU ASSUME THE ENTIRE RISK ARISING OUT OF
 * USE OR PERFORMANCE OF THE SOFTWARE.
 *
 * 3.     TO THE MAXIMUM EXTENT PERMITTED BY LAW, IN NO EVENT SHALL BROADCOM OR ITS
 * LICENSORS BE LIABLE FOR (i) CONSEQUENTIAL, INCIDENTAL, SPECIAL, INDIRECT, OR
 * EXEMPLARY DAMAGES WHATSOEVER ARISING OUT OF OR IN ANY WAY RELATING TO YOUR
 * USE OF OR INABILITY TO USE THE SOFTWARE EVEN IF BROADCOM HAS BEEN ADVISED OF
 * THE POSSIBILITY OF SUCH DAMAGES; OR (ii) ANY AMOUNT IN EXCESS OF THE AMOUNT
 * ACTUALLY PAID FOR THE SOFTWARE ITSELF OR U.S. $1, WHICHEVER IS GREATER. THESE
 * LIMITATIONS SHALL APPLY NOTWITHSTANDING ANY FAILURE OF ESSENTIAL PURPOSE OF
 * ANY LIMITED REMEDY.
 *
 * Module Description:
 *
 ***************************************************************************/


/* this file should not be directly included by unprepared code, but properly constructed code included it multiple times  */
/* ************** THIS FILE IS AUTOGENERATED. DO NOT EDIT **************************/
/*****
GENERATED by:
perl magnum/basemodules/chp/src/common/bchp_memc_clients_chip.pl magnum/basemodules/chp/include/7278/common/memc/bchp_memc_clients_chip_A0.txt magnum/basemodules/chp/include/7278/common/memc/bchp_memc_clients_chip_A0.h
*******/
/* # entries copied (as 'select' -> copy -> 'paste into this file')  from '7278A0 SCB client list'(scb_clients.xls) linked on http://confluence.broadcom.com/display/BCM7278/Documents */
/* # 7278A0 Clients */
/* #    DDR0 Client# DDR1 Client# Comments */
BCHP_P_MEMC_DEFINE_CLIENT(XPT_WR_TUNER_RS,0,0)              /* XMEM IF write */
BCHP_P_MEMC_DEFINE_CLIENT(XPT_WR_CARD_RS,1,1)               /* XMEM IF write */
BCHP_P_MEMC_DEFINE_CLIENT(XPT_WR_CDB,2,2)                   /* XMEM IF write */
BCHP_P_MEMC_DEFINE_CLIENT(XPT_WR_ITB_MSG,3,3)               /* XMEM IF write */
BCHP_P_MEMC_DEFINE_CLIENT(XPT_RD_RS,4,4)                    /* XMEM IF read */
BCHP_P_MEMC_DEFINE_CLIENT(XPT_RD_CARD_RS,5,5)               /* XMEM IF read */
BCHP_P_MEMC_DEFINE_CLIENT(XPT_RD_PB,6,6)                    /* XMEM IF read */
BCHP_P_MEMC_DEFINE_CLIENT(XPT_WR_MEMDMA,7,7)                /* M2M DMA write */
BCHP_P_MEMC_DEFINE_CLIENT(XPT_RD_MEMDMA,8,8)                /* M2M DMA read */
/*  */
BCHP_P_MEMC_DEFINE_CLIENT(SYSPORT_WR,10,10)                 /* 10/100/1000/2000 network switch interface (Write port, Rx) */
BCHP_P_MEMC_DEFINE_CLIENT(SYSPORT_RD,11,11)                 /* 10/100/1000/2000 network switch interface (Read port, Tx) */
/*  */
BCHP_P_MEMC_DEFINE_CLIENT(PCIE_1,15,15)                     /* PCIe - 2nd instance */
/*  */
BCHP_P_MEMC_DEFINE_CLIENT(SATA,17,17)                       /* SATA - First (and only) controller/port */
/*  */
BCHP_P_MEMC_DEFINE_CLIENT(BSP,22,22)                        /* Broadcom Security Processor  (R/W)- Must be 22 */
BCHP_P_MEMC_DEFINE_CLIENT(SCPU,23,23)                       /* Sage CPU (R/W)- Must be 23 */
BCHP_P_MEMC_DEFINE_CLIENT(FLASH_DMA,24,24)                  /* FLASH_DMA replaces EDU */
BCHP_P_MEMC_DEFINE_CLIENT(PCIE_0,25,25)                     /* PCIe - 1st instance */
BCHP_P_MEMC_DEFINE_CLIENT(SDIO_EMMC,26,26)                  /* SDIO eMMC - client is for boot code storage/retrieval */
BCHP_P_MEMC_DEFINE_CLIENT(SDIO_CARD,27,27)                  /* SDIO  Card - client is for WIFI and video/audio  storage/playback */
/*  */
BCHP_P_MEMC_DEFINE_CLIENT(MCIF_RD,29,29)                    /* M-Card, 1st (and only) port (read), (cablecard) */
BCHP_P_MEMC_DEFINE_CLIENT(MCIF_WR,30,30)                    /* M-Card, 1st (and only) port (write), (cablecard) */
BCHP_P_MEMC_DEFINE_CLIENT(UART_DMA_RD,31,31)                /* UART_DMA (for Bluetooth interaction) */
BCHP_P_MEMC_DEFINE_CLIENT(UART_DMA_WR,32,32)                /* UART_DMA (for Bluetooth interaction) */
/*  */
BCHP_P_MEMC_DEFINE_CLIENT(USB_X_WRITE_0,35,35)              /* (USB 3.0/2.0/1.0) carries XHCI Write traffic for first USB controller. Controller drives 2 ports. */
BCHP_P_MEMC_DEFINE_CLIENT(USB_X_READ_0,36,36)               /* (USB 3.0/2.0/1.0)  carries XHCI Read traffic for first USB controller. Controller drives 2 ports. */
BCHP_P_MEMC_DEFINE_CLIENT(USB_X_CTRL_0,37,37)               /* (USB 3.0/2.0/1.0) carries XHCI Control traffic for first USB controller. Controller drives 2 ports. */
/*  */
BCHP_P_MEMC_DEFINE_CLIENT(RAAGA,40,40)                      /* RAAGA audio engine - instance 0 */
BCHP_P_MEMC_DEFINE_CLIENT(RAAGA_1,41,41)                    /* RAAGA audio engine - instance 0 / selective RTS */
/*  */
BCHP_P_MEMC_DEFINE_CLIENT(AUD_AIO,44,44)                    /* Audio Analog IO */
BCHP_P_MEMC_DEFINE_CLIENT(VICE_CME0,45,45)                  /* ViCE instance 0 - read only. Input and reference picture luma */
BCHP_P_MEMC_DEFINE_CLIENT(VICE_CME1,46,46)                  /* ViCE instance 0 - write only. CMV, SAD, Confidence values */
BCHP_P_MEMC_DEFINE_CLIENT(VICE_FME,47,47)                   /* ViCE instance 0 - CSC & TMVP reads, TMVP writes */
/*  */
BCHP_P_MEMC_DEFINE_CLIENT(VICE_IMD0,49,49)                  /* ViCE instance 0 - read only. CMB luma */
BCHP_P_MEMC_DEFINE_CLIENT(VICE_IMD1,50,50)                  /* ViCE instance 0 - read only. CMB chroma */
BCHP_P_MEMC_DEFINE_CLIENT(VICE_DBLK,51,51)                  /* ViCE instance 0 - write only. Deblocked, reconstructed MBs */
BCHP_P_MEMC_DEFINE_CLIENT(VICE_CABAC0,52,52)                /* ViCE instance 0 - write only. CABAC0 writes ITB to SCB0. (All clear compressed data must be on SCB0) */
BCHP_P_MEMC_DEFINE_CLIENT(VICE_CABAC1,53,53)                /* ViCE instance 0 - R/W (CDB and PROB CTX) */
BCHP_P_MEMC_DEFINE_CLIENT(VICE_ARCSS0,54,54)                /* ViCE instance 0 - read/write. Firmware code and data */
BCHP_P_MEMC_DEFINE_CLIENT(VICE_VIP0_INST0,55,55)            /* ViCE instance 0 - First VIP instance for dual transcode. write only. Luma and 420 chroma */
BCHP_P_MEMC_DEFINE_CLIENT(VICE_VIP1_INST0,56,56)            /* ViCE instance 0 - First VIP instance for dual transcode.  read/write. Write: 2h2v_luma, 2h1v_luma. Read: pcc_luma, hist_luma */
BCHP_P_MEMC_DEFINE_CLIENT(VICE_VIP0_INST1,57,57)            /* ViCE instance 0 - Second VIP instance for dual transcode. write only. Luma and 420 chroma */
BCHP_P_MEMC_DEFINE_CLIENT(VICE_VIP1_INST1,58,58)            /* ViCE instance 0 - Second VIP instance for dual transcode. read/write. Write: 2h2v_luma, 2h1v_luma. Read: pcc_luma, hist_luma */
/*  */
BCHP_P_MEMC_DEFINE_CLIENT(HVD0_DBLK,73,73)                  /* HVD0 Deblock Writes */
BCHP_P_MEMC_DEFINE_CLIENT(HVD0_DBLK1,74,74)                 /* HVD0 Deblock Writes / alternate blockout */
BCHP_P_MEMC_DEFINE_CLIENT(HVD0_ILCPU,75,75)                 /* HVD0 Inner Loop ARC */
BCHP_P_MEMC_DEFINE_CLIENT(HVD0_OLCPU,76,76)                 /* HVD0 Outer Loop ARC */
BCHP_P_MEMC_DEFINE_CLIENT(HVD0_CAB,77,77)                   /* HVD0 CABAC */
BCHP_P_MEMC_DEFINE_CLIENT(HVD0_ILSI,78,78)                  /* HVD0 IL Symbol read */
BCHP_P_MEMC_DEFINE_CLIENT(HVD0_ILCPU_p2,79,79)              /* HVD0 Inner Loop ARC, 2nd pipeline */
BCHP_P_MEMC_DEFINE_CLIENT(HVD0_ILSI_p2,80,80)               /* HVD0 IL Symbol read, 2nd pipeline */
BCHP_P_MEMC_DEFINE_CLIENT(HVD1_DBLK,81,81)                  /* HVD1 Deblock Writes */
BCHP_P_MEMC_DEFINE_CLIENT(HVD1_DBLK1,82,82)                 /* HVD1 Deblock Writes / alternate blockout */
BCHP_P_MEMC_DEFINE_CLIENT(HVD1_ILCPU,83,83)                 /* HVD1 Inner Loop ARC */
BCHP_P_MEMC_DEFINE_CLIENT(HVD1_OLCPU,84,84)                 /* HVD1 Outer Loop ARC */
BCHP_P_MEMC_DEFINE_CLIENT(HVD1_CAB,85,85)                   /* HVD1 CABAC */
BCHP_P_MEMC_DEFINE_CLIENT(HVD1_ILSI,86,86)                  /* HVD1 IL Symbol read */
/*  */
/*  */
BCHP_P_MEMC_DEFINE_CLIENT(BVN_MAD_PIX_FD,94,94)             /* MAD_R pixel feed (read) (instance 0); 6x Multi-context De-interlacer */
BCHP_P_MEMC_DEFINE_CLIENT(BVN_MAD_QUANT,95,95)              /* MAD_R quant motion history (R/W) (instance 0) */
BCHP_P_MEMC_DEFINE_CLIENT(BVN_MAD_PIX_CAP,96,96)            /* MAD_R pixel capture (write) (instance 0) */
BCHP_P_MEMC_DEFINE_CLIENT(BVN_MAD1_PIX_FD,97,97)            /* MAD_R pixel feed (read) (instance 1); Dedicated to xcode */
BCHP_P_MEMC_DEFINE_CLIENT(BVN_MAD1_QUANT,98,98)             /* MAD_R quant motion history (R/W) (instance 1) */
BCHP_P_MEMC_DEFINE_CLIENT(BVN_MAD1_PIX_CAP,99,99)           /* MAD_R pixel capture (write) (instance 1) */
BCHP_P_MEMC_DEFINE_CLIENT(BVN_MAD2_PIX_FD,100,100)          /* MAD_R pixel feed (read) (instance 2); Dedicated to xcode */
BCHP_P_MEMC_DEFINE_CLIENT(BVN_MAD2_QUANT,101,101)           /* MAD_R quant motion history (R/W) (instance 2) */
BCHP_P_MEMC_DEFINE_CLIENT(BVN_MAD2_PIX_CAP,102,102)         /* MAD_R pixel capture (write) (instance 2) */
/*  */
BCHP_P_MEMC_DEFINE_CLIENT(BVN_MFD0,106,106)                 /* MPEG feeders have access to all DRAMs (instance 0) */
BCHP_P_MEMC_DEFINE_CLIENT(BVN_MFD0_1,107,107)               /* MFD Alternate blockout (instance 0) */
BCHP_P_MEMC_DEFINE_CLIENT(BVN_MFD1,108,108)                 /* MPEG feeders have access to all DRAMs (instance 1) */
BCHP_P_MEMC_DEFINE_CLIENT(BVN_MFD1_1,109,109)               /* MFD Alternate blockout (instance 1) */
BCHP_P_MEMC_DEFINE_CLIENT(BVN_MFD2,110,110)                 /* MPEG feeders have access to all DRAMs (instance 2) */
BCHP_P_MEMC_DEFINE_CLIENT(BVN_MFD2_1,111,111)               /* MFD Alternate blockout (instance 2) */
BCHP_P_MEMC_DEFINE_CLIENT(BVN_MFD3,112,112)                 /* MPEG feeders have access to all DRAMs (instance 3) */
BCHP_P_MEMC_DEFINE_CLIENT(BVN_MFD3_1,113,113)               /* MFD Alternate blockout (instance 3) */
/*  */
BCHP_P_MEMC_DEFINE_CLIENT(BVN_VFD0,118,118)                 /* Video feeder (instance 0) */
BCHP_P_MEMC_DEFINE_CLIENT(BVN_VFD1,119,119)                 /* Video feeder (instance 1) */
BCHP_P_MEMC_DEFINE_CLIENT(BVN_VFD2,120,120)                 /* Video feeder (instance 2) */
BCHP_P_MEMC_DEFINE_CLIENT(BVN_VFD3,121,121)                 /* Video feeder (instance 3) */
/*  */
BCHP_P_MEMC_DEFINE_CLIENT(BVN_CAP0,126,126)                 /* Video capture (instance 0) */
BCHP_P_MEMC_DEFINE_CLIENT(BVN_CAP1,127,127)                 /* Video capture (instance 1) */
BCHP_P_MEMC_DEFINE_CLIENT(BVN_CAP2,128,128)                 /* Video capture (instance 2) */
BCHP_P_MEMC_DEFINE_CLIENT(BVN_CAP3,129,129)                 /* Video capture (instance 3) */
/*  */
BCHP_P_MEMC_DEFINE_CLIENT(BVN_GFD0,134,134)                 /* Graphic feeder (instance 0) */
BCHP_P_MEMC_DEFINE_CLIENT(BVN_GFD1,135,135)                 /* Graphic feeder (instance 1) */
BCHP_P_MEMC_DEFINE_CLIENT(BVN_GFD2,136,136)                 /* Graphic feeder (instance 2) */
BCHP_P_MEMC_DEFINE_CLIENT(BVN_GFD3,137,137)                 /* Graphic feeder (instance 3) */
/*  */
BCHP_P_MEMC_DEFINE_CLIENT(BVN_MCVP0,141,141)                /* MCVP client 0; 6x Multi-context De-interlacer */
BCHP_P_MEMC_DEFINE_CLIENT(BVN_MCVP1,142,142)                /* MCVP client 1 */
BCHP_P_MEMC_DEFINE_CLIENT(BVN_MCVP2,143,143)                /* MCVP client 2 */
BCHP_P_MEMC_DEFINE_CLIENT(BVN_RDC,144,144)                  /* RDC */
BCHP_P_MEMC_DEFINE_CLIENT(VEC_VBI_ENC0,145,145)             /* TTX0 -- assigned to VBI path 0 (typically IT_0, HD/component display) and arbitrated with ITU656 path 0 */
BCHP_P_MEMC_DEFINE_CLIENT(VEC_LUT_LD,146,146)               /* HDR LUT Refill Client */
BCHP_P_MEMC_DEFINE_CLIENT(M2MC_0,147,147)                   /* 2D graphics - port 0 - client "0" */
BCHP_P_MEMC_DEFINE_CLIENT(M2MC_1,148,148)                   /* 2D graphics - port 0 - client "1" */
BCHP_P_MEMC_DEFINE_CLIENT(M2MC_2,149,149)                   /* 2D graphics - port 0 - client "2" */
/*  */
BCHP_P_MEMC_DEFINE_CLIENT(HVD0_DBLK_p2,155,155)             /* HVD0 Deblock Writes, 2nd pipeline */
BCHP_P_MEMC_DEFINE_CLIENT(HVD0_DBLK1_p2,156,156)            /* HVD0 Deblock Writes / alternate blockout, 2nd pipeline */
/*  */
BCHP_P_MEMC_DEFINE_CLIENT(M2MC1_0,160,160)                  /* 2D graphics - port 1 - client "0" */
BCHP_P_MEMC_DEFINE_CLIENT(M2MC1_1,161,161)                  /* 2D graphics - port 1 - client "1" */
BCHP_P_MEMC_DEFINE_CLIENT(M2MC1_2,162,162)                  /* 2D graphics - port 1 - client "2" */
BCHP_P_MEMC_DEFINE_CLIENT(MM_M2MC_0,163,163)                /* 2D graphics - instance Mip-Map - client "0" */
BCHP_P_MEMC_DEFINE_CLIENT(MM_M2MC_1,164,164)                /* 2D graphics - instance Mip-Map - client "1" */
BCHP_P_MEMC_DEFINE_CLIENT(MM_M2MC_2,165,165)                /* 2D graphics - instance Mip-Map - client "2" */
BCHP_P_MEMC_DEFINE_CLIENT(CMP0,166,166)                     /* CMP0/HDR LUT Refill Client */
BCHP_P_MEMC_DEFINE_CLIENT(HVD1_DBLK_p2,167,167)             /* HVD1 Deblock Writes, 2nd pipeline */
BCHP_P_MEMC_DEFINE_CLIENT(HVD1_DBLK1_p2,168,168)            /* HVD1 Deblock Writes / alternate blockout, 2nd pipeline */
BCHP_P_MEMC_DEFINE_CLIENT(HVD1_ILCPU_p2,169,169)            /* HVD1 Inner Loop ARC, 2nd pipeline */
BCHP_P_MEMC_DEFINE_CLIENT(HVD1_ILSI_p2,170,170)             /* HVD1 IL Symbol read, 2nd pipeline */
/*  */
BCHP_P_MEMC_DEFINE_CLIENT(ASP_WR_ARCSS_DDMA1,172,172)       /* XMEM IF write */
BCHP_P_MEMC_DEFINE_CLIENT(ASP_WR_ARCSS_DDMA2,173,173)       /* XMEM IF write */
BCHP_P_MEMC_DEFINE_CLIENT(ASP_WR_EDPKT_AVIN,174,174)        /* XMEM IF write */
BCHP_P_MEMC_DEFINE_CLIENT(ASP_WR_EPKT_AVRTR,175,175)        /* XMEM IF write */
BCHP_P_MEMC_DEFINE_CLIENT(ASP_RD_ARCSS_DDMA1,176,176)       /* XMEM IF read */
BCHP_P_MEMC_DEFINE_CLIENT(ASP_RD_ARCSS_DDMA2,177,177)       /* XMEM IF read */
BCHP_P_MEMC_DEFINE_CLIENT(ASP_RD_MCPB_AVOUT,178,178)        /* XMEM IF read */
BCHP_P_MEMC_DEFINE_CLIENT(ASP_RD_EDPKT_AVHDR,179,179)       /* XMEM IF read */
/*  */
BCHP_P_MEMC_DEFINE_CLIENT(USB_BDC,180,180)                  /* USB BDC port */
BCHP_P_MEMC_DEFINE_CLIENT(WiFi_SYSPORT_WR,181,181)          /* WiFi- 10/100/1000/2000 network switch interface (Write port, Rx) */
BCHP_P_MEMC_DEFINE_CLIENT(WiFi_SYSPORT_RD,182,182)          /* WiFi- 10/100/1000/2000 network switch interface (Read port, Tx) */
/*  */
/*  */
/*  */
/*  */
/*  */
BCHP_P_MEMC_DEFINE_CLIENT(BSP_CPU,199,199)                  /* BSP CPU (R/W) - Must be 199  (reserved for A0) */
BCHP_P_MEMC_DEFINE_CLIENT(HOST_CPU_MCP_R_HI,200,200)        /* Host CPU MCP read client - high priority */
BCHP_P_MEMC_DEFINE_CLIENT(HOST_CPU_MCP_R_LO,201,201)        /* Host CPU MCP read client - low priority */
BCHP_P_MEMC_DEFINE_CLIENT(HOST_CPU_MCP_W_HI,202,202)        /* Host CPU MCP write client - high priority */
BCHP_P_MEMC_DEFINE_CLIENT(HOST_CPU_MCP_W_LO,203,203)        /* Host CPU MCP write client - low priority */
BCHP_P_MEMC_DEFINE_CLIENT(V3D_MCP_R_HI,204,204)             /* V3D (VC6 graphics core) MCP read client - high priority */
BCHP_P_MEMC_DEFINE_CLIENT(V3D_MCP_R_LO,205,205)             /* V3D (VC6 graphics core) MCP read client - low priority */
BCHP_P_MEMC_DEFINE_CLIENT(V3D_MCP_W_HI,206,206)             /* V3D (VC6 graphics core) MCP write client (tile buffer writes) - high priority */
BCHP_P_MEMC_DEFINE_CLIENT(V3D_MCP_W_LO,207,207)             /* V3D (VC6 graphics core) MCP write client (tile buffer writes) - low priority */
/*             Unused UBUS */
/*  */
BCHP_P_MEMC_DEFINE_CLIENT(HVD0_MOCOMP,216,216)              /* HVD0 PFRI / MOCOMP */
BCHP_P_MEMC_DEFINE_CLIENT(HVD1_MOCOMP,217,217)              /* HVD1 PFRI / MOCOMP */
BCHP_P_MEMC_DEFINE_CLIENT(VICE_PFRI,218,218)                /* VICE3v1 instance 0 PFRI (required + optional) */
/*  */
/*             Unused LMB */
/*  */
BCHP_P_MEMC_DEFINE_CLIENT(TRACELOG,248,248)                 /* TraceLog */
BCHP_P_MEMC_DEFINE_CLIENT(DTU_SCRUBBER,249,249)             /* DTU Scrubber client - Write Only */
BCHP_P_MEMC_DEFINE_CLIENT(ZCQS_ENGINE,250,250)              /* DRAM ZQ Calibration Short client */
BCHP_P_MEMC_DEFINE_CLIENT(MSA,251,251)                      /* MSA (Memory Soft Access) */
BCHP_P_MEMC_DEFINE_CLIENT(DIS0,252,252)                     /* DIS (DRAM Interface Stress) #0 */
BCHP_P_MEMC_DEFINE_CLIENT(DIS1,253,253)                     /* DIS (DRAM Interface Stress) #1 */
BCHP_P_MEMC_DEFINE_CLIENT(DRAM_INIT_ZQCS,254,254)           /* DRAM Init (Being updated to ZQCS) */
BCHP_P_MEMC_DEFINE_CLIENT(REFRESH,255,255)                  /* Refresh */
/*  */
