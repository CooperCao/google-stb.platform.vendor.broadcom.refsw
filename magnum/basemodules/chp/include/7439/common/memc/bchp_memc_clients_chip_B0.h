/***************************************************************************
 *     Copyright (c) 2003-2013, Broadcom Corporation
 *     All Rights Reserved
 *     Confidential Property of Broadcom Corporation
 *
 *  THIS SOFTWARE MAY ONLY BE USED SUBJECT TO AN EXECUTED SOFTWARE LICENSE
 *  AGREEMENT  BETWEEN THE USER AND BROADCOM.  YOU HAVE NO RIGHT TO USE OR
 *  EXPLOIT THIS MATERIAL EXCEPT SUBJECT TO THE TERMS OF SUCH AN AGREEMENT.
 *
 * $brcm_Workfile: $
 * $brcm_Revision: $
 * $brcm_Date: $
 *
 * Module Description:
 *
 * Revision History:
 *
 * $brcm_Log: $
 *
 ***************************************************************************/


/* this file should not be directly included by unprepared code, but properly constructed code included it multiple times  */
/* ************** THIS FILE IS AUTOGENERATED. DO NOT EDIT **************************/
/*****
GENERATED by:
perl magnum/basemodules/chp/src/common/bchp_memc_clients_chip.pl magnum/basemodules/chp/include/7439/common/memc/bchp_memc_clients_chip_B0.txt magnum/basemodules/chp/include/7439/common/memc/bchp_memc_clients_chip_B0.h
*******/
/* # entries copied (as 'select' -> copy -> 'paste into this file')  from '7439B0 SCB client list'(scb_clients_7439B0.xls) linked on http://bcgbu.broadcom.com/DVT/bcm7439 */
/* # Client Name    7439B0        Comments */
/* #    DDR0 Client#    "DDR1 Client#" */
BCHP_P_MEMC_DEFINE_CLIENT(XPT_WR_RS,0,0)                    /* XMEM IF write */
BCHP_P_MEMC_DEFINE_CLIENT(XPT_WR_XC,1,1)                    /* XMEM IF write */
BCHP_P_MEMC_DEFINE_CLIENT(XPT_WR_CDB,2,2)                   /* XMEM IF write */
BCHP_P_MEMC_DEFINE_CLIENT(XPT_WR_ITB_MSG,3,3)               /* XMEM IF write */
BCHP_P_MEMC_DEFINE_CLIENT(XPT_RD_RS,4,4)                    /* XMEM IF read */
BCHP_P_MEMC_DEFINE_CLIENT(XPT_RD_XC_RMX_MSG,5,5)            /* XMEM IF read */
BCHP_P_MEMC_DEFINE_CLIENT(XPT_RD_XC_RAVE,6,6)               /* XMEM IF read */
BCHP_P_MEMC_DEFINE_CLIENT(XPT_RD_PB,7,7)                    /* XMEM IF read */
BCHP_P_MEMC_DEFINE_CLIENT(XPT_WR_MEMDMA,8,8)                /* M2M DMA write */
BCHP_P_MEMC_DEFINE_CLIENT(XPT_RD_MEMDMA,9,9)                /* M2M DMA read */
BCHP_P_MEMC_DEFINE_CLIENT(GENET0_WR,10,10)                  /* Internal 10/100/1000 GPHY */
BCHP_P_MEMC_DEFINE_CLIENT(GENET0_RD,11,11)                  /* Internal 10/100/1000 GPHY */
BCHP_P_MEMC_DEFINE_CLIENT(GENET1_WR,12,12)                  /* Internal MoCA */
BCHP_P_MEMC_DEFINE_CLIENT(GENET1_RD,13,13)                  /* Internal MoCA */
BCHP_P_MEMC_DEFINE_CLIENT(GENET2_WR,14,14)                  /* external 10/100/1000 GPHY, HPNA, HomePlug or similar. (RGMII) */
BCHP_P_MEMC_DEFINE_CLIENT(GENET2_RD,15,15)                  /* external 10/100/1000 GPHY, HPNA, HomePlug or similar. (RGMII) */
BCHP_P_MEMC_DEFINE_CLIENT(MOCA_MIPS,16,16)                  /* This client is MOCA DMA which is used to load IMEM during boot time and during Host-MoCA message echange */
BCHP_P_MEMC_DEFINE_CLIENT(SATA,17,17)                       /* SATA - First controller/port */
BCHP_P_MEMC_DEFINE_CLIENT(SATA_1,18,18)                     /* SATA - Second controller/port */
BCHP_P_MEMC_DEFINE_CLIENT(MCIF1_RD,19,INVALID)              /*     M-Card, 2nd port (read), (cablecard) */
BCHP_P_MEMC_DEFINE_CLIENT(MCIF1_WR,20,INVALID)              /*     M-Card, 2nd port (write), (cablecard) */
BCHP_P_MEMC_DEFINE_CLIENT(PCIE_1,21,21)                     /* PCIe - 2nd instance */
BCHP_P_MEMC_DEFINE_CLIENT(BSP,22,22)                        /* Broadcom Security Processor - Must be 22 */
BCHP_P_MEMC_DEFINE_CLIENT(SCPU,23,23)                       /* Sage CPU - Must be 23 */
BCHP_P_MEMC_DEFINE_CLIENT(FLASH_DMA,24,24)                  /* FLASH_DMA replaces EDU */
BCHP_P_MEMC_DEFINE_CLIENT(PCIE,25,25)                       /* PCIe - 1st instance */
BCHP_P_MEMC_DEFINE_CLIENT(SDIO_EMMC,26,26)                  /* SDIO eMMC - client is for boot code storage/retrieval */
BCHP_P_MEMC_DEFINE_CLIENT(SDIO_CARD,27,27)                  /* SDIO  Card - client is for WIFI and video/audio  storage/playback */
BCHP_P_MEMC_DEFINE_CLIENT(TPCAP,28,INVALID)                 /*     Test Port Capture */
BCHP_P_MEMC_DEFINE_CLIENT(MCIF_RD,29,INVALID)               /*     M-Card, 1st port (read), (cablecard) */
BCHP_P_MEMC_DEFINE_CLIENT(MCIF_WR,30,INVALID)               /*     M-Card, 1st port (write), (cablecard) */
BCHP_P_MEMC_DEFINE_CLIENT(UART_DMA_RD,31,INVALID)           /*     UART_DMA (for Bluetooth interaction) */
BCHP_P_MEMC_DEFINE_CLIENT(UART_DMA_WR,32,INVALID)           /*     UART_DMA (for Bluetooth interaction) */
BCHP_P_MEMC_DEFINE_CLIENT(USB_HI_0,33,33)                   /* Also called "USB_20", carries EHCI traffic for first USB controller. Controller drives 2 ports. */
BCHP_P_MEMC_DEFINE_CLIENT(USB_LO_0,34,34)                   /* Also called "USB_11", carries OHCI traffic for first USB controller. Controller drives 2 portss. */
BCHP_P_MEMC_DEFINE_CLIENT(USB_X_WRITE_0,35,35)              /* (USB 3.0) carries XHCI Write traffic for first USB controller. Controller drives 2 ports. */
BCHP_P_MEMC_DEFINE_CLIENT(USB_X_READ_0,36,36)               /* (USB 3.0) carries XHCI Read traffic for first USB controller. Controller drives 2 ports. */
BCHP_P_MEMC_DEFINE_CLIENT(USB_X_CTRL_0,37,37)               /* (USB 3.0) carries XHCI Control traffic for first USB controller. Controller drives 2 ports. */


BCHP_P_MEMC_DEFINE_CLIENT(RAAGA,40,40)                      /* RAAGA audio engine - instance 0 */
BCHP_P_MEMC_DEFINE_CLIENT(RAAGA_1,41,41)                    /* RAAGA audio engine - instance 0 / selective RTS */
/*  */
/*  */
BCHP_P_MEMC_DEFINE_CLIENT(AUD_AIO,44,44)                    /* Audio Analog IO */
BCHP_P_MEMC_DEFINE_CLIENT(VICE_CME0,45,45)                  /* ViCE instance 0 - read only. Input and reference picture luma */
BCHP_P_MEMC_DEFINE_CLIENT(VICE_CME1,46,46)                  /* ViCE instance 0 - write only. CMV, SAD, Confidence values */
BCHP_P_MEMC_DEFINE_CLIENT(VICE_FME0,47,47)                  /* ViCE instance 0 - read only. CMV, SAD, Confidence values */
BCHP_P_MEMC_DEFINE_CLIENT(VICE_FME1,48,48)                  /* ViCE instance 0 - read only. CMB luma */
BCHP_P_MEMC_DEFINE_CLIENT(VICE_FME2,49,49)                  /* ViCE instance 0 - read only. CMB chroma */
BCHP_P_MEMC_DEFINE_CLIENT(VICE_SG,50,INVALID)               /*     ViCE instance 0 - write only. Coded bits / bins */
BCHP_P_MEMC_DEFINE_CLIENT(VICE_DBLK,51,51)                  /* ViCE instance 0 - write only. Deblocked, reconstructed MBs */
BCHP_P_MEMC_DEFINE_CLIENT(VICE_CABAC0,52,INVALID)           /*     ViCE instance 0 - write only. CABAC0 writes final bitstream to SCB0. (All clear compressed data must be on SCB0) */
BCHP_P_MEMC_DEFINE_CLIENT(VICE_CABAC1,53,INVALID)           /*     ViCE instance 0 - read only. Bits / bins from SG */
BCHP_P_MEMC_DEFINE_CLIENT(VICE_ARCSS0,54,54)                /* ViCE instance 0 - read/write. Firmware code and data */
BCHP_P_MEMC_DEFINE_CLIENT(VICE_VIP0_INST0,55,55)            /* ViCE instance 0 - First VIP instance for dual transcode. write only. Luma and 420 chroma */
BCHP_P_MEMC_DEFINE_CLIENT(VICE_VIP1_INST0,56,56)            /* ViCE instance 0 - First VIP instance for dual transcode.  read/write. Write: 2h2v_luma, 2h1v_luma. Read: pcc_luma, hist_luma */
BCHP_P_MEMC_DEFINE_CLIENT(VICE_VIP0_INST1,57,57)            /* ViCE instance 0 - Second VIP instance for dual transcode. write only. Luma and 420 chroma */
BCHP_P_MEMC_DEFINE_CLIENT(VICE_VIP1_INST1,58,58)            /* ViCE instance 0 - Second VIP instance for dual transcode. read/write. Write: 2h2v_luma, 2h1v_luma. Read: pcc_luma, hist_luma */














BCHP_P_MEMC_DEFINE_CLIENT(HVD0_DBLK,73,73)                  /* HVD0 Deblock Writes */
BCHP_P_MEMC_DEFINE_CLIENT(HVD0_DBLK1,74,74)                 /* HVD0 Deblock Writes / alternate blockout */
BCHP_P_MEMC_DEFINE_CLIENT(HVD0_ILCPU,75,INVALID)            /*     HVD0 Inner Loop ARC  */
BCHP_P_MEMC_DEFINE_CLIENT(HVD0_OLCPU,76,INVALID)            /*     HVD0 Outer Loop ARC */
BCHP_P_MEMC_DEFINE_CLIENT(HVD0_CAB,77,INVALID)              /*     HVD0 CABAC  */
BCHP_P_MEMC_DEFINE_CLIENT(HVD0_ILSI,78,INVALID)             /*     HVD0 IL Symbol read */
BCHP_P_MEMC_DEFINE_CLIENT(HVD0_ILCPU_p2,79,INVALID)         /*     HVD0 Inner Loop ARC, 2nd pipeline */
BCHP_P_MEMC_DEFINE_CLIENT(HVD0_ILSI_p2,80,INVALID)          /*     HVD0 IL Symbol read, 2nd pipeline */
BCHP_P_MEMC_DEFINE_CLIENT(HVD1_DBLK,81,81)                  /* HVD1 - Deblock Writes */
BCHP_P_MEMC_DEFINE_CLIENT(HVD1_DBLK1,82,82)                 /* HVD1 - Deblock Writes / alternate blockout */
BCHP_P_MEMC_DEFINE_CLIENT(HVD1_ILCPU,83,INVALID)            /*     HVD1 - Inner Loop ARC  */
BCHP_P_MEMC_DEFINE_CLIENT(HVD1_OLCPU,84,INVALID)            /*     HVD1 - Outer Loop ARC */
BCHP_P_MEMC_DEFINE_CLIENT(HVD1_CAB,85,INVALID)              /*     HVD1 -  CABAC  */
BCHP_P_MEMC_DEFINE_CLIENT(HVD1_ILSI,86,INVALID)             /*     HVD1 - IL Symbol read */
BCHP_P_MEMC_DEFINE_CLIENT(SID,87,87)                        /* Still Image decoder */






BCHP_P_MEMC_DEFINE_CLIENT(BVN_MAD_PIX_FD,94,94)             /* MAD_R pixel feed (read) (instance 0); 6x Multi-context De-interlacer */
BCHP_P_MEMC_DEFINE_CLIENT(BVN_MAD_QUANT,95,95)              /* MAD_R quant motion history (R/W) (instance 0) */
BCHP_P_MEMC_DEFINE_CLIENT(BVN_MAD_PIX_CAP,96,96)            /* MAD_R pixel capture (write) (instance 0) */
BCHP_P_MEMC_DEFINE_CLIENT(BVN_MAD1_PIX_FD,97,97)            /* MAD_R pixel feed (read) (instance 1); Dedicated to xcode */
BCHP_P_MEMC_DEFINE_CLIENT(BVN_MAD1_QUANT,98,98)             /* MAD_R quant motion history (R/W) (instance 1) */
BCHP_P_MEMC_DEFINE_CLIENT(BVN_MAD1_PIX_CAP,99,99)           /* MAD_R pixel capture (write) (instance 1) */
BCHP_P_MEMC_DEFINE_CLIENT(BVN_MAD2_PIX_FD,100,100)          /* MAD_R pixel feed (read) (instance 2); Dedicated to xcode */
BCHP_P_MEMC_DEFINE_CLIENT(BVN_MAD2_QUANT,101,101)           /* MAD_R quant motion history (R/W) (instance 2) */
BCHP_P_MEMC_DEFINE_CLIENT(BVN_MAD2_PIX_CAP,102,102)         /* MAD_R pixel capture (write) (instance 2) */



BCHP_P_MEMC_DEFINE_CLIENT(BVN_MFD0,106,106)                 /* MPEG feeders have access to all DRAMs (instance 0) */
BCHP_P_MEMC_DEFINE_CLIENT(BVN_MFD0_1,107,107)               /* MFD Alternate blockout (instance 0) */
BCHP_P_MEMC_DEFINE_CLIENT(BVN_MFD1,108,108)                 /* MPEG feeders have access to all DRAMs (instance 1) */
BCHP_P_MEMC_DEFINE_CLIENT(BVN_MFD1_1,109,109)               /* MFD Alternate blockout (instance 1) */
BCHP_P_MEMC_DEFINE_CLIENT(BVN_MFD2,110,110)                 /* MPEG feeders have access to all DRAMs (instance 2) */
BCHP_P_MEMC_DEFINE_CLIENT(BVN_MFD2_1,111,111)               /* MFD Alternate blockout (instance 2) */
BCHP_P_MEMC_DEFINE_CLIENT(BVN_MFD3,112,112)                 /* MPEG feeders have access to all DRAMs (instance 3) */
BCHP_P_MEMC_DEFINE_CLIENT(BVN_MFD3_1,113,113)               /* MFD Alternate blockout (instance 3) */




BCHP_P_MEMC_DEFINE_CLIENT(BVN_VFD0,118,118)                 /* Video feeder (instance 0) */
BCHP_P_MEMC_DEFINE_CLIENT(BVN_VFD1,119,119)                 /* Video feeder (instance 1) */
BCHP_P_MEMC_DEFINE_CLIENT(BVN_VFD2,120,120)                 /* Video feeder (instance 2) */
BCHP_P_MEMC_DEFINE_CLIENT(BVN_VFD3,121,121)                 /* Video feeder (instance 3) */
BCHP_P_MEMC_DEFINE_CLIENT(BVN_VFD4,122,122)                 /* Video feeder (instance 4) */
BCHP_P_MEMC_DEFINE_CLIENT(BVN_VFD5,123,123)                 /* Video feeder (instance 5) */


BCHP_P_MEMC_DEFINE_CLIENT(BVN_CAP0,126,126)                 /* Video capture (instance 0) */
BCHP_P_MEMC_DEFINE_CLIENT(BVN_CAP1,127,127)                 /* Video capture (instance 1) */
BCHP_P_MEMC_DEFINE_CLIENT(BVN_CAP2,128,128)                 /* Video capture (instance 2) */
BCHP_P_MEMC_DEFINE_CLIENT(BVN_CAP3,129,129)                 /* Video capture (instance 3) */
BCHP_P_MEMC_DEFINE_CLIENT(BVN_CAP4,130,130)                 /* Video capture (instance 4) */
BCHP_P_MEMC_DEFINE_CLIENT(BVN_CAP5,131,131)                 /* Video capture (instance 5) */


BCHP_P_MEMC_DEFINE_CLIENT(BVN_GFD0,134,134)                 /* Graphic feeder (instance 0) */
BCHP_P_MEMC_DEFINE_CLIENT(BVN_GFD1,135,135)                 /* Graphic feeder (instance 1) */
BCHP_P_MEMC_DEFINE_CLIENT(BVN_GFD2,136,136)                 /* Graphic feeder (instance 2) */
BCHP_P_MEMC_DEFINE_CLIENT(BVN_GFD3,137,137)                 /* Graphic feeder (instance 3) */



BCHP_P_MEMC_DEFINE_CLIENT(BVN_MCVP0,141,141)                /* MCVP client 0; 6x Multi-context De-interlacer */
BCHP_P_MEMC_DEFINE_CLIENT(BVN_MCVP1,142,142)                /* MCVP client 1 */
BCHP_P_MEMC_DEFINE_CLIENT(BVN_MCVP2,143,143)                /* MCVP client 2 */
BCHP_P_MEMC_DEFINE_CLIENT(BVN_RDC,144,144)                  /* RDC */
BCHP_P_MEMC_DEFINE_CLIENT(VEC_VBI_ENC0,145,INVALID)         /*     TTX0 -- assigned to VBI path 0 (typically IT_0, HD/component display) and arbitrated with ITU656 path 0 */
BCHP_P_MEMC_DEFINE_CLIENT(VEC_VBI_ENC1,146,INVALID)         /*     TTX1 -- assigned to VBI path 1 (typically IT_1, SD/CVBS display) */
BCHP_P_MEMC_DEFINE_CLIENT(M2MC_0,147,147)                   /* 2D graphics - instance 0 - client "0" */
BCHP_P_MEMC_DEFINE_CLIENT(M2MC_1,148,148)                   /* 2D graphics - instance 0 - client "1" */
BCHP_P_MEMC_DEFINE_CLIENT(M2MC_2,149,149)                   /* 2D graphics - instance 0 - client "2" */





BCHP_P_MEMC_DEFINE_CLIENT(HVD0_DBLK_p2,155,155)             /* HVD0 Deblock Writes, 2nd pipeline */
BCHP_P_MEMC_DEFINE_CLIENT(HVD0_DBLK1_p2,156,156)            /* HVD0 Deblock Writes / alternate blockout, 2nd pipeline */
/*  */
/*  */
/*  */
BCHP_P_MEMC_DEFINE_CLIENT(M2MC1_0,160,160)                  /* 2D graphics - instance 1 - client "0" */
BCHP_P_MEMC_DEFINE_CLIENT(M2MC1_1,161,161)                  /* 2D graphics - instance 1 - client "1" */
BCHP_P_MEMC_DEFINE_CLIENT(M2MC1_2,162,162)                  /* 2D graphics - instance 1 - client "2" */





































BCHP_P_MEMC_DEFINE_CLIENT(HOST_CPU_MCP_R_HI,200,200)        /* Host CPU MCP read client - high priority */
BCHP_P_MEMC_DEFINE_CLIENT(HOST_CPU_MCP_R_LO,201,201)        /* Host CPU MCP read client - low priority */
BCHP_P_MEMC_DEFINE_CLIENT(HOST_CPU_MCP_W_HI,202,202)        /* Host CPU MCP write client - high priority */
BCHP_P_MEMC_DEFINE_CLIENT(HOST_CPU_MCP_W_LO,203,203)        /* Host CPU MCP write client - low priority */
BCHP_P_MEMC_DEFINE_CLIENT(V3D_MCP_R_HI,204,204)             /* V3D (VC4 graphics core) MCP read client - high priority */
BCHP_P_MEMC_DEFINE_CLIENT(V3D_MCP_R_LO,205,205)             /* V3D (VC4 graphics core) MCP read client - low priority */
BCHP_P_MEMC_DEFINE_CLIENT(V3D_MCP_W_HI,206,206)             /* V3D (VC4 graphics core) MCP write client (tile buffer writes) - high priority */
BCHP_P_MEMC_DEFINE_CLIENT(V3D_MCP_W_LO,207,207)             /* V3D (VC4 graphics core) MCP write client (tile buffer writes) - low priority */
/*             Unused UBUS */







BCHP_P_MEMC_DEFINE_CLIENT(HVD0_MOCOMP,216,216)              /* HVD0 PFRI / MOCOMP */
BCHP_P_MEMC_DEFINE_CLIENT(HVD1_MOCOMP,217,217)              /* HVD1 PFRI / MOCOMP */
BCHP_P_MEMC_DEFINE_CLIENT(VICE_PFRI,218,218)                /* VICE2v2 instance 0 PFRI (required + optional) */



/*             Unused LMB */

























BCHP_P_MEMC_DEFINE_CLIENT(TRACELOG,248,248)                 /* TraceLog */
BCHP_P_MEMC_DEFINE_CLIENT(MEMC_RESERVED_0,249,249)          /* Reserved for MEMC use */
BCHP_P_MEMC_DEFINE_CLIENT(ZCQS_ENGINE,250,250)              /* DRAM ZQ Calibration Short client */
BCHP_P_MEMC_DEFINE_CLIENT(MSA,251,251)                      /* MSA (Memory Soft Access) */
BCHP_P_MEMC_DEFINE_CLIENT(DIS0,252,252)                     /* DIS (DRAM Interface Stress) #0 */
BCHP_P_MEMC_DEFINE_CLIENT(DIS1,253,253)                     /* DIS (DRAM Interface Stress) #1 */
BCHP_P_MEMC_DEFINE_CLIENT(DRAM_INIT_ZQCS,254,254)           /* DRAM Init (Being updated to ZQCS) */
BCHP_P_MEMC_DEFINE_CLIENT(REFRESH,255,255)                  /* Refresh */
