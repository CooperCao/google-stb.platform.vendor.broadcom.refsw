/****************************************************************************
 * Copyright (C) 2017 Broadcom. The term "Broadcom" refers to Broadcom Limited and/or its subsidiaries.
 *
 * This program is the proprietary software of Broadcom and/or its licensors,
 * and may only be used, duplicated, modified or distributed pursuant to the terms and
 * conditions of a separate, written license agreement executed between you and Broadcom
 * (an "Authorized License").  Except as set forth in an Authorized License, Broadcom grants
 * no license (express or implied), right to use, or waiver of any kind with respect to the
 * Software, and Broadcom expressly reserves all rights in and to the Software and all
 * intellectual property rights therein.  IF YOU HAVE NO AUTHORIZED LICENSE, THEN YOU
 * HAVE NO RIGHT TO USE THIS SOFTWARE IN ANY WAY, AND SHOULD IMMEDIATELY
 * NOTIFY BROADCOM AND DISCONTINUE ALL USE OF THE SOFTWARE.
 *
 * Except as expressly set forth in the Authorized License,
 *
 * 1.     This program, including its structure, sequence and organization, constitutes the valuable trade
 * secrets of Broadcom, and you shall use all reasonable efforts to protect the confidentiality thereof,
 * and to use this information only in connection with your use of Broadcom integrated circuit products.
 *
 * 2.     TO THE MAXIMUM EXTENT PERMITTED BY LAW, THE SOFTWARE IS PROVIDED "AS IS"
 * AND WITH ALL FAULTS AND BROADCOM MAKES NO PROMISES, REPRESENTATIONS OR
 * WARRANTIES, EITHER EXPRESS, IMPLIED, STATUTORY, OR OTHERWISE, WITH RESPECT TO
 * THE SOFTWARE.  BROADCOM SPECIFICALLY DISCLAIMS ANY AND ALL IMPLIED WARRANTIES
 * OF TITLE, MERCHANTABILITY, NONINFRINGEMENT, FITNESS FOR A PARTICULAR PURPOSE,
 * LACK OF VIRUSES, ACCURACY OR COMPLETENESS, QUIET ENJOYMENT, QUIET POSSESSION
 * OR CORRESPONDENCE TO DESCRIPTION. YOU ASSUME THE ENTIRE RISK ARISING OUT OF
 * USE OR PERFORMANCE OF THE SOFTWARE.
 *
 * 3.     TO THE MAXIMUM EXTENT PERMITTED BY LAW, IN NO EVENT SHALL BROADCOM OR ITS
 * LICENSORS BE LIABLE FOR (i) CONSEQUENTIAL, INCIDENTAL, SPECIAL, INDIRECT, OR
 * EXEMPLARY DAMAGES WHATSOEVER ARISING OUT OF OR IN ANY WAY RELATING TO YOUR
 * USE OF OR INABILITY TO USE THE SOFTWARE EVEN IF BROADCOM HAS BEEN ADVISED OF
 * THE POSSIBILITY OF SUCH DAMAGES; OR (ii) ANY AMOUNT IN EXCESS OF THE AMOUNT
 * ACTUALLY PAID FOR THE SOFTWARE ITSELF OR U.S. $1, WHICHEVER IS GREATER. THESE
 * LIMITATIONS SHALL APPLY NOTWITHSTANDING ANY FAILURE OF ESSENTIAL PURPOSE OF
 * ANY LIMITED REMEDY.
 ****************************************************************************/

/*
 * Include the right Octave/Maestro-specific definitions and provide an
 * abstraction layer to access both types of system in an uniform way.
 */

#ifndef _DSP_OCTAVE_MAESTRO_H_
#define _DSP_OCTAVE_MAESTRO_H_

#include "libdspcontrol/CHIP.h"
#include "fp_sdk_config.h"

#include "libdspcontrol/DSP.h"

#if defined(__FP4014__)
#  include "libsyschip/memmap-octave-v1.h"
#elif defined(__FP4015_ONWARDS__) || defined(__FPM1015_ONWARDS__)
#  include "libsyschip/memmap-octave-v2-maestro-v1.h"
#else
#  error "This module targets only Octave and Maestro based systems"
#endif

#if FEATURE_IS(SW_HOST, RAAGA_MAGNUM)
#  include "bchp.h"
#  include "bchp_common.h"
#endif



/* Octave V1 and Octave V2 / Maestro V1 Misc Block fields names don't match.
 * Let's rename fp4015+/fpm1015+ interesting ones into the old fp4014, where
 * necessary. */
#if defined(__FP4014__)
#  define MISC_BLOCK_CORECTRL_CORE_ENABLE               MISC_BLOCK_CCS_CORE_ENABLE
#  define MISC_BLOCK_CORECTRL_SYS_FLG0_STATUS           MISC_BLOCK_FLAGS_SYS_FLG0_STATUS
#  define MISC_BLOCK_CORECTRL_SYS_FLG0_SET              MISC_BLOCK_FLAGS_SYS_FLG0_SET
#  define MISC_BLOCK_CORECTRL_SYS_FLG0_CLEAR            MISC_BLOCK_FLAGS_SYS_FLG0_CLEAR
#  define MISC_BLOCK_CORECTRL_USR_FLG0_STATUS           MISC_BLOCK_FLAGS_USR_FLG0_STATUS
#  define MISC_BLOCK_CORECTRL_USR_FLG0_SET              MISC_BLOCK_FLAGS_USR_FLG0_SET
#  define MISC_BLOCK_CORECTRL_USR_FLG0_CLEAR            MISC_BLOCK_FLAGS_USR_FLG0_CLEAR

#  define MISC_BLOCK_INTERRUPT_IRQ_STATUS               MISC_BLOCK_EXT_SW_XRQ_IRQ_STATUS
#  define MISC_BLOCK_INTERRUPT_IRQ_SET                  MISC_BLOCK_EXT_SW_XRQ_IRQ_SET
#  define MISC_BLOCK_INTERRUPT_IRQ_CLEAR                MISC_BLOCK_EXT_SW_XRQ_IRQ_CLEAR
#  define MISC_BLOCK_INTERRUPT_SRQ_STATUS               MISC_BLOCK_EXT_SW_XRQ_SRQ_STATUS
#  define MISC_BLOCK_INTERRUPT_SRQ_SET                  MISC_BLOCK_EXT_SW_XRQ_SRQ_SET
#  define MISC_BLOCK_INTERRUPT_SRQ_CLEAR                MISC_BLOCK_EXT_SW_XRQ_SRQ_CLEAR
#  define MISC_BLOCK_INTERRUPT_DRQ_STATUS               MISC_BLOCK_EXT_SW_XRQ_DRQ_STATUS
#  define MISC_BLOCK_INTERRUPT_DRQ_SET                  MISC_BLOCK_EXT_SW_XRQ_DRQ_SET
#  define MISC_BLOCK_INTERRUPT_DRQ_CLEAR                MISC_BLOCK_EXT_SW_XRQ_DRQ_CLEAR
#  define MISC_BLOCK_INTERRUPT_FRQ_STATUS               MISC_BLOCK_EXT_SW_XRQ_FRQ_STATUS
#  define MISC_BLOCK_INTERRUPT_FRQ_SET                  MISC_BLOCK_EXT_SW_XRQ_FRQ_SET
#  define MISC_BLOCK_INTERRUPT_FRQ_CLEAR                MISC_BLOCK_EXT_SW_XRQ_FRQ_CLEAR
#  define MISC_BLOCK_INTERRUPT_HOST_IRQ_LATCHED         MISC_BLOCK_HOST_INTC_HOST_IRQ_LATCHED
#  define MISC_BLOCK_INTERRUPT_HOST_IRQ_SET             MISC_BLOCK_HOST_INTC_HOST_IRQ_SET
#  define MISC_BLOCK_INTERRUPT_HOST_IRQ_CLEAR           MISC_BLOCK_HOST_INTC_HOST_IRQ_CLEAR
#  define MISC_BLOCK_INTERRUPT_HOST_IRQ_ENABLE          MISC_BLOCK_HOST_INTC_HOST_IRQ_ENABLE
#  define MISC_BLOCK_INTERRUPT_OBUSFAULT_STATUS         MISC_BLOCK_OBUS_FAULT_OBUS_FAULT_STATUS
#  define MISC_BLOCK_INTERRUPT_OBUSFAULT_CLEAR          MISC_BLOCK_OBUS_FAULT_OBUS_FAULT_CLEAR
#  define MISC_BLOCK_INTERRUPT_OBUSFAULT_ADDRESS        MISC_BLOCK_OBUS_FAULT_OBUS_FAULT_ADDRESS

#  define MISC_BLOCK_CORESTATE_SYS_MBX0                 MISC_BLOCK_MAILBOXES_SYS_MBX0
#  define MISC_BLOCK_CORESTATE_SYS_MBX1                 MISC_BLOCK_MAILBOXES_SYS_MBX1
#  define MISC_BLOCK_CORESTATE_SYS_MBX2                 MISC_BLOCK_MAILBOXES_SYS_MBX2
#  define MISC_BLOCK_CORESTATE_SYS_MBX3                 MISC_BLOCK_MAILBOXES_SYS_MBX3
#  define MISC_BLOCK_CORESTATE_SYS_MBX4                 MISC_BLOCK_MAILBOXES_SYS_MBX4
#  define MISC_BLOCK_CORESTATE_SYS_MBX5                 MISC_BLOCK_MAILBOXES_SYS_MBX5
#  define MISC_BLOCK_CORESTATE_SYS_MBX6                 MISC_BLOCK_MAILBOXES_SYS_MBX6
#  define MISC_BLOCK_CORESTATE_SYS_MBX7                 MISC_BLOCK_MAILBOXES_SYS_MBX7
#  define MISC_BLOCK_CORESTATE_USR_MBX0                 MISC_BLOCK_MAILBOXES_USR_MBX0
#  define MISC_BLOCK_CORESTATE_USR_MBX1                 MISC_BLOCK_MAILBOXES_USR_MBX1
#  define MISC_BLOCK_CORESTATE_USR_MBX2                 MISC_BLOCK_MAILBOXES_USR_MBX2
#  define MISC_BLOCK_CORESTATE_USR_MBX3                 MISC_BLOCK_MAILBOXES_USR_MBX3
#  define MISC_BLOCK_CORESTATE_USR_MBX4                 MISC_BLOCK_MAILBOXES_USR_MBX4
#  define MISC_BLOCK_CORESTATE_USR_MBX5                 MISC_BLOCK_MAILBOXES_USR_MBX5
#  define MISC_BLOCK_CORESTATE_USR_MBX6                 MISC_BLOCK_MAILBOXES_USR_MBX6
#  define MISC_BLOCK_CORESTATE_USR_MBX7                 MISC_BLOCK_MAILBOXES_USR_MBX7
#  define MISC_BLOCK_CORESTATE_SYS_MTX0                 MISC_BLOCK_MUTEXES_SYS_MTX0
#  define MISC_BLOCK_CORESTATE_SYS_MTX1                 MISC_BLOCK_MUTEXES_SYS_MTX1
#  define MISC_BLOCK_CORESTATE_SYS_MTX2                 MISC_BLOCK_MUTEXES_SYS_MTX2
#  define MISC_BLOCK_CORESTATE_SYS_MTX3                 MISC_BLOCK_MUTEXES_SYS_MTX3
#  define MISC_BLOCK_CORESTATE_USR_MTX0                 MISC_BLOCK_MUTEXES_USR_MTX0
#  define MISC_BLOCK_CORESTATE_USR_MTX1                 MISC_BLOCK_MUTEXES_USR_MTX1
#  define MISC_BLOCK_CORESTATE_USR_MTX2                 MISC_BLOCK_MUTEXES_USR_MTX2
#  define MISC_BLOCK_CORESTATE_USR_MTX3                 MISC_BLOCK_MUTEXES_USR_MTX3
#  define MISC_BLOCK_CORESTATE_USR_MTX4                 MISC_BLOCK_MUTEXES_USR_MTX4
#  define MISC_BLOCK_CORESTATE_USR_MTX5                 MISC_BLOCK_MUTEXES_USR_MTX5
#  define MISC_BLOCK_CORESTATE_USR_MTX6                 MISC_BLOCK_MUTEXES_USR_MTX6
#  define MISC_BLOCK_CORESTATE_USR_MTX7                 MISC_BLOCK_MUTEXES_USR_MTX7

#  define MISC_BLOCK_PROFILE_MUTEX                      MISC_BLOCK_PC_TRACE_MUTEX
#  define MISC_BLOCK_PROFILE_LAST_CONF_PC_LO            MISC_BLOCK_PC_TRACE_LAST_CONF_PC_LO
#  define MISC_BLOCK_PROFILE_LAST_CONF_PC_HI            MISC_BLOCK_PC_TRACE_LAST_CONF_PC_HI
#  define MISC_BLOCK_PROFILE_LAST_PC_LO                 MISC_BLOCK_PC_TRACE_LAST_PC_LO
#  define MISC_BLOCK_PROFILE_LAST_PC_HI                 MISC_BLOCK_PC_TRACE_LAST_PC_HI
#  define MISC_BLOCK_PROFILE_BRA_TARGET_PC_0_LO         MISC_BLOCK_PC_TRACE_BRA_TARGET_PC_0_L0
#  define MISC_BLOCK_PROFILE_BRA_TARGET_PC_0_HI         MISC_BLOCK_PC_TRACE_BRA_TARGET_PC_0_HI
#  define MISC_BLOCK_PROFILE_BRA_TARGET_PC_1_LO         MISC_BLOCK_PC_TRACE_BRA_TARGET_PC_1_L0
#  define MISC_BLOCK_PROFILE_BRA_TARGET_PC_1_HI         MISC_BLOCK_PC_TRACE_BRA_TARGET_PC_1_HI
#  define MISC_BLOCK_PROFILE_BRA_TARGET_PC_2_LO         MISC_BLOCK_PC_TRACE_BRA_TARGET_PC_2_L0
#  define MISC_BLOCK_PROFILE_BRA_TARGET_PC_2_HI         MISC_BLOCK_PC_TRACE_BRA_TARGET_PC_2_HI
#  define MISC_BLOCK_PROFILE_BRA_TARGET_PC_3_LO         MISC_BLOCK_PC_TRACE_BRA_TARGET_PC_3_L0
#  define MISC_BLOCK_PROFILE_BRA_TARGET_PC_3_HI         MISC_BLOCK_PC_TRACE_BRA_TARGET_PC_3_HI
#  define MISC_BLOCK_PROFILE_PROF_SAMPLE_W0             MISC_BLOCK_PROF_SAMP_PROF_SAMPLE_W0
#  define MISC_BLOCK_PROFILE_PROF_SAMPLE_W1             MISC_BLOCK_PROF_SAMP_PROF_SAMPLE_W1
#  define MISC_BLOCK_PROFILE_PROF_SAMPLE_W2             MISC_BLOCK_PROF_SAMP_PROF_SAMPLE_W2
#  define MISC_BLOCK_PROFILE_PROF_SAMPLE_W3             MISC_BLOCK_PROF_SAMP_PROF_SAMPLE_W3

#  define MISC_BLOCK_INTERRUPT_HOST_IRQ_CORE_RESET      MISC_BLOCK_HOST_INTC_HOST_IRQ_CORE_RESET
#  define MISC_BLOCK_INTERRUPT_HOST_IRQ_PROFILER        MISC_BLOCK_HOST_INTC_HOST_IRQ_PROFILER
#  define MISC_BLOCK_INTERRUPT_HOST_IRQ_SYS_SW_INT_0    MISC_BLOCK_HOST_INTC_HOST_IRQ_SYS_SW_INT_0
#  define MISC_BLOCK_INTERRUPT_HOST_IRQ_SYS_SW_INT_1    MISC_BLOCK_HOST_INTC_HOST_IRQ_SYS_SW_INT_1
#  define MISC_BLOCK_INTERRUPT_HOST_IRQ_SYS_SW_INT_2    MISC_BLOCK_HOST_INTC_HOST_IRQ_SYS_SW_INT_2
#  define MISC_BLOCK_INTERRUPT_HOST_IRQ_SYS_SW_INT_3    MISC_BLOCK_HOST_INTC_HOST_IRQ_SYS_SW_INT_3
#  define MISC_BLOCK_INTERRUPT_HOST_IRQ_SYS_SW_INT_4    MISC_BLOCK_HOST_INTC_HOST_IRQ_SYS_SW_INT_4
#  define MISC_BLOCK_INTERRUPT_HOST_IRQ_SYS_SW_INT_5    MISC_BLOCK_HOST_INTC_HOST_IRQ_SYS_SW_INT_5
#  define MISC_BLOCK_INTERRUPT_HOST_IRQ_SYS_SW_INT_6    MISC_BLOCK_HOST_INTC_HOST_IRQ_SYS_SW_INT_6
#  define MISC_BLOCK_INTERRUPT_HOST_IRQ_SYS_SW_INT_7    MISC_BLOCK_HOST_INTC_HOST_IRQ_SYS_SW_INT_7
#  define MISC_BLOCK_INTERRUPT_HOST_IRQ_USR_SW_INT_0    MISC_BLOCK_HOST_INTC_HOST_IRQ_USR_SW_INT_0
#  define MISC_BLOCK_INTERRUPT_HOST_IRQ_USR_SW_INT_1    MISC_BLOCK_HOST_INTC_HOST_IRQ_USR_SW_INT_1
#  define MISC_BLOCK_INTERRUPT_HOST_IRQ_USR_SW_INT_2    MISC_BLOCK_HOST_INTC_HOST_IRQ_USR_SW_INT_2
#  define MISC_BLOCK_INTERRUPT_HOST_IRQ_USR_SW_INT_3    MISC_BLOCK_HOST_INTC_HOST_IRQ_USR_SW_INT_3
#  define MISC_BLOCK_INTERRUPT_HOST_IRQ_USR_SW_INT_4    MISC_BLOCK_HOST_INTC_HOST_IRQ_USR_SW_INT_4
#  define MISC_BLOCK_INTERRUPT_HOST_IRQ_USR_SW_INT_5    MISC_BLOCK_HOST_INTC_HOST_IRQ_USR_SW_INT_5
#  define MISC_BLOCK_INTERRUPT_HOST_IRQ_USR_SW_INT_6    MISC_BLOCK_HOST_INTC_HOST_IRQ_USR_SW_INT_6
#  define MISC_BLOCK_INTERRUPT_HOST_IRQ_USR_SW_INT_7    MISC_BLOCK_HOST_INTC_HOST_IRQ_USR_SW_INT_7
#endif


/* Define the Misc Block location */
#if defined(PIKE) || defined(GENERIC)
#  define MISC_BLOCK_BASE_ADDR(dsp_p, core)     SHARED_ADDR_CAST(0xe0000000)
#elif defined(LEAP_PHY)
#  define MISC_BLOCK_BASE_ADDR(dsp_p, core)     SHARED_ADDR_CAST(0x000d0000)
#elif defined(PMC3)
#  define MISC_BLOCK_BASE_ADDR(dsp_p, core)     SHARED_ADDR_CAST(0xffb20400)
#elif IS_TARGET(RaagaFP4015_barebone)
#  define MISC_BLOCK_BASE_ADDR(dsp_p, core)     ((core) == 0 ? (dsp_p)->misc_block_addr_fp0 : (dsp_p)->misc_block_addr_fp1)
#elif IS_TARGET(RaagaFP4015_haps) || IS_TARGET(RaagaFP4015_haps_bm) || \
      IS_TARGET(RaagaFP4015_bm) || IS_TARGET(RaagaFP4015_si_magnum) || IS_TARGET(RaagaFP4015_si_magnum_permissive) ||\
      CHIP_CLASS_DSL
#  if IS_TARGET(RaagaFP4015_bm)     /* FIXME: these addresses are BCM7278A0 specific, make it generic */
#    define MISC_BLOCK_BASE_ADDR_0              SHARED_ADDR_CAST(0x09034000)
#    define MISC_BLOCK_BASE_ADDR_1              SHARED_ADDR_CAST(0x09034200)
#  elif IS_TARGET(RaagaFP4015_haps) || IS_TARGET(RaagaFP4015_haps_bm)
#    define MISC_BLOCK_BASE_ADDR_0              SHARED_ADDR_CAST(0xf0c34000)
#    define MISC_BLOCK_BASE_ADDR_1              SHARED_ADDR_CAST(0xf0c34200)
#  elif IS_TARGET(RaagaFP4015_si_magnum) || IS_TARGET(RaagaFP4015_si_magnum_permissive)
#    define MISC_BLOCK_BASE_ADDR_0              SHARED_ADDR_CAST(BCHP_RAAGA_DSP_FP_MISC_0_CORECTRL_REG_START)
#    define MISC_BLOCK_BASE_ADDR_1              SHARED_ADDR_CAST(BCHP_RAAGA_DSP_FP_MISC_1_CORECTRL_REG_START)
#  elif defined(YELLOWSTONE) || defined(SHASTA)
#    define MISC_BLOCK_BASE_ADDR_0              SHARED_ADDR_CAST(0x283f0000)    /* see hwmap-{yellowstone,shasta}.ldp */
#    define MISC_BLOCK_BASE_ADDR_1              SHARED_ADDR_CAST(0x283f1000)    /* see memmap-{yellowstone,shasta}-core.h */
#  endif
#  define MISC_BLOCK_CORE_DELTA_ADDR            (MISC_BLOCK_BASE_ADDR_1 - MISC_BLOCK_BASE_ADDR_0)
#  define MISC_BLOCK_BASE_ADDR(dsp_p, core)     (MISC_BLOCK_BASE_ADDR_0 + (core) * MISC_BLOCK_CORE_DELTA_ADDR)
#endif
#ifndef MISC_BLOCK_BASE_ADDR
#  error "Please define MISC_BLOCK_BASE_ADDR for this chip"
#endif
#define MISC_BLOCK(dsp_p, core, reg)            ((MISC_BLOCK_BASE_ADDR(dsp_p, core)) + (MISC_BLOCK_ ## reg))


/* This should actually live in per-SoC headers. But since they are currently common to all
 * Octave and Maestro targets, let's leave it here. */
#if FEATURE_IS(DBG_CORE, DEBUG_SERVER) || FEATURE_IS(DBG_CORE, DEBUG_SERVER_MP)
#  define MISC_COMM_DBG_MAILBOX_BASE_ADDR(dsp_p, core)      MISC_BLOCK(dsp_p, core, CORESTATE_SYS_MBX5)
#endif

#if FEATURE_IS(DBG_CORE, DEBUG_SERVER)
#  define MISC_COMM_DBG_MUTEX(dsp_p, core)                  MISC_BLOCK(dsp_p, core, CORESTATE_USR_MTX7)
#elif FEATURE_IS(DBG_CORE, DEBUG_SERVER_MP)
#  define MISC_COMM_DBG_MUTEX(dsp_p, core)                  MISC_BLOCK(dsp_p, core, CORESTATE_SYS_MTX0)
#endif


#endif  /* _DSP_OCTAVE_MAESTRO_H_ */
