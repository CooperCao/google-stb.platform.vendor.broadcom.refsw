/******************************************************************************
 *  Copyright (C) 2018 Broadcom. The term "Broadcom" refers to Broadcom Limited and/or its subsidiaries.
 *
 *  This program is the proprietary software of Broadcom and/or its licensors,
 *  and may only be used, duplicated, modified or distributed pursuant to the terms and
 *  conditions of a separate, written license agreement executed between you and Broadcom
 *  (an "Authorized License").  Except as set forth in an Authorized License, Broadcom grants
 *  no license (express or implied), right to use, or waiver of any kind with respect to the
 *  Software, and Broadcom expressly reserves all rights in and to the Software and all
 *  intellectual property rights therein.  IF YOU HAVE NO AUTHORIZED LICENSE, THEN YOU
 *  HAVE NO RIGHT TO USE THIS SOFTWARE IN ANY WAY, AND SHOULD IMMEDIATELY
 *  NOTIFY BROADCOM AND DISCONTINUE ALL USE OF THE SOFTWARE.
 *
 *  Except as expressly set forth in the Authorized License,
 *
 *  1.     This program, including its structure, sequence and organization, constitutes the valuable trade
 *  secrets of Broadcom, and you shall use all reasonable efforts to protect the confidentiality thereof,
 *  and to use this information only in connection with your use of Broadcom integrated circuit products.
 *
 *  2.     TO THE MAXIMUM EXTENT PERMITTED BY LAW, THE SOFTWARE IS PROVIDED "AS IS"
 *  AND WITH ALL FAULTS AND BROADCOM MAKES NO PROMISES, REPRESENTATIONS OR
 *  WARRANTIES, EITHER EXPRESS, IMPLIED, STATUTORY, OR OTHERWISE, WITH RESPECT TO
 *  THE SOFTWARE.  BROADCOM SPECIFICALLY DISCLAIMS ANY AND ALL IMPLIED WARRANTIES
 *  OF TITLE, MERCHANTABILITY, NONINFRINGEMENT, FITNESS FOR A PARTICULAR PURPOSE,
 *  LACK OF VIRUSES, ACCURACY OR COMPLETENESS, QUIET ENJOYMENT, QUIET POSSESSION
 *  OR CORRESPONDENCE TO DESCRIPTION. YOU ASSUME THE ENTIRE RISK ARISING OUT OF
 *  USE OR PERFORMANCE OF THE SOFTWARE.
 *
 *  3.     TO THE MAXIMUM EXTENT PERMITTED BY LAW, IN NO EVENT SHALL BROADCOM OR ITS
 *  LICENSORS BE LIABLE FOR (i) CONSEQUENTIAL, INCIDENTAL, SPECIAL, INDIRECT, OR
 *  EXEMPLARY DAMAGES WHATSOEVER ARISING OUT OF OR IN ANY WAY RELATING TO YOUR
 *  USE OF OR INABILITY TO USE THE SOFTWARE EVEN IF BROADCOM HAS BEEN ADVISED OF
 *  THE POSSIBILITY OF SUCH DAMAGES; OR (ii) ANY AMOUNT IN EXCESS OF THE AMOUNT
 *  ACTUALLY PAID FOR THE SOFTWARE ITSELF OR U.S. $1, WHICHEVER IS GREATER. THESE
 *  LIMITATIONS SHALL APPLY NOTWITHSTANDING ANY FAILURE OF ESSENTIAL PURPOSE OF
 *  ANY LIMITED REMEDY.

 ******************************************************************************/

/* This file is autogenerated, do not edit. */

#ifndef BHSM_P_KEYSLOT__H
#define BHSM_P_KEYSLOT__H

#ifdef __cplusplus
extern "C"
{
#endif


#include "../bhsm_auto_compat.h"

typedef struct BHSM_P_KeySlotInit
{
    /* input */
    struct {
        uint8_t    keySlotNumberIvPerSlot128;
        uint8_t    keySlotNumberIvPerBlock128;
        uint8_t    keySlotNumberIvPerBlock256;
        uint8_t    keySlotNumberIvPerEntry256;
    }in;

    /* output */
    struct {
        uint8_t    keySlotNumberIvPerSlot128;
        uint8_t    keySlotNumberIvPerBlock128;
        uint8_t    keySlotNumberIvPerBlock256;
        uint8_t    keySlotNumberIvPerEntry256;
    }out;
} BHSM_P_KeySlotInit;

typedef struct BHSM_P_KeySlotQuery
{

    /* output */
    struct {
        uint8_t    keySlotNumberIvPerSlot128;
        uint8_t    keySlotNumberIvPerBlock128;
        uint8_t    keySlotNumberIvPerBlock256;
        uint8_t    keySlotNumberIvPerEntry256;
        uint8_t    keySlotOwnership[228];
    }out;
} BHSM_P_KeySlotQuery;

typedef struct BHSM_P_KeySlotSetOwnership
{
    /* input */
    struct {
        uint8_t    keySlotType;
        uint8_t    keySlotNumber;
        uint8_t    setKtsOwnership;
    }in;
} BHSM_P_KeySlotSetOwnership;

typedef struct BHSM_P_KeySlotInvalidate
{
    /* input */
    struct {
        uint8_t    blockType;
        uint8_t    entryType;
        uint8_t    keySlotType;
        uint8_t    keySlotNumber;
        uint8_t    sc01ModeWordMapping;
        uint8_t    invalidateMethod;
    }in;
} BHSM_P_KeySlotInvalidate;

typedef struct BHSM_P_KeySlotPidAdd
{
    /* input */
    struct {
        uint16_t    pidChanStart;
        uint16_t    pidChanEnd;
        uint8_t    keySlotType;
        uint8_t    keySlotNumber;
        uint8_t    keySlotTypeB;
        uint8_t    keySlotNumberB;
        uint8_t    setMultiplePidChan;
        uint8_t    sPidUsePointerB;
        uint8_t    destinationPipeSel;
    }in;
} BHSM_P_KeySlotPidAdd;

typedef struct BHSM_P_KeySlotPidRemove
{
    /* input */
    struct {
        uint16_t    pidChanStart;
        uint16_t    pidChanEnd;
    }in;
} BHSM_P_KeySlotPidRemove;

typedef struct BHSM_P_KeySlotClearKeySet
{
    /* input */
    struct {
        uint32_t    keyData[8];
        uint8_t    blockType;
        uint8_t    entryType;
        uint8_t    keySlotType;
        uint8_t    keySlotNumber;
        uint8_t    sc01ModeWordMapping;
        uint8_t    gPipeSc01EntryType;
        uint8_t    rPipeSc01EntryType;
        uint8_t    keyMode;
        uint32_t    modeWords[4];
        uint16_t    extKeyPtr;
        uint16_t    extIvPtr;
    }in;
} BHSM_P_KeySlotClearKeySet;

typedef struct BHSM_P_KeySlotClearIvSet
{
    /* input */
    struct {
        uint32_t    iv[4];
        uint8_t    blockType;
        uint8_t    entryType;
        uint8_t    keySlotType;
        uint8_t    keySlotNumber;
        uint8_t    ivType;
    }in;
} BHSM_P_KeySlotClearIvSet;

typedef struct BHSM_P_KeySlotMulti2SysKeySet
{
    /* input */
    struct {
        uint32_t    systemKeys[8];
        uint8_t    whichSysKey;
    }in;
} BHSM_P_KeySlotMulti2SysKeySet;
BERR_Code BHSM_P_KeySlot_Init( BHSM_Handle hHsm, BHSM_P_KeySlotInit *pParam );
BERR_Code BHSM_P_KeySlot_Query( BHSM_Handle hHsm, BHSM_P_KeySlotQuery *pParam );
BERR_Code BHSM_P_KeySlot_SetOwnership( BHSM_Handle hHsm, BHSM_P_KeySlotSetOwnership *pParam );
BERR_Code BHSM_P_KeySlot_Invalidate( BHSM_Handle hHsm, BHSM_P_KeySlotInvalidate *pParam );
BERR_Code BHSM_P_KeySlot_PidAdd( BHSM_Handle hHsm, BHSM_P_KeySlotPidAdd *pParam );
BERR_Code BHSM_P_KeySlot_PidRemove( BHSM_Handle hHsm, BHSM_P_KeySlotPidRemove *pParam );
BERR_Code BHSM_P_KeySlot_ClearKeySet( BHSM_Handle hHsm, BHSM_P_KeySlotClearKeySet *pParam );
BERR_Code BHSM_P_KeySlot_ClearIvSet( BHSM_Handle hHsm, BHSM_P_KeySlotClearIvSet *pParam );
BERR_Code BHSM_P_KeySlot_Multi2SysKeySet( BHSM_Handle hHsm, BHSM_P_KeySlotMulti2SysKeySet *pParam );

#ifdef __cplusplus
}
#endif
#endif
