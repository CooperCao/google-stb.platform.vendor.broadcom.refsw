/******************************************************************************
 *  Copyright (C) 2017 Broadcom. The term "Broadcom" refers to Broadcom Limited and/or its subsidiaries.
 *
 *  This program is the proprietary software of Broadcom and/or its licensors,
 *  and may only be used, duplicated, modified or distributed pursuant to the terms and
 *  conditions of a separate, written license agreement executed between you and Broadcom
 *  (an "Authorized License").  Except as set forth in an Authorized License, Broadcom grants
 *  no license (express or implied), right to use, or waiver of any kind with respect to the
 *  Software, and Broadcom expressly reserves all rights in and to the Software and all
 *  intellectual property rights therein.  IF YOU HAVE NO AUTHORIZED LICENSE, THEN YOU
 *  HAVE NO RIGHT TO USE THIS SOFTWARE IN ANY WAY, AND SHOULD IMMEDIATELY
 *  NOTIFY BROADCOM AND DISCONTINUE ALL USE OF THE SOFTWARE.
 *
 *  Except as expressly set forth in the Authorized License,
 *
 *  1.     This program, including its structure, sequence and organization, constitutes the valuable trade
 *  secrets of Broadcom, and you shall use all reasonable efforts to protect the confidentiality thereof,
 *  and to use this information only in connection with your use of Broadcom integrated circuit products.
 *
 *  2.     TO THE MAXIMUM EXTENT PERMITTED BY LAW, THE SOFTWARE IS PROVIDED "AS IS"
 *  AND WITH ALL FAULTS AND BROADCOM MAKES NO PROMISES, REPRESENTATIONS OR
 *  WARRANTIES, EITHER EXPRESS, IMPLIED, STATUTORY, OR OTHERWISE, WITH RESPECT TO
 *  THE SOFTWARE.  BROADCOM SPECIFICALLY DISCLAIMS ANY AND ALL IMPLIED WARRANTIES
 *  OF TITLE, MERCHANTABILITY, NONINFRINGEMENT, FITNESS FOR A PARTICULAR PURPOSE,
 *  LACK OF VIRUSES, ACCURACY OR COMPLETENESS, QUIET ENJOYMENT, QUIET POSSESSION
 *  OR CORRESPONDENCE TO DESCRIPTION. YOU ASSUME THE ENTIRE RISK ARISING OUT OF
 *  USE OR PERFORMANCE OF THE SOFTWARE.
 *
 *  3.     TO THE MAXIMUM EXTENT PERMITTED BY LAW, IN NO EVENT SHALL BROADCOM OR ITS
 *  LICENSORS BE LIABLE FOR (i) CONSEQUENTIAL, INCIDENTAL, SPECIAL, INDIRECT, OR
 *  EXEMPLARY DAMAGES WHATSOEVER ARISING OUT OF OR IN ANY WAY RELATING TO YOUR
 *  USE OF OR INABILITY TO USE THE SOFTWARE EVEN IF BROADCOM HAS BEEN ADVISED OF
 *  THE POSSIBILITY OF SUCH DAMAGES; OR (ii) ANY AMOUNT IN EXCESS OF THE AMOUNT
 *  ACTUALLY PAID FOR THE SOFTWARE ITSELF OR U.S. $1, WHICHEVER IS GREATER. THESE
 *  LIMITATIONS SHALL APPLY NOTWITHSTANDING ANY FAILURE OF ESSENTIAL PURPOSE OF
 *  ANY LIMITED REMEDY.
******************************************************************************/

/* This file is autogenerated, do not edit. */

#ifndef BSP_MEMCARCH__H
#define BSP_MEMCARCH__H

#ifdef __cplusplus
extern "C"
{
#endif

/* COMMANDS for the "MemcArch" component */
typedef enum
{
    Bsp_CmdMemcArch_eEnPcie = 0x00,
    Bsp_CmdMemcArch_eRedacted_0x01 = 0x01,
    Bsp_CmdMemcArch_eRedacted_0x02 = 0x02,
    Bsp_CmdMemcArch_eEnGeneric = 0x03,
    Bsp_CmdMemcArch_eRedacted_0x04 = 0x04,
    Bsp_CmdMemcArch_eRedacted_0x05 = 0x05,
    Bsp_CmdMemcArch_eRedacted_0x06 = 0x06,
    Bsp_CmdMemcArch_eRedacted_0x07 = 0x07,
    Bsp_CmdMemcArch_eRedacted_0x08 = 0x08,
    Bsp_CmdMemcArch_eQueryUserTag = 0x09,
    Bsp_CmdMemcArch_eMax
} Bsp_CmdMemcArch_e;


/*PARAMATERS for the Bsp_CmdMemcArch_eEnPcie command  */
/*input*/
typedef struct
{
    uint32_t addrRangeStart;
    uint32_t addrRangeEnd;
    uint8_t  exclusiveMode;
    uint8_t  enablePCIe0;
    uint8_t  enablePCIe1;
    uint8_t  cmdPending;

}Bsp_MemcArch_EnPcie_InFields_t;
/*output*/
typedef struct
{
    uint8_t  memcIndex;
    uint8_t  archIndex;
    uint8_t  reserved[2];

}Bsp_MemcArch_EnPcie_OutFields_t;


/*PARAMATERS for the Bsp_CmdMemcArch_eEnGeneric command  */
/*input*/
typedef struct
{
    uint32_t modeControl;
    uint32_t addrRangeStart;
    uint32_t addrRangeEnd;
    uint32_t scbClientReadRights[8];
    uint32_t scbClientWriteRights[8];
    uint8_t  bgCkEnable;
    uint8_t  userTag;
    uint8_t  reserved[2];

}Bsp_MemcArch_EnGeneric_InFields_t;
/*output*/
typedef struct
{
    uint8_t  memcIndex;
    uint8_t  archIndex;
    uint8_t  reserved[2];

}Bsp_MemcArch_EnGeneric_OutFields_t;


/*PARAMATERS for the Bsp_CmdMemcArch_eQueryUserTag command  */
/*input*/
typedef struct
{
    unsigned dummy; /*no elements*/

}Bsp_MemcArch_QueryUserTag_InFields_t;
/*output*/
typedef struct
{
    uint8_t  userTagCount;
    uint8_t  reserved[3];
    uint32_t userTagEntry[24];

}Bsp_MemcArch_QueryUserTag_OutFields_t;


#ifdef __cplusplus
}
#endif
#endif