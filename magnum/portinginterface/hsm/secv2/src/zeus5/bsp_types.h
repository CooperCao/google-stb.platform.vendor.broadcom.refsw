/******************************************************************************
 *  Copyright (C) 2017 Broadcom. The term "Broadcom" refers to Broadcom Limited and/or its subsidiaries.
 *
 *  This program is the proprietary software of Broadcom and/or its licensors,
 *  and may only be used, duplicated, modified or distributed pursuant to the terms and
 *  conditions of a separate, written license agreement executed between you and Broadcom
 *  (an "Authorized License").  Except as set forth in an Authorized License, Broadcom grants
 *  no license (express or implied), right to use, or waiver of any kind with respect to the
 *  Software, and Broadcom expressly reserves all rights in and to the Software and all
 *  intellectual property rights therein.  IF YOU HAVE NO AUTHORIZED LICENSE, THEN YOU
 *  HAVE NO RIGHT TO USE THIS SOFTWARE IN ANY WAY, AND SHOULD IMMEDIATELY
 *  NOTIFY BROADCOM AND DISCONTINUE ALL USE OF THE SOFTWARE.
 *
 *  Except as expressly set forth in the Authorized License,
 *
 *  1.     This program, including its structure, sequence and organization, constitutes the valuable trade
 *  secrets of Broadcom, and you shall use all reasonable efforts to protect the confidentiality thereof,
 *  and to use this information only in connection with your use of Broadcom integrated circuit products.
 *
 *  2.     TO THE MAXIMUM EXTENT PERMITTED BY LAW, THE SOFTWARE IS PROVIDED "AS IS"
 *  AND WITH ALL FAULTS AND BROADCOM MAKES NO PROMISES, REPRESENTATIONS OR
 *  WARRANTIES, EITHER EXPRESS, IMPLIED, STATUTORY, OR OTHERWISE, WITH RESPECT TO
 *  THE SOFTWARE.  BROADCOM SPECIFICALLY DISCLAIMS ANY AND ALL IMPLIED WARRANTIES
 *  OF TITLE, MERCHANTABILITY, NONINFRINGEMENT, FITNESS FOR A PARTICULAR PURPOSE,
 *  LACK OF VIRUSES, ACCURACY OR COMPLETENESS, QUIET ENJOYMENT, QUIET POSSESSION
 *  OR CORRESPONDENCE TO DESCRIPTION. YOU ASSUME THE ENTIRE RISK ARISING OUT OF
 *  USE OR PERFORMANCE OF THE SOFTWARE.
 *
 *  3.     TO THE MAXIMUM EXTENT PERMITTED BY LAW, IN NO EVENT SHALL BROADCOM OR ITS
 *  LICENSORS BE LIABLE FOR (i) CONSEQUENTIAL, INCIDENTAL, SPECIAL, INDIRECT, OR
 *  EXEMPLARY DAMAGES WHATSOEVER ARISING OUT OF OR IN ANY WAY RELATING TO YOUR
 *  USE OF OR INABILITY TO USE THE SOFTWARE EVEN IF BROADCOM HAS BEEN ADVISED OF
 *  THE POSSIBILITY OF SUCH DAMAGES; OR (ii) ANY AMOUNT IN EXCESS OF THE AMOUNT
 *  ACTUALLY PAID FOR THE SOFTWARE ITSELF OR U.S. $1, WHICHEVER IS GREATER. THESE
 *  LIMITATIONS SHALL APPLY NOTWITHSTANDING ANY FAILURE OF ESSENTIAL PURPOSE OF
 *  ANY LIMITED REMEDY.
******************************************************************************/

/* This file is autogenerated, do not edit. */

#ifndef BSP_TYPES__H
#define BSP_TYPES__H

#ifdef __cplusplus
extern "C"
{
#endif



/* used by components[SystemCr] */
typedef enum Bsp_ExternalInterfaceState_e
{
    Bsp_ExternalInterfaceState_eClosed = 0,
    Bsp_ExternalInterfaceState_eRestricted = 2,
    Bsp_ExternalInterfaceState_eOpen = 3,
    Bsp_ExternalInterfaceState_eMax
} Bsp_ExternalInterfaceState_e;


/* used by components[Control] */
typedef enum BCMD_ExceptionStatusRead_KeepStatus_e
{
    BCMD_ExceptionStatusRead_KeepStatus_eClearRegs = 0x00,
    BCMD_ExceptionStatusRead_KeepStatus_eDoNotClear = 0x05,
    BCMD_ExceptionStatusRead_KeepStatus_eMax
} BCMD_ExceptionStatusRead_KeepStatus_e;


/* used by components[Control] */
typedef enum BCMD_BootStatusRead_KeepStatus_e
{
    BCMD_BootStatusRead_KeepStatus_eClearRegs = 0x00,
    BCMD_BootStatusRead_KeepStatus_eDoNotClear = 0x05,
    BCMD_BootStatusRead_KeepStatus_eMax
} BCMD_BootStatusRead_KeepStatus_e;


/* used by components[Control] */
typedef enum BCMD_ExceptionCaptureRegRead_KeepStatus_e
{
    BCMD_ExceptionCaptureRegRead_KeepStatus_eClearRegs = 0x00,
    BCMD_ExceptionCaptureRegRead_KeepStatus_eDoNotClear = 0x05,
    BCMD_ExceptionCaptureRegRead_KeepStatus_eMax
} BCMD_ExceptionCaptureRegRead_KeepStatus_e;


/* used by components[Control] */
typedef enum BCMD_ExceptionCaptureRegRead_Device_e
{
    BCMD_ExceptionCaptureRegRead_Device_eRedacted_0x00 = 0x00,
    BCMD_ExceptionCaptureRegRead_Device_eRedacted_0x01 = 0x01,
    BCMD_ExceptionCaptureRegRead_Device_eMemcARCH = 0x02,
    BCMD_ExceptionCaptureRegRead_Device_eRedacted_0x03 = 0x03,
    BCMD_ExceptionCaptureRegRead_Device_eRedacted_0x04 = 0x04,
    BCMD_ExceptionCaptureRegRead_Device_eRedacted_0x05 = 0x05,
    BCMD_ExceptionCaptureRegRead_Device_eRedacted_0x06 = 0x06,
    BCMD_ExceptionCaptureRegRead_Device_eRedacted_0x07 = 0x07,
    BCMD_ExceptionCaptureRegRead_Device_eRedacted_0x08 = 0x08,
    BCMD_ExceptionCaptureRegRead_Device_eRedacted_0x09 = 0x09,
    BCMD_ExceptionCaptureRegRead_Device_eMax
} BCMD_ExceptionCaptureRegRead_Device_e;


/* used by components[Crypto] */
typedef enum Bsp_Crypto_Rsa_Size_e
{
    Bsp_Crypto_Rsa_Size_e1024 = 0,
    Bsp_Crypto_Rsa_Size_e2048 = 1,
    Bsp_Crypto_Rsa_Size_eMax
} Bsp_Crypto_Rsa_Size_e;


/* used by components[Crypto] */
typedef enum Bsp_Crypto_RsaCounterMeasure_e
{
    Bsp_Crypto_RsaCounterMeasure_eOff = 0,
    Bsp_Crypto_RsaCounterMeasure_eOn = 1,
    Bsp_Crypto_RsaCounterMeasure_eMax
} Bsp_Crypto_RsaCounterMeasure_e;


/* used by components[Crypto]  caVendors[SAGE] */
typedef enum Bsp_Crypto_AesBulkOp_e
{
    Bsp_Crypto_AesBulkOp_eEncryptECB = 0,
    Bsp_Crypto_AesBulkOp_eDecryptECB = 1,
    Bsp_Crypto_AesBulkOp_eEncryptCBC = 2,
    Bsp_Crypto_AesBulkOp_eDecryptCBC = 3,
    Bsp_Crypto_AesBulkOp_eMax
} Bsp_Crypto_AesBulkOp_e;


/* used by components[Crypto] */
typedef enum Bsp_Crypto_Aes1BlockOp_e
{
    Bsp_Crypto_Aes1BlockOp_eEncrypt = 0,
    Bsp_Crypto_Aes1BlockOp_eDecrypt = 1,
    Bsp_Crypto_Aes1BlockOp_eMax
} Bsp_Crypto_Aes1BlockOp_e;


/* used by components[Crypto] */
typedef enum Bsp_Crypto_Aes1BlockKeySize_e
{
    Bsp_Crypto_Aes1BlockKeySize_e128 = 0,
    Bsp_Crypto_Aes1BlockKeySize_e256 = 1,
    Bsp_Crypto_Aes1BlockKeySize_eMax
} Bsp_Crypto_Aes1BlockKeySize_e;


/* used by components[GisbBlocker] */
typedef enum Bsp_GisbBlockerOwner_e
{
    Bsp_GisbBlockerOwner_eNone = 0,
    Bsp_GisbBlockerOwner_eBSP = 1,
    Bsp_GisbBlockerOwner_eHost = 2,
    Bsp_GisbBlockerOwner_eSAGE = 3,
    Bsp_GisbBlockerOwner_eMax
} Bsp_GisbBlockerOwner_e;


/* used by components[GisbBlocker] */
typedef enum Bsp_GisbBlockerStatus_e
{
    Bsp_GisbBlockerStatus_eFree = 0,
    Bsp_GisbBlockerStatus_eInUse = 1,
    Bsp_GisbBlockerStatus_eMax
} Bsp_GisbBlockerStatus_e;


/* used by components[KeyLadder] */
typedef enum Bsp_CustomerSubMode_e
{
    Bsp_CustomerSubMode_eGeneric_Ca_64_4 = 0x0,
    Bsp_CustomerSubMode_eGeneric_Cp_64_4 = 0x1,
    Bsp_CustomerSubMode_eGeneric_Ca_64_5 = 0x2,
    Bsp_CustomerSubMode_eGeneric_Cp_64_5 = 0x3,
    Bsp_CustomerSubMode_eGeneric_Ca_128_4 = 0x4,
    Bsp_CustomerSubMode_eGeneric_Cp_128_4 = 0x5,
    Bsp_CustomerSubMode_eGeneric_Ca_128_5 = 0x6,
    Bsp_CustomerSubMode_eGeneric_Cp_128_5 = 0x7,
    Bsp_CustomerSubMode_eGeneric_Ca_64_7 = 0x8,
    Bsp_CustomerSubMode_eGeneric_Ca_128_7 = 0x9,
    Bsp_CustomerSubMode_eGeneric_Ca_64_45 = 0xa,
    Bsp_CustomerSubMode_eGeneric_Cp_64_45 = 0xb,
    Bsp_CustomerSubMode_eSageBlDecrypt = 0xc,
    Bsp_CustomerSubMode_eSage_128_5 = 0xd,
    Bsp_CustomerSubMode_eSage_128_4 = 0xe,
    Bsp_CustomerSubMode_eReserved13 = 0xd,
    Bsp_CustomerSubMode_eReserved14 = 0xe,
    Bsp_CustomerSubMode_eRedacted_0xf = 0xf,
    Bsp_CustomerSubMode_eReserved = 0x10,
    Bsp_CustomerSubMode_eGeneralPurpose1 = 0x11,
    Bsp_CustomerSubMode_eGeneralPurpose2 = 0x12,
    Bsp_CustomerSubMode_eEtsi_5 = 0x13,
    Bsp_CustomerSubMode_eMax
} Bsp_CustomerSubMode_e;


/* used by components[ElCajon Hdcp1x Hdcp22 KeyLadder SystemCr] */
typedef enum Bsp_RootKeySrc_e
{
    Bsp_RootKeySrc_eCusKey = 0,
    Bsp_RootKeySrc_eOtpa = 1,
    Bsp_RootKeySrc_eOtpb = 2,
    Bsp_RootKeySrc_eOtpc = 3,
    Bsp_RootKeySrc_eOtpd = 4,
    Bsp_RootKeySrc_eOtpe = 5,
    Bsp_RootKeySrc_eOtpf = 6,
    Bsp_RootKeySrc_eOtpg = 7,
    Bsp_RootKeySrc_eOtph = 8,
    Bsp_RootKeySrc_eAskmGlobalKey = 9,
    Bsp_RootKeySrc_eMax
} Bsp_RootKeySrc_e;


/* used by components[ElCajon Hdcp1x Hdcp22 KeyLadder SystemCr] */
typedef enum Bsp_StbOwnerId_e
{
    Bsp_StbOwnerId_eOtpVal = 0,
    Bsp_StbOwnerId_eOneVal = 1,
    Bsp_StbOwnerId_eZeroVal = 2,
    Bsp_StbOwnerId_eMax = 3
} Bsp_StbOwnerId_e;


/* used by components[Hdcp1x KeyLadder] */
typedef enum Bsp_KeyLadderType_e
{
    Bsp_KeyLadderType_eTdesAba = 0,
    Bsp_KeyLadderType_eAes128 = 1,
    Bsp_KeyLadderType_eMax = 2
} Bsp_KeyLadderType_e;


/* used by components[KeySlot] */
typedef enum Bsp_KeySlotOwnership_e
{
    Bsp_KeySlotOwnership_eFree = 0,
    Bsp_KeySlotOwnership_eSage = 1,
    Bsp_KeySlotOwnership_eReserved1 = 1,
    Bsp_KeySlotOwnership_eShared = 2,
    Bsp_KeySlotOwnership_eMax
} Bsp_KeySlotOwnership_e;


/* used by components[KeySlot] */
typedef enum Bsp_KeySlotInvalidateOperation_e
{
    Bsp_KeySlotInvalidateOperation_eInvalidateOneEntry = 0,
    Bsp_KeySlotInvalidateOperation_eInvalidateAll = 1,
    Bsp_KeySlotInvalidateOperation_eMax
} Bsp_KeySlotInvalidateOperation_e;


/* used by components[KeyLadder KeySlot] */
typedef enum Bsp_KeySlotIvType_e
{
    Bsp_KeySlotIvType_eIv = 1,
    Bsp_KeySlotIvType_eAesShortIv = 2,
    Bsp_KeySlotIvType_eMax
} Bsp_KeySlotIvType_e;


/* used by components[ElCajon KeyLadder KeySlot] */
typedef enum Bsp_KeyMode_e
{
    Bsp_KeyMode_eRegular = 0,
    Bsp_KeyMode_eDes56 = 1,
    Bsp_KeyMode_eReserved2 = 2,
    Bsp_KeyMode_eReserved3 = 3,
    Bsp_KeyMode_eDvbConformance = 4,
    Bsp_KeyMode_eRedacted_5 = 5,
    Bsp_KeyMode_eReserved5 = 5,
    Bsp_KeyMode_eMax
} Bsp_KeyMode_e;


/* used by components[ElCajon Hdcp22 KeyLadder KeySlot] */
typedef enum Bsp_Sc01ModeWordMapping_e
{
    Bsp_Sc01ModeWordMapping_eClear = 0,
    Bsp_Sc01ModeWordMapping_eOdd = 1,
    Bsp_Sc01ModeWordMapping_eEven = 2,
    Bsp_Sc01ModeWordMapping_eMax
} Bsp_Sc01ModeWordMapping_e;


/* used by components[Crypto KeyLadder Rv] */
typedef enum Bsp_VklId_e
{
    Bsp_VklId_e0 = 0,
    Bsp_VklId_e1 = 1,
    Bsp_VklId_e2 = 2,
    Bsp_VklId_e3 = 3,
    Bsp_VklId_e4 = 4,
    Bsp_VklId_e5 = 5,
    Bsp_VklId_e6 = 6,
    Bsp_VklId_e7 = 7,
    Bsp_VklId_eMax
} Bsp_VklId_e;


/* used by components[Crypto KeyLadder Rv] */
typedef enum Bsp_KeyLadderLayer_e
{
    Bsp_KeyLadderLayer_eKey4 = 4,
    Bsp_KeyLadderLayer_eKey5 = 5,
    Bsp_KeyLadderLayer_eKey6 = 6,
    Bsp_KeyLadderLayer_eKey7 = 7,
    Bsp_KeyLadderLayer_eMax
} Bsp_KeyLadderLayer_e;


/* used by components[Rv] */
typedef enum Bsp_CmdRv_SsblDecryptionMode_e
{
    Bsp_CmdRv_SsblDecryptionMode_eTo,
    Bsp_CmdRv_SsblDecryptionMode_eBe,
    Bsp_CmdRv_SsblDecryptionMode_eDefined,
    Bsp_CmdRv_SsblDecryptionMode_eBy,
    Bsp_CmdRv_SsblDecryptionMode_eBfw,
    Bsp_CmdRv_SsblDecryptionMode_eTeam,
    Bsp_CmdRv_SsblDecryptionMode_eMax
} Bsp_CmdRv_SsblDecryptionMode_e;


/* used by components[ElCajon Hdcp22 KeyLadder KeySlot] */
typedef enum Bsp_KeySlotType_e
{
    Bsp_KeySlotType_eIvPerSlot128 = 0,
    Bsp_KeySlotType_eIvPerBlock128 = 1,
    Bsp_KeySlotType_eIvPerBlock256 = 2,
    Bsp_KeySlotType_eIvPerEntry256 = 3,
    Bsp_KeySlotType_eMax
} Bsp_KeySlotType_e;


/* used by components[KeyLadder] */
typedef enum Bsp_KeySize_e
{
    Bsp_KeySize_e64 = 0,
    Bsp_KeySize_e128 = 1,
    Bsp_KeySize_e192 = 2,
    Bsp_KeySize_e256 = 3,
    Bsp_KeySize_eMax
} Bsp_KeySize_e;


/* used by components[ElCajon Hdcp22 KeyLadder KeySlot] */
typedef enum Bsp_KeySlotEntryType_e
{
    Bsp_KeySlotEntryType_eOddKey = 0,
    Bsp_KeySlotEntryType_eEvenKey = 1,
    Bsp_KeySlotEntryType_eClearKey = 2,
    Bsp_KeySlotEntryType_eMax
} Bsp_KeySlotEntryType_e;


/* used by components[ElCajon Hdcp22 KeyLadder KeySlot] */
typedef enum Bsp_KeySlotBlockType_e
{
    Bsp_KeySlotBlockType_eCpd = 0,
    Bsp_KeySlotBlockType_eCa = 1,
    Bsp_KeySlotBlockType_eCps = 2,
    Bsp_KeySlotBlockType_eMax
} Bsp_KeySlotBlockType_e;


/* used by components[Hdcp1x Hdcp22 KeyLadder] */
typedef enum Bsp_OwnerIdSelect_e
{
    Bsp_OwnerIdSelect_eMsp0 = 0,
    Bsp_OwnerIdSelect_eMsp1 = 1,
    Bsp_OwnerIdSelect_eUse1 = 2,
    Bsp_OwnerIdSelect_eMax
} Bsp_OwnerIdSelect_e;


/* used by components[KeyLadder] */
typedef enum Bsp_KeyLadderOp_e
{
    Bsp_KeyLadderOp_eDecrypt = 0,
    Bsp_KeyLadderOp_eEncrypt = 1,
    Bsp_KeyLadderOp_eMax
} Bsp_KeyLadderOp_e;


/* used by components[ElCajon Hdcp1x Hdcp22 KeyLadder] */
typedef enum Bsp_Askm_MaskKeySel_e
{
    Bsp_Askm_MaskKeySel_eRealMaskKey = 0,
    Bsp_Askm_MaskKeySel_eRedacted_1 = 1,
    Bsp_Askm_MaskKeySel_eReserved1 = 1,
    Bsp_Askm_MaskKeySel_eFixedMaskKey = 2,
    Bsp_Askm_MaskKeySel_eMax
} Bsp_Askm_MaskKeySel_e;


/* used by components[KeyLadder] */
typedef enum Bsp_ConfigKkcv_Operation_e
{
    Bsp_ConfigKkcv_Operation_eInvalidateKkcv = 0,
    Bsp_ConfigKkcv_Operation_eImportKkcv = 1,
    Bsp_ConfigKkcv_Operation_eMax = 2
} Bsp_ConfigKkcv_Operation_e;


/* used by components[KeyLadder] */
typedef enum Bsp_KeyLadder_ApplyKkcv_e
{
    Bsp_KeyLadder_ApplyKkcv_eNo = 0,
    Bsp_KeyLadder_ApplyKkcv_eYes = 1,
    Bsp_KeyLadder_ApplyKkcv_eMax = 2
} Bsp_KeyLadder_ApplyKkcv_e;


/* used by components[OtpDataSection OtpMode0] */
typedef enum Bsp_Otp_NumMaxProgErrors_e
{
    Bsp_Otp_NumMaxProgErrors_e0 = 0,
    Bsp_Otp_NumMaxProgErrors_e1 = 1,
    Bsp_Otp_NumMaxProgErrors_e2 = 2,
    Bsp_Otp_NumMaxProgErrors_eMax
} Bsp_Otp_NumMaxProgErrors_e;


/* used by components[OtpMode0] */
typedef enum Bsp_OtpMode0_Prog_SectionType_e
{
    Bsp_OtpMode0_Prog_SectionType_eKey = 0,
    Bsp_OtpMode0_Prog_SectionType_eHash = 1,
    Bsp_OtpMode0_Prog_SectionType_eRedacted_2 = 2,
    Bsp_OtpMode0_Prog_SectionType_eRedacted_3 = 3,
    Bsp_OtpMode0_Prog_SectionType_eMax
} Bsp_OtpMode0_Prog_SectionType_e;


/* used by components[OtpMode0] */
typedef enum Bsp_Otp_KeyType_e
{
    Bsp_Otp_KeyType_eA = 0,
    Bsp_Otp_KeyType_eB = 1,
    Bsp_Otp_KeyType_eC = 2,
    Bsp_Otp_KeyType_eD = 3,
    Bsp_Otp_KeyType_eE = 4,
    Bsp_Otp_KeyType_eF = 5,
    Bsp_Otp_KeyType_eG = 6,
    Bsp_Otp_KeyType_eH = 7,
    Bsp_Otp_KeyType_eMax
} Bsp_Otp_KeyType_e;


/* used by components[OtpMode0] */
typedef enum Bsp_Otp_Mc0SField_e
{
    Bsp_Otp_Mc0SField_eRedacted_0 = 0,
    Bsp_Otp_Mc0SField_eRedacted_1 = 1,
    Bsp_Otp_Mc0SField_eRedacted_2 = 2,
    Bsp_Otp_Mc0SField_eRedacted_3 = 3,
    Bsp_Otp_Mc0SField_eRedacted_4 = 4,
    Bsp_Otp_Mc0SField_eMax
} Bsp_Otp_Mc0SField_e;


/* used by components[OtpMode0] */
typedef enum Bsp_Otp_KeyField_e
{
    Bsp_Otp_KeyField_eMc0CustomerMode = 0,
    Bsp_Otp_KeyField_eRedacted_1 = 1,
    Bsp_Otp_KeyField_eMc0RootKeySwapDisallow = 2,
    Bsp_Otp_KeyField_eRedacted_3 = 3,
    Bsp_Otp_KeyField_eMc0DeobfuscationEnable = 4,
    Bsp_Otp_KeyField_eMc0CaKeyLadderDisallow = 5,
    Bsp_Otp_KeyField_eMc0CpKeyLadderDisallow = 6,
    Bsp_Otp_KeyField_eMc0Gp1KeyLadderDisallow = 7,
    Bsp_Otp_KeyField_eMc0Gp2KeyLadderDisallow = 8,
    Bsp_Otp_KeyField_eMc0SageKeyLadderDisallow = 9,
    Bsp_Otp_KeyField_eRedacted_10 = 10,
    Bsp_Otp_KeyField_eRedacted_11 = 11,
    Bsp_Otp_KeyField_eMc0BlackBoxId = 12,
    Bsp_Otp_KeyField_eMc0Use256Key = 13,
    Bsp_Otp_KeyField_eRedacted_14 = 14,
    Bsp_Otp_KeyField_eKeyID = 15,
    Bsp_Otp_KeyField_eKeyHash = 16,
    Bsp_Otp_KeyField_eMax
} Bsp_Otp_KeyField_e;


/* used by components[OtpMode0] */
typedef enum Bsp_Otp_MiscField_e
{
    Bsp_Otp_MiscField_eRedacted_0 = 0,
    Bsp_Otp_MiscField_eMax
} Bsp_Otp_MiscField_e;


/* used by components[OtpMsp] */
typedef enum Bsp_Otp_MspType_e
{
    Bsp_Otp_MspType_eData = 0,
    Bsp_Otp_MspType_eLock = 1,
    Bsp_Otp_MspType_eMax
} Bsp_Otp_MspType_e;


/* used by components[OtpDataSection] */
typedef enum Bsp_Otp_DataSection_e
{
    Bsp_Otp_DataSection_e0 = 0,
    Bsp_Otp_DataSection_e1 = 1,
    Bsp_Otp_DataSection_e2 = 2,
    Bsp_Otp_DataSection_e3 = 3,
    Bsp_Otp_DataSection_e4 = 4,
    Bsp_Otp_DataSection_e5 = 5,
    Bsp_Otp_DataSection_e6 = 6,
    Bsp_Otp_DataSection_e7 = 7,
    Bsp_Otp_DataSection_eMax
} Bsp_Otp_DataSection_e;


/* used by components[Rv] */
typedef enum Bsp_CmdRv_RsaKeyId_e
{
    Bsp_CmdRv_RsaKeyId_eKey1 = 1,
    Bsp_CmdRv_RsaKeyId_eKey2 = 2,
    Bsp_CmdRv_RsaKeyId_eKey3 = 3,
    Bsp_CmdRv_RsaKeyId_eKey4 = 4,
    Bsp_CmdRv_RsaKeyId_eMax
} Bsp_CmdRv_RsaKeyId_e;


/* used by components[Rv] */
typedef enum Bsp_CmdRv_RsaRootKeyId_e
{
    Bsp_CmdRv_RsaRootKeyId_eKey0Prime = 0,
    Bsp_CmdRv_RsaRootKeyId_eKey0 = 1,
    Bsp_CmdRv_RsaRootKeyId_eMax
} Bsp_CmdRv_RsaRootKeyId_e;


/* used by components[Rv] */
typedef enum Bsp_CmdRv_RegionId_e
{
    Bsp_CmdRv_RegionId_eRegionMin = 0x00,
    Bsp_CmdRv_RegionId_eCpu0 = 0x00,
    Bsp_CmdRv_RegionId_eCpu1 = 0x01,
    Bsp_CmdRv_RegionId_eCpu2 = 0x02,
    Bsp_CmdRv_RegionId_eCpu3 = 0x03,
    Bsp_CmdRv_RegionId_eCpu4 = 0x04,
    Bsp_CmdRv_RegionId_eCpu5 = 0x05,
    Bsp_CmdRv_RegionId_eCpu6 = 0x06,
    Bsp_CmdRv_RegionId_eCpu7 = 0x07,
    Bsp_CmdRv_RegionId_eCpuMax = 0x07,
    Bsp_CmdRv_RegionId_eRave0 = 0x08,
    Bsp_CmdRv_RegionId_eAudio0 = 0x09,
    Bsp_CmdRv_RegionId_eRedacted_0x0A = 0x0A,
    Bsp_CmdRv_RegionId_eVdec0_Il2a = 0x0B,
    Bsp_CmdRv_RegionId_eVdec0_Ila = 0x0C,
    Bsp_CmdRv_RegionId_eVdec0_Ola = 0x0D,
    Bsp_CmdRv_RegionId_eAvs = 0x0E,
    Bsp_CmdRv_RegionId_eRedacted_0x0E = 0x0E,
    Bsp_CmdRv_RegionId_eVice0_Pic = 0x0F,
    Bsp_CmdRv_RegionId_eVice0_Mb = 0x10,
    Bsp_CmdRv_RegionId_eRedacted_0x11 = 0x11,
    Bsp_CmdRv_RegionId_eRedacted_0x12 = 0x12,
    Bsp_CmdRv_RegionId_eRedacted_0x13 = 0x13,
    Bsp_CmdRv_RegionId_eRedacted_0x14 = 0x14,
    Bsp_CmdRv_RegionId_eVdec1_Ila = 0x15,
    Bsp_CmdRv_RegionId_eVdec1_Ola = 0x16,
    Bsp_CmdRv_RegionId_eRedacted_0x17 = 0x17,
    Bsp_CmdRv_RegionId_eRedacted_0x18 = 0x18,
    Bsp_CmdRv_RegionId_eRedacted_0x19 = 0x19,
    Bsp_CmdRv_RegionId_eRedacted_0x1A = 0x1A,
    Bsp_CmdRv_RegionId_eRedacted_0x1B = 0x1B,
    Bsp_CmdRv_RegionId_eRedacted_0x1C = 0x1C,
    Bsp_CmdRv_RegionId_eRedacted_0x1D = 0x1D,
    Bsp_CmdRv_RegionId_eRedacted_0x1E = 0x1E,
    Bsp_CmdRv_RegionId_eRegionMax
} Bsp_CmdRv_RegionId_e;


/* used by components[Rv] */
typedef enum Bsp_CmdRv_RegionDisable_e
{
    Bsp_CmdRv_RegionDisable_eAllow = 0x00,
    Bsp_CmdRv_RegionDisable_eDisallow = 0x0E,
    Bsp_CmdRv_RegionDisable_eMax
} Bsp_CmdRv_RegionDisable_e;


/* used by components[Rv] */
typedef enum Bsp_CmdRv_BgCheck_e
{
    Bsp_CmdRv_BgCheck_eEnable = 0x00,
    Bsp_CmdRv_BgCheck_eDisable = 0x0D,
    Bsp_CmdRv_BgCheck_eMax
} Bsp_CmdRv_BgCheck_e;


/* used by components[Rv] */
typedef enum Bsp_CmdRv_InstrCheck_e
{
    Bsp_CmdRv_InstrCheck_eEnable = 0x00,
    Bsp_CmdRv_InstrCheck_eDisable = 0x0C,
    Bsp_CmdRv_InstrCheck_eMax
} Bsp_CmdRv_InstrCheck_e;


/* used by components[Rv] */
typedef enum Bsp_CmdRv_EnforceAuth_e
{
    Bsp_CmdRv_EnforceAuth_eNoEnforce = 0x00,
    Bsp_CmdRv_EnforceAuth_eEnforce = 0x0B,
    Bsp_CmdRv_EnforceAuth_eMax
} Bsp_CmdRv_EnforceAuth_e;


/* used by components[Rv] */
typedef enum Bsp_CmdRv_ResetOnVerifyFailure_e
{
    Bsp_CmdRv_ResetOnVerifyFailure_eNoReset = 0x0,
    Bsp_CmdRv_ResetOnVerifyFailure_eReset = 0x5,
    Bsp_CmdRv_ResetOnVerifyFailure_eMax
} Bsp_CmdRv_ResetOnVerifyFailure_e;


/* used by components[Rv] */
typedef enum Bsp_CmdRv_SageCrashResponse_e
{
    Bsp_CmdRv_SageCrashResponse_eResetSageOnly = 1,
    Bsp_CmdRv_SageCrashResponse_eResetChip = 2,
    Bsp_CmdRv_SageCrashResponse_eMax
} Bsp_CmdRv_SageCrashResponse_e;


/* used by components[Rv] */
typedef enum Bsp_CmdRv_QueryStatusBits_e
{
    Bsp_CmdRv_QueryStatusBits_eEnabled = 0,
    Bsp_CmdRv_QueryStatusBits_eAuthEnforce = 1,
    Bsp_CmdRv_QueryStatusBits_eSageOwned = 2,
    Bsp_CmdRv_QueryStatusBits_eLiveMergeInProg = 3,
    Bsp_CmdRv_QueryStatusBits_eLiveMergeFail = 4,
    Bsp_CmdRv_QueryStatusBits_eLiveMergePass = 5,
    Bsp_CmdRv_QueryStatusBits_eBgChkEnabled = 6,
    Bsp_CmdRv_QueryStatusBits_eFastChkStarted = 7,
    Bsp_CmdRv_QueryStatusBits_eFastChkFinished = 8,
    Bsp_CmdRv_QueryStatusBits_eFastChkResult = 9,
    Bsp_CmdRv_QueryStatusBits_eBgChkStarted = 10,
    Bsp_CmdRv_QueryStatusBits_eBgChkFinished = 11,
    Bsp_CmdRv_QueryStatusBits_eBgChkResult = 12,
    Bsp_CmdRv_QueryStatusBits_eReserved0 = 13,
    Bsp_CmdRv_QueryStatusBits_eReserved1 = 14,
    Bsp_CmdRv_QueryStatusBits_eReserved2 = 15,
    Bsp_CmdRv_QueryStatusBits_eMax
} Bsp_CmdRv_QueryStatusBits_e;

#ifdef __cplusplus
}
#endif
#endif