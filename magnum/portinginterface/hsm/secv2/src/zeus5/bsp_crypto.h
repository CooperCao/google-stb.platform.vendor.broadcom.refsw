/******************************************************************************
 *  Copyright (C) 2017 Broadcom. The term "Broadcom" refers to Broadcom Limited and/or its subsidiaries.
 *
 *  This program is the proprietary software of Broadcom and/or its licensors,
 *  and may only be used, duplicated, modified or distributed pursuant to the terms and
 *  conditions of a separate, written license agreement executed between you and Broadcom
 *  (an "Authorized License").  Except as set forth in an Authorized License, Broadcom grants
 *  no license (express or implied), right to use, or waiver of any kind with respect to the
 *  Software, and Broadcom expressly reserves all rights in and to the Software and all
 *  intellectual property rights therein.  IF YOU HAVE NO AUTHORIZED LICENSE, THEN YOU
 *  HAVE NO RIGHT TO USE THIS SOFTWARE IN ANY WAY, AND SHOULD IMMEDIATELY
 *  NOTIFY BROADCOM AND DISCONTINUE ALL USE OF THE SOFTWARE.
 *
 *  Except as expressly set forth in the Authorized License,
 *
 *  1.     This program, including its structure, sequence and organization, constitutes the valuable trade
 *  secrets of Broadcom, and you shall use all reasonable efforts to protect the confidentiality thereof,
 *  and to use this information only in connection with your use of Broadcom integrated circuit products.
 *
 *  2.     TO THE MAXIMUM EXTENT PERMITTED BY LAW, THE SOFTWARE IS PROVIDED "AS IS"
 *  AND WITH ALL FAULTS AND BROADCOM MAKES NO PROMISES, REPRESENTATIONS OR
 *  WARRANTIES, EITHER EXPRESS, IMPLIED, STATUTORY, OR OTHERWISE, WITH RESPECT TO
 *  THE SOFTWARE.  BROADCOM SPECIFICALLY DISCLAIMS ANY AND ALL IMPLIED WARRANTIES
 *  OF TITLE, MERCHANTABILITY, NONINFRINGEMENT, FITNESS FOR A PARTICULAR PURPOSE,
 *  LACK OF VIRUSES, ACCURACY OR COMPLETENESS, QUIET ENJOYMENT, QUIET POSSESSION
 *  OR CORRESPONDENCE TO DESCRIPTION. YOU ASSUME THE ENTIRE RISK ARISING OUT OF
 *  USE OR PERFORMANCE OF THE SOFTWARE.
 *
 *  3.     TO THE MAXIMUM EXTENT PERMITTED BY LAW, IN NO EVENT SHALL BROADCOM OR ITS
 *  LICENSORS BE LIABLE FOR (i) CONSEQUENTIAL, INCIDENTAL, SPECIAL, INDIRECT, OR
 *  EXEMPLARY DAMAGES WHATSOEVER ARISING OUT OF OR IN ANY WAY RELATING TO YOUR
 *  USE OF OR INABILITY TO USE THE SOFTWARE EVEN IF BROADCOM HAS BEEN ADVISED OF
 *  THE POSSIBILITY OF SUCH DAMAGES; OR (ii) ANY AMOUNT IN EXCESS OF THE AMOUNT
 *  ACTUALLY PAID FOR THE SOFTWARE ITSELF OR U.S. $1, WHICHEVER IS GREATER. THESE
 *  LIMITATIONS SHALL APPLY NOTWITHSTANDING ANY FAILURE OF ESSENTIAL PURPOSE OF
 *  ANY LIMITED REMEDY.
******************************************************************************/

/* This file is autogenerated, do not edit. */

#ifndef BSP_CRYPTO__H
#define BSP_CRYPTO__H

#ifdef __cplusplus
extern "C"
{
#endif

/* COMMANDS for the "Crypto" component */
typedef enum
{
    Bsp_CmdCrypto_eRng = 0x00,
    Bsp_CmdCrypto_eRsa = 0x02,
    Bsp_CmdCrypto_ePollRsa = 0x03,
    Bsp_CmdCrypto_eHmac = 0x04,
    Bsp_CmdCrypto_eSha = 0x05,
    Bsp_CmdCrypto_eAes1Block = 0x06,
    Bsp_CmdCrypto_eDes1Block = 0x07,
    Bsp_CmdCrypto_eMax
} Bsp_CmdCrypto_e;


/*PARAMETERS for the Bsp_CmdCrypto_eRng command  */
/*input*/
typedef struct
{
    uint16_t randomNumberLength;
    uint8_t  reserved[2];

}Bsp_CmdCrypto_Rng_InFields_t;
/*output*/
typedef struct
{
    uint32_t randomNumber[90];

}Bsp_CmdCrypto_Rng_OutFields_t;


/*PARAMETERS for the Bsp_CmdCrypto_eRsa command  */
/*input*/
typedef struct
{
    uint32_t rsaDataAddrMsb;
    uint32_t rsaDataAddr;
    uint8_t  rsaSize; /* enum type Bsp_Crypto_Rsa_Size_e */
    uint8_t  counterMeasure; /* enum type Bsp_Crypto_RsaCounterMeasure_e */
    uint8_t  reserved0[2];

}Bsp_CmdCrypto_Rsa_InFields_t;
/*output*/
typedef struct
{
    unsigned dummy; /*no elements*/

}Bsp_CmdCrypto_Rsa_OutFields_t;


/*PARAMETERS for the Bsp_CmdCrypto_ePollRsa command  */
/*input*/
typedef struct
{
    unsigned dummy; /*no elements*/

}Bsp_CmdCrypto_PollRsa_InFields_t;
/*output*/
typedef struct
{
    uint32_t outputData[64];

}Bsp_CmdCrypto_PollRsa_OutFields_t;


/*PARAMETERS for the Bsp_CmdCrypto_eHmac command  */
/*input*/
typedef struct
{
    uint32_t dataAddrHi;
    uint32_t dataAddrLo;
    uint32_t dataLengthBytes;
    uint8_t  keyLayer; /* enum type Bsp_KeyLadderLayer_e */
    uint8_t  vklId; /* enum type Bsp_VklId_e */
    uint8_t  keyType; /* enum type Bsp_Crypto_HmacKeyType_e */
    uint8_t  reserved0;
    uint8_t  shaType; /* enum type Bsp_Crypto_ShaType_e */
    uint8_t  isFirstDataBlock;
    uint8_t  isFinalDataBlock;
    uint8_t  reserved1;
    uint32_t userHmacKey[8];
    uint32_t hmac_State[18];

}Bsp_CmdCrypto_Hmac_InFields_t;
/*output*/
typedef struct
{
    uint32_t hmac_State[18];
    uint32_t hmac_Signature[8];

}Bsp_CmdCrypto_Hmac_OutFields_t;


/*PARAMETERS for the Bsp_CmdCrypto_eSha command  */
/*input*/
typedef struct
{
    uint32_t dataAddrHi;
    uint32_t dataAddrLo;
    uint32_t dataLengthBytes;
    uint8_t  reserved0[2];
    uint8_t  isKeyAppend;
    uint8_t  userKeySize; /* enum type Bsp_KeySize_e */
    uint8_t  shaType; /* enum type Bsp_Crypto_ShaType_e */
    uint8_t  isFirstDataBlock;
    uint8_t  isFinalDataBlock;
    uint8_t  reserved1;
    uint32_t sha_State[18];
    uint32_t userKey[8];

}Bsp_CmdCrypto_Sha_InFields_t;
/*output*/
typedef struct
{
    uint32_t sha_State[18];
    uint32_t sha_Digest[8];

}Bsp_CmdCrypto_Sha_OutFields_t;


/*PARAMETERS for the Bsp_CmdCrypto_eAes1Block command  */
/*input*/
typedef struct
{
    uint8_t  aesOperation; /* enum type Bsp_Crypto_Aes1BlockOp_e */
    uint8_t  aesKeySize; /* enum type Bsp_Crypto_Aes1BlockKeySize_e */
    uint8_t  reserved[2];
    uint32_t aesKey[8];
    uint32_t aesData[4];

}Bsp_CmdCrypto_Aes1Block_InFields_t;
/*output*/
typedef struct
{
    uint32_t aesData[4];

}Bsp_CmdCrypto_Aes1Block_OutFields_t;


/*PARAMETERS for the Bsp_CmdCrypto_eDes1Block command  */
/*input*/
typedef struct
{
    uint8_t  desOperation; /* enum type Bsp_Crypto_Des1BlockOp_e */
    uint8_t  desTdesTypeSel; /* enum type Bsp_Crypto_Des1Block_DesTdesTypeSel_e */
    uint8_t  reserved[2];
    uint32_t desKey[4];
    uint32_t desData[2];

}Bsp_CmdCrypto_Des1Block_InFields_t;
/*output*/
typedef struct
{
    uint32_t desData[2];

}Bsp_CmdCrypto_Des1Block_OutFields_t;


#ifdef __cplusplus
}
#endif
#endif