/******************************************************************************
 *  Copyright (C) 2018 Broadcom.
 *  The term "Broadcom" refers to Broadcom Inc. and/or its subsidiaries.
 *
 *  This program is the proprietary software of Broadcom and/or its licensors,
 *  and may only be used, duplicated, modified or distributed pursuant to
 *  the terms and conditions of a separate, written license agreement executed
 *  between you and Broadcom (an "Authorized License").  Except as set forth in
 *  an Authorized License, Broadcom grants no license (express or implied),
 *  right to use, or waiver of any kind with respect to the Software, and
 *  Broadcom expressly reserves all rights in and to the Software and all
 *  intellectual property rights therein. IF YOU HAVE NO AUTHORIZED LICENSE,
 *  THEN YOU HAVE NO RIGHT TO USE THIS SOFTWARE IN ANY WAY, AND SHOULD
 *  IMMEDIATELY NOTIFY BROADCOM AND DISCONTINUE ALL USE OF THE SOFTWARE.
 *
 *  Except as expressly set forth in the Authorized License,
 *
 *  1.     This program, including its structure, sequence and organization,
 *  constitutes the valuable trade secrets of Broadcom, and you shall use all
 *  reasonable efforts to protect the confidentiality thereof, and to use this
 *  information only in connection with your use of Broadcom integrated circuit
 *  products.
 *
 *  2.     TO THE MAXIMUM EXTENT PERMITTED BY LAW, THE SOFTWARE IS PROVIDED
 *  "AS IS" AND WITH ALL FAULTS AND BROADCOM MAKES NO PROMISES, REPRESENTATIONS
 *  OR WARRANTIES, EITHER EXPRESS, IMPLIED, STATUTORY, OR OTHERWISE, WITH
 *  RESPECT TO THE SOFTWARE.  BROADCOM SPECIFICALLY DISCLAIMS ANY AND ALL
 *  IMPLIED WARRANTIES OF TITLE, MERCHANTABILITY, NONINFRINGEMENT, FITNESS FOR
 *  A PARTICULAR PURPOSE, LACK OF VIRUSES, ACCURACY OR COMPLETENESS, QUIET
 *  ENJOYMENT, QUIET POSSESSION OR CORRESPONDENCE TO DESCRIPTION. YOU ASSUME
 *  THE ENTIRE RISK ARISING OUT OF USE OR PERFORMANCE OF THE SOFTWARE.
 *
 *  3.     TO THE MAXIMUM EXTENT PERMITTED BY LAW, IN NO EVENT SHALL BROADCOM
 *  OR ITS LICENSORS BE LIABLE FOR (i) CONSEQUENTIAL, INCIDENTAL, SPECIAL,
 *  INDIRECT, OR EXEMPLARY DAMAGES WHATSOEVER ARISING OUT OF OR IN ANY WAY
 *  RELATING TO YOUR USE OF OR INABILITY TO USE THE SOFTWARE EVEN IF BROADCOM
 *  HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES; OR (ii) ANY AMOUNT IN
 *  EXCESS OF THE AMOUNT ACTUALLY PAID FOR THE SOFTWARE ITSELF OR U.S. $1,
 *  WHICHEVER IS GREATER. THESE LIMITATIONS SHALL APPLY NOTWITHSTANDING ANY
 *  FAILURE OF ESSENTIAL PURPOSE OF ANY LIMITED REMEDY.
 ******************************************************************************/

/* This file is autogenerated, do not edit. */

#ifndef BSP_KEYSLOT__H
#define BSP_KEYSLOT__H

#ifdef __cplusplus
extern "C"
{
#endif

/* COMMANDS for the "KeySlot" component */
typedef enum
{
    Bsp_CmdKeySlot_eInit = 0x00,
    Bsp_CmdKeySlot_eQuery = 0x01,
    Bsp_CmdKeySlot_eSetOwnership = 0x02,
    Bsp_CmdKeySlot_eInvalidate = 0x03,
    Bsp_CmdKeySlot_ePidAdd = 0x04,
    Bsp_CmdKeySlot_ePidRemove = 0x05,
    Bsp_CmdKeySlot_eClearKeySet = 0x06,
    Bsp_CmdKeySlot_eClearIvSet = 0x07,
    Bsp_CmdKeySlot_eMulti2SysKeySet = 0x08,
    Bsp_CmdKeySlot_eMax
} Bsp_CmdKeySlot_e;


/*PARAMETERS for the Bsp_CmdKeySlot_eInit command  */
/*input*/
typedef struct
{
    uint8_t  keySlotNumberIvPerSlot128;
    uint8_t  keySlotNumberIvPerBlock128;
    uint8_t  keySlotNumberIvPerBlock256;
    uint8_t  keySlotNumberIvPerEntry256;

}Bsp_KeySlot_Init_InFields_t;
/*output*/
typedef struct
{
    uint8_t  keySlotNumberIvPerSlot128; /* enum type Bsp_KeySlotType_e */
    uint8_t  keySlotNumberIvPerBlock128; /* enum type Bsp_KeySlotType_e */
    uint8_t  keySlotNumberIvPerBlock256; /* enum type Bsp_KeySlotType_e */
    uint8_t  keySlotNumberIvPerEntry256; /* enum type Bsp_KeySlotType_e */

}Bsp_KeySlot_Init_OutFields_t;


/*PARAMETERS for the Bsp_CmdKeySlot_eQuery command  */
/*input*/
typedef struct
{
    unsigned dummy; /*no elements*/

}Bsp_KeySlot_Query_InFields_t;
/*output*/
typedef struct
{
    uint8_t  keySlotNumberIvPerSlot128; /* enum type Bsp_KeySlotType_e */
    uint8_t  keySlotNumberIvPerBlock128; /* enum type Bsp_KeySlotType_e */
    uint8_t  keySlotNumberIvPerBlock256; /* enum type Bsp_KeySlotType_e */
    uint8_t  keySlotNumberIvPerEntry256; /* enum type Bsp_KeySlotType_e */
    uint8_t  keySlotOwnership[228]; /* enum type Bsp_KeySlotOwnership_e */

}Bsp_KeySlot_Query_OutFields_t;


/*PARAMETERS for the Bsp_CmdKeySlot_eSetOwnership command  */
/*input*/
typedef struct
{
    uint8_t  keySlotType; /* enum type Bsp_KeySlotType_e */
    uint8_t  keySlotNumber;
    uint8_t  setKtsOwnership; /* enum type Bsp_KeySlotOwnership_e */
    uint8_t  reserved0;

}Bsp_KeySlot_SetOwnership_InFields_t;
/*output*/
typedef struct
{
    unsigned dummy; /*no elements*/

}Bsp_KeySlot_SetOwnership_OutFields_t;


/*PARAMETERS for the Bsp_CmdKeySlot_eInvalidate command  */
/*input*/
typedef struct
{
    uint8_t  blockType; /* enum type Bsp_KeySlotBlockType_e */
    uint8_t  entryType; /* enum type Bsp_KeySlotEntryType_e */
    uint8_t  keySlotType; /* enum type Bsp_KeySlotType_e */
    uint8_t  keySlotNumber;
    uint8_t  sc01ModeWordMapping; /* enum type Bsp_Sc01ModeWordMapping_e */
    uint8_t  invalidateMethod; /* enum type Bsp_KeySlotInvalidateOperation_e */
    uint8_t  reserved0[2];

}Bsp_KeySlot_Invalidate_InFields_t;
/*output*/
typedef struct
{
    unsigned dummy; /*no elements*/

}Bsp_KeySlot_Invalidate_OutFields_t;


/*PARAMETERS for the Bsp_CmdKeySlot_ePidAdd command  */
/*input*/
typedef struct
{
    uint16_t pidChanStart;
    uint16_t pidChanEnd;
    uint8_t  keySlotType; /* enum type Bsp_KeySlotType_e */
    uint8_t  keySlotNumber;
    uint8_t  keySlotTypeB; /* enum type Bsp_KeySlotType_e */
    uint8_t  keySlotNumberB;
    uint8_t  setMultiplePidChan;
    uint8_t  sPidUsePointerB;
    uint8_t  destinationPipeSel;
    uint8_t  reserved0;

}Bsp_KeySlot_PidAdd_InFields_t;
/*output*/
typedef struct
{
    unsigned dummy; /*no elements*/

}Bsp_KeySlot_PidAdd_OutFields_t;


/*PARAMETERS for the Bsp_CmdKeySlot_ePidRemove command  */
/*input*/
typedef struct
{
    uint16_t pidChanStart;
    uint16_t pidChanEnd;

}Bsp_KeySlot_PidRemove_InFields_t;
/*output*/
typedef struct
{
    unsigned dummy; /*no elements*/

}Bsp_KeySlot_PidRemove_OutFields_t;


/*PARAMETERS for the Bsp_CmdKeySlot_eClearKeySet command  */
/*input*/
typedef struct
{
    uint32_t keyData[8];
    uint8_t  blockType; /* enum type Bsp_KeySlotBlockType_e */
    uint8_t  entryType; /* enum type Bsp_KeySlotEntryType_e */
    uint8_t  keySlotType; /* enum type Bsp_KeySlotType_e */
    uint8_t  keySlotNumber;
    uint8_t  sc01ModeWordMapping; /* enum type Bsp_Sc01ModeWordMapping_e */
    uint8_t  gPipeSc01EntryType;
    uint8_t  rPipeSc01EntryType;
    uint8_t  keyMode; /* enum type Bsp_KeyMode_e */
    uint32_t modeWords[4];
    uint16_t extKeyPtr;
    uint16_t extIvPtr;

}Bsp_KeySlot_ClearKeySet_InFields_t;
/*output*/
typedef struct
{
    unsigned dummy; /*no elements*/

}Bsp_KeySlot_ClearKeySet_OutFields_t;


/*PARAMETERS for the Bsp_CmdKeySlot_eClearIvSet command  */
/*input*/
typedef struct
{
    uint32_t iv[4];
    uint8_t  blockType; /* enum type Bsp_KeySlotBlockType_e */
    uint8_t  entryType; /* enum type Bsp_KeySlotEntryType_e */
    uint8_t  keySlotType; /* enum type Bsp_KeySlotType_e */
    uint8_t  keySlotNumber;
    uint8_t  ivType; /* enum type Bsp_KeySlotIvType_e */
    uint8_t  reserved0[3];

}Bsp_KeySlot_ClearIvSet_InFields_t;
/*output*/
typedef struct
{
    unsigned dummy; /*no elements*/

}Bsp_KeySlot_ClearIvSet_OutFields_t;


/*PARAMETERS for the Bsp_CmdKeySlot_eMulti2SysKeySet command  */
/*input*/
typedef struct
{
    uint32_t systemKeys[8];
    uint8_t  whichSysKey;
    uint8_t  reserved0[3];

}Bsp_KeySlot_Multi2SysKeySet_InFields_t;
/*output*/
typedef struct
{
    unsigned dummy; /*no elements*/

}Bsp_KeySlot_Multi2SysKeySet_OutFields_t;


#ifdef __cplusplus
}
#endif
#endif
