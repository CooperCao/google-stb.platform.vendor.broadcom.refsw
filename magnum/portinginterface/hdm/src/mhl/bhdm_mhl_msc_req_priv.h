/***************************************************************************
 *     Copyright (c) 2003-2014, Broadcom Corporation
 *     All Rights Reserved
 *     Confidential Property of Broadcom Corporation
 *
 *  THIS SOFTWARE MAY ONLY BE USED SUBJECT TO AN EXECUTED SOFTWARE LICENSE
 *  AGREEMENT  BETWEEN THE USER AND BROADCOM.  YOU HAVE NO RIGHT TO USE OR
 *  EXPLOIT THIS MATERIAL EXCEPT SUBJECT TO THE TERMS OF SUCH AN AGREEMENT.
 *
 * $brcm_Workfile: $
 * $brcm_Revision: $
 * $brcm_Date: $
 *
 * Module Description:
 *
 * Revision History:
 *
 * $brcm_Log: $
 *
 ***************************************************************************/

#ifndef BHDM_MHL_MSC_REQ_PRIV_H__
#define BHDM_MHL_MSC_REQ_PRIV_H__

#include "bchp.h"       /* Chip Info */
#include "breg_mem.h"   /* Chip register access. */
#include "bkni.h"       /* Kernel Interface */
#include "bint.h"       /* Interrupt */
#include "btmr.h"   	/* Timer Handle  */

#include "berr_ids.h"   /* Error codes */
#include "bdbg.h"       /* Debug Support */

#include "bchp_common.h"

#include "bhdm_mhl_const_priv.h"
#include "bhdm_mhl_common_priv.h"
#include "bhdm_mhl_debug_priv.h"
#include "bhdm_mhl_req_priv.h"

#ifdef __cplusplus
extern "C" {
#endif

BDBG_OBJECT_ID_DECLARE(BHDM_MHL_MSC_REQ);

/* State for reading DCAP from sink */
typedef enum
{
	BHDM_P_Mhl_DcapReadState_eStart  = 0,  /* Not yet read DCAP (pending) */
	BHDM_P_Mhl_DcapReadState_eMiddle = 1,  /* In the middle of reading DCAP (queued READ_DEVCAP commands) */
	BHDM_P_Mhl_DcapReadState_eEnd    = 2   /* Finished reading DCAP */
} BHDM_P_Mhl_DcapReadState;

/* State for asking sink to read our DCAP */
typedef enum
{
	BHDM_P_Mhl_DcapSentState_eRdyNotSent = 0, /* Not yet send DCAP_RDY to sink */
	BHDM_P_Mhl_DcapSentState_eRdySent    = 1  /* Sent DCAP_RDY to sink */
} BHDM_P_Mhl_DcapSentState;

/* MSC Requester Events */
#define	BHDM_P_MHL_MSCREQ_EVENT_NONE           (0) /* place holder */
	/* MSC REQ HW INTR events (CBUS_INTR2_1 register) */
#define	BHDM_P_MHL_MSCREQ_EVENT_DONE           BCHP_CBUS_INTR2_1_CPU_STATUS_MSC_REQ_DONE_MASK /*(1 << 0) */
#define	BHDM_P_MHL_MSCREQ_EVENT_RX_MISMATCH    BCHP_CBUS_INTR2_1_CPU_STATUS_MSC_REQ_RX_MISMATCH_MASK
#define	BHDM_P_MHL_MSCREQ_EVENT_RX_CMD_ERROR   BCHP_CBUS_INTR2_1_CPU_STATUS_MSC_REQ_RX_CMD_ERROR_MASK
#define	BHDM_P_MHL_MSCREQ_EVENT_RX_TIMEOUT     BCHP_CBUS_INTR2_1_CPU_STATUS_MSC_REQ_RX_TIMEOUT_MASK
#define	BHDM_P_MHL_MSCREQ_EVENT_ILLEGAL_SW_WR  BCHP_CBUS_INTR2_1_CPU_STATUS_MSC_REQ_ILLEGAL_SW_WR_MASK
#define	BHDM_P_MHL_MSCREQ_EVENT_MAX_RETRIES_EXCEEDED    BCHP_CBUS_INTR2_1_CPU_STATUS_MSC_REQ_MAX_RETRIES_EXCEEDED_MASK
#define	BHDM_P_MHL_MSCREQ_EVENT_UNEXPECTED_INBOUND_PKT  BCHP_CBUS_INTR2_1_CPU_STATUS_MSC_REQ_UNEXPECTED_INBOUND_PKT_MASK
#define	BHDM_P_MHL_MSCREQ_EVENT_BUS_STOLEN     BCHP_CBUS_INTR2_1_CPU_STATUS_MSC_REQ_BUS_STOLEN_MASK
#define	BHDM_P_MHL_MSCREQ_EVENT_CANCELLED     BCHP_CBUS_INTR2_1_CPU_STATUS_MSC_REQ_CANCELLED_MASK /* (1<<8) */

	/* SW INTR event from HOST in MPM_CPU_L2 register */
#define	BHDM_P_MHL_MSCREQ_EVENT_MHL_TX_READY           (1 << 9) /* Host has configured MHL TMDS path */

	/* Heartbeat event -- once the heartbeat time programmed in CPU TIMER1 expires,  interrupt is triggred which sets this event*/
#define	BHDM_P_MHL_MSCREQ_EVENT_HEARTBEAT              (1 << 10) /* HEARTBEAT timer expires */

	/* Internal MSC Req events from other tasks */
#define	BHDM_P_MHL_MSCREQ_EVENT_WAKEUP_DISCOVERY_DONE  (1 << 11) /* Wakeup discovery task completed, MSC REQ can send DCAP RDY command */
#define	BHDM_P_MHL_MSCREQ_EVENT_RECEIVED_DCAP_RDY      (1 << 12) /* WRITE_STAT received - DCAP_RDY*/
#define	BHDM_P_MHL_MSCREQ_EVENT_RECEIVED_LINK_MODE     (1 << 13) /* WRITE_STAT received - Link MODE, check for PATH_EN */
#define	BHDM_P_MHL_MSCREQ_EVENT_DCAP_CHG_INT           (1 << 14) /* SET_INT received - with DCAP_CHG set */
#define	BHDM_P_MHL_MSCREQ_EVENT_REQ_WRT_INT            (1 << 15) /* SET_INT received - with REQ_WRT set */
#define	BHDM_P_MHL_MSCREQ_EVENT_MSC_TX_ABORT           (1 << 16) /* ABORT sent on MSC channel by Responder */
#define	BHDM_P_MHL_MSCREQ_EVENT_READ_DDC_ERROR_CODE    (1 << 17) /* Error/ABORT encountered on DDC channel and requested to read Sink DDC error code by DDC task  */
#define	BHDM_P_MHL_MSCREQ_EVENT_SEND_RCPE_ERR_BUSY     (1 << 18) /* Send RCPE command with error as Responder Busy in response to a RCP command to indicate to Sink that MPM can not process these commands */
#define	BHDM_P_MHL_MSCREQ_EVENT_SEND_RAPK_ERR_NONE     (1 << 19) /* Send RAPK command with No Error in response to a RAP command with action code Poll to acknowledge the command */
#define	BHDM_P_MHL_MSCREQ_EVENT_SEND_RAPK_ERR_BUSY     (1 << 20) /* Send RAPK command with error as Responder Busy in response to a RAP command with action code other than Poll, this to tell Sink that MPM can't process these commands  */

	/* Internal event generated by MSC REQ task itself */
#define	BHDM_P_MHL_MSCREQ_EVENT_SINK_PLIM              (1 << 21) /* Received PATH_EN = 1 , decide if need to wake up Host based on the DEV_CAT in Sink DCAP */

	/* MSC REQ HW ABORT INTR events (CBUS_INTR2_1 register)*/
	/* for optimized implementation while posting flag for task from IRQ4, these events have been assign same bit position as in the CBUS_INTR2_1 register */
#define	BHDM_P_MHL_MSCREQ_EVENT_ABORT_MSC_RECEIVED               BCHP_CBUS_INTR2_1_CPU_STATUS_ABORT_MSC_RECEIVED_MASK /* (1<<27) */
#define	BHDM_P_MHL_MSCREQ_EVENT_ABORT_MSC_OUTBOUND_TIMEOUT_DONE  BCHP_CBUS_INTR2_1_CPU_STATUS_ABORT_MSC_OUTBOUND_TIMEOUT_DONE_MASK /* (1 << 30) */

typedef uint32_t BHDM_P_Mhl_MscReq_Event;

typedef struct BHDM_P_Mhl_MscReq_Object
{
	BDBG_OBJECT(BHDM_MHL_MSC_REQ)

	BHDM_P_Mhl_Req_Handle          hReq;
	uint8_t                        astCmdQueue[sizeof(BHDM_P_Mhl_CbusCmd) * BHDM_P_MHL_CBUS_SHORT_Q_SIZE + sizeof(uint32_t)];

	uint8_t                       *pucSinkDcap; /* buffer to hold Sink's Device Capabilities */

	/* DCAP states */
	BHDM_P_Mhl_DcapReadState       eDcapReadState;
	BHDM_P_Mhl_DcapSentState       eDcapSentState;
	bool                           bDcapValid;
	bool                           bSinkDcapChg;

	BHDM_P_Mhl_MscReq_Event        eEvent;
	BHDM_P_Mhl_MscReq_Event        eUnhandledEvent;

} BHDM_P_Mhl_MscReq_Object;

typedef BHDM_P_Mhl_MscReq_Object *BHDM_P_Mhl_MscReq_Handle;


BERR_Code BHDM_P_Mhl_MscReq_Create
	( BHDM_P_Mhl_MscReq_Handle    *hMscReq );

BERR_Code BHDM_P_Mhl_MscReq_Destroy
	( BHDM_P_Mhl_MscReq_Handle     hMscReq );

BERR_Code BHDM_P_Mhl_MscReq_Init
	( BHDM_P_Mhl_MscReq_Handle     hMscReq,
	  BREG_Handle                  hRegister );

void BHDM_P_Mhl_MscReq_RemoveAllCmds_isr
	( BHDM_P_Mhl_MscReq_Handle     hMscReq );

BERR_Code BHDM_P_Mhl_MscReq_CancelAllCmds_isr
	( BHDM_P_Mhl_MscReq_Handle     hMscReq );

/*
 * >>READ_DEVCAP
 * >offset
 * <<ACK
 * <value
 */
BERR_Code BHDM_P_Mhl_MscReq_ReadDevCap_isr
	( BHDM_P_Mhl_MscReq_Handle     hMscReq,
	  uint8_t                      ucOffset,
	  uint8_t                     *pucValue,
	  uint8_t                      ucDelay,
	  bool                         bLastCmd );
/*
 * >>GET_STATE
 * <STATE
 */
BERR_Code BHDM_P_Mhl_MscReq_GetState
	( BHDM_P_Mhl_MscReq_Handle     hMscReq,
	  uint8_t                     *pucState,
	  uint8_t                      ucDelay,
	  bool                         bLastCmd );

/*
 * Heartbeat uses user defined command
 */
BERR_Code BHDM_P_Mhl_MscReq_HeartBeat_isr
	( BHDM_P_Mhl_MscReq_Handle     hMscReq,
	  const BHDM_P_Mhl_CbusPkt    *packets,
	  uint32_t                     ulNumPackets,
	  uint8_t                      ucDelay,
	  bool                         bLastCmd );

/* WRITE_STAT */
BERR_Code BHDM_P_Mhl_MscReq_WriteStat_isr
	( BHDM_P_Mhl_MscReq_Handle     hMscReq,
	  uint8_t                      ucOffset,
	  uint8_t                      ucValue,
	  uint8_t                      ucDelay,
	  bool                         bLastCmd );

/* SET_INT */
BERR_Code BHDM_P_Mhl_MscReq_SetInt_isr
	( BHDM_P_Mhl_MscReq_Handle     hMscReq,
	  uint8_t                      ucOffset,
	  uint8_t                      ucValue,
	  uint8_t                      ucDelay,
	  bool                         bLastCmd );

/* MSC_MSG */
BERR_Code BHDM_P_Mhl_MscReq_MscMsg
	( BHDM_P_Mhl_MscReq_Handle     hMscReq,
	  uint8_t                      ucData1,
	  uint8_t                      ucData2,
	  uint8_t                      ucDelay,
	  bool                         bLastCmd );


BERR_Code BHDM_P_Mhl_MscReq_CheckError_isr
	( BHDM_P_Mhl_MscReq_Handle     hReq,
	  int                          interrupt,
	  bool                        *pbAbortRequired,
	  BHDM_P_Mhl_CbusPkt          *pstLastPacket );
/*
 * >>WRITE_BURST
 * >OFFSET
 * >ADOPTER_ID_H (adopter id passed as uint16_t)
 * >ADOPTER_ID_L
 * >data1 (upto 16 bytes of data)
 * >...
 * >>EOF
 * <<ACK
 */
BERR_Code BHDM_P_Mhl_MscReq_WriteBurst
	( BHDM_P_Mhl_MscReq_Handle    hMscReq,
	  uint8_t                     ucOffset,
	  uint16_t                    usAdopterId,
	  uint8_t                    *pucData,
	  uint32_t                    ulNumBytes,
	  uint8_t                     ucDelay,
	  bool                        bLastCmd );

/* Removing all existing READ_DEVCAP commands and
   queueing all READ_DEVCAP commands in one go. */
BERR_Code BHDM_P_Mhl_MscReq_ReadDcap_isr
	( BHDM_P_Mhl_MscReq_Handle    hMscReq,
	  BHDM_P_Mhl_CbusState       *pstCbusState,
	  uint8_t                     ucDelay1,
	  uint8_t                     ucDelay2 );

BERR_Code BHDM_P_Mhl_MscReq_CancelReadDcap_isr
	( BHDM_P_Mhl_MscReq_Handle    hMscReq );

void BHDM_P_Mhl_MscReq_HandleDone_isr
	( BHDM_P_Mhl_MscReq_Handle    hMscReq,
	  bool                       *pbSinkPlimValid,
	  bool                       *pbHeartbeatQueued,
	  uint8_t                    *pucNumDeadHbPkts );

BERR_Code BHDM_P_Mhl_MscReq_HandleErrors_isr
	( BHDM_P_Mhl_MscReq_Handle    hMscReq,
	  int                         interrupt,
	  bool                        bStopPending,
	  bool                       *pbHeartbeatQueued,
	  BHDM_P_Mhl_CbusState       *pstCbusState );

void BHDM_P_Mhl_MscReq_HandleReceivedDcapRdy_isr
	( BHDM_P_Mhl_MscReq_Handle    hMscReq,
	  bool                       *pbSinkPlimValid,
	  BHDM_P_Mhl_CbusState       *pstCbusState );

void BHDM_P_Mhl_MscReq_HandleDcapChgInt_isr
	( BHDM_P_Mhl_MscReq_Handle    hMscReq,
	  bool                       *pbSinkPlimValid,
	  bool                       *pbMscRespObAbortActive,
	  BHDM_P_Mhl_CbusState       *pstCbusState );

void BHDM_P_Mhl_MscReq_HandleReqWrtInt_isr
	( BHDM_P_Mhl_MscReq_Handle    hMscReq );

void BHDM_P_Mhl_MscReq_HandleMscTxAbort_isr
	( BHDM_P_Mhl_MscReq_Handle    hMscReq );

void BHDM_P_Mhl_MscReq_HandleAbortMscReceived_isr
	( BHDM_P_Mhl_MscReq_Handle    hMscReq );

void BHDM_P_Mhl_MscReq_HandleReadDdcErrorCode_isr
	( BHDM_P_Mhl_MscReq_Handle    hMscReq );

void BHDM_P_Mhl_MscReq_HandleSendRcpeErrBusy_isr
	( BHDM_P_Mhl_MscReq_Handle    hMscReq );

void BHDM_P_Mhl_MscReq_HandleSendRapkErrNone_isr
	( BHDM_P_Mhl_MscReq_Handle    hMscReq );

void BHDM_P_Mhl_MscReq_HandleSendRapkErrBusy_isr
	( BHDM_P_Mhl_MscReq_Handle    hMscReq );

#ifdef __cplusplus
extern "C" {
#endif

#endif /* BHDM_MHL_MSC_REQ_PRIV_H__ */
