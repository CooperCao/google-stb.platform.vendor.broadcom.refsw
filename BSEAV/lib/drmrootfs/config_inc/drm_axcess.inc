/******************************************************************************
 *  Broadcom Proprietary and Confidential. (c)2016 Broadcom. All rights reserved.
 *
 *  This program is the proprietary software of Broadcom and/or its licensors,
 *  and may only be used, duplicated, modified or distributed pursuant to the terms and
 *  conditions of a separate, written license agreement executed between you and Broadcom
 *  (an "Authorized License").  Except as set forth in an Authorized License, Broadcom grants
 *  no license (express or implied), right to use, or waiver of any kind with respect to the
 *  Software, and Broadcom expressly reserves all rights in and to the Software and all
 *  intellectual property rights therein.  IF YOU HAVE NO AUTHORIZED LICENSE, THEN YOU
 *  HAVE NO RIGHT TO USE THIS SOFTWARE IN ANY WAY, AND SHOULD IMMEDIATELY
 *  NOTIFY BROADCOM AND DISCONTINUE ALL USE OF THE SOFTWARE.
 *
 *  Except as expressly set forth in the Authorized License,
 *
 *  1.     This program, including its structure, sequence and organization, constitutes the valuable trade
 *  secrets of Broadcom, and you shall use all reasonable efforts to protect the confidentiality thereof,
 *  and to use this information only in connection with your use of Broadcom integrated circuit products.
 *
 *  2.     TO THE MAXIMUM EXTENT PERMITTED BY LAW, THE SOFTWARE IS PROVIDED "AS IS"
 *  AND WITH ALL FAULTS AND BROADCOM MAKES NO PROMISES, REPRESENTATIONS OR
 *  WARRANTIES, EITHER EXPRESS, IMPLIED, STATUTORY, OR OTHERWISE, WITH RESPECT TO
 *  THE SOFTWARE.  BROADCOM SPECIFICALLY DISCLAIMS ANY AND ALL IMPLIED WARRANTIES
 *  OF TITLE, MERCHANTABILITY, NONINFRINGEMENT, FITNESS FOR A PARTICULAR PURPOSE,
 *  LACK OF VIRUSES, ACCURACY OR COMPLETENESS, QUIET ENJOYMENT, QUIET POSSESSION
 *  OR CORRESPONDENCE TO DESCRIPTION. YOU ASSUME THE ENTIRE RISK ARISING OUT OF
 *  USE OR PERFORMANCE OF THE SOFTWARE.
 *
 *  3.     TO THE MAXIMUM EXTENT PERMITTED BY LAW, IN NO EVENT SHALL BROADCOM OR ITS
 *  LICENSORS BE LIABLE FOR (i) CONSEQUENTIAL, INCIDENTAL, SPECIAL, INDIRECT, OR
 *  EXEMPLARY DAMAGES WHATSOEVER ARISING OUT OF OR IN ANY WAY RELATING TO YOUR
 *  USE OF OR INABILITY TO USE THE SOFTWARE EVEN IF BROADCOM HAS BEEN ADVISED OF
 *  THE POSSIBILITY OF SUCH DAMAGES; OR (ii) ANY AMOUNT IN EXCESS OF THE AMOUNT
 *  ACTUALLY PAID FOR THE SOFTWARE ITSELF OR U.S. $1, WHICHEVER IS GREATER. THESE
 *  LIMITATIONS SHALL APPLY NOTWITHSTANDING ANY FAILURE OF ESSENTIAL PURPOSE OF
 *  ANY LIMITED REMEDY.
 ******************************************************************************/

/*
// IMPORTANT:  This file should be included EXCLUSIVELY by drm_data.cpp.
*/

#ifdef __cplusplus
extern "C" {
#endif


/******************************************************************************
** VARIABLE:
**   drm_adobe_key_bin_file_rootfs_path
**
** DESCRIPTION:
**   This configuration variable holds the path where all the adobe access secure key, DRM private key and shared domain keys are stored. Customers
**   can changes the value of this variable to meet their needs.
**
** NOTES:
**   This file must only be included in drm_data.h. To retrieve a certificate path,
**   a customer application must link with the drmrootfs library. Then they can use the followings functions to
**   retrieve the string.
**     -bdrm_get_adobe_key_bin_file_path
**
**  Refer to drm_data.h for more details.
**
**
******************************************************************************/
char drm_adobe_key_bin_file_rootfs_path[] ="./adobe_key.bin";
/******************************************************************************
** VARIABLE:
**   drm_hash_locked_key_loaded_flag
**
** DESCRIPTION:
**   This configuration variable indicates whether the hash locked required to unwrap other
**   adobe axcess keys has to be loaded or it has already been loaded. By default it is false and is expected to be loaded by the application.
**
** NOTES:
**   This file must only be included in drm_data.h. To retrieve the value of the flag,
**   a customer application must link with the drmrootfs library. Then it can use the followings functions to
**   retrieve information.
**     - bdrm_get_hash_locked_rsa_pkg_load_flag()
**
**  Refer to drm_data.h for more details.
**
**
**
******************************************************************************/
bool drm_hash_locked_key_load_flag = true;

/******************************************************************************
** VARIABLE:
**   drm_haslocked_rsa_pkg_file_rootfs_path
**
** DESCRIPTION:
**   This configuration variable holds filename of the hashlocked key bin file generated by Broadcom's DRM utility.
**
** NOTES:
**   This file must only be included in drm_data.h. To retrieve the hashlocked key bin file,
**   an application must link with the drmrootfs library. Then they can use the followings functions to
**   retrieve the string.
**     bdrm_get_has_locked_rsa_pkg_file_path
**  Refer to drm_data.h for more details.
**
**
**
******************************************************************************/
char drm_hash_locked_rsa_pkg_file_rootfs_path[] ="./hashlocked_rsa.bin";

/******************************************************************************
** VARIABLE:
**   drm_hash_storage_data_section
**
** DESCRIPTION:
**   This configuration variable holds the data section used for storing the hash  for the hash locked pkg
**
** NOTES:
**   This file must only be included in drm_data.h. To retrieve the drm_haslocked_otpkey_data_section_pair,
**   an application must link with the drmrootfs library. Then they can use the followings functions to
**   retrieve the string.
**     drm_get_hash_storage_data_section()
**  Refer to drm_data.h for more details.
**
**
**
******************************************************************************/
uint8_t drm_hash_storage_data_section =5;


/******************************************************************************
** VARIABLE:
**   drm_otp_key_data_section
**
** DESCRIPTION:
**   This configuration variable holds the data section used for storing the aes key  for the hash locked pkg
**
** NOTES:
**   This file must only be included in drm_data.h. To retrieve the drm_haslocked_otpkey_data_section_pair,
**   an application must link with the drmrootfs library. Then they can use the followings functions to
**   retrieve the string.
**     drm_get_otp_key_data_section
**  Refer to drm_data.h for more details.
**
**
**
******************************************************************************/
uint8_t drm_otp_key_data_section =4;
/******************************************************************************
** VARIABLE:
**   drm_hashlocked_pkg_Verification_pubkey_offset
**
** DESCRIPTION:
**   This configuration variable holds the offset of the public key used for verification inside the hashlocked RSA pkg
**
** NOTES:
**   This file must only be included in drm_data.h. To retrieve the drm_hashlocked_pkg_Verification_pubkey_offset,
**   an application must link with the drmrootfs library. Then they can use the followings functions to
**   retrieve the string.
**     drm_hashlocked_pkg_Verification_pubkey_offset
**  Refer to drm_data.h for more details.
**
**
**
******************************************************************************/
uint8_t drm_hashlocked_pkg_verification_pubkey_offset =0;
uint8_t drm_hashlocked_pkg_privkey_offset =1;

/******************************************************************************
** VARIABLE:
**   drm_hashlocked_pkg_verification_pubkey_index
**
** DESCRIPTION:
**   This configuration variable holds the bseck index where  public key used for verification from hashlocked pkg is loaded
**
** NOTES:
**   This file must only be included in drm_data.h. To retrieve the drm_hashlocked_pkg_Verification_pubkey_offset,
**   an application must link with the drmrootfs library. Then they can use the followings functions to
**   retrieve the string.
**    bdrm_get_verification_pubkey_index
**  Refer to drm_data.h for more details.
**
**
**
******************************************************************************/
uint8_t drm_hashlocked_pkg_verification_pubkey_index =0;


/******************************************************************************
** VARIABLE:
**   drm_load_adobe_shared_domain_key_flag
**
** DESCRIPTION:
**   This configuration variable indicates whether the shraed domain key has to be loaded or not. Customers
**   can changes the value of this variable to meet their needs.
**
** NOTES:
**   This file must only be included in drm_data.h. To retrieve a value of this flag,
**   a customer application must link with the drmrootfs library. Then they can use the followings functions to
**   retrieve the string.
**    bdrm_get_adobe_shared_domain_key_load_flag()

**  Refer to drm_data.h for more details.
**
**
******************************************************************************/
bool drm_load_adobe_shared_domain_key_flag = true;

/******************************************************************************
** VARIABLE:
**   drm_shared_domain_key_bin_file_rootfs_path
**
** DESCRIPTION:
**   This configuration variable holds the shared domain key file name. Customers
**   can changes the value of this variable to meet their needs.
**
** NOTES:
**   This file must only be included in drm_data.h. To retrieve a value of this flag,
**   a customer application must link with the drmrootfs library. Then they can use the followings functions to
**   retrieve the string.
**    bdrm_get_shared_domain_key_bin_file_path()

**  Refer to drm_data.h for more details.
**
**
******************************************************************************/
char drm_shared_domain_key_bin_file_rootfs_path[] = "./sdk.bin";


#ifdef __cplusplus
}
#endif
