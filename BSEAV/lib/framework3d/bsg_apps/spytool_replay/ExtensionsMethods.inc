/******************************************************************************
 *  Copyright (C) 2017 Broadcom. The term "Broadcom" refers to Broadcom Limited and/or its subsidiaries.
 ******************************************************************************/
/* Auto-generated by running gen_hook_tables.py
 * DO NOT EDIT!
 */
m_has_EGL_ANDROID_framebuffer_target = getExtensionSupported("EGL_ANDROID_framebuffer_target");
m_has_EGL_ANDROID_image_native_buffer = getExtensionSupported("EGL_ANDROID_image_native_buffer");
m_has_EGL_ANDROID_native_fence_sync = getExtensionSupported("EGL_ANDROID_native_fence_sync");
m_has_EGL_ANDROID_recordable = getExtensionSupported("EGL_ANDROID_recordable");
m_has_EGL_BRCM_event_monitor = getExtensionSupported("EGL_BRCM_event_monitor");
m_has_EGL_BRCM_image_nexus_striped_surface = getExtensionSupported("EGL_BRCM_image_nexus_striped_surface");
m_has_EGL_BRCM_image_update_control = getExtensionSupported("EGL_BRCM_image_update_control");
m_has_EGL_BRCM_performance_counters = getExtensionSupported("EGL_BRCM_performance_counters");
m_has_EGL_BRCM_platform_nexus = getExtensionSupported("EGL_BRCM_platform_nexus");
m_has_EGL_EXT_buffer_age = getExtensionSupported("EGL_EXT_buffer_age");
m_has_EGL_EXT_client_extensions = getExtensionSupported("EGL_EXT_client_extensions");
m_has_EGL_EXT_create_context_robustness = getExtensionSupported("EGL_EXT_create_context_robustness");
m_has_EGL_EXT_platform_base = getExtensionSupported("EGL_EXT_platform_base");
m_has_EGL_EXT_platform_wayland = getExtensionSupported("EGL_EXT_platform_wayland");
m_has_EGL_EXT_platform_x11 = getExtensionSupported("EGL_EXT_platform_x11");
m_has_EGL_EXT_protected_content = getExtensionSupported("EGL_EXT_protected_content");
m_has_EGL_EXT_protected_surface = getExtensionSupported("EGL_EXT_protected_surface");
m_has_EGL_KHR_cl_event2 = getExtensionSupported("EGL_KHR_cl_event2");
m_has_EGL_KHR_client_get_all_proc_addresses = getExtensionSupported("EGL_KHR_client_get_all_proc_addresses");
m_has_EGL_KHR_create_context = getExtensionSupported("EGL_KHR_create_context");
m_has_EGL_KHR_fence_sync = getExtensionSupported("EGL_KHR_fence_sync");
m_has_EGL_KHR_get_all_proc_addresses = getExtensionSupported("EGL_KHR_get_all_proc_addresses");
m_has_EGL_KHR_gl_colorspace = getExtensionSupported("EGL_KHR_gl_colorspace");
m_has_EGL_KHR_gl_renderbuffer_image = getExtensionSupported("EGL_KHR_gl_renderbuffer_image");
m_has_EGL_KHR_gl_texture_2D_image = getExtensionSupported("EGL_KHR_gl_texture_2D_image");
m_has_EGL_KHR_gl_texture_3D_image = getExtensionSupported("EGL_KHR_gl_texture_3D_image");
m_has_EGL_KHR_gl_texture_cubemap_image = getExtensionSupported("EGL_KHR_gl_texture_cubemap_image");
m_has_EGL_KHR_image = getExtensionSupported("EGL_KHR_image");
m_has_EGL_KHR_image_base = getExtensionSupported("EGL_KHR_image_base");
m_has_EGL_KHR_image_pixmap = getExtensionSupported("EGL_KHR_image_pixmap");
m_has_EGL_KHR_partial_update = getExtensionSupported("EGL_KHR_partial_update");
m_has_EGL_KHR_platform_android = getExtensionSupported("EGL_KHR_platform_android");
m_has_EGL_KHR_platform_wayland = getExtensionSupported("EGL_KHR_platform_wayland");
m_has_EGL_KHR_platform_x11 = getExtensionSupported("EGL_KHR_platform_x11");
m_has_EGL_KHR_surfaceless_context = getExtensionSupported("EGL_KHR_surfaceless_context");
m_has_EGL_KHR_wait_sync = getExtensionSupported("EGL_KHR_wait_sync");
m_has_EGL_VERSION_1_0 = getVersionSupported("EGL_VERSION_1_0");
m_has_EGL_VERSION_1_1 = getVersionSupported("EGL_VERSION_1_1");
m_has_EGL_VERSION_1_2 = getVersionSupported("EGL_VERSION_1_2");
m_has_EGL_VERSION_1_3 = getVersionSupported("EGL_VERSION_1_3");
m_has_EGL_VERSION_1_4 = getVersionSupported("EGL_VERSION_1_4");
m_has_EGL_VERSION_1_5 = getVersionSupported("EGL_VERSION_1_5");
m_has_EGL_WL_bind_wayland_display = getExtensionSupported("EGL_WL_bind_wayland_display");
m_has_GL_BRCM_image_formats = getExtensionSupported("GL_BRCM_image_formats");
m_has_GL_BRCM_no_perspective = getExtensionSupported("GL_BRCM_no_perspective");
m_has_GL_BRCM_polygon_mode = getExtensionSupported("GL_BRCM_polygon_mode");
m_has_GL_BRCM_provoking_vertex = getExtensionSupported("GL_BRCM_provoking_vertex");
m_has_GL_BRCM_sampler_fetch = getExtensionSupported("GL_BRCM_sampler_fetch");
m_has_GL_BRCM_shader_framebuffer_fetch_depth_stencil = getExtensionSupported("GL_BRCM_shader_framebuffer_fetch_depth_stencil");
m_has_GL_BRCM_texture_1D = getExtensionSupported("GL_BRCM_texture_1D");
m_has_GL_BRCM_texture_gather_lod = getExtensionSupported("GL_BRCM_texture_gather_lod");
m_has_GL_BRCM_texture_norm16 = getExtensionSupported("GL_BRCM_texture_norm16");
m_has_GL_BRCM_texture_unnormalised_coords = getExtensionSupported("GL_BRCM_texture_unnormalised_coords");
m_has_GL_ES_VERSION_2_0 = getVersionSupported("GL_ES_VERSION_2_0");
m_has_GL_ES_VERSION_3_0 = getVersionSupported("GL_ES_VERSION_3_0");
m_has_GL_ES_VERSION_3_1 = getVersionSupported("GL_ES_VERSION_3_1");
m_has_GL_ES_VERSION_3_2 = getVersionSupported("GL_ES_VERSION_3_2");
m_has_GL_EXT_EGL_image_external_wrap_modes = getExtensionSupported("GL_EXT_EGL_image_external_wrap_modes");
m_has_GL_EXT_base_instance = getExtensionSupported("GL_EXT_base_instance");
m_has_GL_EXT_color_buffer_float = getExtensionSupported("GL_EXT_color_buffer_float");
m_has_GL_EXT_copy_image = getExtensionSupported("GL_EXT_copy_image");
m_has_GL_EXT_debug_marker = getExtensionSupported("GL_EXT_debug_marker");
m_has_GL_EXT_discard_framebuffer = getExtensionSupported("GL_EXT_discard_framebuffer");
m_has_GL_EXT_draw_buffers_indexed = getExtensionSupported("GL_EXT_draw_buffers_indexed");
m_has_GL_EXT_draw_elements_base_vertex = getExtensionSupported("GL_EXT_draw_elements_base_vertex");
m_has_GL_EXT_geometry_point_size = getExtensionSupported("GL_EXT_geometry_point_size");
m_has_GL_EXT_geometry_shader = getExtensionSupported("GL_EXT_geometry_shader");
m_has_GL_EXT_gpu_shader5 = getExtensionSupported("GL_EXT_gpu_shader5");
m_has_GL_EXT_multi_draw_indirect = getExtensionSupported("GL_EXT_multi_draw_indirect");
m_has_GL_EXT_multisampled_render_to_texture = getExtensionSupported("GL_EXT_multisampled_render_to_texture");
m_has_GL_EXT_polygon_offset_clamp = getExtensionSupported("GL_EXT_polygon_offset_clamp");
m_has_GL_EXT_primitive_bounding_box = getExtensionSupported("GL_EXT_primitive_bounding_box");
m_has_GL_EXT_protected_textures = getExtensionSupported("GL_EXT_protected_textures");
m_has_GL_EXT_robustness = getExtensionSupported("GL_EXT_robustness");
m_has_GL_EXT_shader_integer_mix = getExtensionSupported("GL_EXT_shader_integer_mix");
m_has_GL_EXT_shader_io_blocks = getExtensionSupported("GL_EXT_shader_io_blocks");
m_has_GL_EXT_shader_texture_lod = getExtensionSupported("GL_EXT_shader_texture_lod");
m_has_GL_EXT_tessellation_point_size = getExtensionSupported("GL_EXT_tessellation_point_size");
m_has_GL_EXT_tessellation_shader = getExtensionSupported("GL_EXT_tessellation_shader");
m_has_GL_EXT_texture_border_clamp = getExtensionSupported("GL_EXT_texture_border_clamp");
m_has_GL_EXT_texture_buffer = getExtensionSupported("GL_EXT_texture_buffer");
m_has_GL_EXT_texture_cube_map_array = getExtensionSupported("GL_EXT_texture_cube_map_array");
m_has_GL_EXT_texture_filter_anisotropic = getExtensionSupported("GL_EXT_texture_filter_anisotropic");
m_has_GL_EXT_texture_format_BGRA8888 = getExtensionSupported("GL_EXT_texture_format_BGRA8888");
m_has_GL_EXT_texture_mirror_clamp_to_edge = getExtensionSupported("GL_EXT_texture_mirror_clamp_to_edge");
m_has_GL_EXT_texture_sRGB_R8 = getExtensionSupported("GL_EXT_texture_sRGB_R8");
m_has_GL_EXT_texture_sRGB_RG8 = getExtensionSupported("GL_EXT_texture_sRGB_RG8");
m_has_GL_EXT_texture_sRGB_decode = getExtensionSupported("GL_EXT_texture_sRGB_decode");
m_has_GL_KHR_blend_equation_advanced = getExtensionSupported("GL_KHR_blend_equation_advanced");
m_has_GL_KHR_blend_equation_advanced_coherent = getExtensionSupported("GL_KHR_blend_equation_advanced_coherent");
m_has_GL_KHR_debug = getExtensionSupported("GL_KHR_debug");
m_has_GL_KHR_robustness = getExtensionSupported("GL_KHR_robustness");
m_has_GL_KHR_texture_compression_astc_ldr = getExtensionSupported("GL_KHR_texture_compression_astc_ldr");
m_has_GL_OES_EGL_image = getExtensionSupported("GL_OES_EGL_image");
m_has_GL_OES_EGL_image_external = getExtensionSupported("GL_OES_EGL_image_external");
m_has_GL_OES_EGL_sync = getExtensionSupported("GL_OES_EGL_sync");
m_has_GL_OES_compressed_ETC1_RGB8_texture = getExtensionSupported("GL_OES_compressed_ETC1_RGB8_texture");
m_has_GL_OES_compressed_paletted_texture = getExtensionSupported("GL_OES_compressed_paletted_texture");
m_has_GL_OES_copy_image = getExtensionSupported("GL_OES_copy_image");
m_has_GL_OES_depth24 = getExtensionSupported("GL_OES_depth24");
m_has_GL_OES_draw_buffers_indexed = getExtensionSupported("GL_OES_draw_buffers_indexed");
m_has_GL_OES_draw_elements_base_vertex = getExtensionSupported("GL_OES_draw_elements_base_vertex");
m_has_GL_OES_draw_texture = getExtensionSupported("GL_OES_draw_texture");
m_has_GL_OES_framebuffer_object = getExtensionSupported("GL_OES_framebuffer_object");
m_has_GL_OES_geometry_point_size = getExtensionSupported("GL_OES_geometry_point_size");
m_has_GL_OES_geometry_shader = getExtensionSupported("GL_OES_geometry_shader");
m_has_GL_OES_gpu_shader5 = getExtensionSupported("GL_OES_gpu_shader5");
m_has_GL_OES_mapbuffer = getExtensionSupported("GL_OES_mapbuffer");
m_has_GL_OES_matrix_palette = getExtensionSupported("GL_OES_matrix_palette");
m_has_GL_OES_packed_depth_stencil = getExtensionSupported("GL_OES_packed_depth_stencil");
m_has_GL_OES_point_size_array = getExtensionSupported("GL_OES_point_size_array");
m_has_GL_OES_primitive_bounding_box = getExtensionSupported("GL_OES_primitive_bounding_box");
m_has_GL_OES_query_matrix = getExtensionSupported("GL_OES_query_matrix");
m_has_GL_OES_rgb8_rgba8 = getExtensionSupported("GL_OES_rgb8_rgba8");
m_has_GL_OES_sample_shading = getExtensionSupported("GL_OES_sample_shading");
m_has_GL_OES_sample_variables = getExtensionSupported("GL_OES_sample_variables");
m_has_GL_OES_shader_image_atomic = getExtensionSupported("GL_OES_shader_image_atomic");
m_has_GL_OES_shader_io_blocks = getExtensionSupported("GL_OES_shader_io_blocks");
m_has_GL_OES_shader_multisample_interpolation = getExtensionSupported("GL_OES_shader_multisample_interpolation");
m_has_GL_OES_standard_derivatives = getExtensionSupported("GL_OES_standard_derivatives");
m_has_GL_OES_stencil8 = getExtensionSupported("GL_OES_stencil8");
m_has_GL_OES_stencil_wrap = getExtensionSupported("GL_OES_stencil_wrap");
m_has_GL_OES_surfaceless_context = getExtensionSupported("GL_OES_surfaceless_context");
m_has_GL_OES_tessellation_point_size = getExtensionSupported("GL_OES_tessellation_point_size");
m_has_GL_OES_tessellation_shader = getExtensionSupported("GL_OES_tessellation_shader");
m_has_GL_OES_texture_border_clamp = getExtensionSupported("GL_OES_texture_border_clamp");
m_has_GL_OES_texture_buffer = getExtensionSupported("GL_OES_texture_buffer");
m_has_GL_OES_texture_cube_map_array = getExtensionSupported("GL_OES_texture_cube_map_array");
m_has_GL_OES_texture_mirrored_repeat = getExtensionSupported("GL_OES_texture_mirrored_repeat");
m_has_GL_OES_texture_npot = getExtensionSupported("GL_OES_texture_npot");
m_has_GL_OES_texture_stencil8 = getExtensionSupported("GL_OES_texture_stencil8");
m_has_GL_OES_texture_storage_multisample_2d_array = getExtensionSupported("GL_OES_texture_storage_multisample_2d_array");
m_has_GL_OES_vertex_array_object = getExtensionSupported("GL_OES_vertex_array_object");
m_has_GL_OES_vertex_half_float = getExtensionSupported("GL_OES_vertex_half_float");
m_has_GL_VERSION_ES_CM_1_0 = getVersionSupported("GL_VERSION_ES_CM_1_0");
