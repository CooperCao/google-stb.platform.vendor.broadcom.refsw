/*=============================================================================
Broadcom Proprietary and Confidential. (c)2016 Broadcom.
All rights reserved.
=============================================================================*/
/* Auto-generated by running gen_hook_tables.py
 * DO NOT EDIT!
 */
void Command::run_eglChooseConfig()
{
#if EGL_VERSION_1_0
 if (m_packet.NumItems() > 7) WarnDataNotHandled("eglChooseConfig");
 eglChooseConfig(GetEGLDisplay(EGLDisplay, 0), GetArrayPtr(const EGLint *, 5), dummyEGLConfig, GetI32(EGLint, 3), dummyEGLint);
#else
 WarnNotAvailable("eglChooseConfig");
#endif
}
void Command::run_eglCopyBuffers()
{
#if EGL_VERSION_1_0
 if (m_packet.NumItems() > 4) WarnDataNotHandled("eglCopyBuffers");
 eglCopyBuffers(GetEGLDisplay(EGLDisplay, 0), GetEGLSurface(EGLSurface, 1), GetPtr(EGLNativePixmapType, 2));
#else
 WarnNotAvailable("eglCopyBuffers");
#endif
}
void Command::run_eglCreateContext()
{
#if EGL_VERSION_1_0
 if (m_packet.NumItems() > 6) WarnDataNotHandled("eglCreateContext");
 eglCreateContext(GetEGLDisplay(EGLDisplay, 0), GetEGLConfig(EGLConfig, 1), GetEGLContext(EGLContext, 2), GetArrayPtr(const EGLint *, 4));
#else
 WarnNotAvailable("eglCreateContext");
#endif
}
void Command::run_eglCreatePbufferSurface()
{
#if EGL_VERSION_1_0
 if (m_packet.NumItems() > 5) WarnDataNotHandled("eglCreatePbufferSurface");
 eglCreatePbufferSurface(GetEGLDisplay(EGLDisplay, 0), GetEGLConfig(EGLConfig, 1), GetArrayPtr(const EGLint *, 3));
#else
 WarnNotAvailable("eglCreatePbufferSurface");
#endif
}
void Command::run_eglCreatePixmapSurface()
{
#if EGL_VERSION_1_0
 if (m_packet.NumItems() > 6) WarnDataNotHandled("eglCreatePixmapSurface");
 eglCreatePixmapSurface(GetEGLDisplay(EGLDisplay, 0), GetEGLConfig(EGLConfig, 1), GetPtr(EGLNativePixmapType, 2), GetArrayPtr(const EGLint *, 4));
#else
 WarnNotAvailable("eglCreatePixmapSurface");
#endif
}
void Command::run_eglCreateWindowSurface()
{
#if EGL_VERSION_1_0
 if (m_packet.NumItems() > 6) WarnDataNotHandled("eglCreateWindowSurface");
 eglCreateWindowSurface(GetEGLDisplay(EGLDisplay, 0), GetEGLConfig(EGLConfig, 1), GetPtr(EGLNativeWindowType, 2), GetArrayPtr(const EGLint *, 4));
#else
 WarnNotAvailable("eglCreateWindowSurface");
#endif
}
void Command::run_eglDestroyContext()
{
#if EGL_VERSION_1_0
 if (m_packet.NumItems() > 3) WarnDataNotHandled("eglDestroyContext");
 eglDestroyContext(GetEGLDisplay(EGLDisplay, 0), GetEGLContext(EGLContext, 1));
#else
 WarnNotAvailable("eglDestroyContext");
#endif
}
void Command::run_eglDestroySurface()
{
#if EGL_VERSION_1_0
 if (m_packet.NumItems() > 3) WarnDataNotHandled("eglDestroySurface");
 eglDestroySurface(GetEGLDisplay(EGLDisplay, 0), GetEGLSurface(EGLSurface, 1));
#else
 WarnNotAvailable("eglDestroySurface");
#endif
}
void Command::run_eglGetConfigAttrib()
{
#if EGL_VERSION_1_0
 if (m_packet.NumItems() > 5) WarnDataNotHandled("eglGetConfigAttrib");
 eglGetConfigAttrib(GetEGLDisplay(EGLDisplay, 0), GetEGLConfig(EGLConfig, 1), GetI32(EGLint, 2), dummyEGLint);
#else
 WarnNotAvailable("eglGetConfigAttrib");
#endif
}
void Command::run_eglGetConfigs()
{
#if EGL_VERSION_1_0
 if (m_packet.NumItems() > 5) WarnDataNotHandled("eglGetConfigs");
 eglGetConfigs(GetEGLDisplay(EGLDisplay, 0), dummyEGLConfig, GetI32(EGLint, 2), dummyEGLint);
#else
 WarnNotAvailable("eglGetConfigs");
#endif
}
void Command::run_eglGetCurrentDisplay()
{
#if EGL_VERSION_1_0
 if (m_packet.NumItems() > 1) WarnDataNotHandled("eglGetCurrentDisplay");
 eglGetCurrentDisplay();
#else
 WarnNotAvailable("eglGetCurrentDisplay");
#endif
}
void Command::run_eglGetCurrentSurface()
{
#if EGL_VERSION_1_0
 if (m_packet.NumItems() > 2) WarnDataNotHandled("eglGetCurrentSurface");
 eglGetCurrentSurface(GetI32(EGLint, 0));
#else
 WarnNotAvailable("eglGetCurrentSurface");
#endif
}
void Command::run_eglGetDisplay()
{
#if EGL_VERSION_1_0
 if (m_packet.NumItems() > 2) WarnDataNotHandled("eglGetDisplay");
 eglGetDisplay(GetPtr(EGLNativeDisplayType, 0));
#else
 WarnNotAvailable("eglGetDisplay");
#endif
}
void Command::run_eglGetError()
{
#if EGL_VERSION_1_0
 if (m_packet.NumItems() > 1) WarnDataNotHandled("eglGetError");
 eglGetError();
#else
 WarnNotAvailable("eglGetError");
#endif
}
void Command::run_eglGetProcAddress()
{
#if EGL_VERSION_1_0
 if (m_packet.NumItems() > 2) WarnDataNotHandled("eglGetProcAddress");
 eglGetProcAddress(GetCP(const char *, 0));
#else
 WarnNotAvailable("eglGetProcAddress");
#endif
}
void Command::run_eglInitialize()
{
#if EGL_VERSION_1_0
 if (m_packet.NumItems() > 4) WarnDataNotHandled("eglInitialize");
 eglInitialize(GetEGLDisplay(EGLDisplay, 0), dummyEGLint, dummyEGLint);
#else
 WarnNotAvailable("eglInitialize");
#endif
}
void Command::run_eglMakeCurrent()
{
#if EGL_VERSION_1_0
 if (m_packet.NumItems() > 5) WarnDataNotHandled("eglMakeCurrent");
 eglMakeCurrent(GetEGLDisplay(EGLDisplay, 0), GetEGLSurface(EGLSurface, 1), GetEGLSurface(EGLSurface, 2), GetEGLContext(EGLContext, 3));
#else
 WarnNotAvailable("eglMakeCurrent");
#endif
}
void Command::run_eglQueryContext()
{
#if EGL_VERSION_1_0
 if (m_packet.NumItems() > 5) WarnDataNotHandled("eglQueryContext");
 eglQueryContext(GetEGLDisplay(EGLDisplay, 0), GetEGLContext(EGLContext, 1), GetI32(EGLint, 2), dummyEGLint);
#else
 WarnNotAvailable("eglQueryContext");
#endif
}
void Command::run_eglQueryString()
{
#if EGL_VERSION_1_0
 if (m_packet.NumItems() > 3) WarnDataNotHandled("eglQueryString");
 eglQueryString(GetEGLDisplay(EGLDisplay, 0), GetI32(EGLint, 1));
#else
 WarnNotAvailable("eglQueryString");
#endif
}
void Command::run_eglQuerySurface()
{
#if EGL_VERSION_1_0
 if (m_packet.NumItems() > 5) WarnDataNotHandled("eglQuerySurface");
 eglQuerySurface(GetEGLDisplay(EGLDisplay, 0), GetEGLSurface(EGLSurface, 1), GetI32(EGLint, 2), dummyEGLint);
#else
 WarnNotAvailable("eglQuerySurface");
#endif
}
void Command::run_eglSwapBuffers()
{
#if EGL_VERSION_1_0
 if (m_packet.NumItems() > 3) WarnDataNotHandled("eglSwapBuffers");
 eglSwapBuffers(GetEGLDisplay(EGLDisplay, 0), GetEGLSurface(EGLSurface, 1));
#else
 WarnNotAvailable("eglSwapBuffers");
#endif
}
void Command::run_eglTerminate()
{
#if EGL_VERSION_1_0
 if (m_packet.NumItems() > 2) WarnDataNotHandled("eglTerminate");
 eglTerminate(GetEGLDisplay(EGLDisplay, 0));
#else
 WarnNotAvailable("eglTerminate");
#endif
}
void Command::run_eglWaitGL()
{
#if EGL_VERSION_1_0
 if (m_packet.NumItems() > 1) WarnDataNotHandled("eglWaitGL");
 eglWaitGL();
#else
 WarnNotAvailable("eglWaitGL");
#endif
}
void Command::run_eglWaitNative()
{
#if EGL_VERSION_1_0
 if (m_packet.NumItems() > 2) WarnDataNotHandled("eglWaitNative");
 eglWaitNative(GetI32(EGLint, 0));
#else
 WarnNotAvailable("eglWaitNative");
#endif
}
void Command::run_glAlphaFunc()
{
#if GL_VERSION_ES_CM_1_0
 if (m_packet.NumItems() > 3) WarnDataNotHandled("glAlphaFunc");
 glAlphaFunc(GetU32(GLenum, 0), GetF(GLfloat, 1));
#else
 WarnNotAvailable("glAlphaFunc");
#endif
}
void Command::run_glClearColor()
{
#if GL_VERSION_ES_CM_1_0
 if (m_packet.NumItems() > 5) WarnDataNotHandled("glClearColor");
 glClearColor(GetF(GLfloat, 0), GetF(GLfloat, 1), GetF(GLfloat, 2), GetF(GLfloat, 3));
#else
 WarnNotAvailable("glClearColor");
#endif
}
void Command::run_glClearDepthf()
{
#if GL_VERSION_ES_CM_1_0
 if (m_packet.NumItems() > 2) WarnDataNotHandled("glClearDepthf");
 glClearDepthf(GetF(GLfloat, 0));
#else
 WarnNotAvailable("glClearDepthf");
#endif
}
void Command::run_glClipPlanef()
{
#if GL_VERSION_ES_CM_1_0
 if (m_packet.NumItems() > 4) WarnDataNotHandled("glClipPlanef");
 glClipPlanef(GetU32(GLenum, 0), GetArrayPtr(const GLfloat *, 2));
#else
 WarnNotAvailable("glClipPlanef");
#endif
}
void Command::run_glColor4f()
{
#if GL_VERSION_ES_CM_1_0
 if (m_packet.NumItems() > 5) WarnDataNotHandled("glColor4f");
 glColor4f(GetF(GLfloat, 0), GetF(GLfloat, 1), GetF(GLfloat, 2), GetF(GLfloat, 3));
#else
 WarnNotAvailable("glColor4f");
#endif
}
void Command::run_glDepthRangef()
{
#if GL_VERSION_ES_CM_1_0
 if (m_packet.NumItems() > 3) WarnDataNotHandled("glDepthRangef");
 glDepthRangef(GetF(GLfloat, 0), GetF(GLfloat, 1));
#else
 WarnNotAvailable("glDepthRangef");
#endif
}
void Command::run_glFogf()
{
#if GL_VERSION_ES_CM_1_0
 if (m_packet.NumItems() > 3) WarnDataNotHandled("glFogf");
 glFogf(GetU32(GLenum, 0), GetF(GLfloat, 1));
#else
 WarnNotAvailable("glFogf");
#endif
}
void Command::run_glFogfv()
{
#if GL_VERSION_ES_CM_1_0
 if (m_packet.NumItems() > 4) WarnDataNotHandled("glFogfv");
 glFogfv(GetU32(GLenum, 0), GetArrayPtr(const GLfloat *, 2));
#else
 WarnNotAvailable("glFogfv");
#endif
}
void Command::run_glFrustumf()
{
#if GL_VERSION_ES_CM_1_0
 if (m_packet.NumItems() > 7) WarnDataNotHandled("glFrustumf");
 glFrustumf(GetF(GLfloat, 0), GetF(GLfloat, 1), GetF(GLfloat, 2), GetF(GLfloat, 3), GetF(GLfloat, 4), GetF(GLfloat, 5));
#else
 WarnNotAvailable("glFrustumf");
#endif
}
void Command::run_glGetClipPlanef()
{
#if GL_VERSION_ES_CM_1_0
 if (m_packet.NumItems() > 3) WarnDataNotHandled("glGetClipPlanef");
 glGetClipPlanef(GetU32(GLenum, 0), dummyGLfloat);
#else
 WarnNotAvailable("glGetClipPlanef");
#endif
}
void Command::run_glGetFloatv()
{
#if GL_VERSION_ES_CM_1_0
 if (m_packet.NumItems() > 3) WarnDataNotHandled("glGetFloatv");
 glGetFloatv(GetU32(GLenum, 0), dummyGLfloat);
#else
 WarnNotAvailable("glGetFloatv");
#endif
}
void Command::run_glGetLightfv()
{
#if GL_VERSION_ES_CM_1_0
 if (m_packet.NumItems() > 4) WarnDataNotHandled("glGetLightfv");
 glGetLightfv(GetU32(GLenum, 0), GetU32(GLenum, 1), dummyGLfloat);
#else
 WarnNotAvailable("glGetLightfv");
#endif
}
void Command::run_glGetMaterialfv()
{
#if GL_VERSION_ES_CM_1_0
 if (m_packet.NumItems() > 4) WarnDataNotHandled("glGetMaterialfv");
 glGetMaterialfv(GetU32(GLenum, 0), GetU32(GLenum, 1), dummyGLfloat);
#else
 WarnNotAvailable("glGetMaterialfv");
#endif
}
void Command::run_glGetTexEnvfv()
{
#if GL_VERSION_ES_CM_1_0
 if (m_packet.NumItems() > 4) WarnDataNotHandled("glGetTexEnvfv");
 glGetTexEnvfv(GetU32(GLenum, 0), GetU32(GLenum, 1), dummyGLfloat);
#else
 WarnNotAvailable("glGetTexEnvfv");
#endif
}
void Command::run_glGetTexParameterfv()
{
#if GL_VERSION_ES_CM_1_0
 if (m_packet.NumItems() > 4) WarnDataNotHandled("glGetTexParameterfv");
 glGetTexParameterfv(GetU32(GLenum, 0), GetU32(GLenum, 1), dummyGLfloat);
#else
 WarnNotAvailable("glGetTexParameterfv");
#endif
}
void Command::run_glLightModelf()
{
#if GL_VERSION_ES_CM_1_0
 if (m_packet.NumItems() > 3) WarnDataNotHandled("glLightModelf");
 glLightModelf(GetU32(GLenum, 0), GetF(GLfloat, 1));
#else
 WarnNotAvailable("glLightModelf");
#endif
}
void Command::run_glLightModelfv()
{
#if GL_VERSION_ES_CM_1_0
 if (m_packet.NumItems() > 4) WarnDataNotHandled("glLightModelfv");
 glLightModelfv(GetU32(GLenum, 0), GetArrayPtr(const GLfloat *, 2));
#else
 WarnNotAvailable("glLightModelfv");
#endif
}
void Command::run_glLightf()
{
#if GL_VERSION_ES_CM_1_0
 if (m_packet.NumItems() > 4) WarnDataNotHandled("glLightf");
 glLightf(GetU32(GLenum, 0), GetU32(GLenum, 1), GetF(GLfloat, 2));
#else
 WarnNotAvailable("glLightf");
#endif
}
void Command::run_glLightfv()
{
#if GL_VERSION_ES_CM_1_0
 if (m_packet.NumItems() > 5) WarnDataNotHandled("glLightfv");
 glLightfv(GetU32(GLenum, 0), GetU32(GLenum, 1), GetArrayPtr(const GLfloat *, 3));
#else
 WarnNotAvailable("glLightfv");
#endif
}
void Command::run_glLineWidth()
{
#if GL_VERSION_ES_CM_1_0
 if (m_packet.NumItems() > 2) WarnDataNotHandled("glLineWidth");
 glLineWidth(GetF(GLfloat, 0));
#else
 WarnNotAvailable("glLineWidth");
#endif
}
void Command::run_glLoadMatrixf()
{
#if GL_VERSION_ES_CM_1_0
 if (m_packet.NumItems() > 3) WarnDataNotHandled("glLoadMatrixf");
 glLoadMatrixf(GetArrayPtr(const GLfloat *, 1));
#else
 WarnNotAvailable("glLoadMatrixf");
#endif
}
void Command::run_glMaterialf()
{
#if GL_VERSION_ES_CM_1_0
 if (m_packet.NumItems() > 4) WarnDataNotHandled("glMaterialf");
 glMaterialf(GetU32(GLenum, 0), GetU32(GLenum, 1), GetF(GLfloat, 2));
#else
 WarnNotAvailable("glMaterialf");
#endif
}
void Command::run_glMaterialfv()
{
#if GL_VERSION_ES_CM_1_0
 if (m_packet.NumItems() > 5) WarnDataNotHandled("glMaterialfv");
 glMaterialfv(GetU32(GLenum, 0), GetU32(GLenum, 1), GetArrayPtr(const GLfloat *, 3));
#else
 WarnNotAvailable("glMaterialfv");
#endif
}
void Command::run_glMultMatrixf()
{
#if GL_VERSION_ES_CM_1_0
 if (m_packet.NumItems() > 3) WarnDataNotHandled("glMultMatrixf");
 glMultMatrixf(GetArrayPtr(const GLfloat *, 1));
#else
 WarnNotAvailable("glMultMatrixf");
#endif
}
void Command::run_glMultiTexCoord4f()
{
#if GL_VERSION_ES_CM_1_0
 if (m_packet.NumItems() > 6) WarnDataNotHandled("glMultiTexCoord4f");
 glMultiTexCoord4f(GetU32(GLenum, 0), GetF(GLfloat, 1), GetF(GLfloat, 2), GetF(GLfloat, 3), GetF(GLfloat, 4));
#else
 WarnNotAvailable("glMultiTexCoord4f");
#endif
}
void Command::run_glNormal3f()
{
#if GL_VERSION_ES_CM_1_0
 if (m_packet.NumItems() > 4) WarnDataNotHandled("glNormal3f");
 glNormal3f(GetF(GLfloat, 0), GetF(GLfloat, 1), GetF(GLfloat, 2));
#else
 WarnNotAvailable("glNormal3f");
#endif
}
void Command::run_glOrthof()
{
#if GL_VERSION_ES_CM_1_0
 if (m_packet.NumItems() > 7) WarnDataNotHandled("glOrthof");
 glOrthof(GetF(GLfloat, 0), GetF(GLfloat, 1), GetF(GLfloat, 2), GetF(GLfloat, 3), GetF(GLfloat, 4), GetF(GLfloat, 5));
#else
 WarnNotAvailable("glOrthof");
#endif
}
void Command::run_glPointParameterf()
{
#if GL_VERSION_ES_CM_1_0
 if (m_packet.NumItems() > 3) WarnDataNotHandled("glPointParameterf");
 glPointParameterf(GetU32(GLenum, 0), GetF(GLfloat, 1));
#else
 WarnNotAvailable("glPointParameterf");
#endif
}
void Command::run_glPointParameterfv()
{
#if GL_VERSION_ES_CM_1_0
 if (m_packet.NumItems() > 4) WarnDataNotHandled("glPointParameterfv");
 glPointParameterfv(GetU32(GLenum, 0), GetArrayPtr(const GLfloat *, 2));
#else
 WarnNotAvailable("glPointParameterfv");
#endif
}
void Command::run_glPointSize()
{
#if GL_VERSION_ES_CM_1_0
 if (m_packet.NumItems() > 2) WarnDataNotHandled("glPointSize");
 glPointSize(GetF(GLfloat, 0));
#else
 WarnNotAvailable("glPointSize");
#endif
}
void Command::run_glPolygonOffset()
{
#if GL_VERSION_ES_CM_1_0
 if (m_packet.NumItems() > 3) WarnDataNotHandled("glPolygonOffset");
 glPolygonOffset(GetF(GLfloat, 0), GetF(GLfloat, 1));
#else
 WarnNotAvailable("glPolygonOffset");
#endif
}
void Command::run_glRotatef()
{
#if GL_VERSION_ES_CM_1_0
 if (m_packet.NumItems() > 5) WarnDataNotHandled("glRotatef");
 glRotatef(GetF(GLfloat, 0), GetF(GLfloat, 1), GetF(GLfloat, 2), GetF(GLfloat, 3));
#else
 WarnNotAvailable("glRotatef");
#endif
}
void Command::run_glScalef()
{
#if GL_VERSION_ES_CM_1_0
 if (m_packet.NumItems() > 4) WarnDataNotHandled("glScalef");
 glScalef(GetF(GLfloat, 0), GetF(GLfloat, 1), GetF(GLfloat, 2));
#else
 WarnNotAvailable("glScalef");
#endif
}
void Command::run_glTexEnvf()
{
#if GL_VERSION_ES_CM_1_0
 if (m_packet.NumItems() > 4) WarnDataNotHandled("glTexEnvf");
 glTexEnvf(GetU32(GLenum, 0), GetU32(GLenum, 1), GetF(GLfloat, 2));
#else
 WarnNotAvailable("glTexEnvf");
#endif
}
void Command::run_glTexEnvfv()
{
#if GL_VERSION_ES_CM_1_0
 if (m_packet.NumItems() > 5) WarnDataNotHandled("glTexEnvfv");
 glTexEnvfv(GetU32(GLenum, 0), GetU32(GLenum, 1), GetArrayPtr(const GLfloat *, 3));
#else
 WarnNotAvailable("glTexEnvfv");
#endif
}
void Command::run_glTexParameterf()
{
#if GL_VERSION_ES_CM_1_0
 if (m_packet.NumItems() > 4) WarnDataNotHandled("glTexParameterf");
 glTexParameterf(GetU32(GLenum, 0), GetU32(GLenum, 1), GetF(GLfloat, 2));
#else
 WarnNotAvailable("glTexParameterf");
#endif
}
void Command::run_glTexParameterfv()
{
#if GL_VERSION_ES_CM_1_0
 if (m_packet.NumItems() > 5) WarnDataNotHandled("glTexParameterfv");
 glTexParameterfv(GetU32(GLenum, 0), GetU32(GLenum, 1), GetArrayPtr(const GLfloat *, 3));
#else
 WarnNotAvailable("glTexParameterfv");
#endif
}
void Command::run_glTranslatef()
{
#if GL_VERSION_ES_CM_1_0
 if (m_packet.NumItems() > 4) WarnDataNotHandled("glTranslatef");
 glTranslatef(GetF(GLfloat, 0), GetF(GLfloat, 1), GetF(GLfloat, 2));
#else
 WarnNotAvailable("glTranslatef");
#endif
}
void Command::run_glActiveTexture()
{
#if GL_VERSION_ES_CM_1_0
 if (m_packet.NumItems() > 2) WarnDataNotHandled("glActiveTexture");
 glActiveTexture(GetU32(GLenum, 0));
#else
 WarnNotAvailable("glActiveTexture");
#endif
}
void Command::run_glAlphaFuncx()
{
#if GL_VERSION_ES_CM_1_0
 if (m_packet.NumItems() > 3) WarnDataNotHandled("glAlphaFuncx");
 glAlphaFuncx(GetU32(GLenum, 0), GetU32(GLfixed, 1));
#else
 WarnNotAvailable("glAlphaFuncx");
#endif
}
void Command::run_glBindBuffer()
{
#if GL_VERSION_ES_CM_1_0
 if (m_packet.NumItems() > 3) WarnDataNotHandled("glBindBuffer");
 glBindBuffer(GetU32(GLenum, 0), GetU32(GLuint, 1));
#else
 WarnNotAvailable("glBindBuffer");
#endif
}
void Command::run_glBindTexture()
{
#if GL_VERSION_ES_CM_1_0
 if (m_packet.NumItems() > 3) WarnDataNotHandled("glBindTexture");
 glBindTexture(GetU32(GLenum, 0), GetU32(GLuint, 1));
#else
 WarnNotAvailable("glBindTexture");
#endif
}
void Command::run_glBlendFunc()
{
#if GL_VERSION_ES_CM_1_0
 if (m_packet.NumItems() > 3) WarnDataNotHandled("glBlendFunc");
 glBlendFunc(GetU32(GLenum, 0), GetU32(GLenum, 1));
#else
 WarnNotAvailable("glBlendFunc");
#endif
}
void Command::run_glBufferData()
{
#if GL_VERSION_ES_CM_1_0
 if (m_packet.NumItems() > 6) WarnDataNotHandled("glBufferData");
 glBufferData(GetU32(GLenum, 0), GetPtr(GLsizeiptr, 1), GetArrayPtr(const void *, 4), GetU32(GLenum, 3));
#else
 WarnNotAvailable("glBufferData");
#endif
}
void Command::run_glBufferSubData()
{
#if GL_VERSION_ES_CM_1_0
 if (m_packet.NumItems() > 6) WarnDataNotHandled("glBufferSubData");
 glBufferSubData(GetU32(GLenum, 0), GetPtr(GLintptr, 1), GetPtr(GLsizeiptr, 2), GetArrayPtr(const void *, 4));
#else
 WarnNotAvailable("glBufferSubData");
#endif
}
void Command::run_glClear()
{
#if GL_VERSION_ES_CM_1_0
 if (m_packet.NumItems() > 2) WarnDataNotHandled("glClear");
 glClear(GetU32(GLbitfield, 0));
#else
 WarnNotAvailable("glClear");
#endif
}
void Command::run_glClearColorx()
{
#if GL_VERSION_ES_CM_1_0
 if (m_packet.NumItems() > 5) WarnDataNotHandled("glClearColorx");
 glClearColorx(GetU32(GLfixed, 0), GetU32(GLfixed, 1), GetU32(GLfixed, 2), GetU32(GLfixed, 3));
#else
 WarnNotAvailable("glClearColorx");
#endif
}
void Command::run_glClearDepthx()
{
#if GL_VERSION_ES_CM_1_0
 if (m_packet.NumItems() > 2) WarnDataNotHandled("glClearDepthx");
 glClearDepthx(GetU32(GLfixed, 0));
#else
 WarnNotAvailable("glClearDepthx");
#endif
}
void Command::run_glClearStencil()
{
#if GL_VERSION_ES_CM_1_0
 if (m_packet.NumItems() > 2) WarnDataNotHandled("glClearStencil");
 glClearStencil(GetI32(GLint, 0));
#else
 WarnNotAvailable("glClearStencil");
#endif
}
void Command::run_glClientActiveTexture()
{
#if GL_VERSION_ES_CM_1_0
 if (m_packet.NumItems() > 2) WarnDataNotHandled("glClientActiveTexture");
 glClientActiveTexture(GetU32(GLenum, 0));
#else
 WarnNotAvailable("glClientActiveTexture");
#endif
}
void Command::run_glClipPlanex()
{
#if GL_VERSION_ES_CM_1_0
 if (m_packet.NumItems() > 4) WarnDataNotHandled("glClipPlanex");
 glClipPlanex(GetU32(GLenum, 0), GetArrayPtr(const GLfixed *, 2));
#else
 WarnNotAvailable("glClipPlanex");
#endif
}
void Command::run_glColor4ub()
{
#if GL_VERSION_ES_CM_1_0
 if (m_packet.NumItems() > 5) WarnDataNotHandled("glColor4ub");
 glColor4ub(GetU8(GLubyte, 0), GetU8(GLubyte, 1), GetU8(GLubyte, 2), GetU8(GLubyte, 3));
#else
 WarnNotAvailable("glColor4ub");
#endif
}
void Command::run_glColor4x()
{
#if GL_VERSION_ES_CM_1_0
 if (m_packet.NumItems() > 5) WarnDataNotHandled("glColor4x");
 glColor4x(GetU32(GLfixed, 0), GetU32(GLfixed, 1), GetU32(GLfixed, 2), GetU32(GLfixed, 3));
#else
 WarnNotAvailable("glColor4x");
#endif
}
void Command::run_glColorMask()
{
#if GL_VERSION_ES_CM_1_0
 if (m_packet.NumItems() > 5) WarnDataNotHandled("glColorMask");
 glColorMask(GetB(GLboolean, 0), GetB(GLboolean, 1), GetB(GLboolean, 2), GetB(GLboolean, 3));
#else
 WarnNotAvailable("glColorMask");
#endif
}
void Command::run_glColorPointer()
{
#if GL_VERSION_ES_CM_1_0
 if (m_packet.NumItems() > 6) WarnDataNotHandled("glColorPointer");
 glColorPointer(GetI32(GLint, 0), GetU32(GLenum, 1), GetI32(GLsizei, 2), GetArrayPtr(const void *, 4));
#else
 WarnNotAvailable("glColorPointer");
#endif
}
void Command::run_glCompressedTexImage2D()
{
#if GL_VERSION_ES_CM_1_0
 if (m_packet.NumItems() > 10) WarnDataNotHandled("glCompressedTexImage2D");
 glCompressedTexImage2D(GetU32(GLenum, 0), GetI32(GLint, 1), GetU32(GLenum, 2), GetI32(GLsizei, 3), GetI32(GLsizei, 4), GetI32(GLint, 5), GetI32(GLsizei, 6), GetArrayPtr(const void *, 8));
#else
 WarnNotAvailable("glCompressedTexImage2D");
#endif
}
void Command::run_glCompressedTexSubImage2D()
{
#if GL_VERSION_ES_CM_1_0
 if (m_packet.NumItems() > 11) WarnDataNotHandled("glCompressedTexSubImage2D");
 glCompressedTexSubImage2D(GetU32(GLenum, 0), GetI32(GLint, 1), GetI32(GLint, 2), GetI32(GLint, 3), GetI32(GLsizei, 4), GetI32(GLsizei, 5), GetU32(GLenum, 6), GetI32(GLsizei, 7), GetArrayPtr(const void *, 9));
#else
 WarnNotAvailable("glCompressedTexSubImage2D");
#endif
}
void Command::run_glCopyTexImage2D()
{
#if GL_VERSION_ES_CM_1_0
 if (m_packet.NumItems() > 9) WarnDataNotHandled("glCopyTexImage2D");
 glCopyTexImage2D(GetU32(GLenum, 0), GetI32(GLint, 1), GetU32(GLenum, 2), GetI32(GLint, 3), GetI32(GLint, 4), GetI32(GLsizei, 5), GetI32(GLsizei, 6), GetI32(GLint, 7));
#else
 WarnNotAvailable("glCopyTexImage2D");
#endif
}
void Command::run_glCopyTexSubImage2D()
{
#if GL_VERSION_ES_CM_1_0
 if (m_packet.NumItems() > 9) WarnDataNotHandled("glCopyTexSubImage2D");
 glCopyTexSubImage2D(GetU32(GLenum, 0), GetI32(GLint, 1), GetI32(GLint, 2), GetI32(GLint, 3), GetI32(GLint, 4), GetI32(GLint, 5), GetI32(GLsizei, 6), GetI32(GLsizei, 7));
#else
 WarnNotAvailable("glCopyTexSubImage2D");
#endif
}
void Command::run_glCullFace()
{
#if GL_VERSION_ES_CM_1_0
 if (m_packet.NumItems() > 2) WarnDataNotHandled("glCullFace");
 glCullFace(GetU32(GLenum, 0));
#else
 WarnNotAvailable("glCullFace");
#endif
}
void Command::run_glDeleteBuffers()
{
#if GL_VERSION_ES_CM_1_0
 if (m_packet.NumItems() > 4) WarnDataNotHandled("glDeleteBuffers");
 glDeleteBuffers(GetI32(GLsizei, 0), GetArrayPtr(const GLuint *, 2));
#else
 WarnNotAvailable("glDeleteBuffers");
#endif
}
void Command::run_glDeleteTextures()
{
#if GL_VERSION_ES_CM_1_0
 if (m_packet.NumItems() > 4) WarnDataNotHandled("glDeleteTextures");
 glDeleteTextures(GetI32(GLsizei, 0), GetArrayPtr(const GLuint *, 2));
#else
 WarnNotAvailable("glDeleteTextures");
#endif
}
void Command::run_glDepthFunc()
{
#if GL_VERSION_ES_CM_1_0
 if (m_packet.NumItems() > 2) WarnDataNotHandled("glDepthFunc");
 glDepthFunc(GetU32(GLenum, 0));
#else
 WarnNotAvailable("glDepthFunc");
#endif
}
void Command::run_glDepthMask()
{
#if GL_VERSION_ES_CM_1_0
 if (m_packet.NumItems() > 2) WarnDataNotHandled("glDepthMask");
 glDepthMask(GetB(GLboolean, 0));
#else
 WarnNotAvailable("glDepthMask");
#endif
}
void Command::run_glDepthRangex()
{
#if GL_VERSION_ES_CM_1_0
 if (m_packet.NumItems() > 3) WarnDataNotHandled("glDepthRangex");
 glDepthRangex(GetU32(GLfixed, 0), GetU32(GLfixed, 1));
#else
 WarnNotAvailable("glDepthRangex");
#endif
}
void Command::run_glDisable()
{
#if GL_VERSION_ES_CM_1_0
 if (m_packet.NumItems() > 2) WarnDataNotHandled("glDisable");
 glDisable(GetU32(GLenum, 0));
#else
 WarnNotAvailable("glDisable");
#endif
}
void Command::run_glDisableClientState()
{
#if GL_VERSION_ES_CM_1_0
 if (m_packet.NumItems() > 2) WarnDataNotHandled("glDisableClientState");
 glDisableClientState(GetU32(GLenum, 0));
#else
 WarnNotAvailable("glDisableClientState");
#endif
}
void Command::run_glDrawArrays()
{
#if GL_VERSION_ES_CM_1_0
 if (m_packet.NumItems() > 4) WarnDataNotHandled("glDrawArrays");
 glDrawArrays(GetU32(GLenum, 0), GetI32(GLint, 1), GetI32(GLsizei, 2));
#else
 WarnNotAvailable("glDrawArrays");
#endif
}
void Command::run_glDrawElements()
{
#if GL_VERSION_ES_CM_1_0
 if (m_packet.NumItems() > 6) WarnDataNotHandled("glDrawElements");
 glDrawElements(GetU32(GLenum, 0), GetI32(GLsizei, 1), GetU32(GLenum, 2), GetArrayPtr(const void *, 4));
#else
 WarnNotAvailable("glDrawElements");
#endif
}
void Command::run_glEnable()
{
#if GL_VERSION_ES_CM_1_0
 if (m_packet.NumItems() > 2) WarnDataNotHandled("glEnable");
 glEnable(GetU32(GLenum, 0));
#else
 WarnNotAvailable("glEnable");
#endif
}
void Command::run_glEnableClientState()
{
#if GL_VERSION_ES_CM_1_0
 if (m_packet.NumItems() > 2) WarnDataNotHandled("glEnableClientState");
 glEnableClientState(GetU32(GLenum, 0));
#else
 WarnNotAvailable("glEnableClientState");
#endif
}
void Command::run_glFinish()
{
#if GL_VERSION_ES_CM_1_0
 if (m_packet.NumItems() > 1) WarnDataNotHandled("glFinish");
 glFinish();
#else
 WarnNotAvailable("glFinish");
#endif
}
void Command::run_glFlush()
{
#if GL_VERSION_ES_CM_1_0
 if (m_packet.NumItems() > 1) WarnDataNotHandled("glFlush");
 glFlush();
#else
 WarnNotAvailable("glFlush");
#endif
}
void Command::run_glFogx()
{
#if GL_VERSION_ES_CM_1_0
 if (m_packet.NumItems() > 3) WarnDataNotHandled("glFogx");
 glFogx(GetU32(GLenum, 0), GetU32(GLfixed, 1));
#else
 WarnNotAvailable("glFogx");
#endif
}
void Command::run_glFogxv()
{
#if GL_VERSION_ES_CM_1_0
 if (m_packet.NumItems() > 4) WarnDataNotHandled("glFogxv");
 glFogxv(GetU32(GLenum, 0), GetArrayPtr(const GLfixed *, 2));
#else
 WarnNotAvailable("glFogxv");
#endif
}
void Command::run_glFrontFace()
{
#if GL_VERSION_ES_CM_1_0
 if (m_packet.NumItems() > 2) WarnDataNotHandled("glFrontFace");
 glFrontFace(GetU32(GLenum, 0));
#else
 WarnNotAvailable("glFrontFace");
#endif
}
void Command::run_glFrustumx()
{
#if GL_VERSION_ES_CM_1_0
 if (m_packet.NumItems() > 7) WarnDataNotHandled("glFrustumx");
 glFrustumx(GetU32(GLfixed, 0), GetU32(GLfixed, 1), GetU32(GLfixed, 2), GetU32(GLfixed, 3), GetU32(GLfixed, 4), GetU32(GLfixed, 5));
#else
 WarnNotAvailable("glFrustumx");
#endif
}
void Command::run_glGetBooleanv()
{
#if GL_VERSION_ES_CM_1_0
 if (m_packet.NumItems() > 3) WarnDataNotHandled("glGetBooleanv");
 glGetBooleanv(GetU32(GLenum, 0), dummyGLboolean);
#else
 WarnNotAvailable("glGetBooleanv");
#endif
}
void Command::run_glGetBufferParameteriv()
{
#if GL_VERSION_ES_CM_1_0
 if (m_packet.NumItems() > 4) WarnDataNotHandled("glGetBufferParameteriv");
 glGetBufferParameteriv(GetU32(GLenum, 0), GetU32(GLenum, 1), dummyGLint);
#else
 WarnNotAvailable("glGetBufferParameteriv");
#endif
}
void Command::run_glGetClipPlanex()
{
#if GL_VERSION_ES_CM_1_0
 if (m_packet.NumItems() > 3) WarnDataNotHandled("glGetClipPlanex");
 glGetClipPlanex(GetU32(GLenum, 0), dummyGLfixed);
#else
 WarnNotAvailable("glGetClipPlanex");
#endif
}
void Command::run_glGenBuffers()
{
#if GL_VERSION_ES_CM_1_0
 if (m_packet.NumItems() > 3) WarnDataNotHandled("glGenBuffers");
 glGenBuffers(GetI32(GLsizei, 0), dummyGLuint);
#else
 WarnNotAvailable("glGenBuffers");
#endif
}
void Command::run_glGenTextures()
{
#if GL_VERSION_ES_CM_1_0
 if (m_packet.NumItems() > 3) WarnDataNotHandled("glGenTextures");
 glGenTextures(GetI32(GLsizei, 0), dummyGLuint);
#else
 WarnNotAvailable("glGenTextures");
#endif
}
void Command::run_glGetError()
{
#if GL_VERSION_ES_CM_1_0
 if (m_packet.NumItems() > 1) WarnDataNotHandled("glGetError");
 glGetError();
#else
 WarnNotAvailable("glGetError");
#endif
}
void Command::run_glGetFixedv()
{
#if GL_VERSION_ES_CM_1_0
 if (m_packet.NumItems() > 3) WarnDataNotHandled("glGetFixedv");
 glGetFixedv(GetU32(GLenum, 0), dummyGLfixed);
#else
 WarnNotAvailable("glGetFixedv");
#endif
}
void Command::run_glGetIntegerv()
{
#if GL_VERSION_ES_CM_1_0
 if (m_packet.NumItems() > 3) WarnDataNotHandled("glGetIntegerv");
 glGetIntegerv(GetU32(GLenum, 0), dummyGLint);
#else
 WarnNotAvailable("glGetIntegerv");
#endif
}
void Command::run_glGetLightxv()
{
#if GL_VERSION_ES_CM_1_0
 if (m_packet.NumItems() > 4) WarnDataNotHandled("glGetLightxv");
 glGetLightxv(GetU32(GLenum, 0), GetU32(GLenum, 1), dummyGLfixed);
#else
 WarnNotAvailable("glGetLightxv");
#endif
}
void Command::run_glGetMaterialxv()
{
#if GL_VERSION_ES_CM_1_0
 if (m_packet.NumItems() > 4) WarnDataNotHandled("glGetMaterialxv");
 glGetMaterialxv(GetU32(GLenum, 0), GetU32(GLenum, 1), dummyGLfixed);
#else
 WarnNotAvailable("glGetMaterialxv");
#endif
}
void Command::run_glGetPointerv()
{
#if GL_VERSION_ES_CM_1_0
 if (m_packet.NumItems() > 3) WarnDataNotHandled("glGetPointerv");
 glGetPointerv(GetU32(GLenum, 0), dummyvoidptr);
#else
 WarnNotAvailable("glGetPointerv");
#endif
}
void Command::run_glGetString()
{
#if GL_VERSION_ES_CM_1_0
 if (m_packet.NumItems() > 2) WarnDataNotHandled("glGetString");
 glGetString(GetU32(GLenum, 0));
#else
 WarnNotAvailable("glGetString");
#endif
}
void Command::run_glGetTexEnviv()
{
#if GL_VERSION_ES_CM_1_0
 if (m_packet.NumItems() > 4) WarnDataNotHandled("glGetTexEnviv");
 glGetTexEnviv(GetU32(GLenum, 0), GetU32(GLenum, 1), dummyGLint);
#else
 WarnNotAvailable("glGetTexEnviv");
#endif
}
void Command::run_glGetTexEnvxv()
{
#if GL_VERSION_ES_CM_1_0
 if (m_packet.NumItems() > 4) WarnDataNotHandled("glGetTexEnvxv");
 glGetTexEnvxv(GetU32(GLenum, 0), GetU32(GLenum, 1), dummyGLfixed);
#else
 WarnNotAvailable("glGetTexEnvxv");
#endif
}
void Command::run_glGetTexParameteriv()
{
#if GL_VERSION_ES_CM_1_0
 if (m_packet.NumItems() > 4) WarnDataNotHandled("glGetTexParameteriv");
 glGetTexParameteriv(GetU32(GLenum, 0), GetU32(GLenum, 1), dummyGLint);
#else
 WarnNotAvailable("glGetTexParameteriv");
#endif
}
void Command::run_glGetTexParameterxv()
{
#if GL_VERSION_ES_CM_1_0
 if (m_packet.NumItems() > 4) WarnDataNotHandled("glGetTexParameterxv");
 glGetTexParameterxv(GetU32(GLenum, 0), GetU32(GLenum, 1), dummyGLfixed);
#else
 WarnNotAvailable("glGetTexParameterxv");
#endif
}
void Command::run_glHint()
{
#if GL_VERSION_ES_CM_1_0
 if (m_packet.NumItems() > 3) WarnDataNotHandled("glHint");
 glHint(GetU32(GLenum, 0), GetU32(GLenum, 1));
#else
 WarnNotAvailable("glHint");
#endif
}
void Command::run_glIsBuffer()
{
#if GL_VERSION_ES_CM_1_0
 if (m_packet.NumItems() > 2) WarnDataNotHandled("glIsBuffer");
 glIsBuffer(GetU32(GLuint, 0));
#else
 WarnNotAvailable("glIsBuffer");
#endif
}
void Command::run_glIsEnabled()
{
#if GL_VERSION_ES_CM_1_0
 if (m_packet.NumItems() > 2) WarnDataNotHandled("glIsEnabled");
 glIsEnabled(GetU32(GLenum, 0));
#else
 WarnNotAvailable("glIsEnabled");
#endif
}
void Command::run_glIsTexture()
{
#if GL_VERSION_ES_CM_1_0
 if (m_packet.NumItems() > 2) WarnDataNotHandled("glIsTexture");
 glIsTexture(GetU32(GLuint, 0));
#else
 WarnNotAvailable("glIsTexture");
#endif
}
void Command::run_glLightModelx()
{
#if GL_VERSION_ES_CM_1_0
 if (m_packet.NumItems() > 3) WarnDataNotHandled("glLightModelx");
 glLightModelx(GetU32(GLenum, 0), GetU32(GLfixed, 1));
#else
 WarnNotAvailable("glLightModelx");
#endif
}
void Command::run_glLightModelxv()
{
#if GL_VERSION_ES_CM_1_0
 if (m_packet.NumItems() > 4) WarnDataNotHandled("glLightModelxv");
 glLightModelxv(GetU32(GLenum, 0), GetArrayPtr(const GLfixed *, 2));
#else
 WarnNotAvailable("glLightModelxv");
#endif
}
void Command::run_glLightx()
{
#if GL_VERSION_ES_CM_1_0
 if (m_packet.NumItems() > 4) WarnDataNotHandled("glLightx");
 glLightx(GetU32(GLenum, 0), GetU32(GLenum, 1), GetU32(GLfixed, 2));
#else
 WarnNotAvailable("glLightx");
#endif
}
void Command::run_glLightxv()
{
#if GL_VERSION_ES_CM_1_0
 if (m_packet.NumItems() > 5) WarnDataNotHandled("glLightxv");
 glLightxv(GetU32(GLenum, 0), GetU32(GLenum, 1), GetArrayPtr(const GLfixed *, 3));
#else
 WarnNotAvailable("glLightxv");
#endif
}
void Command::run_glLineWidthx()
{
#if GL_VERSION_ES_CM_1_0
 if (m_packet.NumItems() > 2) WarnDataNotHandled("glLineWidthx");
 glLineWidthx(GetU32(GLfixed, 0));
#else
 WarnNotAvailable("glLineWidthx");
#endif
}
void Command::run_glLoadIdentity()
{
#if GL_VERSION_ES_CM_1_0
 if (m_packet.NumItems() > 1) WarnDataNotHandled("glLoadIdentity");
 glLoadIdentity();
#else
 WarnNotAvailable("glLoadIdentity");
#endif
}
void Command::run_glLoadMatrixx()
{
#if GL_VERSION_ES_CM_1_0
 if (m_packet.NumItems() > 3) WarnDataNotHandled("glLoadMatrixx");
 glLoadMatrixx(GetArrayPtr(const GLfixed *, 1));
#else
 WarnNotAvailable("glLoadMatrixx");
#endif
}
void Command::run_glLogicOp()
{
#if GL_VERSION_ES_CM_1_0
 if (m_packet.NumItems() > 2) WarnDataNotHandled("glLogicOp");
 glLogicOp(GetU32(GLenum, 0));
#else
 WarnNotAvailable("glLogicOp");
#endif
}
void Command::run_glMaterialx()
{
#if GL_VERSION_ES_CM_1_0
 if (m_packet.NumItems() > 4) WarnDataNotHandled("glMaterialx");
 glMaterialx(GetU32(GLenum, 0), GetU32(GLenum, 1), GetU32(GLfixed, 2));
#else
 WarnNotAvailable("glMaterialx");
#endif
}
void Command::run_glMaterialxv()
{
#if GL_VERSION_ES_CM_1_0
 if (m_packet.NumItems() > 5) WarnDataNotHandled("glMaterialxv");
 glMaterialxv(GetU32(GLenum, 0), GetU32(GLenum, 1), GetArrayPtr(const GLfixed *, 3));
#else
 WarnNotAvailable("glMaterialxv");
#endif
}
void Command::run_glMatrixMode()
{
#if GL_VERSION_ES_CM_1_0
 if (m_packet.NumItems() > 2) WarnDataNotHandled("glMatrixMode");
 glMatrixMode(GetU32(GLenum, 0));
#else
 WarnNotAvailable("glMatrixMode");
#endif
}
void Command::run_glMultMatrixx()
{
#if GL_VERSION_ES_CM_1_0
 if (m_packet.NumItems() > 3) WarnDataNotHandled("glMultMatrixx");
 glMultMatrixx(GetArrayPtr(const GLfixed *, 1));
#else
 WarnNotAvailable("glMultMatrixx");
#endif
}
void Command::run_glMultiTexCoord4x()
{
#if GL_VERSION_ES_CM_1_0
 if (m_packet.NumItems() > 6) WarnDataNotHandled("glMultiTexCoord4x");
 glMultiTexCoord4x(GetU32(GLenum, 0), GetU32(GLfixed, 1), GetU32(GLfixed, 2), GetU32(GLfixed, 3), GetU32(GLfixed, 4));
#else
 WarnNotAvailable("glMultiTexCoord4x");
#endif
}
void Command::run_glNormal3x()
{
#if GL_VERSION_ES_CM_1_0
 if (m_packet.NumItems() > 4) WarnDataNotHandled("glNormal3x");
 glNormal3x(GetU32(GLfixed, 0), GetU32(GLfixed, 1), GetU32(GLfixed, 2));
#else
 WarnNotAvailable("glNormal3x");
#endif
}
void Command::run_glNormalPointer()
{
#if GL_VERSION_ES_CM_1_0
 if (m_packet.NumItems() > 5) WarnDataNotHandled("glNormalPointer");
 glNormalPointer(GetU32(GLenum, 0), GetI32(GLsizei, 1), GetArrayPtr(const void *, 3));
#else
 WarnNotAvailable("glNormalPointer");
#endif
}
void Command::run_glOrthox()
{
#if GL_VERSION_ES_CM_1_0
 if (m_packet.NumItems() > 7) WarnDataNotHandled("glOrthox");
 glOrthox(GetU32(GLfixed, 0), GetU32(GLfixed, 1), GetU32(GLfixed, 2), GetU32(GLfixed, 3), GetU32(GLfixed, 4), GetU32(GLfixed, 5));
#else
 WarnNotAvailable("glOrthox");
#endif
}
void Command::run_glPixelStorei()
{
#if GL_VERSION_ES_CM_1_0
 if (m_packet.NumItems() > 3) WarnDataNotHandled("glPixelStorei");
 glPixelStorei(GetU32(GLenum, 0), GetI32(GLint, 1));
#else
 WarnNotAvailable("glPixelStorei");
#endif
}
void Command::run_glPointParameterx()
{
#if GL_VERSION_ES_CM_1_0
 if (m_packet.NumItems() > 3) WarnDataNotHandled("glPointParameterx");
 glPointParameterx(GetU32(GLenum, 0), GetU32(GLfixed, 1));
#else
 WarnNotAvailable("glPointParameterx");
#endif
}
void Command::run_glPointParameterxv()
{
#if GL_VERSION_ES_CM_1_0
 if (m_packet.NumItems() > 4) WarnDataNotHandled("glPointParameterxv");
 glPointParameterxv(GetU32(GLenum, 0), GetArrayPtr(const GLfixed *, 2));
#else
 WarnNotAvailable("glPointParameterxv");
#endif
}
void Command::run_glPointSizex()
{
#if GL_VERSION_ES_CM_1_0
 if (m_packet.NumItems() > 2) WarnDataNotHandled("glPointSizex");
 glPointSizex(GetU32(GLfixed, 0));
#else
 WarnNotAvailable("glPointSizex");
#endif
}
void Command::run_glPolygonOffsetx()
{
#if GL_VERSION_ES_CM_1_0
 if (m_packet.NumItems() > 3) WarnDataNotHandled("glPolygonOffsetx");
 glPolygonOffsetx(GetU32(GLfixed, 0), GetU32(GLfixed, 1));
#else
 WarnNotAvailable("glPolygonOffsetx");
#endif
}
void Command::run_glPopMatrix()
{
#if GL_VERSION_ES_CM_1_0
 if (m_packet.NumItems() > 1) WarnDataNotHandled("glPopMatrix");
 glPopMatrix();
#else
 WarnNotAvailable("glPopMatrix");
#endif
}
void Command::run_glPushMatrix()
{
#if GL_VERSION_ES_CM_1_0
 if (m_packet.NumItems() > 1) WarnDataNotHandled("glPushMatrix");
 glPushMatrix();
#else
 WarnNotAvailable("glPushMatrix");
#endif
}
void Command::run_glReadPixels()
{
#if GL_VERSION_ES_CM_1_0
 if (m_packet.NumItems() > 8) WarnDataNotHandled("glReadPixels");
 glReadPixels(GetI32(GLint, 0), GetI32(GLint, 1), GetI32(GLsizei, 2), GetI32(GLsizei, 3), GetU32(GLenum, 4), GetU32(GLenum, 5), dummyvoid);
#else
 WarnNotAvailable("glReadPixels");
#endif
}
void Command::run_glRotatex()
{
#if GL_VERSION_ES_CM_1_0
 if (m_packet.NumItems() > 5) WarnDataNotHandled("glRotatex");
 glRotatex(GetU32(GLfixed, 0), GetU32(GLfixed, 1), GetU32(GLfixed, 2), GetU32(GLfixed, 3));
#else
 WarnNotAvailable("glRotatex");
#endif
}
void Command::run_glSampleCoverage()
{
#if GL_VERSION_ES_CM_1_0
 if (m_packet.NumItems() > 3) WarnDataNotHandled("glSampleCoverage");
 glSampleCoverage(GetF(GLfloat, 0), GetB(GLboolean, 1));
#else
 WarnNotAvailable("glSampleCoverage");
#endif
}
void Command::run_glSampleCoveragex()
{
#if GL_VERSION_ES_CM_1_0
 if (m_packet.NumItems() > 3) WarnDataNotHandled("glSampleCoveragex");
 glSampleCoveragex(GetU32(GLclampx, 0), GetB(GLboolean, 1));
#else
 WarnNotAvailable("glSampleCoveragex");
#endif
}
void Command::run_glScalex()
{
#if GL_VERSION_ES_CM_1_0
 if (m_packet.NumItems() > 4) WarnDataNotHandled("glScalex");
 glScalex(GetU32(GLfixed, 0), GetU32(GLfixed, 1), GetU32(GLfixed, 2));
#else
 WarnNotAvailable("glScalex");
#endif
}
void Command::run_glScissor()
{
#if GL_VERSION_ES_CM_1_0
 if (m_packet.NumItems() > 5) WarnDataNotHandled("glScissor");
 glScissor(GetI32(GLint, 0), GetI32(GLint, 1), GetI32(GLsizei, 2), GetI32(GLsizei, 3));
#else
 WarnNotAvailable("glScissor");
#endif
}
void Command::run_glShadeModel()
{
#if GL_VERSION_ES_CM_1_0
 if (m_packet.NumItems() > 2) WarnDataNotHandled("glShadeModel");
 glShadeModel(GetU32(GLenum, 0));
#else
 WarnNotAvailable("glShadeModel");
#endif
}
void Command::run_glStencilFunc()
{
#if GL_VERSION_ES_CM_1_0
 if (m_packet.NumItems() > 4) WarnDataNotHandled("glStencilFunc");
 glStencilFunc(GetU32(GLenum, 0), GetI32(GLint, 1), GetU32(GLuint, 2));
#else
 WarnNotAvailable("glStencilFunc");
#endif
}
void Command::run_glStencilMask()
{
#if GL_VERSION_ES_CM_1_0
 if (m_packet.NumItems() > 2) WarnDataNotHandled("glStencilMask");
 glStencilMask(GetU32(GLuint, 0));
#else
 WarnNotAvailable("glStencilMask");
#endif
}
void Command::run_glStencilOp()
{
#if GL_VERSION_ES_CM_1_0
 if (m_packet.NumItems() > 4) WarnDataNotHandled("glStencilOp");
 glStencilOp(GetU32(GLenum, 0), GetU32(GLenum, 1), GetU32(GLenum, 2));
#else
 WarnNotAvailable("glStencilOp");
#endif
}
void Command::run_glTexCoordPointer()
{
#if GL_VERSION_ES_CM_1_0
 if (m_packet.NumItems() > 6) WarnDataNotHandled("glTexCoordPointer");
 glTexCoordPointer(GetI32(GLint, 0), GetU32(GLenum, 1), GetI32(GLsizei, 2), GetArrayPtr(const void *, 4));
#else
 WarnNotAvailable("glTexCoordPointer");
#endif
}
void Command::run_glTexEnvi()
{
#if GL_VERSION_ES_CM_1_0
 if (m_packet.NumItems() > 4) WarnDataNotHandled("glTexEnvi");
 glTexEnvi(GetU32(GLenum, 0), GetU32(GLenum, 1), GetI32(GLint, 2));
#else
 WarnNotAvailable("glTexEnvi");
#endif
}
void Command::run_glTexEnvx()
{
#if GL_VERSION_ES_CM_1_0
 if (m_packet.NumItems() > 4) WarnDataNotHandled("glTexEnvx");
 glTexEnvx(GetU32(GLenum, 0), GetU32(GLenum, 1), GetU32(GLfixed, 2));
#else
 WarnNotAvailable("glTexEnvx");
#endif
}
void Command::run_glTexEnviv()
{
#if GL_VERSION_ES_CM_1_0
 if (m_packet.NumItems() > 5) WarnDataNotHandled("glTexEnviv");
 glTexEnviv(GetU32(GLenum, 0), GetU32(GLenum, 1), GetArrayPtr(const GLint *, 3));
#else
 WarnNotAvailable("glTexEnviv");
#endif
}
void Command::run_glTexEnvxv()
{
#if GL_VERSION_ES_CM_1_0
 if (m_packet.NumItems() > 5) WarnDataNotHandled("glTexEnvxv");
 glTexEnvxv(GetU32(GLenum, 0), GetU32(GLenum, 1), GetArrayPtr(const GLfixed *, 3));
#else
 WarnNotAvailable("glTexEnvxv");
#endif
}
void Command::run_glTexImage2D()
{
#if GL_VERSION_ES_CM_1_0
 if (m_packet.NumItems() > 11) WarnDataNotHandled("glTexImage2D");
 glTexImage2D(GetU32(GLenum, 0), GetI32(GLint, 1), GetI32(GLint, 2), GetI32(GLsizei, 3), GetI32(GLsizei, 4), GetI32(GLint, 5), GetU32(GLenum, 6), GetU32(GLenum, 7), GetArrayPtr(const void *, 9));
#else
 WarnNotAvailable("glTexImage2D");
#endif
}
void Command::run_glTexParameteri()
{
#if GL_VERSION_ES_CM_1_0
 if (m_packet.NumItems() > 4) WarnDataNotHandled("glTexParameteri");
 glTexParameteri(GetU32(GLenum, 0), GetU32(GLenum, 1), GetI32(GLint, 2));
#else
 WarnNotAvailable("glTexParameteri");
#endif
}
void Command::run_glTexParameterx()
{
#if GL_VERSION_ES_CM_1_0
 if (m_packet.NumItems() > 4) WarnDataNotHandled("glTexParameterx");
 glTexParameterx(GetU32(GLenum, 0), GetU32(GLenum, 1), GetU32(GLfixed, 2));
#else
 WarnNotAvailable("glTexParameterx");
#endif
}
void Command::run_glTexParameteriv()
{
#if GL_VERSION_ES_CM_1_0
 if (m_packet.NumItems() > 5) WarnDataNotHandled("glTexParameteriv");
 glTexParameteriv(GetU32(GLenum, 0), GetU32(GLenum, 1), GetArrayPtr(const GLint *, 3));
#else
 WarnNotAvailable("glTexParameteriv");
#endif
}
void Command::run_glTexParameterxv()
{
#if GL_VERSION_ES_CM_1_0
 if (m_packet.NumItems() > 5) WarnDataNotHandled("glTexParameterxv");
 glTexParameterxv(GetU32(GLenum, 0), GetU32(GLenum, 1), GetArrayPtr(const GLfixed *, 3));
#else
 WarnNotAvailable("glTexParameterxv");
#endif
}
void Command::run_glTexSubImage2D()
{
#if GL_VERSION_ES_CM_1_0
 if (m_packet.NumItems() > 11) WarnDataNotHandled("glTexSubImage2D");
 glTexSubImage2D(GetU32(GLenum, 0), GetI32(GLint, 1), GetI32(GLint, 2), GetI32(GLint, 3), GetI32(GLsizei, 4), GetI32(GLsizei, 5), GetU32(GLenum, 6), GetU32(GLenum, 7), GetArrayPtr(const void *, 9));
#else
 WarnNotAvailable("glTexSubImage2D");
#endif
}
void Command::run_glTranslatex()
{
#if GL_VERSION_ES_CM_1_0
 if (m_packet.NumItems() > 4) WarnDataNotHandled("glTranslatex");
 glTranslatex(GetU32(GLfixed, 0), GetU32(GLfixed, 1), GetU32(GLfixed, 2));
#else
 WarnNotAvailable("glTranslatex");
#endif
}
void Command::run_glVertexPointer()
{
#if GL_VERSION_ES_CM_1_0
 if (m_packet.NumItems() > 6) WarnDataNotHandled("glVertexPointer");
 glVertexPointer(GetI32(GLint, 0), GetU32(GLenum, 1), GetI32(GLsizei, 2), GetArrayPtr(const void *, 4));
#else
 WarnNotAvailable("glVertexPointer");
#endif
}
void Command::run_glViewport()
{
#if GL_VERSION_ES_CM_1_0
 if (m_packet.NumItems() > 5) WarnDataNotHandled("glViewport");
 glViewport(GetI32(GLint, 0), GetI32(GLint, 1), GetI32(GLsizei, 2), GetI32(GLsizei, 3));
#else
 WarnNotAvailable("glViewport");
#endif
}
void Command::run_eglBindTexImage()
{
#if EGL_VERSION_1_1
 if (m_packet.NumItems() > 4) WarnDataNotHandled("eglBindTexImage");
 eglBindTexImage(GetEGLDisplay(EGLDisplay, 0), GetEGLSurface(EGLSurface, 1), GetI32(EGLint, 2));
#else
 WarnNotAvailable("eglBindTexImage");
#endif
}
void Command::run_eglReleaseTexImage()
{
#if EGL_VERSION_1_1
 if (m_packet.NumItems() > 4) WarnDataNotHandled("eglReleaseTexImage");
 eglReleaseTexImage(GetEGLDisplay(EGLDisplay, 0), GetEGLSurface(EGLSurface, 1), GetI32(EGLint, 2));
#else
 WarnNotAvailable("eglReleaseTexImage");
#endif
}
void Command::run_eglSurfaceAttrib()
{
#if EGL_VERSION_1_1
 if (m_packet.NumItems() > 5) WarnDataNotHandled("eglSurfaceAttrib");
 eglSurfaceAttrib(GetEGLDisplay(EGLDisplay, 0), GetEGLSurface(EGLSurface, 1), GetI32(EGLint, 2), GetI32(EGLint, 3));
#else
 WarnNotAvailable("eglSurfaceAttrib");
#endif
}
void Command::run_eglSwapInterval()
{
#if EGL_VERSION_1_1
 if (m_packet.NumItems() > 3) WarnDataNotHandled("eglSwapInterval");
 eglSwapInterval(GetEGLDisplay(EGLDisplay, 0), GetI32(EGLint, 1));
#else
 WarnNotAvailable("eglSwapInterval");
#endif
}
void Command::run_eglBindAPI()
{
#if EGL_VERSION_1_2
 if (m_packet.NumItems() > 2) WarnDataNotHandled("eglBindAPI");
 eglBindAPI(GetU32(EGLenum, 0));
#else
 WarnNotAvailable("eglBindAPI");
#endif
}
void Command::run_eglQueryAPI()
{
#if EGL_VERSION_1_2
 if (m_packet.NumItems() > 1) WarnDataNotHandled("eglQueryAPI");
 eglQueryAPI();
#else
 WarnNotAvailable("eglQueryAPI");
#endif
}
void Command::run_eglCreatePbufferFromClientBuffer()
{
#if EGL_VERSION_1_2
 if (m_packet.NumItems() > 7) WarnDataNotHandled("eglCreatePbufferFromClientBuffer");
 eglCreatePbufferFromClientBuffer(GetEGLDisplay(EGLDisplay, 0), GetU32(EGLenum, 1), GetEGLClientBuffer(EGLClientBuffer, 2), GetEGLConfig(EGLConfig, 3), GetArrayPtr(const EGLint *, 5));
#else
 WarnNotAvailable("eglCreatePbufferFromClientBuffer");
#endif
}
void Command::run_eglReleaseThread()
{
#if EGL_VERSION_1_2
 if (m_packet.NumItems() > 1) WarnDataNotHandled("eglReleaseThread");
 eglReleaseThread();
#else
 WarnNotAvailable("eglReleaseThread");
#endif
}
void Command::run_eglWaitClient()
{
#if EGL_VERSION_1_2
 if (m_packet.NumItems() > 1) WarnDataNotHandled("eglWaitClient");
 eglWaitClient();
#else
 WarnNotAvailable("eglWaitClient");
#endif
}
void Command::run_eglGetCurrentContext()
{
#if EGL_VERSION_1_4
 if (m_packet.NumItems() > 1) WarnDataNotHandled("eglGetCurrentContext");
 eglGetCurrentContext();
#else
 WarnNotAvailable("eglGetCurrentContext");
#endif
}
void Command::run_eglCreateSync()
{
#if EGL_VERSION_1_5
 if (m_packet.NumItems() > 5) WarnDataNotHandled("eglCreateSync");
 eglCreateSync(GetEGLDisplay(EGLDisplay, 0), GetU32(EGLenum, 1), GetArrayPtr(const EGLAttrib *, 3));
#else
 WarnNotAvailable("eglCreateSync");
#endif
}
void Command::run_eglDestroySync()
{
#if EGL_VERSION_1_5
 if (m_packet.NumItems() > 3) WarnDataNotHandled("eglDestroySync");
 eglDestroySync(GetEGLDisplay(EGLDisplay, 0), GetEGLSync(EGLSync, 1));
#else
 WarnNotAvailable("eglDestroySync");
#endif
}
void Command::run_eglClientWaitSync()
{
#if EGL_VERSION_1_5
 if (m_packet.NumItems() > 5) WarnDataNotHandled("eglClientWaitSync");
 eglClientWaitSync(GetEGLDisplay(EGLDisplay, 0), GetEGLSync(EGLSync, 1), GetI32(EGLint, 2), GetU32(EGLTime, 3));
#else
 WarnNotAvailable("eglClientWaitSync");
#endif
}
void Command::run_eglGetSyncAttrib()
{
#if EGL_VERSION_1_5
 if (m_packet.NumItems() > 5) WarnDataNotHandled("eglGetSyncAttrib");
 eglGetSyncAttrib(GetEGLDisplay(EGLDisplay, 0), GetEGLSync(EGLSync, 1), GetI32(EGLint, 2), dummyEGLAttrib);
#else
 WarnNotAvailable("eglGetSyncAttrib");
#endif
}
void Command::run_eglCreateImage()
{
#if EGL_VERSION_1_5
 if (m_packet.NumItems() > 7) WarnDataNotHandled("eglCreateImage");
 eglCreateImage(GetEGLDisplay(EGLDisplay, 0), GetEGLContext(EGLContext, 1), GetU32(EGLenum, 2), GetEGLClientBuffer(EGLClientBuffer, 3), GetArrayPtr(const EGLAttrib *, 5));
#else
 WarnNotAvailable("eglCreateImage");
#endif
}
void Command::run_eglDestroyImage()
{
#if EGL_VERSION_1_5
 if (m_packet.NumItems() > 3) WarnDataNotHandled("eglDestroyImage");
 eglDestroyImage(GetEGLDisplay(EGLDisplay, 0), GetEGLImage(EGLImage, 1));
#else
 WarnNotAvailable("eglDestroyImage");
#endif
}
void Command::run_eglGetPlatformDisplay()
{
#if EGL_VERSION_1_5
 if (m_packet.NumItems() > 5) WarnDataNotHandled("eglGetPlatformDisplay");
 eglGetPlatformDisplay(GetU32(EGLenum, 0), dummyvoid, GetArrayPtr(const EGLAttrib *, 3));
#else
 WarnNotAvailable("eglGetPlatformDisplay");
#endif
}
void Command::run_eglCreatePlatformWindowSurface()
{
#if EGL_VERSION_1_5
 if (m_packet.NumItems() > 6) WarnDataNotHandled("eglCreatePlatformWindowSurface");
 eglCreatePlatformWindowSurface(GetEGLDisplay(EGLDisplay, 0), GetEGLConfig(EGLConfig, 1), dummyvoid, GetArrayPtr(const EGLAttrib *, 4));
#else
 WarnNotAvailable("eglCreatePlatformWindowSurface");
#endif
}
void Command::run_eglCreatePlatformPixmapSurface()
{
#if EGL_VERSION_1_5
 if (m_packet.NumItems() > 6) WarnDataNotHandled("eglCreatePlatformPixmapSurface");
 eglCreatePlatformPixmapSurface(GetEGLDisplay(EGLDisplay, 0), GetEGLConfig(EGLConfig, 1), dummyvoid, GetArrayPtr(const EGLAttrib *, 4));
#else
 WarnNotAvailable("eglCreatePlatformPixmapSurface");
#endif
}
void Command::run_eglWaitSync()
{
#if EGL_VERSION_1_5
 if (m_packet.NumItems() > 4) WarnDataNotHandled("eglWaitSync");
 eglWaitSync(GetEGLDisplay(EGLDisplay, 0), GetEGLSync(EGLSync, 1), GetI32(EGLint, 2));
#else
 WarnNotAvailable("eglWaitSync");
#endif
}
void Command::run_glAttachShader()
{
#if GL_ES_VERSION_2_0
 if (m_packet.NumItems() > 3) WarnDataNotHandled("glAttachShader");
 glAttachShader(GetProgram(GLuint, 0), GetShader(GLuint, 1));
#else
 WarnNotAvailable("glAttachShader");
#endif
}
void Command::run_glBindAttribLocation()
{
#if GL_ES_VERSION_2_0
 if (m_packet.NumItems() > 4) WarnDataNotHandled("glBindAttribLocation");
 glBindAttribLocation(GetProgram(GLuint, 0), GetU32(GLuint, 1), GetCP(const GLchar *, 2));
#else
 WarnNotAvailable("glBindAttribLocation");
#endif
}
void Command::run_glBindFramebuffer()
{
#if GL_ES_VERSION_2_0
 if (m_packet.NumItems() > 3) WarnDataNotHandled("glBindFramebuffer");
 glBindFramebuffer(GetU32(GLenum, 0), GetU32(GLuint, 1));
#else
 WarnNotAvailable("glBindFramebuffer");
#endif
}
void Command::run_glBindRenderbuffer()
{
#if GL_ES_VERSION_2_0
 if (m_packet.NumItems() > 3) WarnDataNotHandled("glBindRenderbuffer");
 glBindRenderbuffer(GetU32(GLenum, 0), GetU32(GLuint, 1));
#else
 WarnNotAvailable("glBindRenderbuffer");
#endif
}
void Command::run_glBlendColor()
{
#if GL_ES_VERSION_2_0
 if (m_packet.NumItems() > 5) WarnDataNotHandled("glBlendColor");
 glBlendColor(GetF(GLfloat, 0), GetF(GLfloat, 1), GetF(GLfloat, 2), GetF(GLfloat, 3));
#else
 WarnNotAvailable("glBlendColor");
#endif
}
void Command::run_glBlendEquation()
{
#if GL_ES_VERSION_2_0
 if (m_packet.NumItems() > 2) WarnDataNotHandled("glBlendEquation");
 glBlendEquation(GetU32(GLenum, 0));
#else
 WarnNotAvailable("glBlendEquation");
#endif
}
void Command::run_glBlendEquationSeparate()
{
#if GL_ES_VERSION_2_0
 if (m_packet.NumItems() > 3) WarnDataNotHandled("glBlendEquationSeparate");
 glBlendEquationSeparate(GetU32(GLenum, 0), GetU32(GLenum, 1));
#else
 WarnNotAvailable("glBlendEquationSeparate");
#endif
}
void Command::run_glBlendFuncSeparate()
{
#if GL_ES_VERSION_2_0
 if (m_packet.NumItems() > 5) WarnDataNotHandled("glBlendFuncSeparate");
 glBlendFuncSeparate(GetU32(GLenum, 0), GetU32(GLenum, 1), GetU32(GLenum, 2), GetU32(GLenum, 3));
#else
 WarnNotAvailable("glBlendFuncSeparate");
#endif
}
void Command::run_glCheckFramebufferStatus()
{
#if GL_ES_VERSION_2_0
 if (m_packet.NumItems() > 2) WarnDataNotHandled("glCheckFramebufferStatus");
 glCheckFramebufferStatus(GetU32(GLenum, 0));
#else
 WarnNotAvailable("glCheckFramebufferStatus");
#endif
}
void Command::run_glCompileShader()
{
#if GL_ES_VERSION_2_0
 if (m_packet.NumItems() > 2) WarnDataNotHandled("glCompileShader");
 glCompileShader(GetShader(GLuint, 0));
#else
 WarnNotAvailable("glCompileShader");
#endif
}
void Command::run_glCreateProgram()
{
#if GL_ES_VERSION_2_0
 if (m_packet.NumItems() > 1) WarnDataNotHandled("glCreateProgram");
 glCreateProgram();
#else
 WarnNotAvailable("glCreateProgram");
#endif
}
void Command::run_glCreateShader()
{
#if GL_ES_VERSION_2_0
 if (m_packet.NumItems() > 2) WarnDataNotHandled("glCreateShader");
 glCreateShader(GetU32(GLenum, 0));
#else
 WarnNotAvailable("glCreateShader");
#endif
}
void Command::run_glDeleteFramebuffers()
{
#if GL_ES_VERSION_2_0
 if (m_packet.NumItems() > 4) WarnDataNotHandled("glDeleteFramebuffers");
 glDeleteFramebuffers(GetI32(GLsizei, 0), GetArrayPtr(const GLuint *, 2));
#else
 WarnNotAvailable("glDeleteFramebuffers");
#endif
}
void Command::run_glDeleteProgram()
{
#if GL_ES_VERSION_2_0
 if (m_packet.NumItems() > 2) WarnDataNotHandled("glDeleteProgram");
 glDeleteProgram(GetProgram(GLuint, 0));
#else
 WarnNotAvailable("glDeleteProgram");
#endif
}
void Command::run_glDeleteRenderbuffers()
{
#if GL_ES_VERSION_2_0
 if (m_packet.NumItems() > 4) WarnDataNotHandled("glDeleteRenderbuffers");
 glDeleteRenderbuffers(GetI32(GLsizei, 0), GetArrayPtr(const GLuint *, 2));
#else
 WarnNotAvailable("glDeleteRenderbuffers");
#endif
}
void Command::run_glDeleteShader()
{
#if GL_ES_VERSION_2_0
 if (m_packet.NumItems() > 2) WarnDataNotHandled("glDeleteShader");
 glDeleteShader(GetShader(GLuint, 0));
#else
 WarnNotAvailable("glDeleteShader");
#endif
}
void Command::run_glDetachShader()
{
#if GL_ES_VERSION_2_0
 if (m_packet.NumItems() > 3) WarnDataNotHandled("glDetachShader");
 glDetachShader(GetProgram(GLuint, 0), GetShader(GLuint, 1));
#else
 WarnNotAvailable("glDetachShader");
#endif
}
void Command::run_glDisableVertexAttribArray()
{
#if GL_ES_VERSION_2_0
 if (m_packet.NumItems() > 2) WarnDataNotHandled("glDisableVertexAttribArray");
 glDisableVertexAttribArray(GetU32(GLuint, 0));
#else
 WarnNotAvailable("glDisableVertexAttribArray");
#endif
}
void Command::run_glEnableVertexAttribArray()
{
#if GL_ES_VERSION_2_0
 if (m_packet.NumItems() > 2) WarnDataNotHandled("glEnableVertexAttribArray");
 glEnableVertexAttribArray(GetU32(GLuint, 0));
#else
 WarnNotAvailable("glEnableVertexAttribArray");
#endif
}
void Command::run_glFramebufferRenderbuffer()
{
#if GL_ES_VERSION_2_0
 if (m_packet.NumItems() > 5) WarnDataNotHandled("glFramebufferRenderbuffer");
 glFramebufferRenderbuffer(GetU32(GLenum, 0), GetU32(GLenum, 1), GetU32(GLenum, 2), GetU32(GLuint, 3));
#else
 WarnNotAvailable("glFramebufferRenderbuffer");
#endif
}
void Command::run_glFramebufferTexture2D()
{
#if GL_ES_VERSION_2_0
 if (m_packet.NumItems() > 6) WarnDataNotHandled("glFramebufferTexture2D");
 glFramebufferTexture2D(GetU32(GLenum, 0), GetU32(GLenum, 1), GetU32(GLenum, 2), GetU32(GLuint, 3), GetI32(GLint, 4));
#else
 WarnNotAvailable("glFramebufferTexture2D");
#endif
}
void Command::run_glGenerateMipmap()
{
#if GL_ES_VERSION_2_0
 if (m_packet.NumItems() > 2) WarnDataNotHandled("glGenerateMipmap");
 glGenerateMipmap(GetU32(GLenum, 0));
#else
 WarnNotAvailable("glGenerateMipmap");
#endif
}
void Command::run_glGenFramebuffers()
{
#if GL_ES_VERSION_2_0
 if (m_packet.NumItems() > 3) WarnDataNotHandled("glGenFramebuffers");
 glGenFramebuffers(GetI32(GLsizei, 0), dummyGLuint);
#else
 WarnNotAvailable("glGenFramebuffers");
#endif
}
void Command::run_glGenRenderbuffers()
{
#if GL_ES_VERSION_2_0
 if (m_packet.NumItems() > 3) WarnDataNotHandled("glGenRenderbuffers");
 glGenRenderbuffers(GetI32(GLsizei, 0), dummyGLuint);
#else
 WarnNotAvailable("glGenRenderbuffers");
#endif
}
void Command::run_glGetActiveAttrib()
{
#if GL_ES_VERSION_2_0
 if (m_packet.NumItems() > 8) WarnDataNotHandled("glGetActiveAttrib");
 glGetActiveAttrib(GetProgram(GLuint, 0), GetU32(GLuint, 1), GetI32(GLsizei, 2), dummyGLsizei, dummyGLint, dummyGLenum, dummyGLchar);
#else
 WarnNotAvailable("glGetActiveAttrib");
#endif
}
void Command::run_glGetActiveUniform()
{
#if GL_ES_VERSION_2_0
 if (m_packet.NumItems() > 8) WarnDataNotHandled("glGetActiveUniform");
 glGetActiveUniform(GetProgram(GLuint, 0), GetU32(GLuint, 1), GetI32(GLsizei, 2), dummyGLsizei, dummyGLint, dummyGLenum, dummyGLchar);
#else
 WarnNotAvailable("glGetActiveUniform");
#endif
}
void Command::run_glGetAttachedShaders()
{
#if GL_ES_VERSION_2_0
 if (m_packet.NumItems() > 5) WarnDataNotHandled("glGetAttachedShaders");
 glGetAttachedShaders(GetProgram(GLuint, 0), GetI32(GLsizei, 1), dummyGLsizei, dummyGLuint);
#else
 WarnNotAvailable("glGetAttachedShaders");
#endif
}
void Command::run_glGetAttribLocation()
{
#if GL_ES_VERSION_2_0
 if (m_packet.NumItems() > 3) WarnDataNotHandled("glGetAttribLocation");
 glGetAttribLocation(GetProgram(GLuint, 0), GetCP(const GLchar *, 1));
#else
 WarnNotAvailable("glGetAttribLocation");
#endif
}
void Command::run_glGetFramebufferAttachmentParameteriv()
{
#if GL_ES_VERSION_2_0
 if (m_packet.NumItems() > 5) WarnDataNotHandled("glGetFramebufferAttachmentParameteriv");
 glGetFramebufferAttachmentParameteriv(GetU32(GLenum, 0), GetU32(GLenum, 1), GetU32(GLenum, 2), dummyGLint);
#else
 WarnNotAvailable("glGetFramebufferAttachmentParameteriv");
#endif
}
void Command::run_glGetProgramiv()
{
#if GL_ES_VERSION_2_0
 if (m_packet.NumItems() > 4) WarnDataNotHandled("glGetProgramiv");
 glGetProgramiv(GetProgram(GLuint, 0), GetU32(GLenum, 1), dummyGLint);
#else
 WarnNotAvailable("glGetProgramiv");
#endif
}
void Command::run_glGetProgramInfoLog()
{
#if GL_ES_VERSION_2_0
 if (m_packet.NumItems() > 5) WarnDataNotHandled("glGetProgramInfoLog");
 glGetProgramInfoLog(GetProgram(GLuint, 0), GetI32(GLsizei, 1), dummyGLsizei, dummyGLchar);
#else
 WarnNotAvailable("glGetProgramInfoLog");
#endif
}
void Command::run_glGetRenderbufferParameteriv()
{
#if GL_ES_VERSION_2_0
 if (m_packet.NumItems() > 4) WarnDataNotHandled("glGetRenderbufferParameteriv");
 glGetRenderbufferParameteriv(GetU32(GLenum, 0), GetU32(GLenum, 1), dummyGLint);
#else
 WarnNotAvailable("glGetRenderbufferParameteriv");
#endif
}
void Command::run_glGetShaderiv()
{
#if GL_ES_VERSION_2_0
 if (m_packet.NumItems() > 4) WarnDataNotHandled("glGetShaderiv");
 glGetShaderiv(GetShader(GLuint, 0), GetU32(GLenum, 1), dummyGLint);
#else
 WarnNotAvailable("glGetShaderiv");
#endif
}
void Command::run_glGetShaderInfoLog()
{
#if GL_ES_VERSION_2_0
 if (m_packet.NumItems() > 5) WarnDataNotHandled("glGetShaderInfoLog");
 glGetShaderInfoLog(GetShader(GLuint, 0), GetI32(GLsizei, 1), dummyGLsizei, dummyGLchar);
#else
 WarnNotAvailable("glGetShaderInfoLog");
#endif
}
void Command::run_glGetShaderPrecisionFormat()
{
#if GL_ES_VERSION_2_0
 if (m_packet.NumItems() > 5) WarnDataNotHandled("glGetShaderPrecisionFormat");
 glGetShaderPrecisionFormat(GetU32(GLenum, 0), GetU32(GLenum, 1), dummyGLint, dummyGLint);
#else
 WarnNotAvailable("glGetShaderPrecisionFormat");
#endif
}
void Command::run_glGetShaderSource()
{
#if GL_ES_VERSION_2_0
 if (m_packet.NumItems() > 5) WarnDataNotHandled("glGetShaderSource");
 glGetShaderSource(GetShader(GLuint, 0), GetI32(GLsizei, 1), dummyGLsizei, dummyGLchar);
#else
 WarnNotAvailable("glGetShaderSource");
#endif
}
void Command::run_glGetUniformfv()
{
#if GL_ES_VERSION_2_0
 if (m_packet.NumItems() > 4) WarnDataNotHandled("glGetUniformfv");
 glGetUniformfv(GetProgram(GLuint, 0), GetUniform(1, 0), dummyGLfloat);
#else
 WarnNotAvailable("glGetUniformfv");
#endif
}
void Command::run_glGetUniformiv()
{
#if GL_ES_VERSION_2_0
 if (m_packet.NumItems() > 4) WarnDataNotHandled("glGetUniformiv");
 glGetUniformiv(GetProgram(GLuint, 0), GetUniform(1, 0), dummyGLint);
#else
 WarnNotAvailable("glGetUniformiv");
#endif
}
void Command::run_glGetUniformLocation()
{
#if GL_ES_VERSION_2_0
 if (m_packet.NumItems() > 3) WarnDataNotHandled("glGetUniformLocation");
 glGetUniformLocation(GetProgram(GLuint, 0), GetCP(const GLchar *, 1));
#else
 WarnNotAvailable("glGetUniformLocation");
#endif
}
void Command::run_glGetVertexAttribfv()
{
#if GL_ES_VERSION_2_0
 if (m_packet.NumItems() > 4) WarnDataNotHandled("glGetVertexAttribfv");
 glGetVertexAttribfv(GetU32(GLuint, 0), GetU32(GLenum, 1), dummyGLfloat);
#else
 WarnNotAvailable("glGetVertexAttribfv");
#endif
}
void Command::run_glGetVertexAttribiv()
{
#if GL_ES_VERSION_2_0
 if (m_packet.NumItems() > 4) WarnDataNotHandled("glGetVertexAttribiv");
 glGetVertexAttribiv(GetU32(GLuint, 0), GetU32(GLenum, 1), dummyGLint);
#else
 WarnNotAvailable("glGetVertexAttribiv");
#endif
}
void Command::run_glGetVertexAttribPointerv()
{
#if GL_ES_VERSION_2_0
 if (m_packet.NumItems() > 4) WarnDataNotHandled("glGetVertexAttribPointerv");
 glGetVertexAttribPointerv(GetU32(GLuint, 0), GetU32(GLenum, 1), dummyvoidptr);
#else
 WarnNotAvailable("glGetVertexAttribPointerv");
#endif
}
void Command::run_glIsFramebuffer()
{
#if GL_ES_VERSION_2_0
 if (m_packet.NumItems() > 2) WarnDataNotHandled("glIsFramebuffer");
 glIsFramebuffer(GetU32(GLuint, 0));
#else
 WarnNotAvailable("glIsFramebuffer");
#endif
}
void Command::run_glIsProgram()
{
#if GL_ES_VERSION_2_0
 if (m_packet.NumItems() > 2) WarnDataNotHandled("glIsProgram");
 glIsProgram(GetProgram(GLuint, 0));
#else
 WarnNotAvailable("glIsProgram");
#endif
}
void Command::run_glIsRenderbuffer()
{
#if GL_ES_VERSION_2_0
 if (m_packet.NumItems() > 2) WarnDataNotHandled("glIsRenderbuffer");
 glIsRenderbuffer(GetU32(GLuint, 0));
#else
 WarnNotAvailable("glIsRenderbuffer");
#endif
}
void Command::run_glIsShader()
{
#if GL_ES_VERSION_2_0
 if (m_packet.NumItems() > 2) WarnDataNotHandled("glIsShader");
 glIsShader(GetShader(GLuint, 0));
#else
 WarnNotAvailable("glIsShader");
#endif
}
void Command::run_glLinkProgram()
{
#if GL_ES_VERSION_2_0
 if (m_packet.NumItems() > 2) WarnDataNotHandled("glLinkProgram");
 glLinkProgram(GetProgram(GLuint, 0));
#else
 WarnNotAvailable("glLinkProgram");
#endif
}
void Command::run_glReleaseShaderCompiler()
{
#if GL_ES_VERSION_2_0
 if (m_packet.NumItems() > 1) WarnDataNotHandled("glReleaseShaderCompiler");
 glReleaseShaderCompiler();
#else
 WarnNotAvailable("glReleaseShaderCompiler");
#endif
}
void Command::run_glRenderbufferStorage()
{
#if GL_ES_VERSION_2_0
 if (m_packet.NumItems() > 5) WarnDataNotHandled("glRenderbufferStorage");
 glRenderbufferStorage(GetU32(GLenum, 0), GetU32(GLenum, 1), GetI32(GLsizei, 2), GetI32(GLsizei, 3));
#else
 WarnNotAvailable("glRenderbufferStorage");
#endif
}
void Command::run_glShaderBinary()
{
#if GL_ES_VERSION_2_0
 if (m_packet.NumItems() > 8) WarnDataNotHandled("glShaderBinary");
 glShaderBinary(GetI32(GLsizei, 0), GetArrayPtr(const GLuint *, 5), GetU32(GLenum, 2), GetArrayPtr(const void *, 6), GetI32(GLsizei, 4));
#else
 WarnNotAvailable("glShaderBinary");
#endif
}
void Command::run_glShaderSource()
{
#if GL_ES_VERSION_2_0
 if (m_packet.NumItems() > 7) WarnDataNotHandled("glShaderSource");
#if GL_ES_VERSION_3_0
 glShaderSource(GetShader(GLuint, 0), GetI32(GLsizei, 1), GetArrayPtr(const GLchar *const*, 4), GetArrayPtr(const GLint *, 5));
#else
 glShaderSource(GetShader(GLuint, 0), GetI32(GLsizei, 1), GetArrayPtr(const GLchar **, 4), GetArrayPtr(const GLint *, 5));
#endif
#else
 WarnNotAvailable("glShaderSource");
#endif
}
void Command::run_glStencilFuncSeparate()
{
#if GL_ES_VERSION_2_0
 if (m_packet.NumItems() > 5) WarnDataNotHandled("glStencilFuncSeparate");
 glStencilFuncSeparate(GetU32(GLenum, 0), GetU32(GLenum, 1), GetI32(GLint, 2), GetU32(GLuint, 3));
#else
 WarnNotAvailable("glStencilFuncSeparate");
#endif
}
void Command::run_glStencilMaskSeparate()
{
#if GL_ES_VERSION_2_0
 if (m_packet.NumItems() > 3) WarnDataNotHandled("glStencilMaskSeparate");
 glStencilMaskSeparate(GetU32(GLenum, 0), GetU32(GLuint, 1));
#else
 WarnNotAvailable("glStencilMaskSeparate");
#endif
}
void Command::run_glStencilOpSeparate()
{
#if GL_ES_VERSION_2_0
 if (m_packet.NumItems() > 5) WarnDataNotHandled("glStencilOpSeparate");
 glStencilOpSeparate(GetU32(GLenum, 0), GetU32(GLenum, 1), GetU32(GLenum, 2), GetU32(GLenum, 3));
#else
 WarnNotAvailable("glStencilOpSeparate");
#endif
}
void Command::run_glUniform1f()
{
#if GL_ES_VERSION_2_0
 if (m_packet.NumItems() > 3) WarnDataNotHandled("glUniform1f");
 glUniform1f(GetCurUniform(0), GetF(GLfloat, 1));
#else
 WarnNotAvailable("glUniform1f");
#endif
}
void Command::run_glUniform1fv()
{
#if GL_ES_VERSION_2_0
 if (m_packet.NumItems() > 5) WarnDataNotHandled("glUniform1fv");
 glUniform1fv(GetCurUniform(0), GetI32(GLsizei, 1), GetArrayPtr(const GLfloat *, 3));
#else
 WarnNotAvailable("glUniform1fv");
#endif
}
void Command::run_glUniform1i()
{
#if GL_ES_VERSION_2_0
 if (m_packet.NumItems() > 3) WarnDataNotHandled("glUniform1i");
 glUniform1i(GetCurUniform(0), GetI32(GLint, 1));
#else
 WarnNotAvailable("glUniform1i");
#endif
}
void Command::run_glUniform1iv()
{
#if GL_ES_VERSION_2_0
 if (m_packet.NumItems() > 5) WarnDataNotHandled("glUniform1iv");
 glUniform1iv(GetCurUniform(0), GetI32(GLsizei, 1), GetArrayPtr(const GLint *, 3));
#else
 WarnNotAvailable("glUniform1iv");
#endif
}
void Command::run_glUniform2f()
{
#if GL_ES_VERSION_2_0
 if (m_packet.NumItems() > 4) WarnDataNotHandled("glUniform2f");
 glUniform2f(GetCurUniform(0), GetF(GLfloat, 1), GetF(GLfloat, 2));
#else
 WarnNotAvailable("glUniform2f");
#endif
}
void Command::run_glUniform2fv()
{
#if GL_ES_VERSION_2_0
 if (m_packet.NumItems() > 5) WarnDataNotHandled("glUniform2fv");
 glUniform2fv(GetCurUniform(0), GetI32(GLsizei, 1), GetArrayPtr(const GLfloat *, 3));
#else
 WarnNotAvailable("glUniform2fv");
#endif
}
void Command::run_glUniform2i()
{
#if GL_ES_VERSION_2_0
 if (m_packet.NumItems() > 4) WarnDataNotHandled("glUniform2i");
 glUniform2i(GetCurUniform(0), GetI32(GLint, 1), GetI32(GLint, 2));
#else
 WarnNotAvailable("glUniform2i");
#endif
}
void Command::run_glUniform2iv()
{
#if GL_ES_VERSION_2_0
 if (m_packet.NumItems() > 5) WarnDataNotHandled("glUniform2iv");
 glUniform2iv(GetCurUniform(0), GetI32(GLsizei, 1), GetArrayPtr(const GLint *, 3));
#else
 WarnNotAvailable("glUniform2iv");
#endif
}
void Command::run_glUniform3f()
{
#if GL_ES_VERSION_2_0
 if (m_packet.NumItems() > 5) WarnDataNotHandled("glUniform3f");
 glUniform3f(GetCurUniform(0), GetF(GLfloat, 1), GetF(GLfloat, 2), GetF(GLfloat, 3));
#else
 WarnNotAvailable("glUniform3f");
#endif
}
void Command::run_glUniform3fv()
{
#if GL_ES_VERSION_2_0
 if (m_packet.NumItems() > 5) WarnDataNotHandled("glUniform3fv");
 glUniform3fv(GetCurUniform(0), GetI32(GLsizei, 1), GetArrayPtr(const GLfloat *, 3));
#else
 WarnNotAvailable("glUniform3fv");
#endif
}
void Command::run_glUniform3i()
{
#if GL_ES_VERSION_2_0
 if (m_packet.NumItems() > 5) WarnDataNotHandled("glUniform3i");
 glUniform3i(GetCurUniform(0), GetI32(GLint, 1), GetI32(GLint, 2), GetI32(GLint, 3));
#else
 WarnNotAvailable("glUniform3i");
#endif
}
void Command::run_glUniform3iv()
{
#if GL_ES_VERSION_2_0
 if (m_packet.NumItems() > 5) WarnDataNotHandled("glUniform3iv");
 glUniform3iv(GetCurUniform(0), GetI32(GLsizei, 1), GetArrayPtr(const GLint *, 3));
#else
 WarnNotAvailable("glUniform3iv");
#endif
}
void Command::run_glUniform4f()
{
#if GL_ES_VERSION_2_0
 if (m_packet.NumItems() > 6) WarnDataNotHandled("glUniform4f");
 glUniform4f(GetCurUniform(0), GetF(GLfloat, 1), GetF(GLfloat, 2), GetF(GLfloat, 3), GetF(GLfloat, 4));
#else
 WarnNotAvailable("glUniform4f");
#endif
}
void Command::run_glUniform4fv()
{
#if GL_ES_VERSION_2_0
 if (m_packet.NumItems() > 5) WarnDataNotHandled("glUniform4fv");
 glUniform4fv(GetCurUniform(0), GetI32(GLsizei, 1), GetArrayPtr(const GLfloat *, 3));
#else
 WarnNotAvailable("glUniform4fv");
#endif
}
void Command::run_glUniform4i()
{
#if GL_ES_VERSION_2_0
 if (m_packet.NumItems() > 6) WarnDataNotHandled("glUniform4i");
 glUniform4i(GetCurUniform(0), GetI32(GLint, 1), GetI32(GLint, 2), GetI32(GLint, 3), GetI32(GLint, 4));
#else
 WarnNotAvailable("glUniform4i");
#endif
}
void Command::run_glUniform4iv()
{
#if GL_ES_VERSION_2_0
 if (m_packet.NumItems() > 5) WarnDataNotHandled("glUniform4iv");
 glUniform4iv(GetCurUniform(0), GetI32(GLsizei, 1), GetArrayPtr(const GLint *, 3));
#else
 WarnNotAvailable("glUniform4iv");
#endif
}
void Command::run_glUniformMatrix2fv()
{
#if GL_ES_VERSION_2_0
 if (m_packet.NumItems() > 6) WarnDataNotHandled("glUniformMatrix2fv");
 glUniformMatrix2fv(GetCurUniform(0), GetI32(GLsizei, 1), GetB(GLboolean, 2), GetArrayPtr(const GLfloat *, 4));
#else
 WarnNotAvailable("glUniformMatrix2fv");
#endif
}
void Command::run_glUniformMatrix3fv()
{
#if GL_ES_VERSION_2_0
 if (m_packet.NumItems() > 6) WarnDataNotHandled("glUniformMatrix3fv");
 glUniformMatrix3fv(GetCurUniform(0), GetI32(GLsizei, 1), GetB(GLboolean, 2), GetArrayPtr(const GLfloat *, 4));
#else
 WarnNotAvailable("glUniformMatrix3fv");
#endif
}
void Command::run_glUniformMatrix4fv()
{
#if GL_ES_VERSION_2_0
 if (m_packet.NumItems() > 6) WarnDataNotHandled("glUniformMatrix4fv");
 glUniformMatrix4fv(GetCurUniform(0), GetI32(GLsizei, 1), GetB(GLboolean, 2), GetArrayPtr(const GLfloat *, 4));
#else
 WarnNotAvailable("glUniformMatrix4fv");
#endif
}
void Command::run_glUseProgram()
{
#if GL_ES_VERSION_2_0
 if (m_packet.NumItems() > 2) WarnDataNotHandled("glUseProgram");
 glUseProgram(GetProgram(GLuint, 0));
#else
 WarnNotAvailable("glUseProgram");
#endif
}
void Command::run_glValidateProgram()
{
#if GL_ES_VERSION_2_0
 if (m_packet.NumItems() > 2) WarnDataNotHandled("glValidateProgram");
 glValidateProgram(GetProgram(GLuint, 0));
#else
 WarnNotAvailable("glValidateProgram");
#endif
}
void Command::run_glVertexAttrib1f()
{
#if GL_ES_VERSION_2_0
 if (m_packet.NumItems() > 3) WarnDataNotHandled("glVertexAttrib1f");
 glVertexAttrib1f(GetU32(GLuint, 0), GetF(GLfloat, 1));
#else
 WarnNotAvailable("glVertexAttrib1f");
#endif
}
void Command::run_glVertexAttrib1fv()
{
#if GL_ES_VERSION_2_0
 if (m_packet.NumItems() > 4) WarnDataNotHandled("glVertexAttrib1fv");
 glVertexAttrib1fv(GetU32(GLuint, 0), GetArrayPtr(const GLfloat *, 2));
#else
 WarnNotAvailable("glVertexAttrib1fv");
#endif
}
void Command::run_glVertexAttrib2f()
{
#if GL_ES_VERSION_2_0
 if (m_packet.NumItems() > 4) WarnDataNotHandled("glVertexAttrib2f");
 glVertexAttrib2f(GetU32(GLuint, 0), GetF(GLfloat, 1), GetF(GLfloat, 2));
#else
 WarnNotAvailable("glVertexAttrib2f");
#endif
}
void Command::run_glVertexAttrib2fv()
{
#if GL_ES_VERSION_2_0
 if (m_packet.NumItems() > 4) WarnDataNotHandled("glVertexAttrib2fv");
 glVertexAttrib2fv(GetU32(GLuint, 0), GetArrayPtr(const GLfloat *, 2));
#else
 WarnNotAvailable("glVertexAttrib2fv");
#endif
}
void Command::run_glVertexAttrib3f()
{
#if GL_ES_VERSION_2_0
 if (m_packet.NumItems() > 5) WarnDataNotHandled("glVertexAttrib3f");
 glVertexAttrib3f(GetU32(GLuint, 0), GetF(GLfloat, 1), GetF(GLfloat, 2), GetF(GLfloat, 3));
#else
 WarnNotAvailable("glVertexAttrib3f");
#endif
}
void Command::run_glVertexAttrib3fv()
{
#if GL_ES_VERSION_2_0
 if (m_packet.NumItems() > 4) WarnDataNotHandled("glVertexAttrib3fv");
 glVertexAttrib3fv(GetU32(GLuint, 0), GetArrayPtr(const GLfloat *, 2));
#else
 WarnNotAvailable("glVertexAttrib3fv");
#endif
}
void Command::run_glVertexAttrib4f()
{
#if GL_ES_VERSION_2_0
 if (m_packet.NumItems() > 6) WarnDataNotHandled("glVertexAttrib4f");
 glVertexAttrib4f(GetU32(GLuint, 0), GetF(GLfloat, 1), GetF(GLfloat, 2), GetF(GLfloat, 3), GetF(GLfloat, 4));
#else
 WarnNotAvailable("glVertexAttrib4f");
#endif
}
void Command::run_glVertexAttrib4fv()
{
#if GL_ES_VERSION_2_0
 if (m_packet.NumItems() > 4) WarnDataNotHandled("glVertexAttrib4fv");
 glVertexAttrib4fv(GetU32(GLuint, 0), GetArrayPtr(const GLfloat *, 2));
#else
 WarnNotAvailable("glVertexAttrib4fv");
#endif
}
void Command::run_glVertexAttribPointer()
{
#if GL_ES_VERSION_2_0
 if (m_packet.NumItems() > 8) WarnDataNotHandled("glVertexAttribPointer");
 glVertexAttribPointer(GetU32(GLuint, 0), GetI32(GLint, 1), GetU32(GLenum, 2), GetB(GLboolean, 3), GetI32(GLsizei, 4), GetArrayPtr(const void *, 6));
#else
 WarnNotAvailable("glVertexAttribPointer");
#endif
}
void Command::run_glReadBuffer()
{
#if GL_ES_VERSION_3_0
 if (m_packet.NumItems() > 2) WarnDataNotHandled("glReadBuffer");
 glReadBuffer(GetU32(GLenum, 0));
#else
 WarnNotAvailable("glReadBuffer");
#endif
}
void Command::run_glDrawRangeElements()
{
#if GL_ES_VERSION_3_0
 if (m_packet.NumItems() > 8) WarnDataNotHandled("glDrawRangeElements");
 glDrawRangeElements(GetU32(GLenum, 0), GetU32(GLuint, 1), GetU32(GLuint, 2), GetI32(GLsizei, 3), GetU32(GLenum, 4), GetArrayPtr(const void *, 6));
#else
 WarnNotAvailable("glDrawRangeElements");
#endif
}
void Command::run_glTexImage3D()
{
#if GL_ES_VERSION_3_0
 if (m_packet.NumItems() > 12) WarnDataNotHandled("glTexImage3D");
 glTexImage3D(GetU32(GLenum, 0), GetI32(GLint, 1), GetI32(GLint, 2), GetI32(GLsizei, 3), GetI32(GLsizei, 4), GetI32(GLsizei, 5), GetI32(GLint, 6), GetU32(GLenum, 7), GetU32(GLenum, 8), GetArrayPtr(const void *, 10));
#else
 WarnNotAvailable("glTexImage3D");
#endif
}
void Command::run_glTexSubImage3D()
{
#if GL_ES_VERSION_3_0
 if (m_packet.NumItems() > 13) WarnDataNotHandled("glTexSubImage3D");
 glTexSubImage3D(GetU32(GLenum, 0), GetI32(GLint, 1), GetI32(GLint, 2), GetI32(GLint, 3), GetI32(GLint, 4), GetI32(GLsizei, 5), GetI32(GLsizei, 6), GetI32(GLsizei, 7), GetU32(GLenum, 8), GetU32(GLenum, 9), GetArrayPtr(const void *, 11));
#else
 WarnNotAvailable("glTexSubImage3D");
#endif
}
void Command::run_glCopyTexSubImage3D()
{
#if GL_ES_VERSION_3_0
 if (m_packet.NumItems() > 10) WarnDataNotHandled("glCopyTexSubImage3D");
 glCopyTexSubImage3D(GetU32(GLenum, 0), GetI32(GLint, 1), GetI32(GLint, 2), GetI32(GLint, 3), GetI32(GLint, 4), GetI32(GLint, 5), GetI32(GLint, 6), GetI32(GLsizei, 7), GetI32(GLsizei, 8));
#else
 WarnNotAvailable("glCopyTexSubImage3D");
#endif
}
void Command::run_glCompressedTexImage3D()
{
#if GL_ES_VERSION_3_0
 if (m_packet.NumItems() > 11) WarnDataNotHandled("glCompressedTexImage3D");
 glCompressedTexImage3D(GetU32(GLenum, 0), GetI32(GLint, 1), GetU32(GLenum, 2), GetI32(GLsizei, 3), GetI32(GLsizei, 4), GetI32(GLsizei, 5), GetI32(GLint, 6), GetI32(GLsizei, 7), GetArrayPtr(const void *, 9));
#else
 WarnNotAvailable("glCompressedTexImage3D");
#endif
}
void Command::run_glCompressedTexSubImage3D()
{
#if GL_ES_VERSION_3_0
 if (m_packet.NumItems() > 13) WarnDataNotHandled("glCompressedTexSubImage3D");
 glCompressedTexSubImage3D(GetU32(GLenum, 0), GetI32(GLint, 1), GetI32(GLint, 2), GetI32(GLint, 3), GetI32(GLint, 4), GetI32(GLsizei, 5), GetI32(GLsizei, 6), GetI32(GLsizei, 7), GetU32(GLenum, 8), GetI32(GLsizei, 9), GetArrayPtr(const void *, 11));
#else
 WarnNotAvailable("glCompressedTexSubImage3D");
#endif
}
void Command::run_glGenQueries()
{
#if GL_ES_VERSION_3_0
 if (m_packet.NumItems() > 3) WarnDataNotHandled("glGenQueries");
 glGenQueries(GetI32(GLsizei, 0), dummyGLuint);
#else
 WarnNotAvailable("glGenQueries");
#endif
}
void Command::run_glDeleteQueries()
{
#if GL_ES_VERSION_3_0
 if (m_packet.NumItems() > 4) WarnDataNotHandled("glDeleteQueries");
 glDeleteQueries(GetI32(GLsizei, 0), GetArrayPtr(const GLuint *, 2));
#else
 WarnNotAvailable("glDeleteQueries");
#endif
}
void Command::run_glIsQuery()
{
#if GL_ES_VERSION_3_0
 if (m_packet.NumItems() > 2) WarnDataNotHandled("glIsQuery");
 glIsQuery(GetU32(GLuint, 0));
#else
 WarnNotAvailable("glIsQuery");
#endif
}
void Command::run_glBeginQuery()
{
#if GL_ES_VERSION_3_0
 if (m_packet.NumItems() > 3) WarnDataNotHandled("glBeginQuery");
 glBeginQuery(GetU32(GLenum, 0), GetU32(GLuint, 1));
#else
 WarnNotAvailable("glBeginQuery");
#endif
}
void Command::run_glEndQuery()
{
#if GL_ES_VERSION_3_0
 if (m_packet.NumItems() > 2) WarnDataNotHandled("glEndQuery");
 glEndQuery(GetU32(GLenum, 0));
#else
 WarnNotAvailable("glEndQuery");
#endif
}
void Command::run_glGetQueryiv()
{
#if GL_ES_VERSION_3_0
 if (m_packet.NumItems() > 4) WarnDataNotHandled("glGetQueryiv");
 glGetQueryiv(GetU32(GLenum, 0), GetU32(GLenum, 1), dummyGLint);
#else
 WarnNotAvailable("glGetQueryiv");
#endif
}
void Command::run_glGetQueryObjectuiv()
{
#if GL_ES_VERSION_3_0
 if (m_packet.NumItems() > 4) WarnDataNotHandled("glGetQueryObjectuiv");
 glGetQueryObjectuiv(GetU32(GLuint, 0), GetU32(GLenum, 1), dummyGLuint);
#else
 WarnNotAvailable("glGetQueryObjectuiv");
#endif
}
void Command::run_glUnmapBuffer()
{
#if GL_ES_VERSION_3_0
 if (m_packet.NumItems() > 2) WarnDataNotHandled("glUnmapBuffer");
 glUnmapBuffer(GetU32(GLenum, 0));
#else
 WarnNotAvailable("glUnmapBuffer");
#endif
}
void Command::run_glGetBufferPointerv()
{
#if GL_ES_VERSION_3_0
 if (m_packet.NumItems() > 4) WarnDataNotHandled("glGetBufferPointerv");
 glGetBufferPointerv(GetU32(GLenum, 0), GetU32(GLenum, 1), dummyvoidptr);
#else
 WarnNotAvailable("glGetBufferPointerv");
#endif
}
void Command::run_glDrawBuffers()
{
#if GL_ES_VERSION_3_0
 if (m_packet.NumItems() > 4) WarnDataNotHandled("glDrawBuffers");
 glDrawBuffers(GetI32(GLsizei, 0), GetArrayPtr(const GLenum *, 2));
#else
 WarnNotAvailable("glDrawBuffers");
#endif
}
void Command::run_glUniformMatrix2x3fv()
{
#if GL_ES_VERSION_3_0
 if (m_packet.NumItems() > 6) WarnDataNotHandled("glUniformMatrix2x3fv");
 glUniformMatrix2x3fv(GetCurUniform(0), GetI32(GLsizei, 1), GetB(GLboolean, 2), GetArrayPtr(const GLfloat *, 4));
#else
 WarnNotAvailable("glUniformMatrix2x3fv");
#endif
}
void Command::run_glUniformMatrix3x2fv()
{
#if GL_ES_VERSION_3_0
 if (m_packet.NumItems() > 6) WarnDataNotHandled("glUniformMatrix3x2fv");
 glUniformMatrix3x2fv(GetCurUniform(0), GetI32(GLsizei, 1), GetB(GLboolean, 2), GetArrayPtr(const GLfloat *, 4));
#else
 WarnNotAvailable("glUniformMatrix3x2fv");
#endif
}
void Command::run_glUniformMatrix2x4fv()
{
#if GL_ES_VERSION_3_0
 if (m_packet.NumItems() > 6) WarnDataNotHandled("glUniformMatrix2x4fv");
 glUniformMatrix2x4fv(GetCurUniform(0), GetI32(GLsizei, 1), GetB(GLboolean, 2), GetArrayPtr(const GLfloat *, 4));
#else
 WarnNotAvailable("glUniformMatrix2x4fv");
#endif
}
void Command::run_glUniformMatrix4x2fv()
{
#if GL_ES_VERSION_3_0
 if (m_packet.NumItems() > 6) WarnDataNotHandled("glUniformMatrix4x2fv");
 glUniformMatrix4x2fv(GetCurUniform(0), GetI32(GLsizei, 1), GetB(GLboolean, 2), GetArrayPtr(const GLfloat *, 4));
#else
 WarnNotAvailable("glUniformMatrix4x2fv");
#endif
}
void Command::run_glUniformMatrix3x4fv()
{
#if GL_ES_VERSION_3_0
 if (m_packet.NumItems() > 6) WarnDataNotHandled("glUniformMatrix3x4fv");
 glUniformMatrix3x4fv(GetCurUniform(0), GetI32(GLsizei, 1), GetB(GLboolean, 2), GetArrayPtr(const GLfloat *, 4));
#else
 WarnNotAvailable("glUniformMatrix3x4fv");
#endif
}
void Command::run_glUniformMatrix4x3fv()
{
#if GL_ES_VERSION_3_0
 if (m_packet.NumItems() > 6) WarnDataNotHandled("glUniformMatrix4x3fv");
 glUniformMatrix4x3fv(GetCurUniform(0), GetI32(GLsizei, 1), GetB(GLboolean, 2), GetArrayPtr(const GLfloat *, 4));
#else
 WarnNotAvailable("glUniformMatrix4x3fv");
#endif
}
void Command::run_glBlitFramebuffer()
{
#if GL_ES_VERSION_3_0
 if (m_packet.NumItems() > 11) WarnDataNotHandled("glBlitFramebuffer");
 glBlitFramebuffer(GetI32(GLint, 0), GetI32(GLint, 1), GetI32(GLint, 2), GetI32(GLint, 3), GetI32(GLint, 4), GetI32(GLint, 5), GetI32(GLint, 6), GetI32(GLint, 7), GetU32(GLbitfield, 8), GetU32(GLenum, 9));
#else
 WarnNotAvailable("glBlitFramebuffer");
#endif
}
void Command::run_glRenderbufferStorageMultisample()
{
#if GL_ES_VERSION_3_0
 if (m_packet.NumItems() > 6) WarnDataNotHandled("glRenderbufferStorageMultisample");
 glRenderbufferStorageMultisample(GetU32(GLenum, 0), GetI32(GLsizei, 1), GetU32(GLenum, 2), GetI32(GLsizei, 3), GetI32(GLsizei, 4));
#else
 WarnNotAvailable("glRenderbufferStorageMultisample");
#endif
}
void Command::run_glFramebufferTextureLayer()
{
#if GL_ES_VERSION_3_0
 if (m_packet.NumItems() > 6) WarnDataNotHandled("glFramebufferTextureLayer");
 glFramebufferTextureLayer(GetU32(GLenum, 0), GetU32(GLenum, 1), GetU32(GLuint, 2), GetI32(GLint, 3), GetI32(GLint, 4));
#else
 WarnNotAvailable("glFramebufferTextureLayer");
#endif
}
void Command::run_glMapBufferRange()
{
#if GL_ES_VERSION_3_0
 if (m_packet.NumItems() > 5) WarnDataNotHandled("glMapBufferRange");
 glMapBufferRange(GetU32(GLenum, 0), GetPtr(GLintptr, 1), GetPtr(GLsizeiptr, 2), GetU32(GLbitfield, 3));
#else
 WarnNotAvailable("glMapBufferRange");
#endif
}
void Command::run_glFlushMappedBufferRange()
{
#if GL_ES_VERSION_3_0
 if (m_packet.NumItems() > 4) WarnDataNotHandled("glFlushMappedBufferRange");
 glFlushMappedBufferRange(GetU32(GLenum, 0), GetPtr(GLintptr, 1), GetPtr(GLsizeiptr, 2));
#else
 WarnNotAvailable("glFlushMappedBufferRange");
#endif
}
void Command::run_glBindVertexArray()
{
#if GL_ES_VERSION_3_0
 if (m_packet.NumItems() > 2) WarnDataNotHandled("glBindVertexArray");
 glBindVertexArray(GetVertexArray(GLuint, 0));
#else
 WarnNotAvailable("glBindVertexArray");
#endif
}
void Command::run_glDeleteVertexArrays()
{
#if GL_ES_VERSION_3_0
 if (m_packet.NumItems() > 4) WarnDataNotHandled("glDeleteVertexArrays");
 glDeleteVertexArrays(GetI32(GLsizei, 0), GetArrayPtr(const GLuint *, 2));
#else
 WarnNotAvailable("glDeleteVertexArrays");
#endif
}
void Command::run_glGenVertexArrays()
{
#if GL_ES_VERSION_3_0
 if (m_packet.NumItems() > 3) WarnDataNotHandled("glGenVertexArrays");
 glGenVertexArrays(GetI32(GLsizei, 0), dummyGLuint);
#else
 WarnNotAvailable("glGenVertexArrays");
#endif
}
void Command::run_glIsVertexArray()
{
#if GL_ES_VERSION_3_0
 if (m_packet.NumItems() > 2) WarnDataNotHandled("glIsVertexArray");
 glIsVertexArray(GetVertexArray(GLuint, 0));
#else
 WarnNotAvailable("glIsVertexArray");
#endif
}
void Command::run_glGetIntegeri_v()
{
#if GL_ES_VERSION_3_0
 if (m_packet.NumItems() > 4) WarnDataNotHandled("glGetIntegeri_v");
 glGetIntegeri_v(GetU32(GLenum, 0), GetU32(GLuint, 1), dummyGLint);
#else
 WarnNotAvailable("glGetIntegeri_v");
#endif
}
void Command::run_glBeginTransformFeedback()
{
#if GL_ES_VERSION_3_0
 if (m_packet.NumItems() > 2) WarnDataNotHandled("glBeginTransformFeedback");
 glBeginTransformFeedback(GetU32(GLenum, 0));
#else
 WarnNotAvailable("glBeginTransformFeedback");
#endif
}
void Command::run_glEndTransformFeedback()
{
#if GL_ES_VERSION_3_0
 if (m_packet.NumItems() > 1) WarnDataNotHandled("glEndTransformFeedback");
 glEndTransformFeedback();
#else
 WarnNotAvailable("glEndTransformFeedback");
#endif
}
void Command::run_glBindBufferRange()
{
#if GL_ES_VERSION_3_0
 if (m_packet.NumItems() > 6) WarnDataNotHandled("glBindBufferRange");
 glBindBufferRange(GetU32(GLenum, 0), GetU32(GLuint, 1), GetU32(GLuint, 2), GetPtr(GLintptr, 3), GetPtr(GLsizeiptr, 4));
#else
 WarnNotAvailable("glBindBufferRange");
#endif
}
void Command::run_glBindBufferBase()
{
#if GL_ES_VERSION_3_0
 if (m_packet.NumItems() > 4) WarnDataNotHandled("glBindBufferBase");
 glBindBufferBase(GetU32(GLenum, 0), GetU32(GLuint, 1), GetU32(GLuint, 2));
#else
 WarnNotAvailable("glBindBufferBase");
#endif
}
void Command::run_glTransformFeedbackVaryings()
{
#if GL_ES_VERSION_3_0
 if (m_packet.NumItems() > 6) WarnDataNotHandled("glTransformFeedbackVaryings");
 glTransformFeedbackVaryings(GetProgram(GLuint, 0), GetI32(GLsizei, 1), GetArrayPtr(const GLchar *const*, 4), GetU32(GLenum, 3));
#else
 WarnNotAvailable("glTransformFeedbackVaryings");
#endif
}
void Command::run_glGetTransformFeedbackVarying()
{
#if GL_ES_VERSION_3_0
 if (m_packet.NumItems() > 8) WarnDataNotHandled("glGetTransformFeedbackVarying");
 glGetTransformFeedbackVarying(GetProgram(GLuint, 0), GetU32(GLuint, 1), GetI32(GLsizei, 2), dummyGLsizei, dummyGLsizei, dummyGLenum, dummyGLchar);
#else
 WarnNotAvailable("glGetTransformFeedbackVarying");
#endif
}
void Command::run_glVertexAttribIPointer()
{
#if GL_ES_VERSION_3_0
 if (m_packet.NumItems() > 7) WarnDataNotHandled("glVertexAttribIPointer");
 glVertexAttribIPointer(GetU32(GLuint, 0), GetI32(GLint, 1), GetU32(GLenum, 2), GetI32(GLsizei, 3), GetArrayPtr(const void *, 5));
#else
 WarnNotAvailable("glVertexAttribIPointer");
#endif
}
void Command::run_glGetVertexAttribIiv()
{
#if GL_ES_VERSION_3_0
 if (m_packet.NumItems() > 4) WarnDataNotHandled("glGetVertexAttribIiv");
 glGetVertexAttribIiv(GetU32(GLuint, 0), GetU32(GLenum, 1), dummyGLint);
#else
 WarnNotAvailable("glGetVertexAttribIiv");
#endif
}
void Command::run_glGetVertexAttribIuiv()
{
#if GL_ES_VERSION_3_0
 if (m_packet.NumItems() > 4) WarnDataNotHandled("glGetVertexAttribIuiv");
 glGetVertexAttribIuiv(GetU32(GLuint, 0), GetU32(GLenum, 1), dummyGLuint);
#else
 WarnNotAvailable("glGetVertexAttribIuiv");
#endif
}
void Command::run_glVertexAttribI4i()
{
#if GL_ES_VERSION_3_0
 if (m_packet.NumItems() > 6) WarnDataNotHandled("glVertexAttribI4i");
 glVertexAttribI4i(GetU32(GLuint, 0), GetI32(GLint, 1), GetI32(GLint, 2), GetI32(GLint, 3), GetI32(GLint, 4));
#else
 WarnNotAvailable("glVertexAttribI4i");
#endif
}
void Command::run_glVertexAttribI4ui()
{
#if GL_ES_VERSION_3_0
 if (m_packet.NumItems() > 6) WarnDataNotHandled("glVertexAttribI4ui");
 glVertexAttribI4ui(GetU32(GLuint, 0), GetU32(GLuint, 1), GetU32(GLuint, 2), GetU32(GLuint, 3), GetU32(GLuint, 4));
#else
 WarnNotAvailable("glVertexAttribI4ui");
#endif
}
void Command::run_glVertexAttribI4iv()
{
#if GL_ES_VERSION_3_0
 if (m_packet.NumItems() > 4) WarnDataNotHandled("glVertexAttribI4iv");
 glVertexAttribI4iv(GetU32(GLuint, 0), GetArrayPtr(const GLint *, 2));
#else
 WarnNotAvailable("glVertexAttribI4iv");
#endif
}
void Command::run_glVertexAttribI4uiv()
{
#if GL_ES_VERSION_3_0
 if (m_packet.NumItems() > 4) WarnDataNotHandled("glVertexAttribI4uiv");
 glVertexAttribI4uiv(GetU32(GLuint, 0), GetArrayPtr(const GLuint *, 2));
#else
 WarnNotAvailable("glVertexAttribI4uiv");
#endif
}
void Command::run_glGetUniformuiv()
{
#if GL_ES_VERSION_3_0
 if (m_packet.NumItems() > 4) WarnDataNotHandled("glGetUniformuiv");
 glGetUniformuiv(GetProgram(GLuint, 0), GetUniform(1, 0), dummyGLuint);
#else
 WarnNotAvailable("glGetUniformuiv");
#endif
}
void Command::run_glGetFragDataLocation()
{
#if GL_ES_VERSION_3_0
 if (m_packet.NumItems() > 3) WarnDataNotHandled("glGetFragDataLocation");
 glGetFragDataLocation(GetProgram(GLuint, 0), GetCP(const GLchar *, 1));
#else
 WarnNotAvailable("glGetFragDataLocation");
#endif
}
void Command::run_glUniform1ui()
{
#if GL_ES_VERSION_3_0
 if (m_packet.NumItems() > 3) WarnDataNotHandled("glUniform1ui");
 glUniform1ui(GetCurUniform(0), GetU32(GLuint, 1));
#else
 WarnNotAvailable("glUniform1ui");
#endif
}
void Command::run_glUniform2ui()
{
#if GL_ES_VERSION_3_0
 if (m_packet.NumItems() > 4) WarnDataNotHandled("glUniform2ui");
 glUniform2ui(GetCurUniform(0), GetU32(GLuint, 1), GetU32(GLuint, 2));
#else
 WarnNotAvailable("glUniform2ui");
#endif
}
void Command::run_glUniform3ui()
{
#if GL_ES_VERSION_3_0
 if (m_packet.NumItems() > 5) WarnDataNotHandled("glUniform3ui");
 glUniform3ui(GetCurUniform(0), GetU32(GLuint, 1), GetU32(GLuint, 2), GetU32(GLuint, 3));
#else
 WarnNotAvailable("glUniform3ui");
#endif
}
void Command::run_glUniform4ui()
{
#if GL_ES_VERSION_3_0
 if (m_packet.NumItems() > 6) WarnDataNotHandled("glUniform4ui");
 glUniform4ui(GetCurUniform(0), GetU32(GLuint, 1), GetU32(GLuint, 2), GetU32(GLuint, 3), GetU32(GLuint, 4));
#else
 WarnNotAvailable("glUniform4ui");
#endif
}
void Command::run_glUniform1uiv()
{
#if GL_ES_VERSION_3_0
 if (m_packet.NumItems() > 5) WarnDataNotHandled("glUniform1uiv");
 glUniform1uiv(GetCurUniform(0), GetI32(GLsizei, 1), GetArrayPtr(const GLuint *, 3));
#else
 WarnNotAvailable("glUniform1uiv");
#endif
}
void Command::run_glUniform2uiv()
{
#if GL_ES_VERSION_3_0
 if (m_packet.NumItems() > 5) WarnDataNotHandled("glUniform2uiv");
 glUniform2uiv(GetCurUniform(0), GetI32(GLsizei, 1), GetArrayPtr(const GLuint *, 3));
#else
 WarnNotAvailable("glUniform2uiv");
#endif
}
void Command::run_glUniform3uiv()
{
#if GL_ES_VERSION_3_0
 if (m_packet.NumItems() > 5) WarnDataNotHandled("glUniform3uiv");
 glUniform3uiv(GetCurUniform(0), GetI32(GLsizei, 1), GetArrayPtr(const GLuint *, 3));
#else
 WarnNotAvailable("glUniform3uiv");
#endif
}
void Command::run_glUniform4uiv()
{
#if GL_ES_VERSION_3_0
 if (m_packet.NumItems() > 5) WarnDataNotHandled("glUniform4uiv");
 glUniform4uiv(GetCurUniform(0), GetI32(GLsizei, 1), GetArrayPtr(const GLuint *, 3));
#else
 WarnNotAvailable("glUniform4uiv");
#endif
}
void Command::run_glClearBufferiv()
{
#if GL_ES_VERSION_3_0
 if (m_packet.NumItems() > 5) WarnDataNotHandled("glClearBufferiv");
 glClearBufferiv(GetU32(GLenum, 0), GetI32(GLint, 1), GetArrayPtr(const GLint *, 3));
#else
 WarnNotAvailable("glClearBufferiv");
#endif
}
void Command::run_glClearBufferuiv()
{
#if GL_ES_VERSION_3_0
 if (m_packet.NumItems() > 5) WarnDataNotHandled("glClearBufferuiv");
 glClearBufferuiv(GetU32(GLenum, 0), GetI32(GLint, 1), GetArrayPtr(const GLuint *, 3));
#else
 WarnNotAvailable("glClearBufferuiv");
#endif
}
void Command::run_glClearBufferfv()
{
#if GL_ES_VERSION_3_0
 if (m_packet.NumItems() > 5) WarnDataNotHandled("glClearBufferfv");
 glClearBufferfv(GetU32(GLenum, 0), GetI32(GLint, 1), GetArrayPtr(const GLfloat *, 3));
#else
 WarnNotAvailable("glClearBufferfv");
#endif
}
void Command::run_glClearBufferfi()
{
#if GL_ES_VERSION_3_0
 if (m_packet.NumItems() > 5) WarnDataNotHandled("glClearBufferfi");
 glClearBufferfi(GetU32(GLenum, 0), GetI32(GLint, 1), GetF(GLfloat, 2), GetI32(GLint, 3));
#else
 WarnNotAvailable("glClearBufferfi");
#endif
}
void Command::run_glGetStringi()
{
#if GL_ES_VERSION_3_0
 if (m_packet.NumItems() > 3) WarnDataNotHandled("glGetStringi");
 glGetStringi(GetU32(GLenum, 0), GetU32(GLuint, 1));
#else
 WarnNotAvailable("glGetStringi");
#endif
}
void Command::run_glCopyBufferSubData()
{
#if GL_ES_VERSION_3_0
 if (m_packet.NumItems() > 6) WarnDataNotHandled("glCopyBufferSubData");
 glCopyBufferSubData(GetU32(GLenum, 0), GetU32(GLenum, 1), GetPtr(GLintptr, 2), GetPtr(GLintptr, 3), GetPtr(GLsizeiptr, 4));
#else
 WarnNotAvailable("glCopyBufferSubData");
#endif
}
void Command::run_glGetUniformIndices()
{
#if GL_ES_VERSION_3_0
 if (m_packet.NumItems() > 6) WarnDataNotHandled("glGetUniformIndices");
 glGetUniformIndices(GetProgram(GLuint, 0), GetI32(GLsizei, 1), GetArrayPtr(const GLchar *const*, 4), dummyGLuint);
#else
 WarnNotAvailable("glGetUniformIndices");
#endif
}
void Command::run_glGetActiveUniformsiv()
{
#if GL_ES_VERSION_3_0
 if (m_packet.NumItems() > 7) WarnDataNotHandled("glGetActiveUniformsiv");
 glGetActiveUniformsiv(GetProgram(GLuint, 0), GetI32(GLsizei, 1), GetArrayPtr(const GLuint *, 5), GetU32(GLenum, 3), dummyGLint);
#else
 WarnNotAvailable("glGetActiveUniformsiv");
#endif
}
void Command::run_glGetUniformBlockIndex()
{
#if GL_ES_VERSION_3_0
 if (m_packet.NumItems() > 3) WarnDataNotHandled("glGetUniformBlockIndex");
 glGetUniformBlockIndex(GetProgram(GLuint, 0), GetCP(const GLchar *, 1));
#else
 WarnNotAvailable("glGetUniformBlockIndex");
#endif
}
void Command::run_glGetActiveUniformBlockiv()
{
#if GL_ES_VERSION_3_0
 if (m_packet.NumItems() > 5) WarnDataNotHandled("glGetActiveUniformBlockiv");
 glGetActiveUniformBlockiv(GetProgram(GLuint, 0), GetUniformBlockIndex(1, 0), GetU32(GLenum, 2), dummyGLint);
#else
 WarnNotAvailable("glGetActiveUniformBlockiv");
#endif
}
void Command::run_glGetActiveUniformBlockName()
{
#if GL_ES_VERSION_3_0
 if (m_packet.NumItems() > 6) WarnDataNotHandled("glGetActiveUniformBlockName");
 glGetActiveUniformBlockName(GetProgram(GLuint, 0), GetUniformBlockIndex(1, 0), GetI32(GLsizei, 2), dummyGLsizei, dummyGLchar);
#else
 WarnNotAvailable("glGetActiveUniformBlockName");
#endif
}
void Command::run_glUniformBlockBinding()
{
#if GL_ES_VERSION_3_0
 if (m_packet.NumItems() > 4) WarnDataNotHandled("glUniformBlockBinding");
 glUniformBlockBinding(GetProgram(GLuint, 0), GetUniformBlockIndex(1, 0), GetU32(GLuint, 2));
#else
 WarnNotAvailable("glUniformBlockBinding");
#endif
}
void Command::run_glDrawArraysInstanced()
{
#if GL_ES_VERSION_3_0
 if (m_packet.NumItems() > 5) WarnDataNotHandled("glDrawArraysInstanced");
 glDrawArraysInstanced(GetU32(GLenum, 0), GetI32(GLint, 1), GetI32(GLsizei, 2), GetI32(GLsizei, 3));
#else
 WarnNotAvailable("glDrawArraysInstanced");
#endif
}
void Command::run_glDrawElementsInstanced()
{
#if GL_ES_VERSION_3_0
 if (m_packet.NumItems() > 7) WarnDataNotHandled("glDrawElementsInstanced");
 glDrawElementsInstanced(GetU32(GLenum, 0), GetI32(GLsizei, 1), GetU32(GLenum, 2), GetArrayPtr(const void *, 5), GetI32(GLsizei, 4));
#else
 WarnNotAvailable("glDrawElementsInstanced");
#endif
}
void Command::run_glFenceSync()
{
#if GL_ES_VERSION_3_0
 if (m_packet.NumItems() > 3) WarnDataNotHandled("glFenceSync");
 glFenceSync(GetU32(GLenum, 0), GetU32(GLbitfield, 1));
#else
 WarnNotAvailable("glFenceSync");
#endif
}
void Command::run_glIsSync()
{
#if GL_ES_VERSION_3_0
 if (m_packet.NumItems() > 2) WarnDataNotHandled("glIsSync");
 glIsSync(GetPtr(GLsync, 0));
#else
 WarnNotAvailable("glIsSync");
#endif
}
void Command::run_glDeleteSync()
{
#if GL_ES_VERSION_3_0
 if (m_packet.NumItems() > 2) WarnDataNotHandled("glDeleteSync");
 glDeleteSync(GetPtr(GLsync, 0));
#else
 WarnNotAvailable("glDeleteSync");
#endif
}
void Command::run_glClientWaitSync()
{
#if GL_ES_VERSION_3_0
 if (m_packet.NumItems() > 4) WarnDataNotHandled("glClientWaitSync");
 glClientWaitSync(GetPtr(GLsync, 0), GetU32(GLbitfield, 1), GetU32(GLuint64, 2));
#else
 WarnNotAvailable("glClientWaitSync");
#endif
}
void Command::run_glWaitSync()
{
#if GL_ES_VERSION_3_0
 if (m_packet.NumItems() > 4) WarnDataNotHandled("glWaitSync");
 glWaitSync(GetPtr(GLsync, 0), GetU32(GLbitfield, 1), GetU32(GLuint64, 2));
#else
 WarnNotAvailable("glWaitSync");
#endif
}
void Command::run_glGetInteger64v()
{
#if GL_ES_VERSION_3_0
 if (m_packet.NumItems() > 3) WarnDataNotHandled("glGetInteger64v");
 glGetInteger64v(GetU32(GLenum, 0), dummyGLint64);
#else
 WarnNotAvailable("glGetInteger64v");
#endif
}
void Command::run_glGetSynciv()
{
#if GL_ES_VERSION_3_0
 if (m_packet.NumItems() > 6) WarnDataNotHandled("glGetSynciv");
 glGetSynciv(GetPtr(GLsync, 0), GetU32(GLenum, 1), GetI32(GLsizei, 2), dummyGLsizei, dummyGLint);
#else
 WarnNotAvailable("glGetSynciv");
#endif
}
void Command::run_glGetInteger64i_v()
{
#if GL_ES_VERSION_3_0
 if (m_packet.NumItems() > 4) WarnDataNotHandled("glGetInteger64i_v");
 glGetInteger64i_v(GetU32(GLenum, 0), GetU32(GLuint, 1), dummyGLint64);
#else
 WarnNotAvailable("glGetInteger64i_v");
#endif
}
void Command::run_glGetBufferParameteri64v()
{
#if GL_ES_VERSION_3_0
 if (m_packet.NumItems() > 4) WarnDataNotHandled("glGetBufferParameteri64v");
 glGetBufferParameteri64v(GetU32(GLenum, 0), GetU32(GLenum, 1), dummyGLint64);
#else
 WarnNotAvailable("glGetBufferParameteri64v");
#endif
}
void Command::run_glGenSamplers()
{
#if GL_ES_VERSION_3_0
 if (m_packet.NumItems() > 3) WarnDataNotHandled("glGenSamplers");
 glGenSamplers(GetI32(GLsizei, 0), dummyGLuint);
#else
 WarnNotAvailable("glGenSamplers");
#endif
}
void Command::run_glDeleteSamplers()
{
#if GL_ES_VERSION_3_0
 if (m_packet.NumItems() > 4) WarnDataNotHandled("glDeleteSamplers");
 glDeleteSamplers(GetI32(GLsizei, 0), GetArrayPtr(const GLuint *, 2));
#else
 WarnNotAvailable("glDeleteSamplers");
#endif
}
void Command::run_glIsSampler()
{
#if GL_ES_VERSION_3_0
 if (m_packet.NumItems() > 2) WarnDataNotHandled("glIsSampler");
 glIsSampler(GetSampler(GLuint, 0));
#else
 WarnNotAvailable("glIsSampler");
#endif
}
void Command::run_glBindSampler()
{
#if GL_ES_VERSION_3_0
 if (m_packet.NumItems() > 3) WarnDataNotHandled("glBindSampler");
 glBindSampler(GetU32(GLuint, 0), GetSampler(GLuint, 1));
#else
 WarnNotAvailable("glBindSampler");
#endif
}
void Command::run_glSamplerParameteri()
{
#if GL_ES_VERSION_3_0
 if (m_packet.NumItems() > 4) WarnDataNotHandled("glSamplerParameteri");
 glSamplerParameteri(GetSampler(GLuint, 0), GetU32(GLenum, 1), GetI32(GLint, 2));
#else
 WarnNotAvailable("glSamplerParameteri");
#endif
}
void Command::run_glSamplerParameteriv()
{
#if GL_ES_VERSION_3_0
 if (m_packet.NumItems() > 5) WarnDataNotHandled("glSamplerParameteriv");
 glSamplerParameteriv(GetSampler(GLuint, 0), GetU32(GLenum, 1), GetArrayPtr(const GLint *, 3));
#else
 WarnNotAvailable("glSamplerParameteriv");
#endif
}
void Command::run_glSamplerParameterf()
{
#if GL_ES_VERSION_3_0
 if (m_packet.NumItems() > 4) WarnDataNotHandled("glSamplerParameterf");
 glSamplerParameterf(GetSampler(GLuint, 0), GetU32(GLenum, 1), GetF(GLfloat, 2));
#else
 WarnNotAvailable("glSamplerParameterf");
#endif
}
void Command::run_glSamplerParameterfv()
{
#if GL_ES_VERSION_3_0
 if (m_packet.NumItems() > 5) WarnDataNotHandled("glSamplerParameterfv");
 glSamplerParameterfv(GetSampler(GLuint, 0), GetU32(GLenum, 1), GetArrayPtr(const GLfloat *, 3));
#else
 WarnNotAvailable("glSamplerParameterfv");
#endif
}
void Command::run_glGetSamplerParameteriv()
{
#if GL_ES_VERSION_3_0
 if (m_packet.NumItems() > 4) WarnDataNotHandled("glGetSamplerParameteriv");
 glGetSamplerParameteriv(GetSampler(GLuint, 0), GetU32(GLenum, 1), dummyGLint);
#else
 WarnNotAvailable("glGetSamplerParameteriv");
#endif
}
void Command::run_glGetSamplerParameterfv()
{
#if GL_ES_VERSION_3_0
 if (m_packet.NumItems() > 4) WarnDataNotHandled("glGetSamplerParameterfv");
 glGetSamplerParameterfv(GetSampler(GLuint, 0), GetU32(GLenum, 1), dummyGLfloat);
#else
 WarnNotAvailable("glGetSamplerParameterfv");
#endif
}
void Command::run_glVertexAttribDivisor()
{
#if GL_ES_VERSION_3_0
 if (m_packet.NumItems() > 3) WarnDataNotHandled("glVertexAttribDivisor");
 glVertexAttribDivisor(GetU32(GLuint, 0), GetU32(GLuint, 1));
#else
 WarnNotAvailable("glVertexAttribDivisor");
#endif
}
void Command::run_glBindTransformFeedback()
{
#if GL_ES_VERSION_3_0
 if (m_packet.NumItems() > 3) WarnDataNotHandled("glBindTransformFeedback");
 glBindTransformFeedback(GetU32(GLenum, 0), GetTF(GLuint, 1));
#else
 WarnNotAvailable("glBindTransformFeedback");
#endif
}
void Command::run_glDeleteTransformFeedbacks()
{
#if GL_ES_VERSION_3_0
 if (m_packet.NumItems() > 4) WarnDataNotHandled("glDeleteTransformFeedbacks");
 glDeleteTransformFeedbacks(GetI32(GLsizei, 0), GetArrayPtr(const GLuint *, 2));
#else
 WarnNotAvailable("glDeleteTransformFeedbacks");
#endif
}
void Command::run_glGenTransformFeedbacks()
{
#if GL_ES_VERSION_3_0
 if (m_packet.NumItems() > 3) WarnDataNotHandled("glGenTransformFeedbacks");
 glGenTransformFeedbacks(GetI32(GLsizei, 0), dummyGLuint);
#else
 WarnNotAvailable("glGenTransformFeedbacks");
#endif
}
void Command::run_glIsTransformFeedback()
{
#if GL_ES_VERSION_3_0
 if (m_packet.NumItems() > 2) WarnDataNotHandled("glIsTransformFeedback");
 glIsTransformFeedback(GetTF(GLuint, 0));
#else
 WarnNotAvailable("glIsTransformFeedback");
#endif
}
void Command::run_glPauseTransformFeedback()
{
#if GL_ES_VERSION_3_0
 if (m_packet.NumItems() > 1) WarnDataNotHandled("glPauseTransformFeedback");
 glPauseTransformFeedback();
#else
 WarnNotAvailable("glPauseTransformFeedback");
#endif
}
void Command::run_glResumeTransformFeedback()
{
#if GL_ES_VERSION_3_0
 if (m_packet.NumItems() > 1) WarnDataNotHandled("glResumeTransformFeedback");
 glResumeTransformFeedback();
#else
 WarnNotAvailable("glResumeTransformFeedback");
#endif
}
void Command::run_glGetProgramBinary()
{
#if GL_ES_VERSION_3_0
 if (m_packet.NumItems() > 6) WarnDataNotHandled("glGetProgramBinary");
 glGetProgramBinary(GetProgram(GLuint, 0), GetI32(GLsizei, 1), dummyGLsizei, dummyGLenum, dummyvoid);
#else
 WarnNotAvailable("glGetProgramBinary");
#endif
}
void Command::run_glProgramBinary()
{
#if GL_ES_VERSION_3_0
 if (m_packet.NumItems() > 6) WarnDataNotHandled("glProgramBinary");
 glProgramBinary(GetProgram(GLuint, 0), GetU32(GLenum, 1), GetArrayPtr(const void *, 4), GetI32(GLsizei, 3));
#else
 WarnNotAvailable("glProgramBinary");
#endif
}
void Command::run_glProgramParameteri()
{
#if GL_ES_VERSION_3_0
 if (m_packet.NumItems() > 4) WarnDataNotHandled("glProgramParameteri");
 glProgramParameteri(GetProgram(GLuint, 0), GetU32(GLenum, 1), GetI32(GLint, 2));
#else
 WarnNotAvailable("glProgramParameteri");
#endif
}
void Command::run_glInvalidateFramebuffer()
{
#if GL_ES_VERSION_3_0
 if (m_packet.NumItems() > 5) WarnDataNotHandled("glInvalidateFramebuffer");
 glInvalidateFramebuffer(GetU32(GLenum, 0), GetI32(GLsizei, 1), GetArrayPtr(const GLenum *, 3));
#else
 WarnNotAvailable("glInvalidateFramebuffer");
#endif
}
void Command::run_glInvalidateSubFramebuffer()
{
#if GL_ES_VERSION_3_0
 if (m_packet.NumItems() > 9) WarnDataNotHandled("glInvalidateSubFramebuffer");
 glInvalidateSubFramebuffer(GetU32(GLenum, 0), GetI32(GLsizei, 1), GetArrayPtr(const GLenum *, 7), GetI32(GLint, 3), GetI32(GLint, 4), GetI32(GLsizei, 5), GetI32(GLsizei, 6));
#else
 WarnNotAvailable("glInvalidateSubFramebuffer");
#endif
}
void Command::run_glTexStorage2D()
{
#if GL_ES_VERSION_3_0
 if (m_packet.NumItems() > 6) WarnDataNotHandled("glTexStorage2D");
 glTexStorage2D(GetU32(GLenum, 0), GetI32(GLsizei, 1), GetU32(GLenum, 2), GetI32(GLsizei, 3), GetI32(GLsizei, 4));
#else
 WarnNotAvailable("glTexStorage2D");
#endif
}
void Command::run_glTexStorage3D()
{
#if GL_ES_VERSION_3_0
 if (m_packet.NumItems() > 7) WarnDataNotHandled("glTexStorage3D");
 glTexStorage3D(GetU32(GLenum, 0), GetI32(GLsizei, 1), GetU32(GLenum, 2), GetI32(GLsizei, 3), GetI32(GLsizei, 4), GetI32(GLsizei, 5));
#else
 WarnNotAvailable("glTexStorage3D");
#endif
}
void Command::run_glGetInternalformativ()
{
#if GL_ES_VERSION_3_0
 if (m_packet.NumItems() > 6) WarnDataNotHandled("glGetInternalformativ");
 glGetInternalformativ(GetU32(GLenum, 0), GetU32(GLenum, 1), GetU32(GLenum, 2), GetI32(GLsizei, 3), dummyGLint);
#else
 WarnNotAvailable("glGetInternalformativ");
#endif
}
void Command::run_glDispatchCompute()
{
#if GL_ES_VERSION_3_1
 if (m_packet.NumItems() > 4) WarnDataNotHandled("glDispatchCompute");
 glDispatchCompute(GetU32(GLuint, 0), GetU32(GLuint, 1), GetU32(GLuint, 2));
#else
 WarnNotAvailable("glDispatchCompute");
#endif
}
void Command::run_glDispatchComputeIndirect()
{
#if GL_ES_VERSION_3_1
 if (m_packet.NumItems() > 2) WarnDataNotHandled("glDispatchComputeIndirect");
 glDispatchComputeIndirect(GetPtr(GLintptr, 0));
#else
 WarnNotAvailable("glDispatchComputeIndirect");
#endif
}
void Command::run_glDrawArraysIndirect()
{
#if GL_ES_VERSION_3_1
 if (m_packet.NumItems() > 4) WarnDataNotHandled("glDrawArraysIndirect");
 glDrawArraysIndirect(GetU32(GLenum, 0), GetArrayPtr(const void *, 2));
#else
 WarnNotAvailable("glDrawArraysIndirect");
#endif
}
void Command::run_glDrawElementsIndirect()
{
#if GL_ES_VERSION_3_1
 if (m_packet.NumItems() > 5) WarnDataNotHandled("glDrawElementsIndirect");
 glDrawElementsIndirect(GetU32(GLenum, 0), GetU32(GLenum, 1), GetArrayPtr(const void *, 3));
#else
 WarnNotAvailable("glDrawElementsIndirect");
#endif
}
void Command::run_glFramebufferParameteri()
{
#if GL_ES_VERSION_3_1
 if (m_packet.NumItems() > 4) WarnDataNotHandled("glFramebufferParameteri");
 glFramebufferParameteri(GetU32(GLenum, 0), GetU32(GLenum, 1), GetI32(GLint, 2));
#else
 WarnNotAvailable("glFramebufferParameteri");
#endif
}
void Command::run_glGetFramebufferParameteriv()
{
#if GL_ES_VERSION_3_1
 if (m_packet.NumItems() > 4) WarnDataNotHandled("glGetFramebufferParameteriv");
 glGetFramebufferParameteriv(GetU32(GLenum, 0), GetU32(GLenum, 1), dummyGLint);
#else
 WarnNotAvailable("glGetFramebufferParameteriv");
#endif
}
void Command::run_glGetProgramInterfaceiv()
{
#if GL_ES_VERSION_3_1
 if (m_packet.NumItems() > 5) WarnDataNotHandled("glGetProgramInterfaceiv");
 glGetProgramInterfaceiv(GetProgram(GLuint, 0), GetU32(GLenum, 1), GetU32(GLenum, 2), dummyGLint);
#else
 WarnNotAvailable("glGetProgramInterfaceiv");
#endif
}
void Command::run_glGetProgramResourceIndex()
{
#if GL_ES_VERSION_3_1
 if (m_packet.NumItems() > 4) WarnDataNotHandled("glGetProgramResourceIndex");
 glGetProgramResourceIndex(GetProgram(GLuint, 0), GetU32(GLenum, 1), GetCP(const GLchar *, 2));
#else
 WarnNotAvailable("glGetProgramResourceIndex");
#endif
}
void Command::run_glGetProgramResourceName()
{
#if GL_ES_VERSION_3_1
 if (m_packet.NumItems() > 7) WarnDataNotHandled("glGetProgramResourceName");
 glGetProgramResourceName(GetProgram(GLuint, 0), GetU32(GLenum, 1), GetU32(GLuint, 2), GetI32(GLsizei, 3), dummyGLsizei, dummyGLchar);
#else
 WarnNotAvailable("glGetProgramResourceName");
#endif
}
void Command::run_glGetProgramResourceiv()
{
#if GL_ES_VERSION_3_1
 if (m_packet.NumItems() > 10) WarnDataNotHandled("glGetProgramResourceiv");
 glGetProgramResourceiv(GetProgram(GLuint, 0), GetU32(GLenum, 1), GetU32(GLuint, 2), GetI32(GLsizei, 3), GetArrayPtr(const GLenum *, 8), GetI32(GLsizei, 5), dummyGLsizei, dummyGLint);
#else
 WarnNotAvailable("glGetProgramResourceiv");
#endif
}
void Command::run_glGetProgramResourceLocation()
{
#if GL_ES_VERSION_3_1
 if (m_packet.NumItems() > 4) WarnDataNotHandled("glGetProgramResourceLocation");
 glGetProgramResourceLocation(GetProgram(GLuint, 0), GetU32(GLenum, 1), GetCP(const GLchar *, 2));
#else
 WarnNotAvailable("glGetProgramResourceLocation");
#endif
}
void Command::run_glUseProgramStages()
{
#if GL_ES_VERSION_3_1
 if (m_packet.NumItems() > 4) WarnDataNotHandled("glUseProgramStages");
 glUseProgramStages(GetProgramPipeline(GLuint, 0), GetU32(GLbitfield, 1), GetProgram(GLuint, 2));
#else
 WarnNotAvailable("glUseProgramStages");
#endif
}
void Command::run_glActiveShaderProgram()
{
#if GL_ES_VERSION_3_1
 if (m_packet.NumItems() > 3) WarnDataNotHandled("glActiveShaderProgram");
 glActiveShaderProgram(GetProgramPipeline(GLuint, 0), GetProgram(GLuint, 1));
#else
 WarnNotAvailable("glActiveShaderProgram");
#endif
}
void Command::run_glCreateShaderProgramv()
{
#if GL_ES_VERSION_3_1
 if (m_packet.NumItems() > 5) WarnDataNotHandled("glCreateShaderProgramv");
 glCreateShaderProgramv(GetU32(GLenum, 0), GetI32(GLsizei, 1), GetArrayPtr(const GLchar *const*, 3));
#else
 WarnNotAvailable("glCreateShaderProgramv");
#endif
}
void Command::run_glBindProgramPipeline()
{
#if GL_ES_VERSION_3_1
 if (m_packet.NumItems() > 2) WarnDataNotHandled("glBindProgramPipeline");
 glBindProgramPipeline(GetProgramPipeline(GLuint, 0));
#else
 WarnNotAvailable("glBindProgramPipeline");
#endif
}
void Command::run_glDeleteProgramPipelines()
{
#if GL_ES_VERSION_3_1
 if (m_packet.NumItems() > 4) WarnDataNotHandled("glDeleteProgramPipelines");
 glDeleteProgramPipelines(GetI32(GLsizei, 0), GetArrayPtr(const GLuint *, 2));
#else
 WarnNotAvailable("glDeleteProgramPipelines");
#endif
}
void Command::run_glGenProgramPipelines()
{
#if GL_ES_VERSION_3_1
 if (m_packet.NumItems() > 3) WarnDataNotHandled("glGenProgramPipelines");
 glGenProgramPipelines(GetI32(GLsizei, 0), dummyGLuint);
#else
 WarnNotAvailable("glGenProgramPipelines");
#endif
}
void Command::run_glIsProgramPipeline()
{
#if GL_ES_VERSION_3_1
 if (m_packet.NumItems() > 2) WarnDataNotHandled("glIsProgramPipeline");
 glIsProgramPipeline(GetProgramPipeline(GLuint, 0));
#else
 WarnNotAvailable("glIsProgramPipeline");
#endif
}
void Command::run_glGetProgramPipelineiv()
{
#if GL_ES_VERSION_3_1
 if (m_packet.NumItems() > 4) WarnDataNotHandled("glGetProgramPipelineiv");
 glGetProgramPipelineiv(GetProgramPipeline(GLuint, 0), GetU32(GLenum, 1), dummyGLint);
#else
 WarnNotAvailable("glGetProgramPipelineiv");
#endif
}
void Command::run_glProgramUniform1i()
{
#if GL_ES_VERSION_3_1
 if (m_packet.NumItems() > 4) WarnDataNotHandled("glProgramUniform1i");
 glProgramUniform1i(GetProgram(GLuint, 0), GetUniform(1, 0), GetI32(GLint, 2));
#else
 WarnNotAvailable("glProgramUniform1i");
#endif
}
void Command::run_glProgramUniform2i()
{
#if GL_ES_VERSION_3_1
 if (m_packet.NumItems() > 5) WarnDataNotHandled("glProgramUniform2i");
 glProgramUniform2i(GetProgram(GLuint, 0), GetUniform(1, 0), GetI32(GLint, 2), GetI32(GLint, 3));
#else
 WarnNotAvailable("glProgramUniform2i");
#endif
}
void Command::run_glProgramUniform3i()
{
#if GL_ES_VERSION_3_1
 if (m_packet.NumItems() > 6) WarnDataNotHandled("glProgramUniform3i");
 glProgramUniform3i(GetProgram(GLuint, 0), GetUniform(1, 0), GetI32(GLint, 2), GetI32(GLint, 3), GetI32(GLint, 4));
#else
 WarnNotAvailable("glProgramUniform3i");
#endif
}
void Command::run_glProgramUniform4i()
{
#if GL_ES_VERSION_3_1
 if (m_packet.NumItems() > 7) WarnDataNotHandled("glProgramUniform4i");
 glProgramUniform4i(GetProgram(GLuint, 0), GetUniform(1, 0), GetI32(GLint, 2), GetI32(GLint, 3), GetI32(GLint, 4), GetI32(GLint, 5));
#else
 WarnNotAvailable("glProgramUniform4i");
#endif
}
void Command::run_glProgramUniform1ui()
{
#if GL_ES_VERSION_3_1
 if (m_packet.NumItems() > 4) WarnDataNotHandled("glProgramUniform1ui");
 glProgramUniform1ui(GetProgram(GLuint, 0), GetUniform(1, 0), GetU32(GLuint, 2));
#else
 WarnNotAvailable("glProgramUniform1ui");
#endif
}
void Command::run_glProgramUniform2ui()
{
#if GL_ES_VERSION_3_1
 if (m_packet.NumItems() > 5) WarnDataNotHandled("glProgramUniform2ui");
 glProgramUniform2ui(GetProgram(GLuint, 0), GetUniform(1, 0), GetU32(GLuint, 2), GetU32(GLuint, 3));
#else
 WarnNotAvailable("glProgramUniform2ui");
#endif
}
void Command::run_glProgramUniform3ui()
{
#if GL_ES_VERSION_3_1
 if (m_packet.NumItems() > 6) WarnDataNotHandled("glProgramUniform3ui");
 glProgramUniform3ui(GetProgram(GLuint, 0), GetUniform(1, 0), GetU32(GLuint, 2), GetU32(GLuint, 3), GetU32(GLuint, 4));
#else
 WarnNotAvailable("glProgramUniform3ui");
#endif
}
void Command::run_glProgramUniform4ui()
{
#if GL_ES_VERSION_3_1
 if (m_packet.NumItems() > 7) WarnDataNotHandled("glProgramUniform4ui");
 glProgramUniform4ui(GetProgram(GLuint, 0), GetUniform(1, 0), GetU32(GLuint, 2), GetU32(GLuint, 3), GetU32(GLuint, 4), GetU32(GLuint, 5));
#else
 WarnNotAvailable("glProgramUniform4ui");
#endif
}
void Command::run_glProgramUniform1f()
{
#if GL_ES_VERSION_3_1
 if (m_packet.NumItems() > 4) WarnDataNotHandled("glProgramUniform1f");
 glProgramUniform1f(GetProgram(GLuint, 0), GetUniform(1, 0), GetF(GLfloat, 2));
#else
 WarnNotAvailable("glProgramUniform1f");
#endif
}
void Command::run_glProgramUniform2f()
{
#if GL_ES_VERSION_3_1
 if (m_packet.NumItems() > 5) WarnDataNotHandled("glProgramUniform2f");
 glProgramUniform2f(GetProgram(GLuint, 0), GetUniform(1, 0), GetF(GLfloat, 2), GetF(GLfloat, 3));
#else
 WarnNotAvailable("glProgramUniform2f");
#endif
}
void Command::run_glProgramUniform3f()
{
#if GL_ES_VERSION_3_1
 if (m_packet.NumItems() > 6) WarnDataNotHandled("glProgramUniform3f");
 glProgramUniform3f(GetProgram(GLuint, 0), GetUniform(1, 0), GetF(GLfloat, 2), GetF(GLfloat, 3), GetF(GLfloat, 4));
#else
 WarnNotAvailable("glProgramUniform3f");
#endif
}
void Command::run_glProgramUniform4f()
{
#if GL_ES_VERSION_3_1
 if (m_packet.NumItems() > 7) WarnDataNotHandled("glProgramUniform4f");
 glProgramUniform4f(GetProgram(GLuint, 0), GetUniform(1, 0), GetF(GLfloat, 2), GetF(GLfloat, 3), GetF(GLfloat, 4), GetF(GLfloat, 5));
#else
 WarnNotAvailable("glProgramUniform4f");
#endif
}
void Command::run_glProgramUniform1iv()
{
#if GL_ES_VERSION_3_1
 if (m_packet.NumItems() > 6) WarnDataNotHandled("glProgramUniform1iv");
 glProgramUniform1iv(GetProgram(GLuint, 0), GetUniform(1, 0), GetI32(GLsizei, 2), GetArrayPtr(const GLint *, 4));
#else
 WarnNotAvailable("glProgramUniform1iv");
#endif
}
void Command::run_glProgramUniform2iv()
{
#if GL_ES_VERSION_3_1
 if (m_packet.NumItems() > 6) WarnDataNotHandled("glProgramUniform2iv");
 glProgramUniform2iv(GetProgram(GLuint, 0), GetUniform(1, 0), GetI32(GLsizei, 2), GetArrayPtr(const GLint *, 4));
#else
 WarnNotAvailable("glProgramUniform2iv");
#endif
}
void Command::run_glProgramUniform3iv()
{
#if GL_ES_VERSION_3_1
 if (m_packet.NumItems() > 6) WarnDataNotHandled("glProgramUniform3iv");
 glProgramUniform3iv(GetProgram(GLuint, 0), GetUniform(1, 0), GetI32(GLsizei, 2), GetArrayPtr(const GLint *, 4));
#else
 WarnNotAvailable("glProgramUniform3iv");
#endif
}
void Command::run_glProgramUniform4iv()
{
#if GL_ES_VERSION_3_1
 if (m_packet.NumItems() > 6) WarnDataNotHandled("glProgramUniform4iv");
 glProgramUniform4iv(GetProgram(GLuint, 0), GetUniform(1, 0), GetI32(GLsizei, 2), GetArrayPtr(const GLint *, 4));
#else
 WarnNotAvailable("glProgramUniform4iv");
#endif
}
void Command::run_glProgramUniform1uiv()
{
#if GL_ES_VERSION_3_1
 if (m_packet.NumItems() > 6) WarnDataNotHandled("glProgramUniform1uiv");
 glProgramUniform1uiv(GetProgram(GLuint, 0), GetUniform(1, 0), GetI32(GLsizei, 2), GetArrayPtr(const GLuint *, 4));
#else
 WarnNotAvailable("glProgramUniform1uiv");
#endif
}
void Command::run_glProgramUniform2uiv()
{
#if GL_ES_VERSION_3_1
 if (m_packet.NumItems() > 6) WarnDataNotHandled("glProgramUniform2uiv");
 glProgramUniform2uiv(GetProgram(GLuint, 0), GetUniform(1, 0), GetI32(GLsizei, 2), GetArrayPtr(const GLuint *, 4));
#else
 WarnNotAvailable("glProgramUniform2uiv");
#endif
}
void Command::run_glProgramUniform3uiv()
{
#if GL_ES_VERSION_3_1
 if (m_packet.NumItems() > 6) WarnDataNotHandled("glProgramUniform3uiv");
 glProgramUniform3uiv(GetProgram(GLuint, 0), GetUniform(1, 0), GetI32(GLsizei, 2), GetArrayPtr(const GLuint *, 4));
#else
 WarnNotAvailable("glProgramUniform3uiv");
#endif
}
void Command::run_glProgramUniform4uiv()
{
#if GL_ES_VERSION_3_1
 if (m_packet.NumItems() > 6) WarnDataNotHandled("glProgramUniform4uiv");
 glProgramUniform4uiv(GetProgram(GLuint, 0), GetUniform(1, 0), GetI32(GLsizei, 2), GetArrayPtr(const GLuint *, 4));
#else
 WarnNotAvailable("glProgramUniform4uiv");
#endif
}
void Command::run_glProgramUniform1fv()
{
#if GL_ES_VERSION_3_1
 if (m_packet.NumItems() > 6) WarnDataNotHandled("glProgramUniform1fv");
 glProgramUniform1fv(GetProgram(GLuint, 0), GetUniform(1, 0), GetI32(GLsizei, 2), GetArrayPtr(const GLfloat *, 4));
#else
 WarnNotAvailable("glProgramUniform1fv");
#endif
}
void Command::run_glProgramUniform2fv()
{
#if GL_ES_VERSION_3_1
 if (m_packet.NumItems() > 6) WarnDataNotHandled("glProgramUniform2fv");
 glProgramUniform2fv(GetProgram(GLuint, 0), GetUniform(1, 0), GetI32(GLsizei, 2), GetArrayPtr(const GLfloat *, 4));
#else
 WarnNotAvailable("glProgramUniform2fv");
#endif
}
void Command::run_glProgramUniform3fv()
{
#if GL_ES_VERSION_3_1
 if (m_packet.NumItems() > 6) WarnDataNotHandled("glProgramUniform3fv");
 glProgramUniform3fv(GetProgram(GLuint, 0), GetUniform(1, 0), GetI32(GLsizei, 2), GetArrayPtr(const GLfloat *, 4));
#else
 WarnNotAvailable("glProgramUniform3fv");
#endif
}
void Command::run_glProgramUniform4fv()
{
#if GL_ES_VERSION_3_1
 if (m_packet.NumItems() > 6) WarnDataNotHandled("glProgramUniform4fv");
 glProgramUniform4fv(GetProgram(GLuint, 0), GetUniform(1, 0), GetI32(GLsizei, 2), GetArrayPtr(const GLfloat *, 4));
#else
 WarnNotAvailable("glProgramUniform4fv");
#endif
}
void Command::run_glProgramUniformMatrix2fv()
{
#if GL_ES_VERSION_3_1
 if (m_packet.NumItems() > 7) WarnDataNotHandled("glProgramUniformMatrix2fv");
 glProgramUniformMatrix2fv(GetProgram(GLuint, 0), GetUniform(1, 0), GetI32(GLsizei, 2), GetB(GLboolean, 3), GetArrayPtr(const GLfloat *, 5));
#else
 WarnNotAvailable("glProgramUniformMatrix2fv");
#endif
}
void Command::run_glProgramUniformMatrix3fv()
{
#if GL_ES_VERSION_3_1
 if (m_packet.NumItems() > 7) WarnDataNotHandled("glProgramUniformMatrix3fv");
 glProgramUniformMatrix3fv(GetProgram(GLuint, 0), GetUniform(1, 0), GetI32(GLsizei, 2), GetB(GLboolean, 3), GetArrayPtr(const GLfloat *, 5));
#else
 WarnNotAvailable("glProgramUniformMatrix3fv");
#endif
}
void Command::run_glProgramUniformMatrix4fv()
{
#if GL_ES_VERSION_3_1
 if (m_packet.NumItems() > 7) WarnDataNotHandled("glProgramUniformMatrix4fv");
 glProgramUniformMatrix4fv(GetProgram(GLuint, 0), GetUniform(1, 0), GetI32(GLsizei, 2), GetB(GLboolean, 3), GetArrayPtr(const GLfloat *, 5));
#else
 WarnNotAvailable("glProgramUniformMatrix4fv");
#endif
}
void Command::run_glProgramUniformMatrix2x3fv()
{
#if GL_ES_VERSION_3_1
 if (m_packet.NumItems() > 7) WarnDataNotHandled("glProgramUniformMatrix2x3fv");
 glProgramUniformMatrix2x3fv(GetProgram(GLuint, 0), GetUniform(1, 0), GetI32(GLsizei, 2), GetB(GLboolean, 3), GetArrayPtr(const GLfloat *, 5));
#else
 WarnNotAvailable("glProgramUniformMatrix2x3fv");
#endif
}
void Command::run_glProgramUniformMatrix3x2fv()
{
#if GL_ES_VERSION_3_1
 if (m_packet.NumItems() > 7) WarnDataNotHandled("glProgramUniformMatrix3x2fv");
 glProgramUniformMatrix3x2fv(GetProgram(GLuint, 0), GetUniform(1, 0), GetI32(GLsizei, 2), GetB(GLboolean, 3), GetArrayPtr(const GLfloat *, 5));
#else
 WarnNotAvailable("glProgramUniformMatrix3x2fv");
#endif
}
void Command::run_glProgramUniformMatrix2x4fv()
{
#if GL_ES_VERSION_3_1
 if (m_packet.NumItems() > 7) WarnDataNotHandled("glProgramUniformMatrix2x4fv");
 glProgramUniformMatrix2x4fv(GetProgram(GLuint, 0), GetUniform(1, 0), GetI32(GLsizei, 2), GetB(GLboolean, 3), GetArrayPtr(const GLfloat *, 5));
#else
 WarnNotAvailable("glProgramUniformMatrix2x4fv");
#endif
}
void Command::run_glProgramUniformMatrix4x2fv()
{
#if GL_ES_VERSION_3_1
 if (m_packet.NumItems() > 7) WarnDataNotHandled("glProgramUniformMatrix4x2fv");
 glProgramUniformMatrix4x2fv(GetProgram(GLuint, 0), GetUniform(1, 0), GetI32(GLsizei, 2), GetB(GLboolean, 3), GetArrayPtr(const GLfloat *, 5));
#else
 WarnNotAvailable("glProgramUniformMatrix4x2fv");
#endif
}
void Command::run_glProgramUniformMatrix3x4fv()
{
#if GL_ES_VERSION_3_1
 if (m_packet.NumItems() > 7) WarnDataNotHandled("glProgramUniformMatrix3x4fv");
 glProgramUniformMatrix3x4fv(GetProgram(GLuint, 0), GetUniform(1, 0), GetI32(GLsizei, 2), GetB(GLboolean, 3), GetArrayPtr(const GLfloat *, 5));
#else
 WarnNotAvailable("glProgramUniformMatrix3x4fv");
#endif
}
void Command::run_glProgramUniformMatrix4x3fv()
{
#if GL_ES_VERSION_3_1
 if (m_packet.NumItems() > 7) WarnDataNotHandled("glProgramUniformMatrix4x3fv");
 glProgramUniformMatrix4x3fv(GetProgram(GLuint, 0), GetUniform(1, 0), GetI32(GLsizei, 2), GetB(GLboolean, 3), GetArrayPtr(const GLfloat *, 5));
#else
 WarnNotAvailable("glProgramUniformMatrix4x3fv");
#endif
}
void Command::run_glValidateProgramPipeline()
{
#if GL_ES_VERSION_3_1
 if (m_packet.NumItems() > 2) WarnDataNotHandled("glValidateProgramPipeline");
 glValidateProgramPipeline(GetProgramPipeline(GLuint, 0));
#else
 WarnNotAvailable("glValidateProgramPipeline");
#endif
}
void Command::run_glGetProgramPipelineInfoLog()
{
#if GL_ES_VERSION_3_1
 if (m_packet.NumItems() > 5) WarnDataNotHandled("glGetProgramPipelineInfoLog");
 glGetProgramPipelineInfoLog(GetProgramPipeline(GLuint, 0), GetI32(GLsizei, 1), dummyGLsizei, dummyGLchar);
#else
 WarnNotAvailable("glGetProgramPipelineInfoLog");
#endif
}
void Command::run_glBindImageTexture()
{
#if GL_ES_VERSION_3_1
 if (m_packet.NumItems() > 8) WarnDataNotHandled("glBindImageTexture");
 glBindImageTexture(GetU32(GLuint, 0), GetU32(GLuint, 1), GetI32(GLint, 2), GetB(GLboolean, 3), GetI32(GLint, 4), GetU32(GLenum, 5), GetU32(GLenum, 6));
#else
 WarnNotAvailable("glBindImageTexture");
#endif
}
void Command::run_glGetBooleani_v()
{
#if GL_ES_VERSION_3_1
 if (m_packet.NumItems() > 4) WarnDataNotHandled("glGetBooleani_v");
 glGetBooleani_v(GetU32(GLenum, 0), GetU32(GLuint, 1), dummyGLboolean);
#else
 WarnNotAvailable("glGetBooleani_v");
#endif
}
void Command::run_glMemoryBarrier()
{
#if GL_ES_VERSION_3_1
 if (m_packet.NumItems() > 2) WarnDataNotHandled("glMemoryBarrier");
 glMemoryBarrier(GetU32(GLbitfield, 0));
#else
 WarnNotAvailable("glMemoryBarrier");
#endif
}
void Command::run_glMemoryBarrierByRegion()
{
#if GL_ES_VERSION_3_1
 if (m_packet.NumItems() > 2) WarnDataNotHandled("glMemoryBarrierByRegion");
 glMemoryBarrierByRegion(GetU32(GLbitfield, 0));
#else
 WarnNotAvailable("glMemoryBarrierByRegion");
#endif
}
void Command::run_glTexStorage2DMultisample()
{
#if GL_ES_VERSION_3_1
 if (m_packet.NumItems() > 7) WarnDataNotHandled("glTexStorage2DMultisample");
 glTexStorage2DMultisample(GetU32(GLenum, 0), GetI32(GLsizei, 1), GetU32(GLenum, 2), GetI32(GLsizei, 3), GetI32(GLsizei, 4), GetB(GLboolean, 5));
#else
 WarnNotAvailable("glTexStorage2DMultisample");
#endif
}
void Command::run_glGetMultisamplefv()
{
#if GL_ES_VERSION_3_1
 if (m_packet.NumItems() > 4) WarnDataNotHandled("glGetMultisamplefv");
 glGetMultisamplefv(GetU32(GLenum, 0), GetU32(GLuint, 1), dummyGLfloat);
#else
 WarnNotAvailable("glGetMultisamplefv");
#endif
}
void Command::run_glSampleMaski()
{
#if GL_ES_VERSION_3_1
 if (m_packet.NumItems() > 3) WarnDataNotHandled("glSampleMaski");
 glSampleMaski(GetU32(GLuint, 0), GetU32(GLbitfield, 1));
#else
 WarnNotAvailable("glSampleMaski");
#endif
}
void Command::run_glGetTexLevelParameteriv()
{
#if GL_ES_VERSION_3_1
 if (m_packet.NumItems() > 5) WarnDataNotHandled("glGetTexLevelParameteriv");
 glGetTexLevelParameteriv(GetU32(GLenum, 0), GetI32(GLint, 1), GetU32(GLenum, 2), dummyGLint);
#else
 WarnNotAvailable("glGetTexLevelParameteriv");
#endif
}
void Command::run_glGetTexLevelParameterfv()
{
#if GL_ES_VERSION_3_1
 if (m_packet.NumItems() > 5) WarnDataNotHandled("glGetTexLevelParameterfv");
 glGetTexLevelParameterfv(GetU32(GLenum, 0), GetI32(GLint, 1), GetU32(GLenum, 2), dummyGLfloat);
#else
 WarnNotAvailable("glGetTexLevelParameterfv");
#endif
}
void Command::run_glBindVertexBuffer()
{
#if GL_ES_VERSION_3_1
 if (m_packet.NumItems() > 5) WarnDataNotHandled("glBindVertexBuffer");
 glBindVertexBuffer(GetU32(GLuint, 0), GetU32(GLuint, 1), GetPtr(GLintptr, 2), GetI32(GLsizei, 3));
#else
 WarnNotAvailable("glBindVertexBuffer");
#endif
}
void Command::run_glVertexAttribFormat()
{
#if GL_ES_VERSION_3_1
 if (m_packet.NumItems() > 6) WarnDataNotHandled("glVertexAttribFormat");
 glVertexAttribFormat(GetU32(GLuint, 0), GetI32(GLint, 1), GetU32(GLenum, 2), GetB(GLboolean, 3), GetU32(GLuint, 4));
#else
 WarnNotAvailable("glVertexAttribFormat");
#endif
}
void Command::run_glVertexAttribIFormat()
{
#if GL_ES_VERSION_3_1
 if (m_packet.NumItems() > 5) WarnDataNotHandled("glVertexAttribIFormat");
 glVertexAttribIFormat(GetU32(GLuint, 0), GetI32(GLint, 1), GetU32(GLenum, 2), GetU32(GLuint, 3));
#else
 WarnNotAvailable("glVertexAttribIFormat");
#endif
}
void Command::run_glVertexAttribBinding()
{
#if GL_ES_VERSION_3_1
 if (m_packet.NumItems() > 3) WarnDataNotHandled("glVertexAttribBinding");
 glVertexAttribBinding(GetU32(GLuint, 0), GetU32(GLuint, 1));
#else
 WarnNotAvailable("glVertexAttribBinding");
#endif
}
void Command::run_glVertexBindingDivisor()
{
#if GL_ES_VERSION_3_1
 if (m_packet.NumItems() > 3) WarnDataNotHandled("glVertexBindingDivisor");
 glVertexBindingDivisor(GetU32(GLuint, 0), GetU32(GLuint, 1));
#else
 WarnNotAvailable("glVertexBindingDivisor");
#endif
}
void Command::run_glBlendBarrier()
{
#if GL_ES_VERSION_3_2
 if (m_packet.NumItems() > 1) WarnDataNotHandled("glBlendBarrier");
 glBlendBarrier();
#else
 WarnNotAvailable("glBlendBarrier");
#endif
}
void Command::run_glCopyImageSubData()
{
#if GL_ES_VERSION_3_2
 if (m_packet.NumItems() > 16) WarnDataNotHandled("glCopyImageSubData");
 glCopyImageSubData(GetU32(GLuint, 0), GetU32(GLenum, 1), GetI32(GLint, 2), GetI32(GLint, 3), GetI32(GLint, 4), GetI32(GLint, 5), GetU32(GLuint, 6), GetU32(GLenum, 7), GetI32(GLint, 8), GetI32(GLint, 9), GetI32(GLint, 10), GetI32(GLint, 11), GetI32(GLsizei, 12), GetI32(GLsizei, 13), GetI32(GLsizei, 14));
#else
 WarnNotAvailable("glCopyImageSubData");
#endif
}
void Command::run_glDebugMessageControl()
{
#if GL_ES_VERSION_3_2
 if (m_packet.NumItems() > 8) WarnDataNotHandled("glDebugMessageControl");
 glDebugMessageControl(GetU32(GLenum, 0), GetU32(GLenum, 1), GetU32(GLenum, 2), GetI32(GLsizei, 3), GetArrayPtr(const GLuint *, 6), GetB(GLboolean, 5));
#else
 WarnNotAvailable("glDebugMessageControl");
#endif
}
void Command::run_glDebugMessageInsert()
{
#if GL_ES_VERSION_3_2
 if (m_packet.NumItems() > 7) WarnDataNotHandled("glDebugMessageInsert");
 glDebugMessageInsert(GetU32(GLenum, 0), GetU32(GLenum, 1), GetU32(GLuint, 2), GetU32(GLenum, 3), GetI32(GLsizei, 4), GetCP(const GLchar *, 5));
#else
 WarnNotAvailable("glDebugMessageInsert");
#endif
}
void Command::run_glDebugMessageCallback()
{
#if GL_ES_VERSION_3_2
 if (m_packet.NumItems() > 4) WarnDataNotHandled("glDebugMessageCallback");
 glDebugMessageCallback(GetPtr(GLDEBUGPROC, 0), GetArrayPtr(const void *, 2));
#else
 WarnNotAvailable("glDebugMessageCallback");
#endif
}
void Command::run_glGetDebugMessageLog()
{
#if GL_ES_VERSION_3_2
 if (m_packet.NumItems() > 9) WarnDataNotHandled("glGetDebugMessageLog");
 glGetDebugMessageLog(GetU32(GLuint, 0), GetI32(GLsizei, 1), dummyGLenum, dummyGLenum, dummyGLuint, dummyGLenum, dummyGLsizei, dummyGLchar);
#else
 WarnNotAvailable("glGetDebugMessageLog");
#endif
}
void Command::run_glPushDebugGroup()
{
#if GL_ES_VERSION_3_2
 if (m_packet.NumItems() > 5) WarnDataNotHandled("glPushDebugGroup");
 glPushDebugGroup(GetU32(GLenum, 0), GetU32(GLuint, 1), GetI32(GLsizei, 2), GetCP(const GLchar *, 3));
#else
 WarnNotAvailable("glPushDebugGroup");
#endif
}
void Command::run_glPopDebugGroup()
{
#if GL_ES_VERSION_3_2
 if (m_packet.NumItems() > 1) WarnDataNotHandled("glPopDebugGroup");
 glPopDebugGroup();
#else
 WarnNotAvailable("glPopDebugGroup");
#endif
}
void Command::run_glObjectLabel()
{
#if GL_ES_VERSION_3_2
 if (m_packet.NumItems() > 5) WarnDataNotHandled("glObjectLabel");
 glObjectLabel(GetU32(GLenum, 0), GetU32(GLuint, 1), GetI32(GLsizei, 2), GetCP(const GLchar *, 3));
#else
 WarnNotAvailable("glObjectLabel");
#endif
}
void Command::run_glGetObjectLabel()
{
#if GL_ES_VERSION_3_2
 if (m_packet.NumItems() > 6) WarnDataNotHandled("glGetObjectLabel");
 glGetObjectLabel(GetU32(GLenum, 0), GetU32(GLuint, 1), GetI32(GLsizei, 2), dummyGLsizei, dummyGLchar);
#else
 WarnNotAvailable("glGetObjectLabel");
#endif
}
void Command::run_glObjectPtrLabel()
{
#if GL_ES_VERSION_3_2
 if (m_packet.NumItems() > 5) WarnDataNotHandled("glObjectPtrLabel");
 glObjectPtrLabel(GetArrayPtr(const void *, 3), GetI32(GLsizei, 1), GetCP(const GLchar *, 2));
#else
 WarnNotAvailable("glObjectPtrLabel");
#endif
}
void Command::run_glGetObjectPtrLabel()
{
#if GL_ES_VERSION_3_2
 if (m_packet.NumItems() > 6) WarnDataNotHandled("glGetObjectPtrLabel");
 glGetObjectPtrLabel(GetArrayPtr(const void *, 4), GetI32(GLsizei, 1), dummyGLsizei, dummyGLchar);
#else
 WarnNotAvailable("glGetObjectPtrLabel");
#endif
}
void Command::run_glEnablei()
{
#if GL_ES_VERSION_3_2
 if (m_packet.NumItems() > 3) WarnDataNotHandled("glEnablei");
 glEnablei(GetU32(GLenum, 0), GetU32(GLuint, 1));
#else
 WarnNotAvailable("glEnablei");
#endif
}
void Command::run_glDisablei()
{
#if GL_ES_VERSION_3_2
 if (m_packet.NumItems() > 3) WarnDataNotHandled("glDisablei");
 glDisablei(GetU32(GLenum, 0), GetU32(GLuint, 1));
#else
 WarnNotAvailable("glDisablei");
#endif
}
void Command::run_glBlendEquationi()
{
#if GL_ES_VERSION_3_2
 if (m_packet.NumItems() > 3) WarnDataNotHandled("glBlendEquationi");
 glBlendEquationi(GetU32(GLuint, 0), GetU32(GLenum, 1));
#else
 WarnNotAvailable("glBlendEquationi");
#endif
}
void Command::run_glBlendEquationSeparatei()
{
#if GL_ES_VERSION_3_2
 if (m_packet.NumItems() > 4) WarnDataNotHandled("glBlendEquationSeparatei");
 glBlendEquationSeparatei(GetU32(GLuint, 0), GetU32(GLenum, 1), GetU32(GLenum, 2));
#else
 WarnNotAvailable("glBlendEquationSeparatei");
#endif
}
void Command::run_glBlendFunci()
{
#if GL_ES_VERSION_3_2
 if (m_packet.NumItems() > 4) WarnDataNotHandled("glBlendFunci");
 glBlendFunci(GetU32(GLuint, 0), GetU32(GLenum, 1), GetU32(GLenum, 2));
#else
 WarnNotAvailable("glBlendFunci");
#endif
}
void Command::run_glBlendFuncSeparatei()
{
#if GL_ES_VERSION_3_2
 if (m_packet.NumItems() > 6) WarnDataNotHandled("glBlendFuncSeparatei");
 glBlendFuncSeparatei(GetU32(GLuint, 0), GetU32(GLenum, 1), GetU32(GLenum, 2), GetU32(GLenum, 3), GetU32(GLenum, 4));
#else
 WarnNotAvailable("glBlendFuncSeparatei");
#endif
}
void Command::run_glColorMaski()
{
#if GL_ES_VERSION_3_2
 if (m_packet.NumItems() > 6) WarnDataNotHandled("glColorMaski");
 glColorMaski(GetU32(GLuint, 0), GetB(GLboolean, 1), GetB(GLboolean, 2), GetB(GLboolean, 3), GetB(GLboolean, 4));
#else
 WarnNotAvailable("glColorMaski");
#endif
}
void Command::run_glIsEnabledi()
{
#if GL_ES_VERSION_3_2
 if (m_packet.NumItems() > 3) WarnDataNotHandled("glIsEnabledi");
 glIsEnabledi(GetU32(GLenum, 0), GetU32(GLuint, 1));
#else
 WarnNotAvailable("glIsEnabledi");
#endif
}
void Command::run_glDrawElementsBaseVertex()
{
#if GL_ES_VERSION_3_2
 if (m_packet.NumItems() > 7) WarnDataNotHandled("glDrawElementsBaseVertex");
 glDrawElementsBaseVertex(GetU32(GLenum, 0), GetI32(GLsizei, 1), GetU32(GLenum, 2), GetArrayPtr(const void *, 5), GetI32(GLint, 4));
#else
 WarnNotAvailable("glDrawElementsBaseVertex");
#endif
}
void Command::run_glDrawRangeElementsBaseVertex()
{
#if GL_ES_VERSION_3_2
 if (m_packet.NumItems() > 9) WarnDataNotHandled("glDrawRangeElementsBaseVertex");
 glDrawRangeElementsBaseVertex(GetU32(GLenum, 0), GetU32(GLuint, 1), GetU32(GLuint, 2), GetI32(GLsizei, 3), GetU32(GLenum, 4), GetArrayPtr(const void *, 7), GetI32(GLint, 6));
#else
 WarnNotAvailable("glDrawRangeElementsBaseVertex");
#endif
}
void Command::run_glDrawElementsInstancedBaseVertex()
{
#if GL_ES_VERSION_3_2
 if (m_packet.NumItems() > 8) WarnDataNotHandled("glDrawElementsInstancedBaseVertex");
 glDrawElementsInstancedBaseVertex(GetU32(GLenum, 0), GetI32(GLsizei, 1), GetU32(GLenum, 2), GetArrayPtr(const void *, 6), GetI32(GLsizei, 4), GetI32(GLint, 5));
#else
 WarnNotAvailable("glDrawElementsInstancedBaseVertex");
#endif
}
void Command::run_glFramebufferTexture()
{
#if GL_ES_VERSION_3_2
 if (m_packet.NumItems() > 5) WarnDataNotHandled("glFramebufferTexture");
 glFramebufferTexture(GetU32(GLenum, 0), GetU32(GLenum, 1), GetU32(GLuint, 2), GetI32(GLint, 3));
#else
 WarnNotAvailable("glFramebufferTexture");
#endif
}
void Command::run_glPrimitiveBoundingBox()
{
#if GL_ES_VERSION_3_2
 if (m_packet.NumItems() > 9) WarnDataNotHandled("glPrimitiveBoundingBox");
 glPrimitiveBoundingBox(GetF(GLfloat, 0), GetF(GLfloat, 1), GetF(GLfloat, 2), GetF(GLfloat, 3), GetF(GLfloat, 4), GetF(GLfloat, 5), GetF(GLfloat, 6), GetF(GLfloat, 7));
#else
 WarnNotAvailable("glPrimitiveBoundingBox");
#endif
}
void Command::run_glGetGraphicsResetStatus()
{
#if GL_ES_VERSION_3_2
 if (m_packet.NumItems() > 1) WarnDataNotHandled("glGetGraphicsResetStatus");
 glGetGraphicsResetStatus();
#else
 WarnNotAvailable("glGetGraphicsResetStatus");
#endif
}
void Command::run_glReadnPixels()
{
#if GL_ES_VERSION_3_2
 if (m_packet.NumItems() > 9) WarnDataNotHandled("glReadnPixels");
 glReadnPixels(GetI32(GLint, 0), GetI32(GLint, 1), GetI32(GLsizei, 2), GetI32(GLsizei, 3), GetU32(GLenum, 4), GetU32(GLenum, 5), GetI32(GLsizei, 6), dummyvoid);
#else
 WarnNotAvailable("glReadnPixels");
#endif
}
void Command::run_glGetnUniformfv()
{
#if GL_ES_VERSION_3_2
 if (m_packet.NumItems() > 5) WarnDataNotHandled("glGetnUniformfv");
 glGetnUniformfv(GetProgram(GLuint, 0), GetUniform(1, 0), GetI32(GLsizei, 2), dummyGLfloat);
#else
 WarnNotAvailable("glGetnUniformfv");
#endif
}
void Command::run_glGetnUniformiv()
{
#if GL_ES_VERSION_3_2
 if (m_packet.NumItems() > 5) WarnDataNotHandled("glGetnUniformiv");
 glGetnUniformiv(GetProgram(GLuint, 0), GetUniform(1, 0), GetI32(GLsizei, 2), dummyGLint);
#else
 WarnNotAvailable("glGetnUniformiv");
#endif
}
void Command::run_glGetnUniformuiv()
{
#if GL_ES_VERSION_3_2
 if (m_packet.NumItems() > 5) WarnDataNotHandled("glGetnUniformuiv");
 glGetnUniformuiv(GetProgram(GLuint, 0), GetUniform(1, 0), GetI32(GLsizei, 2), dummyGLuint);
#else
 WarnNotAvailable("glGetnUniformuiv");
#endif
}
void Command::run_glMinSampleShading()
{
#if GL_ES_VERSION_3_2
 if (m_packet.NumItems() > 2) WarnDataNotHandled("glMinSampleShading");
 glMinSampleShading(GetF(GLfloat, 0));
#else
 WarnNotAvailable("glMinSampleShading");
#endif
}
void Command::run_glPatchParameteri()
{
#if GL_ES_VERSION_3_2
 if (m_packet.NumItems() > 3) WarnDataNotHandled("glPatchParameteri");
 glPatchParameteri(GetU32(GLenum, 0), GetI32(GLint, 1));
#else
 WarnNotAvailable("glPatchParameteri");
#endif
}
void Command::run_glTexParameterIiv()
{
#if GL_ES_VERSION_3_2
 if (m_packet.NumItems() > 5) WarnDataNotHandled("glTexParameterIiv");
 glTexParameterIiv(GetU32(GLenum, 0), GetU32(GLenum, 1), GetArrayPtr(const GLint *, 3));
#else
 WarnNotAvailable("glTexParameterIiv");
#endif
}
void Command::run_glTexParameterIuiv()
{
#if GL_ES_VERSION_3_2
 if (m_packet.NumItems() > 5) WarnDataNotHandled("glTexParameterIuiv");
 glTexParameterIuiv(GetU32(GLenum, 0), GetU32(GLenum, 1), GetArrayPtr(const GLuint *, 3));
#else
 WarnNotAvailable("glTexParameterIuiv");
#endif
}
void Command::run_glGetTexParameterIiv()
{
#if GL_ES_VERSION_3_2
 if (m_packet.NumItems() > 4) WarnDataNotHandled("glGetTexParameterIiv");
 glGetTexParameterIiv(GetU32(GLenum, 0), GetU32(GLenum, 1), dummyGLint);
#else
 WarnNotAvailable("glGetTexParameterIiv");
#endif
}
void Command::run_glGetTexParameterIuiv()
{
#if GL_ES_VERSION_3_2
 if (m_packet.NumItems() > 4) WarnDataNotHandled("glGetTexParameterIuiv");
 glGetTexParameterIuiv(GetU32(GLenum, 0), GetU32(GLenum, 1), dummyGLuint);
#else
 WarnNotAvailable("glGetTexParameterIuiv");
#endif
}
void Command::run_glSamplerParameterIiv()
{
#if GL_ES_VERSION_3_2
 if (m_packet.NumItems() > 5) WarnDataNotHandled("glSamplerParameterIiv");
 glSamplerParameterIiv(GetSampler(GLuint, 0), GetU32(GLenum, 1), GetArrayPtr(const GLint *, 3));
#else
 WarnNotAvailable("glSamplerParameterIiv");
#endif
}
void Command::run_glSamplerParameterIuiv()
{
#if GL_ES_VERSION_3_2
 if (m_packet.NumItems() > 5) WarnDataNotHandled("glSamplerParameterIuiv");
 glSamplerParameterIuiv(GetSampler(GLuint, 0), GetU32(GLenum, 1), GetArrayPtr(const GLuint *, 3));
#else
 WarnNotAvailable("glSamplerParameterIuiv");
#endif
}
void Command::run_glGetSamplerParameterIiv()
{
#if GL_ES_VERSION_3_2
 if (m_packet.NumItems() > 4) WarnDataNotHandled("glGetSamplerParameterIiv");
 glGetSamplerParameterIiv(GetSampler(GLuint, 0), GetU32(GLenum, 1), dummyGLint);
#else
 WarnNotAvailable("glGetSamplerParameterIiv");
#endif
}
void Command::run_glGetSamplerParameterIuiv()
{
#if GL_ES_VERSION_3_2
 if (m_packet.NumItems() > 4) WarnDataNotHandled("glGetSamplerParameterIuiv");
 glGetSamplerParameterIuiv(GetSampler(GLuint, 0), GetU32(GLenum, 1), dummyGLuint);
#else
 WarnNotAvailable("glGetSamplerParameterIuiv");
#endif
}
void Command::run_glTexBuffer()
{
#if GL_ES_VERSION_3_2
 if (m_packet.NumItems() > 4) WarnDataNotHandled("glTexBuffer");
 glTexBuffer(GetU32(GLenum, 0), GetU32(GLenum, 1), GetU32(GLuint, 2));
#else
 WarnNotAvailable("glTexBuffer");
#endif
}
void Command::run_glTexBufferRange()
{
#if GL_ES_VERSION_3_2
 if (m_packet.NumItems() > 6) WarnDataNotHandled("glTexBufferRange");
 glTexBufferRange(GetU32(GLenum, 0), GetU32(GLenum, 1), GetU32(GLuint, 2), GetPtr(GLintptr, 3), GetPtr(GLsizeiptr, 4));
#else
 WarnNotAvailable("glTexBufferRange");
#endif
}
void Command::run_glTexStorage3DMultisample()
{
#if GL_ES_VERSION_3_2
 if (m_packet.NumItems() > 8) WarnDataNotHandled("glTexStorage3DMultisample");
 glTexStorage3DMultisample(GetU32(GLenum, 0), GetI32(GLsizei, 1), GetU32(GLenum, 2), GetI32(GLsizei, 3), GetI32(GLsizei, 4), GetI32(GLsizei, 5), GetB(GLboolean, 6));
#else
 WarnNotAvailable("glTexStorage3DMultisample");
#endif
}
void Command::run_eglCreateSync64KHR()
{
#if EGL_KHR_cl_event2
 if (m_packet.NumItems() > 5) WarnDataNotHandled("eglCreateSync64KHR");
 PFNEGLCREATESYNC64KHRPROC f = (PFNEGLCREATESYNC64KHRPROC)eglGetProcAddress("eglCreateSync64KHR");
if (f != NULL) f(GetEGLDisplay(EGLDisplay, 0), GetU32(EGLenum, 1), GetArrayPtr(const EGLAttribKHR *, 3));
#else
 WarnNotAvailable("eglCreateSync64KHR");
#endif
}
void Command::run_eglCreateSyncKHR()
{
#if EGL_KHR_fence_sync
 if (m_packet.NumItems() > 5) WarnDataNotHandled("eglCreateSyncKHR");
 PFNEGLCREATESYNCKHRPROC f = (PFNEGLCREATESYNCKHRPROC)eglGetProcAddress("eglCreateSyncKHR");
if (f != NULL) f(GetEGLDisplay(EGLDisplay, 0), GetU32(EGLenum, 1), GetArrayPtr(const EGLint *, 3));
#else
 WarnNotAvailable("eglCreateSyncKHR");
#endif
}
void Command::run_eglDestroySyncKHR()
{
#if EGL_KHR_fence_sync
 if (m_packet.NumItems() > 3) WarnDataNotHandled("eglDestroySyncKHR");
 PFNEGLDESTROYSYNCKHRPROC f = (PFNEGLDESTROYSYNCKHRPROC)eglGetProcAddress("eglDestroySyncKHR");
if (f != NULL) f(GetEGLDisplay(EGLDisplay, 0), GetEGLSync(EGLSyncKHR, 1));
#else
 WarnNotAvailable("eglDestroySyncKHR");
#endif
}
void Command::run_eglClientWaitSyncKHR()
{
#if EGL_KHR_fence_sync
 if (m_packet.NumItems() > 5) WarnDataNotHandled("eglClientWaitSyncKHR");
 PFNEGLCLIENTWAITSYNCKHRPROC f = (PFNEGLCLIENTWAITSYNCKHRPROC)eglGetProcAddress("eglClientWaitSyncKHR");
if (f != NULL) f(GetEGLDisplay(EGLDisplay, 0), GetEGLSync(EGLSyncKHR, 1), GetI32(EGLint, 2), GetU32(EGLTimeKHR, 3));
#else
 WarnNotAvailable("eglClientWaitSyncKHR");
#endif
}
void Command::run_eglGetSyncAttribKHR()
{
#if EGL_KHR_fence_sync
 if (m_packet.NumItems() > 5) WarnDataNotHandled("eglGetSyncAttribKHR");
 PFNEGLGETSYNCATTRIBKHRPROC f = (PFNEGLGETSYNCATTRIBKHRPROC)eglGetProcAddress("eglGetSyncAttribKHR");
if (f != NULL) f(GetEGLDisplay(EGLDisplay, 0), GetEGLSync(EGLSyncKHR, 1), GetI32(EGLint, 2), dummyEGLint);
#else
 WarnNotAvailable("eglGetSyncAttribKHR");
#endif
}
void Command::run_eglCreateImageKHR()
{
#if EGL_KHR_image
 if (m_packet.NumItems() > 7) WarnDataNotHandled("eglCreateImageKHR");
 PFNEGLCREATEIMAGEKHRPROC f = (PFNEGLCREATEIMAGEKHRPROC)eglGetProcAddress("eglCreateImageKHR");
if (f != NULL) f(GetEGLDisplay(EGLDisplay, 0), GetEGLContext(EGLContext, 1), GetU32(EGLenum, 2), GetEGLClientBuffer(EGLClientBuffer, 3), GetArrayPtr(const EGLint *, 5));
#else
 WarnNotAvailable("eglCreateImageKHR");
#endif
}
void Command::run_eglDestroyImageKHR()
{
#if EGL_KHR_image
 if (m_packet.NumItems() > 3) WarnDataNotHandled("eglDestroyImageKHR");
 PFNEGLDESTROYIMAGEKHRPROC f = (PFNEGLDESTROYIMAGEKHRPROC)eglGetProcAddress("eglDestroyImageKHR");
if (f != NULL) f(GetEGLDisplay(EGLDisplay, 0), GetEGLImage(EGLImageKHR, 1));
#else
 WarnNotAvailable("eglDestroyImageKHR");
#endif
}
void Command::run_eglWaitSyncKHR()
{
#if EGL_KHR_wait_sync
 if (m_packet.NumItems() > 4) WarnDataNotHandled("eglWaitSyncKHR");
 PFNEGLWAITSYNCKHRPROC f = (PFNEGLWAITSYNCKHRPROC)eglGetProcAddress("eglWaitSyncKHR");
if (f != NULL) f(GetEGLDisplay(EGLDisplay, 0), GetEGLSync(EGLSyncKHR, 1), GetI32(EGLint, 2));
#else
 WarnNotAvailable("eglWaitSyncKHR");
#endif
}
void Command::run_glBlendBarrierKHR()
{
#if GL_KHR_blend_equation_advanced
 if (m_packet.NumItems() > 1) WarnDataNotHandled("glBlendBarrierKHR");
 PFNGLBLENDBARRIERKHRPROC f = (PFNGLBLENDBARRIERKHRPROC)eglGetProcAddress("glBlendBarrierKHR");
if (f != NULL) f();
#else
 WarnNotAvailable("glBlendBarrierKHR");
#endif
}
void Command::run_glDebugMessageControlKHR()
{
#if GL_KHR_debug
 if (m_packet.NumItems() > 8) WarnDataNotHandled("glDebugMessageControlKHR");
 PFNGLDEBUGMESSAGECONTROLKHRPROC f = (PFNGLDEBUGMESSAGECONTROLKHRPROC)eglGetProcAddress("glDebugMessageControlKHR");
if (f != NULL) f(GetU32(GLenum, 0), GetU32(GLenum, 1), GetU32(GLenum, 2), GetI32(GLsizei, 3), GetArrayPtr(const GLuint *, 6), GetB(GLboolean, 5));
#else
 WarnNotAvailable("glDebugMessageControlKHR");
#endif
}
void Command::run_glDebugMessageInsertKHR()
{
#if GL_KHR_debug
 if (m_packet.NumItems() > 7) WarnDataNotHandled("glDebugMessageInsertKHR");
 PFNGLDEBUGMESSAGEINSERTKHRPROC f = (PFNGLDEBUGMESSAGEINSERTKHRPROC)eglGetProcAddress("glDebugMessageInsertKHR");
if (f != NULL) f(GetU32(GLenum, 0), GetU32(GLenum, 1), GetU32(GLuint, 2), GetU32(GLenum, 3), GetI32(GLsizei, 4), GetCP(const GLchar *, 5));
#else
 WarnNotAvailable("glDebugMessageInsertKHR");
#endif
}
void Command::run_glDebugMessageCallbackKHR()
{
#if GL_KHR_debug
 if (m_packet.NumItems() > 4) WarnDataNotHandled("glDebugMessageCallbackKHR");
 PFNGLDEBUGMESSAGECALLBACKKHRPROC f = (PFNGLDEBUGMESSAGECALLBACKKHRPROC)eglGetProcAddress("glDebugMessageCallbackKHR");
if (f != NULL) f(GetPtr(GLDEBUGPROCKHR, 0), GetArrayPtr(const void *, 2));
#else
 WarnNotAvailable("glDebugMessageCallbackKHR");
#endif
}
void Command::run_glGetDebugMessageLogKHR()
{
#if GL_KHR_debug
 if (m_packet.NumItems() > 9) WarnDataNotHandled("glGetDebugMessageLogKHR");
 PFNGLGETDEBUGMESSAGELOGKHRPROC f = (PFNGLGETDEBUGMESSAGELOGKHRPROC)eglGetProcAddress("glGetDebugMessageLogKHR");
if (f != NULL) f(GetU32(GLuint, 0), GetI32(GLsizei, 1), dummyGLenum, dummyGLenum, dummyGLuint, dummyGLenum, dummyGLsizei, dummyGLchar);
#else
 WarnNotAvailable("glGetDebugMessageLogKHR");
#endif
}
void Command::run_glPushDebugGroupKHR()
{
#if GL_KHR_debug
 if (m_packet.NumItems() > 5) WarnDataNotHandled("glPushDebugGroupKHR");
 PFNGLPUSHDEBUGGROUPKHRPROC f = (PFNGLPUSHDEBUGGROUPKHRPROC)eglGetProcAddress("glPushDebugGroupKHR");
if (f != NULL) f(GetU32(GLenum, 0), GetU32(GLuint, 1), GetI32(GLsizei, 2), GetCP(const GLchar *, 3));
#else
 WarnNotAvailable("glPushDebugGroupKHR");
#endif
}
void Command::run_glPopDebugGroupKHR()
{
#if GL_KHR_debug
 if (m_packet.NumItems() > 1) WarnDataNotHandled("glPopDebugGroupKHR");
 PFNGLPOPDEBUGGROUPKHRPROC f = (PFNGLPOPDEBUGGROUPKHRPROC)eglGetProcAddress("glPopDebugGroupKHR");
if (f != NULL) f();
#else
 WarnNotAvailable("glPopDebugGroupKHR");
#endif
}
void Command::run_glObjectLabelKHR()
{
#if GL_KHR_debug
 if (m_packet.NumItems() > 5) WarnDataNotHandled("glObjectLabelKHR");
 PFNGLOBJECTLABELKHRPROC f = (PFNGLOBJECTLABELKHRPROC)eglGetProcAddress("glObjectLabelKHR");
if (f != NULL) f(GetU32(GLenum, 0), GetU32(GLuint, 1), GetI32(GLsizei, 2), GetCP(const GLchar *, 3));
#else
 WarnNotAvailable("glObjectLabelKHR");
#endif
}
void Command::run_glGetObjectLabelKHR()
{
#if GL_KHR_debug
 if (m_packet.NumItems() > 6) WarnDataNotHandled("glGetObjectLabelKHR");
 PFNGLGETOBJECTLABELKHRPROC f = (PFNGLGETOBJECTLABELKHRPROC)eglGetProcAddress("glGetObjectLabelKHR");
if (f != NULL) f(GetU32(GLenum, 0), GetU32(GLuint, 1), GetI32(GLsizei, 2), dummyGLsizei, dummyGLchar);
#else
 WarnNotAvailable("glGetObjectLabelKHR");
#endif
}
void Command::run_glObjectPtrLabelKHR()
{
#if GL_KHR_debug
 if (m_packet.NumItems() > 5) WarnDataNotHandled("glObjectPtrLabelKHR");
 PFNGLOBJECTPTRLABELKHRPROC f = (PFNGLOBJECTPTRLABELKHRPROC)eglGetProcAddress("glObjectPtrLabelKHR");
if (f != NULL) f(GetArrayPtr(const void *, 3), GetI32(GLsizei, 1), GetCP(const GLchar *, 2));
#else
 WarnNotAvailable("glObjectPtrLabelKHR");
#endif
}
void Command::run_glGetObjectPtrLabelKHR()
{
#if GL_KHR_debug
 if (m_packet.NumItems() > 6) WarnDataNotHandled("glGetObjectPtrLabelKHR");
 PFNGLGETOBJECTPTRLABELKHRPROC f = (PFNGLGETOBJECTPTRLABELKHRPROC)eglGetProcAddress("glGetObjectPtrLabelKHR");
if (f != NULL) f(GetArrayPtr(const void *, 4), GetI32(GLsizei, 1), dummyGLsizei, dummyGLchar);
#else
 WarnNotAvailable("glGetObjectPtrLabelKHR");
#endif
}
void Command::run_glGetPointervKHR()
{
#if GL_KHR_debug
 if (m_packet.NumItems() > 3) WarnDataNotHandled("glGetPointervKHR");
 PFNGLGETPOINTERVKHRPROC f = (PFNGLGETPOINTERVKHRPROC)eglGetProcAddress("glGetPointervKHR");
if (f != NULL) f(GetU32(GLenum, 0), dummyvoidptr);
#else
 WarnNotAvailable("glGetPointervKHR");
#endif
}
void Command::run_glEGLImageTargetTexture2DOES()
{
#if GL_OES_EGL_image
 if (m_packet.NumItems() > 3) WarnDataNotHandled("glEGLImageTargetTexture2DOES");
 PFNGLEGLIMAGETARGETTEXTURE2DOESPROC f = (PFNGLEGLIMAGETARGETTEXTURE2DOESPROC)eglGetProcAddress("glEGLImageTargetTexture2DOES");
if (f != NULL) f(GetU32(GLenum, 0), GetEGLImage(GLeglImageOES, 1));
#else
 WarnNotAvailable("glEGLImageTargetTexture2DOES");
#endif
}
void Command::run_glEGLImageTargetRenderbufferStorageOES()
{
#if GL_OES_EGL_image
 if (m_packet.NumItems() > 3) WarnDataNotHandled("glEGLImageTargetRenderbufferStorageOES");
 PFNGLEGLIMAGETARGETRENDERBUFFERSTORAGEOESPROC f = (PFNGLEGLIMAGETARGETRENDERBUFFERSTORAGEOESPROC)eglGetProcAddress("glEGLImageTargetRenderbufferStorageOES");
if (f != NULL) f(GetU32(GLenum, 0), GetEGLImage(GLeglImageOES, 1));
#else
 WarnNotAvailable("glEGLImageTargetRenderbufferStorageOES");
#endif
}
void Command::run_glEnableiOES()
{
#if GL_OES_draw_buffers_indexed
 if (m_packet.NumItems() > 3) WarnDataNotHandled("glEnableiOES");
 PFNGLENABLEIOESPROC f = (PFNGLENABLEIOESPROC)eglGetProcAddress("glEnableiOES");
if (f != NULL) f(GetU32(GLenum, 0), GetU32(GLuint, 1));
#else
 WarnNotAvailable("glEnableiOES");
#endif
}
void Command::run_glDisableiOES()
{
#if GL_OES_draw_buffers_indexed
 if (m_packet.NumItems() > 3) WarnDataNotHandled("glDisableiOES");
 PFNGLDISABLEIOESPROC f = (PFNGLDISABLEIOESPROC)eglGetProcAddress("glDisableiOES");
if (f != NULL) f(GetU32(GLenum, 0), GetU32(GLuint, 1));
#else
 WarnNotAvailable("glDisableiOES");
#endif
}
void Command::run_glBlendEquationiOES()
{
#if GL_OES_draw_buffers_indexed
 if (m_packet.NumItems() > 3) WarnDataNotHandled("glBlendEquationiOES");
 PFNGLBLENDEQUATIONIOESPROC f = (PFNGLBLENDEQUATIONIOESPROC)eglGetProcAddress("glBlendEquationiOES");
if (f != NULL) f(GetU32(GLuint, 0), GetU32(GLenum, 1));
#else
 WarnNotAvailable("glBlendEquationiOES");
#endif
}
void Command::run_glBlendEquationSeparateiOES()
{
#if GL_OES_draw_buffers_indexed
 if (m_packet.NumItems() > 4) WarnDataNotHandled("glBlendEquationSeparateiOES");
 PFNGLBLENDEQUATIONSEPARATEIOESPROC f = (PFNGLBLENDEQUATIONSEPARATEIOESPROC)eglGetProcAddress("glBlendEquationSeparateiOES");
if (f != NULL) f(GetU32(GLuint, 0), GetU32(GLenum, 1), GetU32(GLenum, 2));
#else
 WarnNotAvailable("glBlendEquationSeparateiOES");
#endif
}
void Command::run_glBlendFunciOES()
{
#if GL_OES_draw_buffers_indexed
 if (m_packet.NumItems() > 4) WarnDataNotHandled("glBlendFunciOES");
 PFNGLBLENDFUNCIOESPROC f = (PFNGLBLENDFUNCIOESPROC)eglGetProcAddress("glBlendFunciOES");
if (f != NULL) f(GetU32(GLuint, 0), GetU32(GLenum, 1), GetU32(GLenum, 2));
#else
 WarnNotAvailable("glBlendFunciOES");
#endif
}
void Command::run_glBlendFuncSeparateiOES()
{
#if GL_OES_draw_buffers_indexed
 if (m_packet.NumItems() > 6) WarnDataNotHandled("glBlendFuncSeparateiOES");
 PFNGLBLENDFUNCSEPARATEIOESPROC f = (PFNGLBLENDFUNCSEPARATEIOESPROC)eglGetProcAddress("glBlendFuncSeparateiOES");
if (f != NULL) f(GetU32(GLuint, 0), GetU32(GLenum, 1), GetU32(GLenum, 2), GetU32(GLenum, 3), GetU32(GLenum, 4));
#else
 WarnNotAvailable("glBlendFuncSeparateiOES");
#endif
}
void Command::run_glColorMaskiOES()
{
#if GL_OES_draw_buffers_indexed
 if (m_packet.NumItems() > 6) WarnDataNotHandled("glColorMaskiOES");
 PFNGLCOLORMASKIOESPROC f = (PFNGLCOLORMASKIOESPROC)eglGetProcAddress("glColorMaskiOES");
if (f != NULL) f(GetU32(GLuint, 0), GetB(GLboolean, 1), GetB(GLboolean, 2), GetB(GLboolean, 3), GetB(GLboolean, 4));
#else
 WarnNotAvailable("glColorMaskiOES");
#endif
}
void Command::run_glIsEnablediOES()
{
#if GL_OES_draw_buffers_indexed
 if (m_packet.NumItems() > 3) WarnDataNotHandled("glIsEnablediOES");
 PFNGLISENABLEDIOESPROC f = (PFNGLISENABLEDIOESPROC)eglGetProcAddress("glIsEnablediOES");
if (f != NULL) f(GetU32(GLenum, 0), GetU32(GLuint, 1));
#else
 WarnNotAvailable("glIsEnablediOES");
#endif
}
void Command::run_glDrawElementsBaseVertexOES()
{
#if GL_OES_draw_elements_base_vertex
 if (m_packet.NumItems() > 7) WarnDataNotHandled("glDrawElementsBaseVertexOES");
 PFNGLDRAWELEMENTSBASEVERTEXOESPROC f = (PFNGLDRAWELEMENTSBASEVERTEXOESPROC)eglGetProcAddress("glDrawElementsBaseVertexOES");
if (f != NULL) f(GetU32(GLenum, 0), GetI32(GLsizei, 1), GetU32(GLenum, 2), GetArrayPtr(const void *, 5), GetI32(GLint, 4));
#else
 WarnNotAvailable("glDrawElementsBaseVertexOES");
#endif
}
void Command::run_glDrawRangeElementsBaseVertexOES()
{
#if GL_OES_draw_elements_base_vertex
 if (m_packet.NumItems() > 9) WarnDataNotHandled("glDrawRangeElementsBaseVertexOES");
 PFNGLDRAWRANGEELEMENTSBASEVERTEXOESPROC f = (PFNGLDRAWRANGEELEMENTSBASEVERTEXOESPROC)eglGetProcAddress("glDrawRangeElementsBaseVertexOES");
if (f != NULL) f(GetU32(GLenum, 0), GetU32(GLuint, 1), GetU32(GLuint, 2), GetI32(GLsizei, 3), GetU32(GLenum, 4), GetArrayPtr(const void *, 7), GetI32(GLint, 6));
#else
 WarnNotAvailable("glDrawRangeElementsBaseVertexOES");
#endif
}
void Command::run_glDrawElementsInstancedBaseVertexOES()
{
#if GL_OES_draw_elements_base_vertex
 if (m_packet.NumItems() > 8) WarnDataNotHandled("glDrawElementsInstancedBaseVertexOES");
 PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXOESPROC f = (PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXOESPROC)eglGetProcAddress("glDrawElementsInstancedBaseVertexOES");
if (f != NULL) f(GetU32(GLenum, 0), GetI32(GLsizei, 1), GetU32(GLenum, 2), GetArrayPtr(const void *, 6), GetI32(GLsizei, 4), GetI32(GLint, 5));
#else
 WarnNotAvailable("glDrawElementsInstancedBaseVertexOES");
#endif
}
void Command::run_glMultiDrawElementsBaseVertexOES()
{
#if GL_OES_draw_elements_base_vertex
 if (m_packet.NumItems() > 10) WarnDataNotHandled("glMultiDrawElementsBaseVertexOES");
 PFNGLMULTIDRAWELEMENTSBASEVERTEXOESPROC f = (PFNGLMULTIDRAWELEMENTSBASEVERTEXOESPROC)eglGetProcAddress("glMultiDrawElementsBaseVertexOES");
if (f != NULL) f(GetU32(GLenum, 0), GetArrayPtr(const GLsizei *, 6), GetU32(GLenum, 2), GetArrayPtr(const void *const*, 7), GetI32(GLsizei, 4), GetArrayPtr(const GLint *, 8));
#else
 WarnNotAvailable("glMultiDrawElementsBaseVertexOES");
#endif
}
void Command::run_glDrawTexsOES()
{
#if GL_OES_draw_texture
 if (m_packet.NumItems() > 6) WarnDataNotHandled("glDrawTexsOES");
 PFNGLDRAWTEXSOESPROC f = (PFNGLDRAWTEXSOESPROC)eglGetProcAddress("glDrawTexsOES");
if (f != NULL) f(GetI16(GLshort, 0), GetI16(GLshort, 1), GetI16(GLshort, 2), GetI16(GLshort, 3), GetI16(GLshort, 4));
#else
 WarnNotAvailable("glDrawTexsOES");
#endif
}
void Command::run_glDrawTexiOES()
{
#if GL_OES_draw_texture
 if (m_packet.NumItems() > 6) WarnDataNotHandled("glDrawTexiOES");
 PFNGLDRAWTEXIOESPROC f = (PFNGLDRAWTEXIOESPROC)eglGetProcAddress("glDrawTexiOES");
if (f != NULL) f(GetI32(GLint, 0), GetI32(GLint, 1), GetI32(GLint, 2), GetI32(GLint, 3), GetI32(GLint, 4));
#else
 WarnNotAvailable("glDrawTexiOES");
#endif
}
void Command::run_glDrawTexxOES()
{
#if GL_OES_draw_texture
 if (m_packet.NumItems() > 6) WarnDataNotHandled("glDrawTexxOES");
 PFNGLDRAWTEXXOESPROC f = (PFNGLDRAWTEXXOESPROC)eglGetProcAddress("glDrawTexxOES");
if (f != NULL) f(GetU32(GLfixed, 0), GetU32(GLfixed, 1), GetU32(GLfixed, 2), GetU32(GLfixed, 3), GetU32(GLfixed, 4));
#else
 WarnNotAvailable("glDrawTexxOES");
#endif
}
void Command::run_glDrawTexsvOES()
{
#if GL_OES_draw_texture
 if (m_packet.NumItems() > 3) WarnDataNotHandled("glDrawTexsvOES");
 PFNGLDRAWTEXSVOESPROC f = (PFNGLDRAWTEXSVOESPROC)eglGetProcAddress("glDrawTexsvOES");
if (f != NULL) f(GetArrayPtr(const GLshort *, 1));
#else
 WarnNotAvailable("glDrawTexsvOES");
#endif
}
void Command::run_glDrawTexivOES()
{
#if GL_OES_draw_texture
 if (m_packet.NumItems() > 3) WarnDataNotHandled("glDrawTexivOES");
 PFNGLDRAWTEXIVOESPROC f = (PFNGLDRAWTEXIVOESPROC)eglGetProcAddress("glDrawTexivOES");
if (f != NULL) f(GetArrayPtr(const GLint *, 1));
#else
 WarnNotAvailable("glDrawTexivOES");
#endif
}
void Command::run_glDrawTexxvOES()
{
#if GL_OES_draw_texture
 if (m_packet.NumItems() > 3) WarnDataNotHandled("glDrawTexxvOES");
 PFNGLDRAWTEXXVOESPROC f = (PFNGLDRAWTEXXVOESPROC)eglGetProcAddress("glDrawTexxvOES");
if (f != NULL) f(GetArrayPtr(const GLfixed *, 1));
#else
 WarnNotAvailable("glDrawTexxvOES");
#endif
}
void Command::run_glDrawTexfOES()
{
#if GL_OES_draw_texture
 if (m_packet.NumItems() > 6) WarnDataNotHandled("glDrawTexfOES");
 PFNGLDRAWTEXFOESPROC f = (PFNGLDRAWTEXFOESPROC)eglGetProcAddress("glDrawTexfOES");
if (f != NULL) f(GetF(GLfloat, 0), GetF(GLfloat, 1), GetF(GLfloat, 2), GetF(GLfloat, 3), GetF(GLfloat, 4));
#else
 WarnNotAvailable("glDrawTexfOES");
#endif
}
void Command::run_glDrawTexfvOES()
{
#if GL_OES_draw_texture
 if (m_packet.NumItems() > 3) WarnDataNotHandled("glDrawTexfvOES");
 PFNGLDRAWTEXFVOESPROC f = (PFNGLDRAWTEXFVOESPROC)eglGetProcAddress("glDrawTexfvOES");
if (f != NULL) f(GetArrayPtr(const GLfloat *, 1));
#else
 WarnNotAvailable("glDrawTexfvOES");
#endif
}
void Command::run_glIsRenderbufferOES()
{
#if GL_OES_framebuffer_object
 if (m_packet.NumItems() > 2) WarnDataNotHandled("glIsRenderbufferOES");
 PFNGLISRENDERBUFFEROESPROC f = (PFNGLISRENDERBUFFEROESPROC)eglGetProcAddress("glIsRenderbufferOES");
if (f != NULL) f(GetU32(GLuint, 0));
#else
 WarnNotAvailable("glIsRenderbufferOES");
#endif
}
void Command::run_glBindRenderbufferOES()
{
#if GL_OES_framebuffer_object
 if (m_packet.NumItems() > 3) WarnDataNotHandled("glBindRenderbufferOES");
 PFNGLBINDRENDERBUFFEROESPROC f = (PFNGLBINDRENDERBUFFEROESPROC)eglGetProcAddress("glBindRenderbufferOES");
if (f != NULL) f(GetU32(GLenum, 0), GetU32(GLuint, 1));
#else
 WarnNotAvailable("glBindRenderbufferOES");
#endif
}
void Command::run_glDeleteRenderbuffersOES()
{
#if GL_OES_framebuffer_object
 if (m_packet.NumItems() > 4) WarnDataNotHandled("glDeleteRenderbuffersOES");
 PFNGLDELETERENDERBUFFERSOESPROC f = (PFNGLDELETERENDERBUFFERSOESPROC)eglGetProcAddress("glDeleteRenderbuffersOES");
if (f != NULL) f(GetI32(GLsizei, 0), GetArrayPtr(const GLuint *, 2));
#else
 WarnNotAvailable("glDeleteRenderbuffersOES");
#endif
}
void Command::run_glGenRenderbuffersOES()
{
#if GL_OES_framebuffer_object
 if (m_packet.NumItems() > 3) WarnDataNotHandled("glGenRenderbuffersOES");
 PFNGLGENRENDERBUFFERSOESPROC f = (PFNGLGENRENDERBUFFERSOESPROC)eglGetProcAddress("glGenRenderbuffersOES");
if (f != NULL) f(GetI32(GLsizei, 0), dummyGLuint);
#else
 WarnNotAvailable("glGenRenderbuffersOES");
#endif
}
void Command::run_glRenderbufferStorageOES()
{
#if GL_OES_framebuffer_object
 if (m_packet.NumItems() > 5) WarnDataNotHandled("glRenderbufferStorageOES");
 PFNGLRENDERBUFFERSTORAGEOESPROC f = (PFNGLRENDERBUFFERSTORAGEOESPROC)eglGetProcAddress("glRenderbufferStorageOES");
if (f != NULL) f(GetU32(GLenum, 0), GetU32(GLenum, 1), GetI32(GLsizei, 2), GetI32(GLsizei, 3));
#else
 WarnNotAvailable("glRenderbufferStorageOES");
#endif
}
void Command::run_glGetRenderbufferParameterivOES()
{
#if GL_OES_framebuffer_object
 if (m_packet.NumItems() > 4) WarnDataNotHandled("glGetRenderbufferParameterivOES");
 PFNGLGETRENDERBUFFERPARAMETERIVOESPROC f = (PFNGLGETRENDERBUFFERPARAMETERIVOESPROC)eglGetProcAddress("glGetRenderbufferParameterivOES");
if (f != NULL) f(GetU32(GLenum, 0), GetU32(GLenum, 1), dummyGLint);
#else
 WarnNotAvailable("glGetRenderbufferParameterivOES");
#endif
}
void Command::run_glIsFramebufferOES()
{
#if GL_OES_framebuffer_object
 if (m_packet.NumItems() > 2) WarnDataNotHandled("glIsFramebufferOES");
 PFNGLISFRAMEBUFFEROESPROC f = (PFNGLISFRAMEBUFFEROESPROC)eglGetProcAddress("glIsFramebufferOES");
if (f != NULL) f(GetU32(GLuint, 0));
#else
 WarnNotAvailable("glIsFramebufferOES");
#endif
}
void Command::run_glBindFramebufferOES()
{
#if GL_OES_framebuffer_object
 if (m_packet.NumItems() > 3) WarnDataNotHandled("glBindFramebufferOES");
 PFNGLBINDFRAMEBUFFEROESPROC f = (PFNGLBINDFRAMEBUFFEROESPROC)eglGetProcAddress("glBindFramebufferOES");
if (f != NULL) f(GetU32(GLenum, 0), GetU32(GLuint, 1));
#else
 WarnNotAvailable("glBindFramebufferOES");
#endif
}
void Command::run_glDeleteFramebuffersOES()
{
#if GL_OES_framebuffer_object
 if (m_packet.NumItems() > 4) WarnDataNotHandled("glDeleteFramebuffersOES");
 PFNGLDELETEFRAMEBUFFERSOESPROC f = (PFNGLDELETEFRAMEBUFFERSOESPROC)eglGetProcAddress("glDeleteFramebuffersOES");
if (f != NULL) f(GetI32(GLsizei, 0), GetArrayPtr(const GLuint *, 2));
#else
 WarnNotAvailable("glDeleteFramebuffersOES");
#endif
}
void Command::run_glGenFramebuffersOES()
{
#if GL_OES_framebuffer_object
 if (m_packet.NumItems() > 3) WarnDataNotHandled("glGenFramebuffersOES");
 PFNGLGENFRAMEBUFFERSOESPROC f = (PFNGLGENFRAMEBUFFERSOESPROC)eglGetProcAddress("glGenFramebuffersOES");
if (f != NULL) f(GetI32(GLsizei, 0), dummyGLuint);
#else
 WarnNotAvailable("glGenFramebuffersOES");
#endif
}
void Command::run_glCheckFramebufferStatusOES()
{
#if GL_OES_framebuffer_object
 if (m_packet.NumItems() > 2) WarnDataNotHandled("glCheckFramebufferStatusOES");
 PFNGLCHECKFRAMEBUFFERSTATUSOESPROC f = (PFNGLCHECKFRAMEBUFFERSTATUSOESPROC)eglGetProcAddress("glCheckFramebufferStatusOES");
if (f != NULL) f(GetU32(GLenum, 0));
#else
 WarnNotAvailable("glCheckFramebufferStatusOES");
#endif
}
void Command::run_glFramebufferRenderbufferOES()
{
#if GL_OES_framebuffer_object
 if (m_packet.NumItems() > 5) WarnDataNotHandled("glFramebufferRenderbufferOES");
 PFNGLFRAMEBUFFERRENDERBUFFEROESPROC f = (PFNGLFRAMEBUFFERRENDERBUFFEROESPROC)eglGetProcAddress("glFramebufferRenderbufferOES");
if (f != NULL) f(GetU32(GLenum, 0), GetU32(GLenum, 1), GetU32(GLenum, 2), GetU32(GLuint, 3));
#else
 WarnNotAvailable("glFramebufferRenderbufferOES");
#endif
}
void Command::run_glFramebufferTexture2DOES()
{
#if GL_OES_framebuffer_object
 if (m_packet.NumItems() > 6) WarnDataNotHandled("glFramebufferTexture2DOES");
 PFNGLFRAMEBUFFERTEXTURE2DOESPROC f = (PFNGLFRAMEBUFFERTEXTURE2DOESPROC)eglGetProcAddress("glFramebufferTexture2DOES");
if (f != NULL) f(GetU32(GLenum, 0), GetU32(GLenum, 1), GetU32(GLenum, 2), GetU32(GLuint, 3), GetI32(GLint, 4));
#else
 WarnNotAvailable("glFramebufferTexture2DOES");
#endif
}
void Command::run_glGetFramebufferAttachmentParameterivOES()
{
#if GL_OES_framebuffer_object
 if (m_packet.NumItems() > 5) WarnDataNotHandled("glGetFramebufferAttachmentParameterivOES");
 PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVOESPROC f = (PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVOESPROC)eglGetProcAddress("glGetFramebufferAttachmentParameterivOES");
if (f != NULL) f(GetU32(GLenum, 0), GetU32(GLenum, 1), GetU32(GLenum, 2), dummyGLint);
#else
 WarnNotAvailable("glGetFramebufferAttachmentParameterivOES");
#endif
}
void Command::run_glGenerateMipmapOES()
{
#if GL_OES_framebuffer_object
 if (m_packet.NumItems() > 2) WarnDataNotHandled("glGenerateMipmapOES");
 PFNGLGENERATEMIPMAPOESPROC f = (PFNGLGENERATEMIPMAPOESPROC)eglGetProcAddress("glGenerateMipmapOES");
if (f != NULL) f(GetU32(GLenum, 0));
#else
 WarnNotAvailable("glGenerateMipmapOES");
#endif
}
void Command::run_glFramebufferTextureOES()
{
#if GL_OES_geometry_shader
 if (m_packet.NumItems() > 5) WarnDataNotHandled("glFramebufferTextureOES");
 PFNGLFRAMEBUFFERTEXTUREOESPROC f = (PFNGLFRAMEBUFFERTEXTUREOESPROC)eglGetProcAddress("glFramebufferTextureOES");
if (f != NULL) f(GetU32(GLenum, 0), GetU32(GLenum, 1), GetU32(GLuint, 2), GetI32(GLint, 3));
#else
 WarnNotAvailable("glFramebufferTextureOES");
#endif
}
void Command::run_glMapBufferOES()
{
#if GL_OES_mapbuffer
 if (m_packet.NumItems() > 3) WarnDataNotHandled("glMapBufferOES");
 PFNGLMAPBUFFEROESPROC f = (PFNGLMAPBUFFEROESPROC)eglGetProcAddress("glMapBufferOES");
if (f != NULL) f(GetU32(GLenum, 0), GetU32(GLenum, 1));
#else
 WarnNotAvailable("glMapBufferOES");
#endif
}
void Command::run_glUnmapBufferOES()
{
#if GL_OES_mapbuffer
 if (m_packet.NumItems() > 2) WarnDataNotHandled("glUnmapBufferOES");
 PFNGLUNMAPBUFFEROESPROC f = (PFNGLUNMAPBUFFEROESPROC)eglGetProcAddress("glUnmapBufferOES");
if (f != NULL) f(GetU32(GLenum, 0));
#else
 WarnNotAvailable("glUnmapBufferOES");
#endif
}
void Command::run_glGetBufferPointervOES()
{
#if GL_OES_mapbuffer
 if (m_packet.NumItems() > 4) WarnDataNotHandled("glGetBufferPointervOES");
 PFNGLGETBUFFERPOINTERVOESPROC f = (PFNGLGETBUFFERPOINTERVOESPROC)eglGetProcAddress("glGetBufferPointervOES");
if (f != NULL) f(GetU32(GLenum, 0), GetU32(GLenum, 1), dummyvoidptr);
#else
 WarnNotAvailable("glGetBufferPointervOES");
#endif
}
void Command::run_glPointSizePointerOES()
{
#if GL_OES_point_size_array
 if (m_packet.NumItems() > 5) WarnDataNotHandled("glPointSizePointerOES");
 PFNGLPOINTSIZEPOINTEROESPROC f = (PFNGLPOINTSIZEPOINTEROESPROC)eglGetProcAddress("glPointSizePointerOES");
if (f != NULL) f(GetU32(GLenum, 0), GetI32(GLsizei, 1), GetArrayPtr(const void *, 3));
#else
 WarnNotAvailable("glPointSizePointerOES");
#endif
}
void Command::run_glPrimitiveBoundingBoxOES()
{
#if GL_OES_primitive_bounding_box
 if (m_packet.NumItems() > 9) WarnDataNotHandled("glPrimitiveBoundingBoxOES");
 PFNGLPRIMITIVEBOUNDINGBOXOESPROC f = (PFNGLPRIMITIVEBOUNDINGBOXOESPROC)eglGetProcAddress("glPrimitiveBoundingBoxOES");
if (f != NULL) f(GetF(GLfloat, 0), GetF(GLfloat, 1), GetF(GLfloat, 2), GetF(GLfloat, 3), GetF(GLfloat, 4), GetF(GLfloat, 5), GetF(GLfloat, 6), GetF(GLfloat, 7));
#else
 WarnNotAvailable("glPrimitiveBoundingBoxOES");
#endif
}
void Command::run_glQueryMatrixxOES()
{
#if GL_OES_query_matrix
 if (m_packet.NumItems() > 3) WarnDataNotHandled("glQueryMatrixxOES");
 PFNGLQUERYMATRIXXOESPROC f = (PFNGLQUERYMATRIXXOESPROC)eglGetProcAddress("glQueryMatrixxOES");
if (f != NULL) f(dummyGLfixed, dummyGLint);
#else
 WarnNotAvailable("glQueryMatrixxOES");
#endif
}
void Command::run_glMinSampleShadingOES()
{
#if GL_OES_sample_shading
 if (m_packet.NumItems() > 2) WarnDataNotHandled("glMinSampleShadingOES");
 PFNGLMINSAMPLESHADINGOESPROC f = (PFNGLMINSAMPLESHADINGOESPROC)eglGetProcAddress("glMinSampleShadingOES");
if (f != NULL) f(GetF(GLfloat, 0));
#else
 WarnNotAvailable("glMinSampleShadingOES");
#endif
}
void Command::run_glPatchParameteriOES()
{
#if GL_OES_tessellation_shader
 if (m_packet.NumItems() > 3) WarnDataNotHandled("glPatchParameteriOES");
 PFNGLPATCHPARAMETERIOESPROC f = (PFNGLPATCHPARAMETERIOESPROC)eglGetProcAddress("glPatchParameteriOES");
if (f != NULL) f(GetU32(GLenum, 0), GetI32(GLint, 1));
#else
 WarnNotAvailable("glPatchParameteriOES");
#endif
}
void Command::run_glTexParameterIivOES()
{
#if GL_OES_texture_border_clamp
 if (m_packet.NumItems() > 5) WarnDataNotHandled("glTexParameterIivOES");
 PFNGLTEXPARAMETERIIVOESPROC f = (PFNGLTEXPARAMETERIIVOESPROC)eglGetProcAddress("glTexParameterIivOES");
if (f != NULL) f(GetU32(GLenum, 0), GetU32(GLenum, 1), GetArrayPtr(const GLint *, 3));
#else
 WarnNotAvailable("glTexParameterIivOES");
#endif
}
void Command::run_glTexParameterIuivOES()
{
#if GL_OES_texture_border_clamp
 if (m_packet.NumItems() > 5) WarnDataNotHandled("glTexParameterIuivOES");
 PFNGLTEXPARAMETERIUIVOESPROC f = (PFNGLTEXPARAMETERIUIVOESPROC)eglGetProcAddress("glTexParameterIuivOES");
if (f != NULL) f(GetU32(GLenum, 0), GetU32(GLenum, 1), GetArrayPtr(const GLuint *, 3));
#else
 WarnNotAvailable("glTexParameterIuivOES");
#endif
}
void Command::run_glGetTexParameterIivOES()
{
#if GL_OES_texture_border_clamp
 if (m_packet.NumItems() > 4) WarnDataNotHandled("glGetTexParameterIivOES");
 PFNGLGETTEXPARAMETERIIVOESPROC f = (PFNGLGETTEXPARAMETERIIVOESPROC)eglGetProcAddress("glGetTexParameterIivOES");
if (f != NULL) f(GetU32(GLenum, 0), GetU32(GLenum, 1), dummyGLint);
#else
 WarnNotAvailable("glGetTexParameterIivOES");
#endif
}
void Command::run_glGetTexParameterIuivOES()
{
#if GL_OES_texture_border_clamp
 if (m_packet.NumItems() > 4) WarnDataNotHandled("glGetTexParameterIuivOES");
 PFNGLGETTEXPARAMETERIUIVOESPROC f = (PFNGLGETTEXPARAMETERIUIVOESPROC)eglGetProcAddress("glGetTexParameterIuivOES");
if (f != NULL) f(GetU32(GLenum, 0), GetU32(GLenum, 1), dummyGLuint);
#else
 WarnNotAvailable("glGetTexParameterIuivOES");
#endif
}
void Command::run_glSamplerParameterIivOES()
{
#if GL_OES_texture_border_clamp
 if (m_packet.NumItems() > 5) WarnDataNotHandled("glSamplerParameterIivOES");
 PFNGLSAMPLERPARAMETERIIVOESPROC f = (PFNGLSAMPLERPARAMETERIIVOESPROC)eglGetProcAddress("glSamplerParameterIivOES");
if (f != NULL) f(GetSampler(GLuint, 0), GetU32(GLenum, 1), GetArrayPtr(const GLint *, 3));
#else
 WarnNotAvailable("glSamplerParameterIivOES");
#endif
}
void Command::run_glSamplerParameterIuivOES()
{
#if GL_OES_texture_border_clamp
 if (m_packet.NumItems() > 5) WarnDataNotHandled("glSamplerParameterIuivOES");
 PFNGLSAMPLERPARAMETERIUIVOESPROC f = (PFNGLSAMPLERPARAMETERIUIVOESPROC)eglGetProcAddress("glSamplerParameterIuivOES");
if (f != NULL) f(GetSampler(GLuint, 0), GetU32(GLenum, 1), GetArrayPtr(const GLuint *, 3));
#else
 WarnNotAvailable("glSamplerParameterIuivOES");
#endif
}
void Command::run_glGetSamplerParameterIivOES()
{
#if GL_OES_texture_border_clamp
 if (m_packet.NumItems() > 4) WarnDataNotHandled("glGetSamplerParameterIivOES");
 PFNGLGETSAMPLERPARAMETERIIVOESPROC f = (PFNGLGETSAMPLERPARAMETERIIVOESPROC)eglGetProcAddress("glGetSamplerParameterIivOES");
if (f != NULL) f(GetSampler(GLuint, 0), GetU32(GLenum, 1), dummyGLint);
#else
 WarnNotAvailable("glGetSamplerParameterIivOES");
#endif
}
void Command::run_glGetSamplerParameterIuivOES()
{
#if GL_OES_texture_border_clamp
 if (m_packet.NumItems() > 4) WarnDataNotHandled("glGetSamplerParameterIuivOES");
 PFNGLGETSAMPLERPARAMETERIUIVOESPROC f = (PFNGLGETSAMPLERPARAMETERIUIVOESPROC)eglGetProcAddress("glGetSamplerParameterIuivOES");
if (f != NULL) f(GetSampler(GLuint, 0), GetU32(GLenum, 1), dummyGLuint);
#else
 WarnNotAvailable("glGetSamplerParameterIuivOES");
#endif
}
void Command::run_glTexStorage3DMultisampleOES()
{
#if GL_OES_texture_storage_multisample_2d_array
 if (m_packet.NumItems() > 8) WarnDataNotHandled("glTexStorage3DMultisampleOES");
 PFNGLTEXSTORAGE3DMULTISAMPLEOESPROC f = (PFNGLTEXSTORAGE3DMULTISAMPLEOESPROC)eglGetProcAddress("glTexStorage3DMultisampleOES");
if (f != NULL) f(GetU32(GLenum, 0), GetI32(GLsizei, 1), GetU32(GLenum, 2), GetI32(GLsizei, 3), GetI32(GLsizei, 4), GetI32(GLsizei, 5), GetB(GLboolean, 6));
#else
 WarnNotAvailable("glTexStorage3DMultisampleOES");
#endif
}
void Command::run_glBindVertexArrayOES()
{
#if GL_OES_vertex_array_object
 if (m_packet.NumItems() > 2) WarnDataNotHandled("glBindVertexArrayOES");
 PFNGLBINDVERTEXARRAYOESPROC f = (PFNGLBINDVERTEXARRAYOESPROC)eglGetProcAddress("glBindVertexArrayOES");
if (f != NULL) f(GetVertexArray(GLuint, 0));
#else
 WarnNotAvailable("glBindVertexArrayOES");
#endif
}
void Command::run_glDeleteVertexArraysOES()
{
#if GL_OES_vertex_array_object
 if (m_packet.NumItems() > 4) WarnDataNotHandled("glDeleteVertexArraysOES");
 PFNGLDELETEVERTEXARRAYSOESPROC f = (PFNGLDELETEVERTEXARRAYSOESPROC)eglGetProcAddress("glDeleteVertexArraysOES");
if (f != NULL) f(GetI32(GLsizei, 0), GetArrayPtr(const GLuint *, 2));
#else
 WarnNotAvailable("glDeleteVertexArraysOES");
#endif
}
void Command::run_glGenVertexArraysOES()
{
#if GL_OES_vertex_array_object
 if (m_packet.NumItems() > 3) WarnDataNotHandled("glGenVertexArraysOES");
 PFNGLGENVERTEXARRAYSOESPROC f = (PFNGLGENVERTEXARRAYSOESPROC)eglGetProcAddress("glGenVertexArraysOES");
if (f != NULL) f(GetI32(GLsizei, 0), dummyGLuint);
#else
 WarnNotAvailable("glGenVertexArraysOES");
#endif
}
void Command::run_glIsVertexArrayOES()
{
#if GL_OES_vertex_array_object
 if (m_packet.NumItems() > 2) WarnDataNotHandled("glIsVertexArrayOES");
 PFNGLISVERTEXARRAYOESPROC f = (PFNGLISVERTEXARRAYOESPROC)eglGetProcAddress("glIsVertexArrayOES");
if (f != NULL) f(GetVertexArray(GLuint, 0));
#else
 WarnNotAvailable("glIsVertexArrayOES");
#endif
}
void Command::run_eglDupNativeFenceFDANDROID()
{
#if defined(ANDROID) && EGL_ANDROID_native_fence_sync
 if (m_packet.NumItems() > 3) WarnDataNotHandled("eglDupNativeFenceFDANDROID");
 eglDupNativeFenceFDANDROID(GetEGLDisplay(EGLDisplay, 0), GetEGLSync(EGLSyncKHR, 1));
#else
 WarnNotAvailable("eglDupNativeFenceFDANDROID");
#endif
}
void Command::run_eglGetEventConstantBRCM()
{
#if EGL_BRCM_event_monitor
 if (m_packet.NumItems() > 2) WarnDataNotHandled("eglGetEventConstantBRCM");
 eglGetEventConstantBRCM(GetU32(EGLenum, 0));
#else
 WarnNotAvailable("eglGetEventConstantBRCM");
#endif
}
void Command::run_eglGetEventTrackInfoBRCM()
{
#if EGL_BRCM_event_monitor
 if (m_packet.NumItems() > 4) WarnDataNotHandled("eglGetEventTrackInfoBRCM");
 eglGetEventTrackInfoBRCM(GetI32(EGLint, 0), GetI32(EGLint, 1), dummychar);
#else
 WarnNotAvailable("eglGetEventTrackInfoBRCM");
#endif
}
void Command::run_eglGetEventInfoBRCM()
{
#if EGL_BRCM_event_monitor
 if (m_packet.NumItems() > 5) WarnDataNotHandled("eglGetEventInfoBRCM");
 eglGetEventInfoBRCM(GetI32(EGLint, 0), GetI32(EGLint, 1), dummychar, dummyEGLint);
#else
 WarnNotAvailable("eglGetEventInfoBRCM");
#endif
}
void Command::run_eglGetEventDataFieldInfoBRCM()
{
#if EGL_BRCM_event_monitor
 if (m_packet.NumItems() > 7) WarnDataNotHandled("eglGetEventDataFieldInfoBRCM");
 eglGetEventDataFieldInfoBRCM(GetI32(EGLint, 0), GetI32(EGLint, 1), GetI32(EGLint, 2), dummychar, dummyEGLBoolean, dummyEGLint);
#else
 WarnNotAvailable("eglGetEventDataFieldInfoBRCM");
#endif
}
void Command::run_eglSetEventCollectionBRCM()
{
#if EGL_BRCM_event_monitor
 if (m_packet.NumItems() > 2) WarnDataNotHandled("eglSetEventCollectionBRCM");
 eglSetEventCollectionBRCM(GetU32(EGLenum, 0));
#else
 WarnNotAvailable("eglSetEventCollectionBRCM");
#endif
}
void Command::run_eglGetEventDataBRCM()
{
#if EGL_BRCM_event_monitor
 if (m_packet.NumItems() > 6) WarnDataNotHandled("eglGetEventDataBRCM");
 eglGetEventDataBRCM(GetI32(EGLint, 0), dummyvoid, dummyEGLint, dummyEGLBoolean, dummyEGLuint64BRCM);
#else
 WarnNotAvailable("eglGetEventDataBRCM");
#endif
}
void Command::run_eglImageUpdateParameterivBRCM()
{
#if EGL_BRCM_image_update_control
 if (m_packet.NumItems() > 6) WarnDataNotHandled("eglImageUpdateParameterivBRCM");
 eglImageUpdateParameterivBRCM(GetEGLDisplay(EGLDisplay, 0), GetEGLImage(EGLImageKHR, 1), GetU32(EGLenum, 2), GetArrayPtr(const EGLint *, 4));
#else
 WarnNotAvailable("eglImageUpdateParameterivBRCM");
#endif
}
void Command::run_eglImageUpdateParameteriBRCM()
{
#if EGL_BRCM_image_update_control
 if (m_packet.NumItems() > 5) WarnDataNotHandled("eglImageUpdateParameteriBRCM");
 eglImageUpdateParameteriBRCM(GetEGLDisplay(EGLDisplay, 0), GetEGLImage(EGLImageKHR, 1), GetU32(EGLenum, 2), GetI32(EGLint, 3));
#else
 WarnNotAvailable("eglImageUpdateParameteriBRCM");
#endif
}
void Command::run_eglGetPerfCounterConstantBRCM()
{
#if EGL_BRCM_performance_counters
 if (m_packet.NumItems() > 2) WarnDataNotHandled("eglGetPerfCounterConstantBRCM");
 eglGetPerfCounterConstantBRCM(GetU32(EGLenum, 0));
#else
 WarnNotAvailable("eglGetPerfCounterConstantBRCM");
#endif
}
void Command::run_eglGetPerfCounterGroupInfoBRCM()
{
#if EGL_BRCM_performance_counters
 if (m_packet.NumItems() > 6) WarnDataNotHandled("eglGetPerfCounterGroupInfoBRCM");
 eglGetPerfCounterGroupInfoBRCM(GetI32(EGLint, 0), GetI32(EGLint, 1), dummyGLchar, dummyEGLint, dummyEGLint);
#else
 WarnNotAvailable("eglGetPerfCounterGroupInfoBRCM");
#endif
}
void Command::run_eglGetPerfCounterInfoBRCM()
{
#if EGL_BRCM_performance_counters
 if (m_packet.NumItems() > 10) WarnDataNotHandled("eglGetPerfCounterInfoBRCM");
 eglGetPerfCounterInfoBRCM(GetI32(EGLint, 0), GetI32(EGLint, 1), dummyEGLuint64BRCM, dummyEGLuint64BRCM, dummyEGLuint64BRCM, GetI32(EGLint, 5), dummychar, GetI32(EGLint, 7), dummychar);
#else
 WarnNotAvailable("eglGetPerfCounterInfoBRCM");
#endif
}
void Command::run_eglSetPerfCountingBRCM()
{
#if EGL_BRCM_performance_counters
 if (m_packet.NumItems() > 2) WarnDataNotHandled("eglSetPerfCountingBRCM");
 eglSetPerfCountingBRCM(GetU32(EGLenum, 0));
#else
 WarnNotAvailable("eglSetPerfCountingBRCM");
#endif
}
void Command::run_eglChoosePerfCountersBRCM()
{
#if EGL_BRCM_performance_counters
 if (m_packet.NumItems() > 5) WarnDataNotHandled("eglChoosePerfCountersBRCM");
 eglChoosePerfCountersBRCM(GetB(EGLBoolean, 0), GetI32(EGLint, 1), GetI32(EGLint, 2), dummyEGLint);
#else
 WarnNotAvailable("eglChoosePerfCountersBRCM");
#endif
}
void Command::run_eglGetPerfCounterDataBRCM()
{
#if EGL_BRCM_performance_counters
 if (m_packet.NumItems() > 5) WarnDataNotHandled("eglGetPerfCounterDataBRCM");
 eglGetPerfCounterDataBRCM(GetI32(EGLint, 0), dummyvoid, dummyEGLint, GetB(EGLBoolean, 3));
#else
 WarnNotAvailable("eglGetPerfCounterDataBRCM");
#endif
}
void Command::run_eglGetPlatformDisplayEXT()
{
#if EGL_EXT_platform_base
 if (m_packet.NumItems() > 5) WarnDataNotHandled("eglGetPlatformDisplayEXT");
 PFNEGLGETPLATFORMDISPLAYEXTPROC f = (PFNEGLGETPLATFORMDISPLAYEXTPROC)eglGetProcAddress("eglGetPlatformDisplayEXT");
if (f != NULL) f(GetU32(EGLenum, 0), dummyvoid, GetArrayPtr(const EGLint *, 3));
#else
 WarnNotAvailable("eglGetPlatformDisplayEXT");
#endif
}
void Command::run_eglCreatePlatformWindowSurfaceEXT()
{
#if EGL_EXT_platform_base
 if (m_packet.NumItems() > 6) WarnDataNotHandled("eglCreatePlatformWindowSurfaceEXT");
 PFNEGLCREATEPLATFORMWINDOWSURFACEEXTPROC f = (PFNEGLCREATEPLATFORMWINDOWSURFACEEXTPROC)eglGetProcAddress("eglCreatePlatformWindowSurfaceEXT");
if (f != NULL) f(GetEGLDisplay(EGLDisplay, 0), GetEGLConfig(EGLConfig, 1), dummyvoid, GetArrayPtr(const EGLint *, 4));
#else
 WarnNotAvailable("eglCreatePlatformWindowSurfaceEXT");
#endif
}
void Command::run_eglCreatePlatformPixmapSurfaceEXT()
{
#if EGL_EXT_platform_base
 if (m_packet.NumItems() > 6) WarnDataNotHandled("eglCreatePlatformPixmapSurfaceEXT");
 PFNEGLCREATEPLATFORMPIXMAPSURFACEEXTPROC f = (PFNEGLCREATEPLATFORMPIXMAPSURFACEEXTPROC)eglGetProcAddress("eglCreatePlatformPixmapSurfaceEXT");
if (f != NULL) f(GetEGLDisplay(EGLDisplay, 0), GetEGLConfig(EGLConfig, 1), dummyvoid, GetArrayPtr(const EGLint *, 4));
#else
 WarnNotAvailable("eglCreatePlatformPixmapSurfaceEXT");
#endif
}
void Command::run_eglBindWaylandDisplayWL()
{
#if EGL_WL_bind_wayland_display
 if (m_packet.NumItems() > 3) WarnDataNotHandled("eglBindWaylandDisplayWL");
 eglBindWaylandDisplayWL(GetEGLDisplay(EGLDisplay, 0), GetPtr(struct wl_display *, 1));
#else
 WarnNotAvailable("eglBindWaylandDisplayWL");
#endif
}
void Command::run_eglUnbindWaylandDisplayWL()
{
#if EGL_WL_bind_wayland_display
 if (m_packet.NumItems() > 3) WarnDataNotHandled("eglUnbindWaylandDisplayWL");
 eglUnbindWaylandDisplayWL(GetEGLDisplay(EGLDisplay, 0), GetPtr(struct wl_display *, 1));
#else
 WarnNotAvailable("eglUnbindWaylandDisplayWL");
#endif
}
void Command::run_eglQueryWaylandBufferWL()
{
#if EGL_WL_bind_wayland_display
 if (m_packet.NumItems() > 5) WarnDataNotHandled("eglQueryWaylandBufferWL");
 eglQueryWaylandBufferWL(GetEGLDisplay(EGLDisplay, 0), GetPtr(struct wl_resource *, 1), GetI32(EGLint, 2), dummyEGLint);
#else
 WarnNotAvailable("eglQueryWaylandBufferWL");
#endif
}
void Command::run_glPolygonModeBRCM()
{
#if GL_BRCM_polygon_mode
 if (m_packet.NumItems() > 2) WarnDataNotHandled("glPolygonModeBRCM");
 glPolygonModeBRCM(GetU32(GLenum, 0));
#else
 WarnNotAvailable("glPolygonModeBRCM");
#endif
}
void Command::run_glProvokingVertexBRCM()
{
#if GL_BRCM_provoking_vertex
 if (m_packet.NumItems() > 2) WarnDataNotHandled("glProvokingVertexBRCM");
 glProvokingVertexBRCM(GetU32(GLenum, 0));
#else
 WarnNotAvailable("glProvokingVertexBRCM");
#endif
}
void Command::run_glTexImage1DBRCM()
{
#if GL_BRCM_texture_1D
 if (m_packet.NumItems() > 10) WarnDataNotHandled("glTexImage1DBRCM");
 glTexImage1DBRCM(GetU32(GLenum, 0), GetI32(GLint, 1), GetI32(GLint, 2), GetI32(GLsizei, 3), GetI32(GLint, 4), GetU32(GLenum, 5), GetU32(GLenum, 6), GetArrayPtr(const GLvoid *, 8));
#else
 WarnNotAvailable("glTexImage1DBRCM");
#endif
}
void Command::run_glDrawArraysInstancedBaseInstanceEXT()
{
#if GL_EXT_base_instance
 if (m_packet.NumItems() > 6) WarnDataNotHandled("glDrawArraysInstancedBaseInstanceEXT");
 PFNGLDRAWARRAYSINSTANCEDBASEINSTANCEEXTPROC f = (PFNGLDRAWARRAYSINSTANCEDBASEINSTANCEEXTPROC)eglGetProcAddress("glDrawArraysInstancedBaseInstanceEXT");
if (f != NULL) f(GetU32(GLenum, 0), GetI32(GLint, 1), GetI32(GLsizei, 2), GetI32(GLsizei, 3), GetU32(GLuint, 4));
#else
 WarnNotAvailable("glDrawArraysInstancedBaseInstanceEXT");
#endif
}
void Command::run_glDrawElementsInstancedBaseInstanceEXT()
{
#if GL_EXT_base_instance
 if (m_packet.NumItems() > 8) WarnDataNotHandled("glDrawElementsInstancedBaseInstanceEXT");
 PFNGLDRAWELEMENTSINSTANCEDBASEINSTANCEEXTPROC f = (PFNGLDRAWELEMENTSINSTANCEDBASEINSTANCEEXTPROC)eglGetProcAddress("glDrawElementsInstancedBaseInstanceEXT");
if (f != NULL) f(GetU32(GLenum, 0), GetI32(GLsizei, 1), GetU32(GLenum, 2), GetArrayPtr(const void *, 6), GetI32(GLsizei, 4), GetU32(GLuint, 5));
#else
 WarnNotAvailable("glDrawElementsInstancedBaseInstanceEXT");
#endif
}
void Command::run_glDrawElementsInstancedBaseVertexBaseInstanceEXT()
{
#if GL_EXT_base_instance
 if (m_packet.NumItems() > 9) WarnDataNotHandled("glDrawElementsInstancedBaseVertexBaseInstanceEXT");
 PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEEXTPROC f = (PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEEXTPROC)eglGetProcAddress("glDrawElementsInstancedBaseVertexBaseInstanceEXT");
if (f != NULL) f(GetU32(GLenum, 0), GetI32(GLsizei, 1), GetU32(GLenum, 2), GetArrayPtr(const void *, 7), GetI32(GLsizei, 4), GetI32(GLint, 5), GetU32(GLuint, 6));
#else
 WarnNotAvailable("glDrawElementsInstancedBaseVertexBaseInstanceEXT");
#endif
}
void Command::run_glInsertEventMarkerEXT()
{
#if GL_EXT_debug_marker
 if (m_packet.NumItems() > 3) WarnDataNotHandled("glInsertEventMarkerEXT");
 PFNGLINSERTEVENTMARKEREXTPROC f = (PFNGLINSERTEVENTMARKEREXTPROC)eglGetProcAddress("glInsertEventMarkerEXT");
if (f != NULL) f(GetI32(GLsizei, 0), GetCP(const GLchar *, 1));
#else
 WarnNotAvailable("glInsertEventMarkerEXT");
#endif
}
void Command::run_glPushGroupMarkerEXT()
{
#if GL_EXT_debug_marker
 if (m_packet.NumItems() > 3) WarnDataNotHandled("glPushGroupMarkerEXT");
 PFNGLPUSHGROUPMARKEREXTPROC f = (PFNGLPUSHGROUPMARKEREXTPROC)eglGetProcAddress("glPushGroupMarkerEXT");
if (f != NULL) f(GetI32(GLsizei, 0), GetCP(const GLchar *, 1));
#else
 WarnNotAvailable("glPushGroupMarkerEXT");
#endif
}
void Command::run_glPopGroupMarkerEXT()
{
#if GL_EXT_debug_marker
 if (m_packet.NumItems() > 1) WarnDataNotHandled("glPopGroupMarkerEXT");
 PFNGLPOPGROUPMARKEREXTPROC f = (PFNGLPOPGROUPMARKEREXTPROC)eglGetProcAddress("glPopGroupMarkerEXT");
if (f != NULL) f();
#else
 WarnNotAvailable("glPopGroupMarkerEXT");
#endif
}
void Command::run_glDiscardFramebufferEXT()
{
#if GL_EXT_discard_framebuffer
 if (m_packet.NumItems() > 5) WarnDataNotHandled("glDiscardFramebufferEXT");
 PFNGLDISCARDFRAMEBUFFEREXTPROC f = (PFNGLDISCARDFRAMEBUFFEREXTPROC)eglGetProcAddress("glDiscardFramebufferEXT");
if (f != NULL) f(GetU32(GLenum, 0), GetI32(GLsizei, 1), GetArrayPtr(const GLenum *, 3));
#else
 WarnNotAvailable("glDiscardFramebufferEXT");
#endif
}
void Command::run_glEnableiEXT()
{
#if GL_EXT_draw_buffers_indexed
 if (m_packet.NumItems() > 3) WarnDataNotHandled("glEnableiEXT");
 PFNGLENABLEIEXTPROC f = (PFNGLENABLEIEXTPROC)eglGetProcAddress("glEnableiEXT");
if (f != NULL) f(GetU32(GLenum, 0), GetU32(GLuint, 1));
#else
 WarnNotAvailable("glEnableiEXT");
#endif
}
void Command::run_glDisableiEXT()
{
#if GL_EXT_draw_buffers_indexed
 if (m_packet.NumItems() > 3) WarnDataNotHandled("glDisableiEXT");
 PFNGLDISABLEIEXTPROC f = (PFNGLDISABLEIEXTPROC)eglGetProcAddress("glDisableiEXT");
if (f != NULL) f(GetU32(GLenum, 0), GetU32(GLuint, 1));
#else
 WarnNotAvailable("glDisableiEXT");
#endif
}
void Command::run_glBlendEquationiEXT()
{
#if GL_EXT_draw_buffers_indexed
 if (m_packet.NumItems() > 3) WarnDataNotHandled("glBlendEquationiEXT");
 PFNGLBLENDEQUATIONIEXTPROC f = (PFNGLBLENDEQUATIONIEXTPROC)eglGetProcAddress("glBlendEquationiEXT");
if (f != NULL) f(GetU32(GLuint, 0), GetU32(GLenum, 1));
#else
 WarnNotAvailable("glBlendEquationiEXT");
#endif
}
void Command::run_glBlendEquationSeparateiEXT()
{
#if GL_EXT_draw_buffers_indexed
 if (m_packet.NumItems() > 4) WarnDataNotHandled("glBlendEquationSeparateiEXT");
 PFNGLBLENDEQUATIONSEPARATEIEXTPROC f = (PFNGLBLENDEQUATIONSEPARATEIEXTPROC)eglGetProcAddress("glBlendEquationSeparateiEXT");
if (f != NULL) f(GetU32(GLuint, 0), GetU32(GLenum, 1), GetU32(GLenum, 2));
#else
 WarnNotAvailable("glBlendEquationSeparateiEXT");
#endif
}
void Command::run_glBlendFunciEXT()
{
#if GL_EXT_draw_buffers_indexed
 if (m_packet.NumItems() > 4) WarnDataNotHandled("glBlendFunciEXT");
 PFNGLBLENDFUNCIEXTPROC f = (PFNGLBLENDFUNCIEXTPROC)eglGetProcAddress("glBlendFunciEXT");
if (f != NULL) f(GetU32(GLuint, 0), GetU32(GLenum, 1), GetU32(GLenum, 2));
#else
 WarnNotAvailable("glBlendFunciEXT");
#endif
}
void Command::run_glBlendFuncSeparateiEXT()
{
#if GL_EXT_draw_buffers_indexed
 if (m_packet.NumItems() > 6) WarnDataNotHandled("glBlendFuncSeparateiEXT");
 PFNGLBLENDFUNCSEPARATEIEXTPROC f = (PFNGLBLENDFUNCSEPARATEIEXTPROC)eglGetProcAddress("glBlendFuncSeparateiEXT");
if (f != NULL) f(GetU32(GLuint, 0), GetU32(GLenum, 1), GetU32(GLenum, 2), GetU32(GLenum, 3), GetU32(GLenum, 4));
#else
 WarnNotAvailable("glBlendFuncSeparateiEXT");
#endif
}
void Command::run_glColorMaskiEXT()
{
#if GL_EXT_draw_buffers_indexed
 if (m_packet.NumItems() > 6) WarnDataNotHandled("glColorMaskiEXT");
 PFNGLCOLORMASKIEXTPROC f = (PFNGLCOLORMASKIEXTPROC)eglGetProcAddress("glColorMaskiEXT");
if (f != NULL) f(GetU32(GLuint, 0), GetB(GLboolean, 1), GetB(GLboolean, 2), GetB(GLboolean, 3), GetB(GLboolean, 4));
#else
 WarnNotAvailable("glColorMaskiEXT");
#endif
}
void Command::run_glIsEnablediEXT()
{
#if GL_EXT_draw_buffers_indexed
 if (m_packet.NumItems() > 3) WarnDataNotHandled("glIsEnablediEXT");
 PFNGLISENABLEDIEXTPROC f = (PFNGLISENABLEDIEXTPROC)eglGetProcAddress("glIsEnablediEXT");
if (f != NULL) f(GetU32(GLenum, 0), GetU32(GLuint, 1));
#else
 WarnNotAvailable("glIsEnablediEXT");
#endif
}
void Command::run_glDrawElementsBaseVertexEXT()
{
#if GL_EXT_draw_elements_base_vertex
 if (m_packet.NumItems() > 7) WarnDataNotHandled("glDrawElementsBaseVertexEXT");
 PFNGLDRAWELEMENTSBASEVERTEXEXTPROC f = (PFNGLDRAWELEMENTSBASEVERTEXEXTPROC)eglGetProcAddress("glDrawElementsBaseVertexEXT");
if (f != NULL) f(GetU32(GLenum, 0), GetI32(GLsizei, 1), GetU32(GLenum, 2), GetArrayPtr(const void *, 5), GetI32(GLint, 4));
#else
 WarnNotAvailable("glDrawElementsBaseVertexEXT");
#endif
}
void Command::run_glDrawRangeElementsBaseVertexEXT()
{
#if GL_EXT_draw_elements_base_vertex
 if (m_packet.NumItems() > 9) WarnDataNotHandled("glDrawRangeElementsBaseVertexEXT");
 PFNGLDRAWRANGEELEMENTSBASEVERTEXEXTPROC f = (PFNGLDRAWRANGEELEMENTSBASEVERTEXEXTPROC)eglGetProcAddress("glDrawRangeElementsBaseVertexEXT");
if (f != NULL) f(GetU32(GLenum, 0), GetU32(GLuint, 1), GetU32(GLuint, 2), GetI32(GLsizei, 3), GetU32(GLenum, 4), GetArrayPtr(const void *, 7), GetI32(GLint, 6));
#else
 WarnNotAvailable("glDrawRangeElementsBaseVertexEXT");
#endif
}
void Command::run_glDrawElementsInstancedBaseVertexEXT()
{
#if GL_EXT_draw_elements_base_vertex
 if (m_packet.NumItems() > 8) WarnDataNotHandled("glDrawElementsInstancedBaseVertexEXT");
 PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXEXTPROC f = (PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXEXTPROC)eglGetProcAddress("glDrawElementsInstancedBaseVertexEXT");
if (f != NULL) f(GetU32(GLenum, 0), GetI32(GLsizei, 1), GetU32(GLenum, 2), GetArrayPtr(const void *, 6), GetI32(GLsizei, 4), GetI32(GLint, 5));
#else
 WarnNotAvailable("glDrawElementsInstancedBaseVertexEXT");
#endif
}
void Command::run_glMultiDrawElementsBaseVertexEXT()
{
#if GL_EXT_draw_elements_base_vertex
 if (m_packet.NumItems() > 10) WarnDataNotHandled("glMultiDrawElementsBaseVertexEXT");
 PFNGLMULTIDRAWELEMENTSBASEVERTEXEXTPROC f = (PFNGLMULTIDRAWELEMENTSBASEVERTEXEXTPROC)eglGetProcAddress("glMultiDrawElementsBaseVertexEXT");
if (f != NULL) f(GetU32(GLenum, 0), GetArrayPtr(const GLsizei *, 6), GetU32(GLenum, 2), GetArrayPtr(const void *const*, 7), GetI32(GLsizei, 4), GetArrayPtr(const GLint *, 8));
#else
 WarnNotAvailable("glMultiDrawElementsBaseVertexEXT");
#endif
}
void Command::run_glFramebufferTextureEXT()
{
#if GL_EXT_geometry_shader
 if (m_packet.NumItems() > 5) WarnDataNotHandled("glFramebufferTextureEXT");
 PFNGLFRAMEBUFFERTEXTUREEXTPROC f = (PFNGLFRAMEBUFFERTEXTUREEXTPROC)eglGetProcAddress("glFramebufferTextureEXT");
if (f != NULL) f(GetU32(GLenum, 0), GetU32(GLenum, 1), GetU32(GLuint, 2), GetI32(GLint, 3));
#else
 WarnNotAvailable("glFramebufferTextureEXT");
#endif
}
void Command::run_glMultiDrawArraysIndirectEXT()
{
#if GL_EXT_multi_draw_indirect
 if (m_packet.NumItems() > 6) WarnDataNotHandled("glMultiDrawArraysIndirectEXT");
 PFNGLMULTIDRAWARRAYSINDIRECTEXTPROC f = (PFNGLMULTIDRAWARRAYSINDIRECTEXTPROC)eglGetProcAddress("glMultiDrawArraysIndirectEXT");
if (f != NULL) f(GetU32(GLenum, 0), GetArrayPtr(const void *, 4), GetI32(GLsizei, 2), GetI32(GLsizei, 3));
#else
 WarnNotAvailable("glMultiDrawArraysIndirectEXT");
#endif
}
void Command::run_glMultiDrawElementsIndirectEXT()
{
#if GL_EXT_multi_draw_indirect
 if (m_packet.NumItems() > 7) WarnDataNotHandled("glMultiDrawElementsIndirectEXT");
 PFNGLMULTIDRAWELEMENTSINDIRECTEXTPROC f = (PFNGLMULTIDRAWELEMENTSINDIRECTEXTPROC)eglGetProcAddress("glMultiDrawElementsIndirectEXT");
if (f != NULL) f(GetU32(GLenum, 0), GetU32(GLenum, 1), GetArrayPtr(const void *, 5), GetI32(GLsizei, 3), GetI32(GLsizei, 4));
#else
 WarnNotAvailable("glMultiDrawElementsIndirectEXT");
#endif
}
void Command::run_glRenderbufferStorageMultisampleEXT()
{
#if GL_EXT_multisampled_render_to_texture
 if (m_packet.NumItems() > 6) WarnDataNotHandled("glRenderbufferStorageMultisampleEXT");
 PFNGLRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC f = (PFNGLRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC)eglGetProcAddress("glRenderbufferStorageMultisampleEXT");
if (f != NULL) f(GetU32(GLenum, 0), GetI32(GLsizei, 1), GetU32(GLenum, 2), GetI32(GLsizei, 3), GetI32(GLsizei, 4));
#else
 WarnNotAvailable("glRenderbufferStorageMultisampleEXT");
#endif
}
void Command::run_glFramebufferTexture2DMultisampleEXT()
{
#if GL_EXT_multisampled_render_to_texture
 if (m_packet.NumItems() > 7) WarnDataNotHandled("glFramebufferTexture2DMultisampleEXT");
 PFNGLFRAMEBUFFERTEXTURE2DMULTISAMPLEEXTPROC f = (PFNGLFRAMEBUFFERTEXTURE2DMULTISAMPLEEXTPROC)eglGetProcAddress("glFramebufferTexture2DMultisampleEXT");
if (f != NULL) f(GetU32(GLenum, 0), GetU32(GLenum, 1), GetU32(GLenum, 2), GetU32(GLuint, 3), GetI32(GLint, 4), GetI32(GLsizei, 5));
#else
 WarnNotAvailable("glFramebufferTexture2DMultisampleEXT");
#endif
}
void Command::run_glPrimitiveBoundingBoxEXT()
{
#if GL_EXT_primitive_bounding_box
 if (m_packet.NumItems() > 9) WarnDataNotHandled("glPrimitiveBoundingBoxEXT");
 PFNGLPRIMITIVEBOUNDINGBOXEXTPROC f = (PFNGLPRIMITIVEBOUNDINGBOXEXTPROC)eglGetProcAddress("glPrimitiveBoundingBoxEXT");
if (f != NULL) f(GetF(GLfloat, 0), GetF(GLfloat, 1), GetF(GLfloat, 2), GetF(GLfloat, 3), GetF(GLfloat, 4), GetF(GLfloat, 5), GetF(GLfloat, 6), GetF(GLfloat, 7));
#else
 WarnNotAvailable("glPrimitiveBoundingBoxEXT");
#endif
}
void Command::run_glGetGraphicsResetStatusEXT()
{
#if GL_EXT_robustness
 if (m_packet.NumItems() > 1) WarnDataNotHandled("glGetGraphicsResetStatusEXT");
 PFNGLGETGRAPHICSRESETSTATUSEXTPROC f = (PFNGLGETGRAPHICSRESETSTATUSEXTPROC)eglGetProcAddress("glGetGraphicsResetStatusEXT");
if (f != NULL) f();
#else
 WarnNotAvailable("glGetGraphicsResetStatusEXT");
#endif
}
void Command::run_glReadnPixelsEXT()
{
#if GL_EXT_robustness
 if (m_packet.NumItems() > 9) WarnDataNotHandled("glReadnPixelsEXT");
 PFNGLREADNPIXELSEXTPROC f = (PFNGLREADNPIXELSEXTPROC)eglGetProcAddress("glReadnPixelsEXT");
if (f != NULL) f(GetI32(GLint, 0), GetI32(GLint, 1), GetI32(GLsizei, 2), GetI32(GLsizei, 3), GetU32(GLenum, 4), GetU32(GLenum, 5), GetI32(GLsizei, 6), dummyvoid);
#else
 WarnNotAvailable("glReadnPixelsEXT");
#endif
}
void Command::run_glGetnUniformfvEXT()
{
#if GL_EXT_robustness
 if (m_packet.NumItems() > 5) WarnDataNotHandled("glGetnUniformfvEXT");
 PFNGLGETNUNIFORMFVEXTPROC f = (PFNGLGETNUNIFORMFVEXTPROC)eglGetProcAddress("glGetnUniformfvEXT");
if (f != NULL) f(GetProgram(GLuint, 0), GetUniform(1, 0), GetI32(GLsizei, 2), dummyGLfloat);
#else
 WarnNotAvailable("glGetnUniformfvEXT");
#endif
}
void Command::run_glGetnUniformivEXT()
{
#if GL_EXT_robustness
 if (m_packet.NumItems() > 5) WarnDataNotHandled("glGetnUniformivEXT");
 PFNGLGETNUNIFORMIVEXTPROC f = (PFNGLGETNUNIFORMIVEXTPROC)eglGetProcAddress("glGetnUniformivEXT");
if (f != NULL) f(GetProgram(GLuint, 0), GetUniform(1, 0), GetI32(GLsizei, 2), dummyGLint);
#else
 WarnNotAvailable("glGetnUniformivEXT");
#endif
}
void Command::run_glPatchParameteriEXT()
{
#if GL_EXT_tessellation_shader
 if (m_packet.NumItems() > 3) WarnDataNotHandled("glPatchParameteriEXT");
 PFNGLPATCHPARAMETERIEXTPROC f = (PFNGLPATCHPARAMETERIEXTPROC)eglGetProcAddress("glPatchParameteriEXT");
if (f != NULL) f(GetU32(GLenum, 0), GetI32(GLint, 1));
#else
 WarnNotAvailable("glPatchParameteriEXT");
#endif
}
void Command::run_glTexParameterIivEXT()
{
#if GL_EXT_texture_border_clamp
 if (m_packet.NumItems() > 5) WarnDataNotHandled("glTexParameterIivEXT");
 PFNGLTEXPARAMETERIIVEXTPROC f = (PFNGLTEXPARAMETERIIVEXTPROC)eglGetProcAddress("glTexParameterIivEXT");
if (f != NULL) f(GetU32(GLenum, 0), GetU32(GLenum, 1), GetArrayPtr(const GLint *, 3));
#else
 WarnNotAvailable("glTexParameterIivEXT");
#endif
}
void Command::run_glTexParameterIuivEXT()
{
#if GL_EXT_texture_border_clamp
 if (m_packet.NumItems() > 5) WarnDataNotHandled("glTexParameterIuivEXT");
 PFNGLTEXPARAMETERIUIVEXTPROC f = (PFNGLTEXPARAMETERIUIVEXTPROC)eglGetProcAddress("glTexParameterIuivEXT");
if (f != NULL) f(GetU32(GLenum, 0), GetU32(GLenum, 1), GetArrayPtr(const GLuint *, 3));
#else
 WarnNotAvailable("glTexParameterIuivEXT");
#endif
}
void Command::run_glGetTexParameterIivEXT()
{
#if GL_EXT_texture_border_clamp
 if (m_packet.NumItems() > 4) WarnDataNotHandled("glGetTexParameterIivEXT");
 PFNGLGETTEXPARAMETERIIVEXTPROC f = (PFNGLGETTEXPARAMETERIIVEXTPROC)eglGetProcAddress("glGetTexParameterIivEXT");
if (f != NULL) f(GetU32(GLenum, 0), GetU32(GLenum, 1), dummyGLint);
#else
 WarnNotAvailable("glGetTexParameterIivEXT");
#endif
}
void Command::run_glGetTexParameterIuivEXT()
{
#if GL_EXT_texture_border_clamp
 if (m_packet.NumItems() > 4) WarnDataNotHandled("glGetTexParameterIuivEXT");
 PFNGLGETTEXPARAMETERIUIVEXTPROC f = (PFNGLGETTEXPARAMETERIUIVEXTPROC)eglGetProcAddress("glGetTexParameterIuivEXT");
if (f != NULL) f(GetU32(GLenum, 0), GetU32(GLenum, 1), dummyGLuint);
#else
 WarnNotAvailable("glGetTexParameterIuivEXT");
#endif
}
void Command::run_glSamplerParameterIivEXT()
{
#if GL_EXT_texture_border_clamp
 if (m_packet.NumItems() > 5) WarnDataNotHandled("glSamplerParameterIivEXT");
 PFNGLSAMPLERPARAMETERIIVEXTPROC f = (PFNGLSAMPLERPARAMETERIIVEXTPROC)eglGetProcAddress("glSamplerParameterIivEXT");
if (f != NULL) f(GetSampler(GLuint, 0), GetU32(GLenum, 1), GetArrayPtr(const GLint *, 3));
#else
 WarnNotAvailable("glSamplerParameterIivEXT");
#endif
}
void Command::run_glSamplerParameterIuivEXT()
{
#if GL_EXT_texture_border_clamp
 if (m_packet.NumItems() > 5) WarnDataNotHandled("glSamplerParameterIuivEXT");
 PFNGLSAMPLERPARAMETERIUIVEXTPROC f = (PFNGLSAMPLERPARAMETERIUIVEXTPROC)eglGetProcAddress("glSamplerParameterIuivEXT");
if (f != NULL) f(GetSampler(GLuint, 0), GetU32(GLenum, 1), GetArrayPtr(const GLuint *, 3));
#else
 WarnNotAvailable("glSamplerParameterIuivEXT");
#endif
}
void Command::run_glGetSamplerParameterIivEXT()
{
#if GL_EXT_texture_border_clamp
 if (m_packet.NumItems() > 4) WarnDataNotHandled("glGetSamplerParameterIivEXT");
 PFNGLGETSAMPLERPARAMETERIIVEXTPROC f = (PFNGLGETSAMPLERPARAMETERIIVEXTPROC)eglGetProcAddress("glGetSamplerParameterIivEXT");
if (f != NULL) f(GetSampler(GLuint, 0), GetU32(GLenum, 1), dummyGLint);
#else
 WarnNotAvailable("glGetSamplerParameterIivEXT");
#endif
}
void Command::run_glGetSamplerParameterIuivEXT()
{
#if GL_EXT_texture_border_clamp
 if (m_packet.NumItems() > 4) WarnDataNotHandled("glGetSamplerParameterIuivEXT");
 PFNGLGETSAMPLERPARAMETERIUIVEXTPROC f = (PFNGLGETSAMPLERPARAMETERIUIVEXTPROC)eglGetProcAddress("glGetSamplerParameterIuivEXT");
if (f != NULL) f(GetSampler(GLuint, 0), GetU32(GLenum, 1), dummyGLuint);
#else
 WarnNotAvailable("glGetSamplerParameterIuivEXT");
#endif
}
