/******************************************************************************
 *  Copyright (C) 2017 Broadcom. The term "Broadcom" refers to Broadcom Limited and/or its subsidiaries.
 ******************************************************************************/
/* Auto-generated by running gen_hook_tables.py
 * DO NOT EDIT!
 */
void Command::run_eglChooseConfig()
{
#if EGL_VERSION_1_0
   if (m_packet.NumItems() > 7)
      WarnDataNotHandled("eglChooseConfig");
   if (m_replay->GetDeviceCaps().m_has_EGL_VERSION_1_0 && m_replay->GetDispatch().real_eglChooseConfig)
      m_replay->GetDispatch().real_eglChooseConfig(GetEGLDisplay(EGLDisplay, 0), GetArrayPtr(const EGLint *, 5), dummyEGLConfig, GetI32(EGLint, 3), dummyEGLint);
   else
      WarnNotAvailable("eglChooseConfig");
#else
   WarnNotAvailable("eglChooseConfig");
#endif
}
void Command::run_eglCopyBuffers()
{
#if EGL_VERSION_1_0
   if (m_packet.NumItems() > 4)
      WarnDataNotHandled("eglCopyBuffers");
   if (m_replay->GetDeviceCaps().m_has_EGL_VERSION_1_0 && m_replay->GetDispatch().real_eglCopyBuffers)
      m_replay->GetDispatch().real_eglCopyBuffers(GetEGLDisplay(EGLDisplay, 0), GetEGLSurface(EGLSurface, 1), GetPtr(EGLNativePixmapType, 2));
   else
      WarnNotAvailable("eglCopyBuffers");
#else
   WarnNotAvailable("eglCopyBuffers");
#endif
}
void Command::run_eglCreateContext()
{
#if EGL_VERSION_1_0
   if (m_packet.NumItems() > 6)
      WarnDataNotHandled("eglCreateContext");
   if (m_replay->GetDeviceCaps().m_has_EGL_VERSION_1_0 && m_replay->GetDispatch().real_eglCreateContext)
      m_replay->GetDispatch().real_eglCreateContext(GetEGLDisplay(EGLDisplay, 0), GetEGLConfig(EGLConfig, 1), GetEGLContext(EGLContext, 2), GetArrayPtr(const EGLint *, 4));
   else
      WarnNotAvailable("eglCreateContext");
#else
   WarnNotAvailable("eglCreateContext");
#endif
}
void Command::run_eglCreatePbufferSurface()
{
#if EGL_VERSION_1_0
   if (m_packet.NumItems() > 5)
      WarnDataNotHandled("eglCreatePbufferSurface");
   if (m_replay->GetDeviceCaps().m_has_EGL_VERSION_1_0 && m_replay->GetDispatch().real_eglCreatePbufferSurface)
      m_replay->GetDispatch().real_eglCreatePbufferSurface(GetEGLDisplay(EGLDisplay, 0), GetEGLConfig(EGLConfig, 1), GetArrayPtr(const EGLint *, 3));
   else
      WarnNotAvailable("eglCreatePbufferSurface");
#else
   WarnNotAvailable("eglCreatePbufferSurface");
#endif
}
void Command::run_eglCreatePixmapSurface()
{
#if EGL_VERSION_1_0
   if (m_packet.NumItems() > 6)
      WarnDataNotHandled("eglCreatePixmapSurface");
   if (m_replay->GetDeviceCaps().m_has_EGL_VERSION_1_0 && m_replay->GetDispatch().real_eglCreatePixmapSurface)
      m_replay->GetDispatch().real_eglCreatePixmapSurface(GetEGLDisplay(EGLDisplay, 0), GetEGLConfig(EGLConfig, 1), GetPtr(EGLNativePixmapType, 2), GetArrayPtr(const EGLint *, 4));
   else
      WarnNotAvailable("eglCreatePixmapSurface");
#else
   WarnNotAvailable("eglCreatePixmapSurface");
#endif
}
void Command::run_eglCreateWindowSurface()
{
#if EGL_VERSION_1_0
   if (m_packet.NumItems() > 6)
      WarnDataNotHandled("eglCreateWindowSurface");
   if (m_replay->GetDeviceCaps().m_has_EGL_VERSION_1_0 && m_replay->GetDispatch().real_eglCreateWindowSurface)
      m_replay->GetDispatch().real_eglCreateWindowSurface(GetEGLDisplay(EGLDisplay, 0), GetEGLConfig(EGLConfig, 1), GetPtr(EGLNativeWindowType, 2), GetArrayPtr(const EGLint *, 4));
   else
      WarnNotAvailable("eglCreateWindowSurface");
#else
   WarnNotAvailable("eglCreateWindowSurface");
#endif
}
void Command::run_eglDestroyContext()
{
#if EGL_VERSION_1_0
   if (m_packet.NumItems() > 3)
      WarnDataNotHandled("eglDestroyContext");
   if (m_replay->GetDeviceCaps().m_has_EGL_VERSION_1_0 && m_replay->GetDispatch().real_eglDestroyContext)
      m_replay->GetDispatch().real_eglDestroyContext(GetEGLDisplay(EGLDisplay, 0), GetEGLContext(EGLContext, 1));
   else
      WarnNotAvailable("eglDestroyContext");
#else
   WarnNotAvailable("eglDestroyContext");
#endif
}
void Command::run_eglDestroySurface()
{
#if EGL_VERSION_1_0
   if (m_packet.NumItems() > 3)
      WarnDataNotHandled("eglDestroySurface");
   if (m_replay->GetDeviceCaps().m_has_EGL_VERSION_1_0 && m_replay->GetDispatch().real_eglDestroySurface)
      m_replay->GetDispatch().real_eglDestroySurface(GetEGLDisplay(EGLDisplay, 0), GetEGLSurface(EGLSurface, 1));
   else
      WarnNotAvailable("eglDestroySurface");
#else
   WarnNotAvailable("eglDestroySurface");
#endif
}
void Command::run_eglGetConfigAttrib()
{
#if EGL_VERSION_1_0
   if (m_packet.NumItems() > 5)
      WarnDataNotHandled("eglGetConfigAttrib");
   if (m_replay->GetDeviceCaps().m_has_EGL_VERSION_1_0 && m_replay->GetDispatch().real_eglGetConfigAttrib)
      m_replay->GetDispatch().real_eglGetConfigAttrib(GetEGLDisplay(EGLDisplay, 0), GetEGLConfig(EGLConfig, 1), GetI32(EGLint, 2), dummyEGLint);
   else
      WarnNotAvailable("eglGetConfigAttrib");
#else
   WarnNotAvailable("eglGetConfigAttrib");
#endif
}
void Command::run_eglGetConfigs()
{
#if EGL_VERSION_1_0
   if (m_packet.NumItems() > 5)
      WarnDataNotHandled("eglGetConfigs");
   if (m_replay->GetDeviceCaps().m_has_EGL_VERSION_1_0 && m_replay->GetDispatch().real_eglGetConfigs)
      m_replay->GetDispatch().real_eglGetConfigs(GetEGLDisplay(EGLDisplay, 0), dummyEGLConfig, GetI32(EGLint, 2), dummyEGLint);
   else
      WarnNotAvailable("eglGetConfigs");
#else
   WarnNotAvailable("eglGetConfigs");
#endif
}
void Command::run_eglGetCurrentDisplay()
{
#if EGL_VERSION_1_0
   if (m_packet.NumItems() > 1)
      WarnDataNotHandled("eglGetCurrentDisplay");
   if (m_replay->GetDeviceCaps().m_has_EGL_VERSION_1_0 && m_replay->GetDispatch().real_eglGetCurrentDisplay)
      m_replay->GetDispatch().real_eglGetCurrentDisplay();
   else
      WarnNotAvailable("eglGetCurrentDisplay");
#else
   WarnNotAvailable("eglGetCurrentDisplay");
#endif
}
void Command::run_eglGetCurrentSurface()
{
#if EGL_VERSION_1_0
   if (m_packet.NumItems() > 2)
      WarnDataNotHandled("eglGetCurrentSurface");
   if (m_replay->GetDeviceCaps().m_has_EGL_VERSION_1_0 && m_replay->GetDispatch().real_eglGetCurrentSurface)
      m_replay->GetDispatch().real_eglGetCurrentSurface(GetI32(EGLint, 0));
   else
      WarnNotAvailable("eglGetCurrentSurface");
#else
   WarnNotAvailable("eglGetCurrentSurface");
#endif
}
void Command::run_eglGetDisplay()
{
#if EGL_VERSION_1_0
   if (m_packet.NumItems() > 2)
      WarnDataNotHandled("eglGetDisplay");
   if (m_replay->GetDeviceCaps().m_has_EGL_VERSION_1_0 && m_replay->GetDispatch().real_eglGetDisplay)
      m_replay->GetDispatch().real_eglGetDisplay(GetPtr(EGLNativeDisplayType, 0));
   else
      WarnNotAvailable("eglGetDisplay");
#else
   WarnNotAvailable("eglGetDisplay");
#endif
}
void Command::run_eglGetError()
{
#if EGL_VERSION_1_0
   if (m_packet.NumItems() > 1)
      WarnDataNotHandled("eglGetError");
   if (m_replay->GetDeviceCaps().m_has_EGL_VERSION_1_0 && m_replay->GetDispatch().real_eglGetError)
      m_replay->GetDispatch().real_eglGetError();
   else
      WarnNotAvailable("eglGetError");
#else
   WarnNotAvailable("eglGetError");
#endif
}
void Command::run_eglGetProcAddress()
{
#if EGL_VERSION_1_0
   if (m_packet.NumItems() > 2)
      WarnDataNotHandled("eglGetProcAddress");
   if (m_replay->GetDeviceCaps().m_has_EGL_VERSION_1_0 && m_replay->GetDispatch().real_eglGetProcAddress)
      m_replay->GetDispatch().real_eglGetProcAddress(GetCP(const char *, 0));
   else
      WarnNotAvailable("eglGetProcAddress");
#else
   WarnNotAvailable("eglGetProcAddress");
#endif
}
void Command::run_eglInitialize()
{
#if EGL_VERSION_1_0
   if (m_packet.NumItems() > 4)
      WarnDataNotHandled("eglInitialize");
   if (m_replay->GetDeviceCaps().m_has_EGL_VERSION_1_0 && m_replay->GetDispatch().real_eglInitialize)
      m_replay->GetDispatch().real_eglInitialize(GetEGLDisplay(EGLDisplay, 0), dummyEGLint, dummyEGLint);
   else
      WarnNotAvailable("eglInitialize");
#else
   WarnNotAvailable("eglInitialize");
#endif
}
void Command::run_eglMakeCurrent()
{
#if EGL_VERSION_1_0
   if (m_packet.NumItems() > 5)
      WarnDataNotHandled("eglMakeCurrent");
   if (m_replay->GetDeviceCaps().m_has_EGL_VERSION_1_0 && m_replay->GetDispatch().real_eglMakeCurrent)
      m_replay->GetDispatch().real_eglMakeCurrent(GetEGLDisplay(EGLDisplay, 0), GetEGLSurface(EGLSurface, 1), GetEGLSurface(EGLSurface, 2), GetEGLContext(EGLContext, 3));
   else
      WarnNotAvailable("eglMakeCurrent");
#else
   WarnNotAvailable("eglMakeCurrent");
#endif
}
void Command::run_eglQueryContext()
{
#if EGL_VERSION_1_0
   if (m_packet.NumItems() > 5)
      WarnDataNotHandled("eglQueryContext");
   if (m_replay->GetDeviceCaps().m_has_EGL_VERSION_1_0 && m_replay->GetDispatch().real_eglQueryContext)
      m_replay->GetDispatch().real_eglQueryContext(GetEGLDisplay(EGLDisplay, 0), GetEGLContext(EGLContext, 1), GetI32(EGLint, 2), dummyEGLint);
   else
      WarnNotAvailable("eglQueryContext");
#else
   WarnNotAvailable("eglQueryContext");
#endif
}
void Command::run_eglQueryString()
{
#if EGL_VERSION_1_0
   if (m_packet.NumItems() > 3)
      WarnDataNotHandled("eglQueryString");
   if (m_replay->GetDeviceCaps().m_has_EGL_VERSION_1_0 && m_replay->GetDispatch().real_eglQueryString)
      m_replay->GetDispatch().real_eglQueryString(GetEGLDisplay(EGLDisplay, 0), GetI32(EGLint, 1));
   else
      WarnNotAvailable("eglQueryString");
#else
   WarnNotAvailable("eglQueryString");
#endif
}
void Command::run_eglQuerySurface()
{
#if EGL_VERSION_1_0
   if (m_packet.NumItems() > 5)
      WarnDataNotHandled("eglQuerySurface");
   if (m_replay->GetDeviceCaps().m_has_EGL_VERSION_1_0 && m_replay->GetDispatch().real_eglQuerySurface)
      m_replay->GetDispatch().real_eglQuerySurface(GetEGLDisplay(EGLDisplay, 0), GetEGLSurface(EGLSurface, 1), GetI32(EGLint, 2), dummyEGLint);
   else
      WarnNotAvailable("eglQuerySurface");
#else
   WarnNotAvailable("eglQuerySurface");
#endif
}
void Command::run_eglSwapBuffers()
{
#if EGL_VERSION_1_0
   if (m_packet.NumItems() > 3)
      WarnDataNotHandled("eglSwapBuffers");
   if (m_replay->GetDeviceCaps().m_has_EGL_VERSION_1_0 && m_replay->GetDispatch().real_eglSwapBuffers)
      m_replay->GetDispatch().real_eglSwapBuffers(GetEGLDisplay(EGLDisplay, 0), GetEGLSurface(EGLSurface, 1));
   else
      WarnNotAvailable("eglSwapBuffers");
#else
   WarnNotAvailable("eglSwapBuffers");
#endif
}
void Command::run_eglTerminate()
{
#if EGL_VERSION_1_0
   if (m_packet.NumItems() > 2)
      WarnDataNotHandled("eglTerminate");
   if (m_replay->GetDeviceCaps().m_has_EGL_VERSION_1_0 && m_replay->GetDispatch().real_eglTerminate)
      m_replay->GetDispatch().real_eglTerminate(GetEGLDisplay(EGLDisplay, 0));
   else
      WarnNotAvailable("eglTerminate");
#else
   WarnNotAvailable("eglTerminate");
#endif
}
void Command::run_eglWaitGL()
{
#if EGL_VERSION_1_0
   if (m_packet.NumItems() > 1)
      WarnDataNotHandled("eglWaitGL");
   if (m_replay->GetDeviceCaps().m_has_EGL_VERSION_1_0 && m_replay->GetDispatch().real_eglWaitGL)
      m_replay->GetDispatch().real_eglWaitGL();
   else
      WarnNotAvailable("eglWaitGL");
#else
   WarnNotAvailable("eglWaitGL");
#endif
}
void Command::run_eglWaitNative()
{
#if EGL_VERSION_1_0
   if (m_packet.NumItems() > 2)
      WarnDataNotHandled("eglWaitNative");
   if (m_replay->GetDeviceCaps().m_has_EGL_VERSION_1_0 && m_replay->GetDispatch().real_eglWaitNative)
      m_replay->GetDispatch().real_eglWaitNative(GetI32(EGLint, 0));
   else
      WarnNotAvailable("eglWaitNative");
#else
   WarnNotAvailable("eglWaitNative");
#endif
}
void Command::run_glAlphaFunc()
{
#if GL_VERSION_ES_CM_1_0
   if (m_packet.NumItems() > 3)
      WarnDataNotHandled("glAlphaFunc");
   if (m_replay->GetDeviceCaps().m_has_GL_VERSION_ES_CM_1_0 && m_replay->GetDispatch().real_glAlphaFunc)
      m_replay->GetDispatch().real_glAlphaFunc(GetU32(GLenum, 0), GetF(GLfloat, 1));
   else
      WarnNotAvailable("glAlphaFunc");
#else
   WarnNotAvailable("glAlphaFunc");
#endif
}
void Command::run_glClearColor()
{
#if GL_VERSION_ES_CM_1_0
   if (m_packet.NumItems() > 5)
      WarnDataNotHandled("glClearColor");
   if (m_replay->GetDeviceCaps().m_has_GL_VERSION_ES_CM_1_0 && m_replay->GetDispatch().real_glClearColor)
      m_replay->GetDispatch().real_glClearColor(GetF(GLfloat, 0), GetF(GLfloat, 1), GetF(GLfloat, 2), GetF(GLfloat, 3));
   else
      WarnNotAvailable("glClearColor");
#else
   WarnNotAvailable("glClearColor");
#endif
}
void Command::run_glClearDepthf()
{
#if GL_VERSION_ES_CM_1_0
   if (m_packet.NumItems() > 2)
      WarnDataNotHandled("glClearDepthf");
   if (m_replay->GetDeviceCaps().m_has_GL_VERSION_ES_CM_1_0 && m_replay->GetDispatch().real_glClearDepthf)
      m_replay->GetDispatch().real_glClearDepthf(GetF(GLfloat, 0));
   else
      WarnNotAvailable("glClearDepthf");
#else
   WarnNotAvailable("glClearDepthf");
#endif
}
void Command::run_glClipPlanef()
{
#if GL_VERSION_ES_CM_1_0
   if (m_packet.NumItems() > 4)
      WarnDataNotHandled("glClipPlanef");
   if (m_replay->GetDeviceCaps().m_has_GL_VERSION_ES_CM_1_0 && m_replay->GetDispatch().real_glClipPlanef)
      m_replay->GetDispatch().real_glClipPlanef(GetU32(GLenum, 0), GetArrayPtr(const GLfloat *, 2));
   else
      WarnNotAvailable("glClipPlanef");
#else
   WarnNotAvailable("glClipPlanef");
#endif
}
void Command::run_glColor4f()
{
#if GL_VERSION_ES_CM_1_0
   if (m_packet.NumItems() > 5)
      WarnDataNotHandled("glColor4f");
   if (m_replay->GetDeviceCaps().m_has_GL_VERSION_ES_CM_1_0 && m_replay->GetDispatch().real_glColor4f)
      m_replay->GetDispatch().real_glColor4f(GetF(GLfloat, 0), GetF(GLfloat, 1), GetF(GLfloat, 2), GetF(GLfloat, 3));
   else
      WarnNotAvailable("glColor4f");
#else
   WarnNotAvailable("glColor4f");
#endif
}
void Command::run_glDepthRangef()
{
#if GL_VERSION_ES_CM_1_0
   if (m_packet.NumItems() > 3)
      WarnDataNotHandled("glDepthRangef");
   if (m_replay->GetDeviceCaps().m_has_GL_VERSION_ES_CM_1_0 && m_replay->GetDispatch().real_glDepthRangef)
      m_replay->GetDispatch().real_glDepthRangef(GetF(GLfloat, 0), GetF(GLfloat, 1));
   else
      WarnNotAvailable("glDepthRangef");
#else
   WarnNotAvailable("glDepthRangef");
#endif
}
void Command::run_glFogf()
{
#if GL_VERSION_ES_CM_1_0
   if (m_packet.NumItems() > 3)
      WarnDataNotHandled("glFogf");
   if (m_replay->GetDeviceCaps().m_has_GL_VERSION_ES_CM_1_0 && m_replay->GetDispatch().real_glFogf)
      m_replay->GetDispatch().real_glFogf(GetU32(GLenum, 0), GetF(GLfloat, 1));
   else
      WarnNotAvailable("glFogf");
#else
   WarnNotAvailable("glFogf");
#endif
}
void Command::run_glFogfv()
{
#if GL_VERSION_ES_CM_1_0
   if (m_packet.NumItems() > 4)
      WarnDataNotHandled("glFogfv");
   if (m_replay->GetDeviceCaps().m_has_GL_VERSION_ES_CM_1_0 && m_replay->GetDispatch().real_glFogfv)
      m_replay->GetDispatch().real_glFogfv(GetU32(GLenum, 0), GetArrayPtr(const GLfloat *, 2));
   else
      WarnNotAvailable("glFogfv");
#else
   WarnNotAvailable("glFogfv");
#endif
}
void Command::run_glFrustumf()
{
#if GL_VERSION_ES_CM_1_0
   if (m_packet.NumItems() > 7)
      WarnDataNotHandled("glFrustumf");
   if (m_replay->GetDeviceCaps().m_has_GL_VERSION_ES_CM_1_0 && m_replay->GetDispatch().real_glFrustumf)
      m_replay->GetDispatch().real_glFrustumf(GetF(GLfloat, 0), GetF(GLfloat, 1), GetF(GLfloat, 2), GetF(GLfloat, 3), GetF(GLfloat, 4), GetF(GLfloat, 5));
   else
      WarnNotAvailable("glFrustumf");
#else
   WarnNotAvailable("glFrustumf");
#endif
}
void Command::run_glGetClipPlanef()
{
#if GL_VERSION_ES_CM_1_0
   if (m_packet.NumItems() > 3)
      WarnDataNotHandled("glGetClipPlanef");
   if (m_replay->GetDeviceCaps().m_has_GL_VERSION_ES_CM_1_0 && m_replay->GetDispatch().real_glGetClipPlanef)
      m_replay->GetDispatch().real_glGetClipPlanef(GetU32(GLenum, 0), dummyGLfloat);
   else
      WarnNotAvailable("glGetClipPlanef");
#else
   WarnNotAvailable("glGetClipPlanef");
#endif
}
void Command::run_glGetFloatv()
{
#if GL_VERSION_ES_CM_1_0
   if (m_packet.NumItems() > 3)
      WarnDataNotHandled("glGetFloatv");
   if (m_replay->GetDeviceCaps().m_has_GL_VERSION_ES_CM_1_0 && m_replay->GetDispatch().real_glGetFloatv)
      m_replay->GetDispatch().real_glGetFloatv(GetU32(GLenum, 0), dummyGLfloat);
   else
      WarnNotAvailable("glGetFloatv");
#else
   WarnNotAvailable("glGetFloatv");
#endif
}
void Command::run_glGetLightfv()
{
#if GL_VERSION_ES_CM_1_0
   if (m_packet.NumItems() > 4)
      WarnDataNotHandled("glGetLightfv");
   if (m_replay->GetDeviceCaps().m_has_GL_VERSION_ES_CM_1_0 && m_replay->GetDispatch().real_glGetLightfv)
      m_replay->GetDispatch().real_glGetLightfv(GetU32(GLenum, 0), GetU32(GLenum, 1), dummyGLfloat);
   else
      WarnNotAvailable("glGetLightfv");
#else
   WarnNotAvailable("glGetLightfv");
#endif
}
void Command::run_glGetMaterialfv()
{
#if GL_VERSION_ES_CM_1_0
   if (m_packet.NumItems() > 4)
      WarnDataNotHandled("glGetMaterialfv");
   if (m_replay->GetDeviceCaps().m_has_GL_VERSION_ES_CM_1_0 && m_replay->GetDispatch().real_glGetMaterialfv)
      m_replay->GetDispatch().real_glGetMaterialfv(GetU32(GLenum, 0), GetU32(GLenum, 1), dummyGLfloat);
   else
      WarnNotAvailable("glGetMaterialfv");
#else
   WarnNotAvailable("glGetMaterialfv");
#endif
}
void Command::run_glGetTexEnvfv()
{
#if GL_VERSION_ES_CM_1_0
   if (m_packet.NumItems() > 4)
      WarnDataNotHandled("glGetTexEnvfv");
   if (m_replay->GetDeviceCaps().m_has_GL_VERSION_ES_CM_1_0 && m_replay->GetDispatch().real_glGetTexEnvfv)
      m_replay->GetDispatch().real_glGetTexEnvfv(GetU32(GLenum, 0), GetU32(GLenum, 1), dummyGLfloat);
   else
      WarnNotAvailable("glGetTexEnvfv");
#else
   WarnNotAvailable("glGetTexEnvfv");
#endif
}
void Command::run_glGetTexParameterfv()
{
#if GL_VERSION_ES_CM_1_0
   if (m_packet.NumItems() > 4)
      WarnDataNotHandled("glGetTexParameterfv");
   if (m_replay->GetDeviceCaps().m_has_GL_VERSION_ES_CM_1_0 && m_replay->GetDispatch().real_glGetTexParameterfv)
      m_replay->GetDispatch().real_glGetTexParameterfv(GetU32(GLenum, 0), GetU32(GLenum, 1), dummyGLfloat);
   else
      WarnNotAvailable("glGetTexParameterfv");
#else
   WarnNotAvailable("glGetTexParameterfv");
#endif
}
void Command::run_glLightModelf()
{
#if GL_VERSION_ES_CM_1_0
   if (m_packet.NumItems() > 3)
      WarnDataNotHandled("glLightModelf");
   if (m_replay->GetDeviceCaps().m_has_GL_VERSION_ES_CM_1_0 && m_replay->GetDispatch().real_glLightModelf)
      m_replay->GetDispatch().real_glLightModelf(GetU32(GLenum, 0), GetF(GLfloat, 1));
   else
      WarnNotAvailable("glLightModelf");
#else
   WarnNotAvailable("glLightModelf");
#endif
}
void Command::run_glLightModelfv()
{
#if GL_VERSION_ES_CM_1_0
   if (m_packet.NumItems() > 4)
      WarnDataNotHandled("glLightModelfv");
   if (m_replay->GetDeviceCaps().m_has_GL_VERSION_ES_CM_1_0 && m_replay->GetDispatch().real_glLightModelfv)
      m_replay->GetDispatch().real_glLightModelfv(GetU32(GLenum, 0), GetArrayPtr(const GLfloat *, 2));
   else
      WarnNotAvailable("glLightModelfv");
#else
   WarnNotAvailable("glLightModelfv");
#endif
}
void Command::run_glLightf()
{
#if GL_VERSION_ES_CM_1_0
   if (m_packet.NumItems() > 4)
      WarnDataNotHandled("glLightf");
   if (m_replay->GetDeviceCaps().m_has_GL_VERSION_ES_CM_1_0 && m_replay->GetDispatch().real_glLightf)
      m_replay->GetDispatch().real_glLightf(GetU32(GLenum, 0), GetU32(GLenum, 1), GetF(GLfloat, 2));
   else
      WarnNotAvailable("glLightf");
#else
   WarnNotAvailable("glLightf");
#endif
}
void Command::run_glLightfv()
{
#if GL_VERSION_ES_CM_1_0
   if (m_packet.NumItems() > 5)
      WarnDataNotHandled("glLightfv");
   if (m_replay->GetDeviceCaps().m_has_GL_VERSION_ES_CM_1_0 && m_replay->GetDispatch().real_glLightfv)
      m_replay->GetDispatch().real_glLightfv(GetU32(GLenum, 0), GetU32(GLenum, 1), GetArrayPtr(const GLfloat *, 3));
   else
      WarnNotAvailable("glLightfv");
#else
   WarnNotAvailable("glLightfv");
#endif
}
void Command::run_glLineWidth()
{
#if GL_VERSION_ES_CM_1_0
   if (m_packet.NumItems() > 2)
      WarnDataNotHandled("glLineWidth");
   if (m_replay->GetDeviceCaps().m_has_GL_VERSION_ES_CM_1_0 && m_replay->GetDispatch().real_glLineWidth)
      m_replay->GetDispatch().real_glLineWidth(GetF(GLfloat, 0));
   else
      WarnNotAvailable("glLineWidth");
#else
   WarnNotAvailable("glLineWidth");
#endif
}
void Command::run_glLoadMatrixf()
{
#if GL_VERSION_ES_CM_1_0
   if (m_packet.NumItems() > 3)
      WarnDataNotHandled("glLoadMatrixf");
   if (m_replay->GetDeviceCaps().m_has_GL_VERSION_ES_CM_1_0 && m_replay->GetDispatch().real_glLoadMatrixf)
      m_replay->GetDispatch().real_glLoadMatrixf(GetArrayPtr(const GLfloat *, 1));
   else
      WarnNotAvailable("glLoadMatrixf");
#else
   WarnNotAvailable("glLoadMatrixf");
#endif
}
void Command::run_glMaterialf()
{
#if GL_VERSION_ES_CM_1_0
   if (m_packet.NumItems() > 4)
      WarnDataNotHandled("glMaterialf");
   if (m_replay->GetDeviceCaps().m_has_GL_VERSION_ES_CM_1_0 && m_replay->GetDispatch().real_glMaterialf)
      m_replay->GetDispatch().real_glMaterialf(GetU32(GLenum, 0), GetU32(GLenum, 1), GetF(GLfloat, 2));
   else
      WarnNotAvailable("glMaterialf");
#else
   WarnNotAvailable("glMaterialf");
#endif
}
void Command::run_glMaterialfv()
{
#if GL_VERSION_ES_CM_1_0
   if (m_packet.NumItems() > 5)
      WarnDataNotHandled("glMaterialfv");
   if (m_replay->GetDeviceCaps().m_has_GL_VERSION_ES_CM_1_0 && m_replay->GetDispatch().real_glMaterialfv)
      m_replay->GetDispatch().real_glMaterialfv(GetU32(GLenum, 0), GetU32(GLenum, 1), GetArrayPtr(const GLfloat *, 3));
   else
      WarnNotAvailable("glMaterialfv");
#else
   WarnNotAvailable("glMaterialfv");
#endif
}
void Command::run_glMultMatrixf()
{
#if GL_VERSION_ES_CM_1_0
   if (m_packet.NumItems() > 3)
      WarnDataNotHandled("glMultMatrixf");
   if (m_replay->GetDeviceCaps().m_has_GL_VERSION_ES_CM_1_0 && m_replay->GetDispatch().real_glMultMatrixf)
      m_replay->GetDispatch().real_glMultMatrixf(GetArrayPtr(const GLfloat *, 1));
   else
      WarnNotAvailable("glMultMatrixf");
#else
   WarnNotAvailable("glMultMatrixf");
#endif
}
void Command::run_glMultiTexCoord4f()
{
#if GL_VERSION_ES_CM_1_0
   if (m_packet.NumItems() > 6)
      WarnDataNotHandled("glMultiTexCoord4f");
   if (m_replay->GetDeviceCaps().m_has_GL_VERSION_ES_CM_1_0 && m_replay->GetDispatch().real_glMultiTexCoord4f)
      m_replay->GetDispatch().real_glMultiTexCoord4f(GetU32(GLenum, 0), GetF(GLfloat, 1), GetF(GLfloat, 2), GetF(GLfloat, 3), GetF(GLfloat, 4));
   else
      WarnNotAvailable("glMultiTexCoord4f");
#else
   WarnNotAvailable("glMultiTexCoord4f");
#endif
}
void Command::run_glNormal3f()
{
#if GL_VERSION_ES_CM_1_0
   if (m_packet.NumItems() > 4)
      WarnDataNotHandled("glNormal3f");
   if (m_replay->GetDeviceCaps().m_has_GL_VERSION_ES_CM_1_0 && m_replay->GetDispatch().real_glNormal3f)
      m_replay->GetDispatch().real_glNormal3f(GetF(GLfloat, 0), GetF(GLfloat, 1), GetF(GLfloat, 2));
   else
      WarnNotAvailable("glNormal3f");
#else
   WarnNotAvailable("glNormal3f");
#endif
}
void Command::run_glOrthof()
{
#if GL_VERSION_ES_CM_1_0
   if (m_packet.NumItems() > 7)
      WarnDataNotHandled("glOrthof");
   if (m_replay->GetDeviceCaps().m_has_GL_VERSION_ES_CM_1_0 && m_replay->GetDispatch().real_glOrthof)
      m_replay->GetDispatch().real_glOrthof(GetF(GLfloat, 0), GetF(GLfloat, 1), GetF(GLfloat, 2), GetF(GLfloat, 3), GetF(GLfloat, 4), GetF(GLfloat, 5));
   else
      WarnNotAvailable("glOrthof");
#else
   WarnNotAvailable("glOrthof");
#endif
}
void Command::run_glPointParameterf()
{
#if GL_VERSION_ES_CM_1_0
   if (m_packet.NumItems() > 3)
      WarnDataNotHandled("glPointParameterf");
   if (m_replay->GetDeviceCaps().m_has_GL_VERSION_ES_CM_1_0 && m_replay->GetDispatch().real_glPointParameterf)
      m_replay->GetDispatch().real_glPointParameterf(GetU32(GLenum, 0), GetF(GLfloat, 1));
   else
      WarnNotAvailable("glPointParameterf");
#else
   WarnNotAvailable("glPointParameterf");
#endif
}
void Command::run_glPointParameterfv()
{
#if GL_VERSION_ES_CM_1_0
   if (m_packet.NumItems() > 4)
      WarnDataNotHandled("glPointParameterfv");
   if (m_replay->GetDeviceCaps().m_has_GL_VERSION_ES_CM_1_0 && m_replay->GetDispatch().real_glPointParameterfv)
      m_replay->GetDispatch().real_glPointParameterfv(GetU32(GLenum, 0), GetArrayPtr(const GLfloat *, 2));
   else
      WarnNotAvailable("glPointParameterfv");
#else
   WarnNotAvailable("glPointParameterfv");
#endif
}
void Command::run_glPointSize()
{
#if GL_VERSION_ES_CM_1_0
   if (m_packet.NumItems() > 2)
      WarnDataNotHandled("glPointSize");
   if (m_replay->GetDeviceCaps().m_has_GL_VERSION_ES_CM_1_0 && m_replay->GetDispatch().real_glPointSize)
      m_replay->GetDispatch().real_glPointSize(GetF(GLfloat, 0));
   else
      WarnNotAvailable("glPointSize");
#else
   WarnNotAvailable("glPointSize");
#endif
}
void Command::run_glPolygonOffset()
{
#if GL_VERSION_ES_CM_1_0
   if (m_packet.NumItems() > 3)
      WarnDataNotHandled("glPolygonOffset");
   if (m_replay->GetDeviceCaps().m_has_GL_VERSION_ES_CM_1_0 && m_replay->GetDispatch().real_glPolygonOffset)
      m_replay->GetDispatch().real_glPolygonOffset(GetF(GLfloat, 0), GetF(GLfloat, 1));
   else
      WarnNotAvailable("glPolygonOffset");
#else
   WarnNotAvailable("glPolygonOffset");
#endif
}
void Command::run_glRotatef()
{
#if GL_VERSION_ES_CM_1_0
   if (m_packet.NumItems() > 5)
      WarnDataNotHandled("glRotatef");
   if (m_replay->GetDeviceCaps().m_has_GL_VERSION_ES_CM_1_0 && m_replay->GetDispatch().real_glRotatef)
      m_replay->GetDispatch().real_glRotatef(GetF(GLfloat, 0), GetF(GLfloat, 1), GetF(GLfloat, 2), GetF(GLfloat, 3));
   else
      WarnNotAvailable("glRotatef");
#else
   WarnNotAvailable("glRotatef");
#endif
}
void Command::run_glScalef()
{
#if GL_VERSION_ES_CM_1_0
   if (m_packet.NumItems() > 4)
      WarnDataNotHandled("glScalef");
   if (m_replay->GetDeviceCaps().m_has_GL_VERSION_ES_CM_1_0 && m_replay->GetDispatch().real_glScalef)
      m_replay->GetDispatch().real_glScalef(GetF(GLfloat, 0), GetF(GLfloat, 1), GetF(GLfloat, 2));
   else
      WarnNotAvailable("glScalef");
#else
   WarnNotAvailable("glScalef");
#endif
}
void Command::run_glTexEnvf()
{
#if GL_VERSION_ES_CM_1_0
   if (m_packet.NumItems() > 4)
      WarnDataNotHandled("glTexEnvf");
   if (m_replay->GetDeviceCaps().m_has_GL_VERSION_ES_CM_1_0 && m_replay->GetDispatch().real_glTexEnvf)
      m_replay->GetDispatch().real_glTexEnvf(GetU32(GLenum, 0), GetU32(GLenum, 1), GetF(GLfloat, 2));
   else
      WarnNotAvailable("glTexEnvf");
#else
   WarnNotAvailable("glTexEnvf");
#endif
}
void Command::run_glTexEnvfv()
{
#if GL_VERSION_ES_CM_1_0
   if (m_packet.NumItems() > 5)
      WarnDataNotHandled("glTexEnvfv");
   if (m_replay->GetDeviceCaps().m_has_GL_VERSION_ES_CM_1_0 && m_replay->GetDispatch().real_glTexEnvfv)
      m_replay->GetDispatch().real_glTexEnvfv(GetU32(GLenum, 0), GetU32(GLenum, 1), GetArrayPtr(const GLfloat *, 3));
   else
      WarnNotAvailable("glTexEnvfv");
#else
   WarnNotAvailable("glTexEnvfv");
#endif
}
void Command::run_glTexParameterf()
{
#if GL_VERSION_ES_CM_1_0
   if (m_packet.NumItems() > 4)
      WarnDataNotHandled("glTexParameterf");
   if (m_replay->GetDeviceCaps().m_has_GL_VERSION_ES_CM_1_0 && m_replay->GetDispatch().real_glTexParameterf)
      m_replay->GetDispatch().real_glTexParameterf(GetU32(GLenum, 0), GetU32(GLenum, 1), GetF(GLfloat, 2));
   else
      WarnNotAvailable("glTexParameterf");
#else
   WarnNotAvailable("glTexParameterf");
#endif
}
void Command::run_glTexParameterfv()
{
#if GL_VERSION_ES_CM_1_0
   if (m_packet.NumItems() > 5)
      WarnDataNotHandled("glTexParameterfv");
   if (m_replay->GetDeviceCaps().m_has_GL_VERSION_ES_CM_1_0 && m_replay->GetDispatch().real_glTexParameterfv)
      m_replay->GetDispatch().real_glTexParameterfv(GetU32(GLenum, 0), GetU32(GLenum, 1), GetArrayPtr(const GLfloat *, 3));
   else
      WarnNotAvailable("glTexParameterfv");
#else
   WarnNotAvailable("glTexParameterfv");
#endif
}
void Command::run_glTranslatef()
{
#if GL_VERSION_ES_CM_1_0
   if (m_packet.NumItems() > 4)
      WarnDataNotHandled("glTranslatef");
   if (m_replay->GetDeviceCaps().m_has_GL_VERSION_ES_CM_1_0 && m_replay->GetDispatch().real_glTranslatef)
      m_replay->GetDispatch().real_glTranslatef(GetF(GLfloat, 0), GetF(GLfloat, 1), GetF(GLfloat, 2));
   else
      WarnNotAvailable("glTranslatef");
#else
   WarnNotAvailable("glTranslatef");
#endif
}
void Command::run_glActiveTexture()
{
#if GL_VERSION_ES_CM_1_0
   if (m_packet.NumItems() > 2)
      WarnDataNotHandled("glActiveTexture");
   if (m_replay->GetDeviceCaps().m_has_GL_VERSION_ES_CM_1_0 && m_replay->GetDispatch().real_glActiveTexture)
      m_replay->GetDispatch().real_glActiveTexture(GetU32(GLenum, 0));
   else
      WarnNotAvailable("glActiveTexture");
#else
   WarnNotAvailable("glActiveTexture");
#endif
}
void Command::run_glAlphaFuncx()
{
#if GL_VERSION_ES_CM_1_0
   if (m_packet.NumItems() > 3)
      WarnDataNotHandled("glAlphaFuncx");
   if (m_replay->GetDeviceCaps().m_has_GL_VERSION_ES_CM_1_0 && m_replay->GetDispatch().real_glAlphaFuncx)
      m_replay->GetDispatch().real_glAlphaFuncx(GetU32(GLenum, 0), GetU32(GLfixed, 1));
   else
      WarnNotAvailable("glAlphaFuncx");
#else
   WarnNotAvailable("glAlphaFuncx");
#endif
}
void Command::run_glBindBuffer()
{
#if GL_VERSION_ES_CM_1_0
   if (m_packet.NumItems() > 3)
      WarnDataNotHandled("glBindBuffer");
   if (m_replay->GetDeviceCaps().m_has_GL_VERSION_ES_CM_1_0 && m_replay->GetDispatch().real_glBindBuffer)
      m_replay->GetDispatch().real_glBindBuffer(GetU32(GLenum, 0), GetU32(GLuint, 1));
   else
      WarnNotAvailable("glBindBuffer");
#else
   WarnNotAvailable("glBindBuffer");
#endif
}
void Command::run_glBindTexture()
{
#if GL_VERSION_ES_CM_1_0
   if (m_packet.NumItems() > 3)
      WarnDataNotHandled("glBindTexture");
   if (m_replay->GetDeviceCaps().m_has_GL_VERSION_ES_CM_1_0 && m_replay->GetDispatch().real_glBindTexture)
      m_replay->GetDispatch().real_glBindTexture(GetU32(GLenum, 0), GetU32(GLuint, 1));
   else
      WarnNotAvailable("glBindTexture");
#else
   WarnNotAvailable("glBindTexture");
#endif
}
void Command::run_glBlendFunc()
{
#if GL_VERSION_ES_CM_1_0
   if (m_packet.NumItems() > 3)
      WarnDataNotHandled("glBlendFunc");
   if (m_replay->GetDeviceCaps().m_has_GL_VERSION_ES_CM_1_0 && m_replay->GetDispatch().real_glBlendFunc)
      m_replay->GetDispatch().real_glBlendFunc(GetU32(GLenum, 0), GetU32(GLenum, 1));
   else
      WarnNotAvailable("glBlendFunc");
#else
   WarnNotAvailable("glBlendFunc");
#endif
}
void Command::run_glBufferData()
{
#if GL_VERSION_ES_CM_1_0
   if (m_packet.NumItems() > 6)
      WarnDataNotHandled("glBufferData");
   if (m_replay->GetDeviceCaps().m_has_GL_VERSION_ES_CM_1_0 && m_replay->GetDispatch().real_glBufferData)
      m_replay->GetDispatch().real_glBufferData(GetU32(GLenum, 0), GetPtr(GLsizeiptr, 1), GetArrayPtr(const void *, 4), GetU32(GLenum, 3));
   else
      WarnNotAvailable("glBufferData");
#else
   WarnNotAvailable("glBufferData");
#endif
}
void Command::run_glBufferSubData()
{
#if GL_VERSION_ES_CM_1_0
   if (m_packet.NumItems() > 6)
      WarnDataNotHandled("glBufferSubData");
   if (m_replay->GetDeviceCaps().m_has_GL_VERSION_ES_CM_1_0 && m_replay->GetDispatch().real_glBufferSubData)
      m_replay->GetDispatch().real_glBufferSubData(GetU32(GLenum, 0), GetPtr(GLintptr, 1), GetPtr(GLsizeiptr, 2), GetArrayPtr(const void *, 4));
   else
      WarnNotAvailable("glBufferSubData");
#else
   WarnNotAvailable("glBufferSubData");
#endif
}
void Command::run_glClear()
{
#if GL_VERSION_ES_CM_1_0
   if (m_packet.NumItems() > 2)
      WarnDataNotHandled("glClear");
   if (m_replay->GetDeviceCaps().m_has_GL_VERSION_ES_CM_1_0 && m_replay->GetDispatch().real_glClear)
      m_replay->GetDispatch().real_glClear(GetU32(GLbitfield, 0));
   else
      WarnNotAvailable("glClear");
#else
   WarnNotAvailable("glClear");
#endif
}
void Command::run_glClearColorx()
{
#if GL_VERSION_ES_CM_1_0
   if (m_packet.NumItems() > 5)
      WarnDataNotHandled("glClearColorx");
   if (m_replay->GetDeviceCaps().m_has_GL_VERSION_ES_CM_1_0 && m_replay->GetDispatch().real_glClearColorx)
      m_replay->GetDispatch().real_glClearColorx(GetU32(GLfixed, 0), GetU32(GLfixed, 1), GetU32(GLfixed, 2), GetU32(GLfixed, 3));
   else
      WarnNotAvailable("glClearColorx");
#else
   WarnNotAvailable("glClearColorx");
#endif
}
void Command::run_glClearDepthx()
{
#if GL_VERSION_ES_CM_1_0
   if (m_packet.NumItems() > 2)
      WarnDataNotHandled("glClearDepthx");
   if (m_replay->GetDeviceCaps().m_has_GL_VERSION_ES_CM_1_0 && m_replay->GetDispatch().real_glClearDepthx)
      m_replay->GetDispatch().real_glClearDepthx(GetU32(GLfixed, 0));
   else
      WarnNotAvailable("glClearDepthx");
#else
   WarnNotAvailable("glClearDepthx");
#endif
}
void Command::run_glClearStencil()
{
#if GL_VERSION_ES_CM_1_0
   if (m_packet.NumItems() > 2)
      WarnDataNotHandled("glClearStencil");
   if (m_replay->GetDeviceCaps().m_has_GL_VERSION_ES_CM_1_0 && m_replay->GetDispatch().real_glClearStencil)
      m_replay->GetDispatch().real_glClearStencil(GetI32(GLint, 0));
   else
      WarnNotAvailable("glClearStencil");
#else
   WarnNotAvailable("glClearStencil");
#endif
}
void Command::run_glClientActiveTexture()
{
#if GL_VERSION_ES_CM_1_0
   if (m_packet.NumItems() > 2)
      WarnDataNotHandled("glClientActiveTexture");
   if (m_replay->GetDeviceCaps().m_has_GL_VERSION_ES_CM_1_0 && m_replay->GetDispatch().real_glClientActiveTexture)
      m_replay->GetDispatch().real_glClientActiveTexture(GetU32(GLenum, 0));
   else
      WarnNotAvailable("glClientActiveTexture");
#else
   WarnNotAvailable("glClientActiveTexture");
#endif
}
void Command::run_glClipPlanex()
{
#if GL_VERSION_ES_CM_1_0
   if (m_packet.NumItems() > 4)
      WarnDataNotHandled("glClipPlanex");
   if (m_replay->GetDeviceCaps().m_has_GL_VERSION_ES_CM_1_0 && m_replay->GetDispatch().real_glClipPlanex)
      m_replay->GetDispatch().real_glClipPlanex(GetU32(GLenum, 0), GetArrayPtr(const GLfixed *, 2));
   else
      WarnNotAvailable("glClipPlanex");
#else
   WarnNotAvailable("glClipPlanex");
#endif
}
void Command::run_glColor4ub()
{
#if GL_VERSION_ES_CM_1_0
   if (m_packet.NumItems() > 5)
      WarnDataNotHandled("glColor4ub");
   if (m_replay->GetDeviceCaps().m_has_GL_VERSION_ES_CM_1_0 && m_replay->GetDispatch().real_glColor4ub)
      m_replay->GetDispatch().real_glColor4ub(GetU8(GLubyte, 0), GetU8(GLubyte, 1), GetU8(GLubyte, 2), GetU8(GLubyte, 3));
   else
      WarnNotAvailable("glColor4ub");
#else
   WarnNotAvailable("glColor4ub");
#endif
}
void Command::run_glColor4x()
{
#if GL_VERSION_ES_CM_1_0
   if (m_packet.NumItems() > 5)
      WarnDataNotHandled("glColor4x");
   if (m_replay->GetDeviceCaps().m_has_GL_VERSION_ES_CM_1_0 && m_replay->GetDispatch().real_glColor4x)
      m_replay->GetDispatch().real_glColor4x(GetU32(GLfixed, 0), GetU32(GLfixed, 1), GetU32(GLfixed, 2), GetU32(GLfixed, 3));
   else
      WarnNotAvailable("glColor4x");
#else
   WarnNotAvailable("glColor4x");
#endif
}
void Command::run_glColorMask()
{
#if GL_VERSION_ES_CM_1_0
   if (m_packet.NumItems() > 5)
      WarnDataNotHandled("glColorMask");
   if (m_replay->GetDeviceCaps().m_has_GL_VERSION_ES_CM_1_0 && m_replay->GetDispatch().real_glColorMask)
      m_replay->GetDispatch().real_glColorMask(GetB(GLboolean, 0), GetB(GLboolean, 1), GetB(GLboolean, 2), GetB(GLboolean, 3));
   else
      WarnNotAvailable("glColorMask");
#else
   WarnNotAvailable("glColorMask");
#endif
}
void Command::run_glColorPointer()
{
#if GL_VERSION_ES_CM_1_0
   if (m_packet.NumItems() > 6)
      WarnDataNotHandled("glColorPointer");
   if (m_replay->GetDeviceCaps().m_has_GL_VERSION_ES_CM_1_0 && m_replay->GetDispatch().real_glColorPointer)
      m_replay->GetDispatch().real_glColorPointer(GetI32(GLint, 0), GetU32(GLenum, 1), GetI32(GLsizei, 2), GetArrayPtr(const void *, 4));
   else
      WarnNotAvailable("glColorPointer");
#else
   WarnNotAvailable("glColorPointer");
#endif
}
void Command::run_glCompressedTexImage2D()
{
#if GL_VERSION_ES_CM_1_0
   if (m_packet.NumItems() > 10)
      WarnDataNotHandled("glCompressedTexImage2D");
   if (m_replay->GetDeviceCaps().m_has_GL_VERSION_ES_CM_1_0 && m_replay->GetDispatch().real_glCompressedTexImage2D)
      m_replay->GetDispatch().real_glCompressedTexImage2D(GetU32(GLenum, 0), GetI32(GLint, 1), GetU32(GLenum, 2), GetI32(GLsizei, 3), GetI32(GLsizei, 4), GetI32(GLint, 5), GetI32(GLsizei, 6), GetArrayPtr(const void *, 8));
   else
      WarnNotAvailable("glCompressedTexImage2D");
#else
   WarnNotAvailable("glCompressedTexImage2D");
#endif
}
void Command::run_glCompressedTexSubImage2D()
{
#if GL_VERSION_ES_CM_1_0
   if (m_packet.NumItems() > 11)
      WarnDataNotHandled("glCompressedTexSubImage2D");
   if (m_replay->GetDeviceCaps().m_has_GL_VERSION_ES_CM_1_0 && m_replay->GetDispatch().real_glCompressedTexSubImage2D)
      m_replay->GetDispatch().real_glCompressedTexSubImage2D(GetU32(GLenum, 0), GetI32(GLint, 1), GetI32(GLint, 2), GetI32(GLint, 3), GetI32(GLsizei, 4), GetI32(GLsizei, 5), GetU32(GLenum, 6), GetI32(GLsizei, 7), GetArrayPtr(const void *, 9));
   else
      WarnNotAvailable("glCompressedTexSubImage2D");
#else
   WarnNotAvailable("glCompressedTexSubImage2D");
#endif
}
void Command::run_glCopyTexImage2D()
{
#if GL_VERSION_ES_CM_1_0
   if (m_packet.NumItems() > 9)
      WarnDataNotHandled("glCopyTexImage2D");
   if (m_replay->GetDeviceCaps().m_has_GL_VERSION_ES_CM_1_0 && m_replay->GetDispatch().real_glCopyTexImage2D)
      m_replay->GetDispatch().real_glCopyTexImage2D(GetU32(GLenum, 0), GetI32(GLint, 1), GetU32(GLenum, 2), GetI32(GLint, 3), GetI32(GLint, 4), GetI32(GLsizei, 5), GetI32(GLsizei, 6), GetI32(GLint, 7));
   else
      WarnNotAvailable("glCopyTexImage2D");
#else
   WarnNotAvailable("glCopyTexImage2D");
#endif
}
void Command::run_glCopyTexSubImage2D()
{
#if GL_VERSION_ES_CM_1_0
   if (m_packet.NumItems() > 9)
      WarnDataNotHandled("glCopyTexSubImage2D");
   if (m_replay->GetDeviceCaps().m_has_GL_VERSION_ES_CM_1_0 && m_replay->GetDispatch().real_glCopyTexSubImage2D)
      m_replay->GetDispatch().real_glCopyTexSubImage2D(GetU32(GLenum, 0), GetI32(GLint, 1), GetI32(GLint, 2), GetI32(GLint, 3), GetI32(GLint, 4), GetI32(GLint, 5), GetI32(GLsizei, 6), GetI32(GLsizei, 7));
   else
      WarnNotAvailable("glCopyTexSubImage2D");
#else
   WarnNotAvailable("glCopyTexSubImage2D");
#endif
}
void Command::run_glCullFace()
{
#if GL_VERSION_ES_CM_1_0
   if (m_packet.NumItems() > 2)
      WarnDataNotHandled("glCullFace");
   if (m_replay->GetDeviceCaps().m_has_GL_VERSION_ES_CM_1_0 && m_replay->GetDispatch().real_glCullFace)
      m_replay->GetDispatch().real_glCullFace(GetU32(GLenum, 0));
   else
      WarnNotAvailable("glCullFace");
#else
   WarnNotAvailable("glCullFace");
#endif
}
void Command::run_glDeleteBuffers()
{
#if GL_VERSION_ES_CM_1_0
   if (m_packet.NumItems() > 4)
      WarnDataNotHandled("glDeleteBuffers");
   if (m_replay->GetDeviceCaps().m_has_GL_VERSION_ES_CM_1_0 && m_replay->GetDispatch().real_glDeleteBuffers)
      m_replay->GetDispatch().real_glDeleteBuffers(GetI32(GLsizei, 0), GetArrayPtr(const GLuint *, 2));
   else
      WarnNotAvailable("glDeleteBuffers");
#else
   WarnNotAvailable("glDeleteBuffers");
#endif
}
void Command::run_glDeleteTextures()
{
#if GL_VERSION_ES_CM_1_0
   if (m_packet.NumItems() > 4)
      WarnDataNotHandled("glDeleteTextures");
   if (m_replay->GetDeviceCaps().m_has_GL_VERSION_ES_CM_1_0 && m_replay->GetDispatch().real_glDeleteTextures)
      m_replay->GetDispatch().real_glDeleteTextures(GetI32(GLsizei, 0), GetArrayPtr(const GLuint *, 2));
   else
      WarnNotAvailable("glDeleteTextures");
#else
   WarnNotAvailable("glDeleteTextures");
#endif
}
void Command::run_glDepthFunc()
{
#if GL_VERSION_ES_CM_1_0
   if (m_packet.NumItems() > 2)
      WarnDataNotHandled("glDepthFunc");
   if (m_replay->GetDeviceCaps().m_has_GL_VERSION_ES_CM_1_0 && m_replay->GetDispatch().real_glDepthFunc)
      m_replay->GetDispatch().real_glDepthFunc(GetU32(GLenum, 0));
   else
      WarnNotAvailable("glDepthFunc");
#else
   WarnNotAvailable("glDepthFunc");
#endif
}
void Command::run_glDepthMask()
{
#if GL_VERSION_ES_CM_1_0
   if (m_packet.NumItems() > 2)
      WarnDataNotHandled("glDepthMask");
   if (m_replay->GetDeviceCaps().m_has_GL_VERSION_ES_CM_1_0 && m_replay->GetDispatch().real_glDepthMask)
      m_replay->GetDispatch().real_glDepthMask(GetB(GLboolean, 0));
   else
      WarnNotAvailable("glDepthMask");
#else
   WarnNotAvailable("glDepthMask");
#endif
}
void Command::run_glDepthRangex()
{
#if GL_VERSION_ES_CM_1_0
   if (m_packet.NumItems() > 3)
      WarnDataNotHandled("glDepthRangex");
   if (m_replay->GetDeviceCaps().m_has_GL_VERSION_ES_CM_1_0 && m_replay->GetDispatch().real_glDepthRangex)
      m_replay->GetDispatch().real_glDepthRangex(GetU32(GLfixed, 0), GetU32(GLfixed, 1));
   else
      WarnNotAvailable("glDepthRangex");
#else
   WarnNotAvailable("glDepthRangex");
#endif
}
void Command::run_glDisable()
{
#if GL_VERSION_ES_CM_1_0
   if (m_packet.NumItems() > 2)
      WarnDataNotHandled("glDisable");
   if (m_replay->GetDeviceCaps().m_has_GL_VERSION_ES_CM_1_0 && m_replay->GetDispatch().real_glDisable)
      m_replay->GetDispatch().real_glDisable(GetU32(GLenum, 0));
   else
      WarnNotAvailable("glDisable");
#else
   WarnNotAvailable("glDisable");
#endif
}
void Command::run_glDisableClientState()
{
#if GL_VERSION_ES_CM_1_0
   if (m_packet.NumItems() > 2)
      WarnDataNotHandled("glDisableClientState");
   if (m_replay->GetDeviceCaps().m_has_GL_VERSION_ES_CM_1_0 && m_replay->GetDispatch().real_glDisableClientState)
      m_replay->GetDispatch().real_glDisableClientState(GetU32(GLenum, 0));
   else
      WarnNotAvailable("glDisableClientState");
#else
   WarnNotAvailable("glDisableClientState");
#endif
}
void Command::run_glDrawArrays()
{
#if GL_VERSION_ES_CM_1_0
   if (m_packet.NumItems() > 4)
      WarnDataNotHandled("glDrawArrays");
   if (m_replay->GetDeviceCaps().m_has_GL_VERSION_ES_CM_1_0 && m_replay->GetDispatch().real_glDrawArrays)
      m_replay->GetDispatch().real_glDrawArrays(GetU32(GLenum, 0), GetI32(GLint, 1), GetI32(GLsizei, 2));
   else
      WarnNotAvailable("glDrawArrays");
#else
   WarnNotAvailable("glDrawArrays");
#endif
}
void Command::run_glDrawElements()
{
#if GL_VERSION_ES_CM_1_0
   if (m_packet.NumItems() > 6)
      WarnDataNotHandled("glDrawElements");
   if (m_replay->GetDeviceCaps().m_has_GL_VERSION_ES_CM_1_0 && m_replay->GetDispatch().real_glDrawElements)
      m_replay->GetDispatch().real_glDrawElements(GetU32(GLenum, 0), GetI32(GLsizei, 1), GetU32(GLenum, 2), GetArrayPtr(const void *, 4));
   else
      WarnNotAvailable("glDrawElements");
#else
   WarnNotAvailable("glDrawElements");
#endif
}
void Command::run_glEnable()
{
#if GL_VERSION_ES_CM_1_0
   if (m_packet.NumItems() > 2)
      WarnDataNotHandled("glEnable");
   if (m_replay->GetDeviceCaps().m_has_GL_VERSION_ES_CM_1_0 && m_replay->GetDispatch().real_glEnable)
      m_replay->GetDispatch().real_glEnable(GetU32(GLenum, 0));
   else
      WarnNotAvailable("glEnable");
#else
   WarnNotAvailable("glEnable");
#endif
}
void Command::run_glEnableClientState()
{
#if GL_VERSION_ES_CM_1_0
   if (m_packet.NumItems() > 2)
      WarnDataNotHandled("glEnableClientState");
   if (m_replay->GetDeviceCaps().m_has_GL_VERSION_ES_CM_1_0 && m_replay->GetDispatch().real_glEnableClientState)
      m_replay->GetDispatch().real_glEnableClientState(GetU32(GLenum, 0));
   else
      WarnNotAvailable("glEnableClientState");
#else
   WarnNotAvailable("glEnableClientState");
#endif
}
void Command::run_glFinish()
{
#if GL_VERSION_ES_CM_1_0
   if (m_packet.NumItems() > 1)
      WarnDataNotHandled("glFinish");
   if (m_replay->GetDeviceCaps().m_has_GL_VERSION_ES_CM_1_0 && m_replay->GetDispatch().real_glFinish)
      m_replay->GetDispatch().real_glFinish();
   else
      WarnNotAvailable("glFinish");
#else
   WarnNotAvailable("glFinish");
#endif
}
void Command::run_glFlush()
{
#if GL_VERSION_ES_CM_1_0
   if (m_packet.NumItems() > 1)
      WarnDataNotHandled("glFlush");
   if (m_replay->GetDeviceCaps().m_has_GL_VERSION_ES_CM_1_0 && m_replay->GetDispatch().real_glFlush)
      m_replay->GetDispatch().real_glFlush();
   else
      WarnNotAvailable("glFlush");
#else
   WarnNotAvailable("glFlush");
#endif
}
void Command::run_glFogx()
{
#if GL_VERSION_ES_CM_1_0
   if (m_packet.NumItems() > 3)
      WarnDataNotHandled("glFogx");
   if (m_replay->GetDeviceCaps().m_has_GL_VERSION_ES_CM_1_0 && m_replay->GetDispatch().real_glFogx)
      m_replay->GetDispatch().real_glFogx(GetU32(GLenum, 0), GetU32(GLfixed, 1));
   else
      WarnNotAvailable("glFogx");
#else
   WarnNotAvailable("glFogx");
#endif
}
void Command::run_glFogxv()
{
#if GL_VERSION_ES_CM_1_0
   if (m_packet.NumItems() > 4)
      WarnDataNotHandled("glFogxv");
   if (m_replay->GetDeviceCaps().m_has_GL_VERSION_ES_CM_1_0 && m_replay->GetDispatch().real_glFogxv)
      m_replay->GetDispatch().real_glFogxv(GetU32(GLenum, 0), GetArrayPtr(const GLfixed *, 2));
   else
      WarnNotAvailable("glFogxv");
#else
   WarnNotAvailable("glFogxv");
#endif
}
void Command::run_glFrontFace()
{
#if GL_VERSION_ES_CM_1_0
   if (m_packet.NumItems() > 2)
      WarnDataNotHandled("glFrontFace");
   if (m_replay->GetDeviceCaps().m_has_GL_VERSION_ES_CM_1_0 && m_replay->GetDispatch().real_glFrontFace)
      m_replay->GetDispatch().real_glFrontFace(GetU32(GLenum, 0));
   else
      WarnNotAvailable("glFrontFace");
#else
   WarnNotAvailable("glFrontFace");
#endif
}
void Command::run_glFrustumx()
{
#if GL_VERSION_ES_CM_1_0
   if (m_packet.NumItems() > 7)
      WarnDataNotHandled("glFrustumx");
   if (m_replay->GetDeviceCaps().m_has_GL_VERSION_ES_CM_1_0 && m_replay->GetDispatch().real_glFrustumx)
      m_replay->GetDispatch().real_glFrustumx(GetU32(GLfixed, 0), GetU32(GLfixed, 1), GetU32(GLfixed, 2), GetU32(GLfixed, 3), GetU32(GLfixed, 4), GetU32(GLfixed, 5));
   else
      WarnNotAvailable("glFrustumx");
#else
   WarnNotAvailable("glFrustumx");
#endif
}
void Command::run_glGetBooleanv()
{
#if GL_VERSION_ES_CM_1_0
   if (m_packet.NumItems() > 3)
      WarnDataNotHandled("glGetBooleanv");
   if (m_replay->GetDeviceCaps().m_has_GL_VERSION_ES_CM_1_0 && m_replay->GetDispatch().real_glGetBooleanv)
      m_replay->GetDispatch().real_glGetBooleanv(GetU32(GLenum, 0), dummyGLboolean);
   else
      WarnNotAvailable("glGetBooleanv");
#else
   WarnNotAvailable("glGetBooleanv");
#endif
}
void Command::run_glGetBufferParameteriv()
{
#if GL_VERSION_ES_CM_1_0
   if (m_packet.NumItems() > 4)
      WarnDataNotHandled("glGetBufferParameteriv");
   if (m_replay->GetDeviceCaps().m_has_GL_VERSION_ES_CM_1_0 && m_replay->GetDispatch().real_glGetBufferParameteriv)
      m_replay->GetDispatch().real_glGetBufferParameteriv(GetU32(GLenum, 0), GetU32(GLenum, 1), dummyGLint);
   else
      WarnNotAvailable("glGetBufferParameteriv");
#else
   WarnNotAvailable("glGetBufferParameteriv");
#endif
}
void Command::run_glGetClipPlanex()
{
#if GL_VERSION_ES_CM_1_0
   if (m_packet.NumItems() > 3)
      WarnDataNotHandled("glGetClipPlanex");
   if (m_replay->GetDeviceCaps().m_has_GL_VERSION_ES_CM_1_0 && m_replay->GetDispatch().real_glGetClipPlanex)
      m_replay->GetDispatch().real_glGetClipPlanex(GetU32(GLenum, 0), dummyGLfixed);
   else
      WarnNotAvailable("glGetClipPlanex");
#else
   WarnNotAvailable("glGetClipPlanex");
#endif
}
void Command::run_glGenBuffers()
{
#if GL_VERSION_ES_CM_1_0
   if (m_packet.NumItems() > 3)
      WarnDataNotHandled("glGenBuffers");
   if (m_replay->GetDeviceCaps().m_has_GL_VERSION_ES_CM_1_0 && m_replay->GetDispatch().real_glGenBuffers)
      m_replay->GetDispatch().real_glGenBuffers(GetI32(GLsizei, 0), dummyGLuint);
   else
      WarnNotAvailable("glGenBuffers");
#else
   WarnNotAvailable("glGenBuffers");
#endif
}
void Command::run_glGenTextures()
{
#if GL_VERSION_ES_CM_1_0
   if (m_packet.NumItems() > 3)
      WarnDataNotHandled("glGenTextures");
   if (m_replay->GetDeviceCaps().m_has_GL_VERSION_ES_CM_1_0 && m_replay->GetDispatch().real_glGenTextures)
      m_replay->GetDispatch().real_glGenTextures(GetI32(GLsizei, 0), dummyGLuint);
   else
      WarnNotAvailable("glGenTextures");
#else
   WarnNotAvailable("glGenTextures");
#endif
}
void Command::run_glGetError()
{
#if GL_VERSION_ES_CM_1_0
   if (m_packet.NumItems() > 1)
      WarnDataNotHandled("glGetError");
   if (m_replay->GetDeviceCaps().m_has_GL_VERSION_ES_CM_1_0 && m_replay->GetDispatch().real_glGetError)
      m_replay->GetDispatch().real_glGetError();
   else
      WarnNotAvailable("glGetError");
#else
   WarnNotAvailable("glGetError");
#endif
}
void Command::run_glGetFixedv()
{
#if GL_VERSION_ES_CM_1_0
   if (m_packet.NumItems() > 3)
      WarnDataNotHandled("glGetFixedv");
   if (m_replay->GetDeviceCaps().m_has_GL_VERSION_ES_CM_1_0 && m_replay->GetDispatch().real_glGetFixedv)
      m_replay->GetDispatch().real_glGetFixedv(GetU32(GLenum, 0), dummyGLfixed);
   else
      WarnNotAvailable("glGetFixedv");
#else
   WarnNotAvailable("glGetFixedv");
#endif
}
void Command::run_glGetIntegerv()
{
#if GL_VERSION_ES_CM_1_0
   if (m_packet.NumItems() > 3)
      WarnDataNotHandled("glGetIntegerv");
   if (m_replay->GetDeviceCaps().m_has_GL_VERSION_ES_CM_1_0 && m_replay->GetDispatch().real_glGetIntegerv)
      m_replay->GetDispatch().real_glGetIntegerv(GetU32(GLenum, 0), dummyGLint);
   else
      WarnNotAvailable("glGetIntegerv");
#else
   WarnNotAvailable("glGetIntegerv");
#endif
}
void Command::run_glGetLightxv()
{
#if GL_VERSION_ES_CM_1_0
   if (m_packet.NumItems() > 4)
      WarnDataNotHandled("glGetLightxv");
   if (m_replay->GetDeviceCaps().m_has_GL_VERSION_ES_CM_1_0 && m_replay->GetDispatch().real_glGetLightxv)
      m_replay->GetDispatch().real_glGetLightxv(GetU32(GLenum, 0), GetU32(GLenum, 1), dummyGLfixed);
   else
      WarnNotAvailable("glGetLightxv");
#else
   WarnNotAvailable("glGetLightxv");
#endif
}
void Command::run_glGetMaterialxv()
{
#if GL_VERSION_ES_CM_1_0
   if (m_packet.NumItems() > 4)
      WarnDataNotHandled("glGetMaterialxv");
   if (m_replay->GetDeviceCaps().m_has_GL_VERSION_ES_CM_1_0 && m_replay->GetDispatch().real_glGetMaterialxv)
      m_replay->GetDispatch().real_glGetMaterialxv(GetU32(GLenum, 0), GetU32(GLenum, 1), dummyGLfixed);
   else
      WarnNotAvailable("glGetMaterialxv");
#else
   WarnNotAvailable("glGetMaterialxv");
#endif
}
void Command::run_glGetPointerv()
{
#if GL_VERSION_ES_CM_1_0
   if (m_packet.NumItems() > 3)
      WarnDataNotHandled("glGetPointerv");
   if (m_replay->GetDeviceCaps().m_has_GL_VERSION_ES_CM_1_0 && m_replay->GetDispatch().real_glGetPointerv)
      m_replay->GetDispatch().real_glGetPointerv(GetU32(GLenum, 0), dummyvoidptr);
   else
      WarnNotAvailable("glGetPointerv");
#else
   WarnNotAvailable("glGetPointerv");
#endif
}
void Command::run_glGetString()
{
#if GL_VERSION_ES_CM_1_0
   if (m_packet.NumItems() > 2)
      WarnDataNotHandled("glGetString");
   if (m_replay->GetDeviceCaps().m_has_GL_VERSION_ES_CM_1_0 && m_replay->GetDispatch().real_glGetString)
      m_replay->GetDispatch().real_glGetString(GetU32(GLenum, 0));
   else
      WarnNotAvailable("glGetString");
#else
   WarnNotAvailable("glGetString");
#endif
}
void Command::run_glGetTexEnviv()
{
#if GL_VERSION_ES_CM_1_0
   if (m_packet.NumItems() > 4)
      WarnDataNotHandled("glGetTexEnviv");
   if (m_replay->GetDeviceCaps().m_has_GL_VERSION_ES_CM_1_0 && m_replay->GetDispatch().real_glGetTexEnviv)
      m_replay->GetDispatch().real_glGetTexEnviv(GetU32(GLenum, 0), GetU32(GLenum, 1), dummyGLint);
   else
      WarnNotAvailable("glGetTexEnviv");
#else
   WarnNotAvailable("glGetTexEnviv");
#endif
}
void Command::run_glGetTexEnvxv()
{
#if GL_VERSION_ES_CM_1_0
   if (m_packet.NumItems() > 4)
      WarnDataNotHandled("glGetTexEnvxv");
   if (m_replay->GetDeviceCaps().m_has_GL_VERSION_ES_CM_1_0 && m_replay->GetDispatch().real_glGetTexEnvxv)
      m_replay->GetDispatch().real_glGetTexEnvxv(GetU32(GLenum, 0), GetU32(GLenum, 1), dummyGLfixed);
   else
      WarnNotAvailable("glGetTexEnvxv");
#else
   WarnNotAvailable("glGetTexEnvxv");
#endif
}
void Command::run_glGetTexParameteriv()
{
#if GL_VERSION_ES_CM_1_0
   if (m_packet.NumItems() > 4)
      WarnDataNotHandled("glGetTexParameteriv");
   if (m_replay->GetDeviceCaps().m_has_GL_VERSION_ES_CM_1_0 && m_replay->GetDispatch().real_glGetTexParameteriv)
      m_replay->GetDispatch().real_glGetTexParameteriv(GetU32(GLenum, 0), GetU32(GLenum, 1), dummyGLint);
   else
      WarnNotAvailable("glGetTexParameteriv");
#else
   WarnNotAvailable("glGetTexParameteriv");
#endif
}
void Command::run_glGetTexParameterxv()
{
#if GL_VERSION_ES_CM_1_0
   if (m_packet.NumItems() > 4)
      WarnDataNotHandled("glGetTexParameterxv");
   if (m_replay->GetDeviceCaps().m_has_GL_VERSION_ES_CM_1_0 && m_replay->GetDispatch().real_glGetTexParameterxv)
      m_replay->GetDispatch().real_glGetTexParameterxv(GetU32(GLenum, 0), GetU32(GLenum, 1), dummyGLfixed);
   else
      WarnNotAvailable("glGetTexParameterxv");
#else
   WarnNotAvailable("glGetTexParameterxv");
#endif
}
void Command::run_glHint()
{
#if GL_VERSION_ES_CM_1_0
   if (m_packet.NumItems() > 3)
      WarnDataNotHandled("glHint");
   if (m_replay->GetDeviceCaps().m_has_GL_VERSION_ES_CM_1_0 && m_replay->GetDispatch().real_glHint)
      m_replay->GetDispatch().real_glHint(GetU32(GLenum, 0), GetU32(GLenum, 1));
   else
      WarnNotAvailable("glHint");
#else
   WarnNotAvailable("glHint");
#endif
}
void Command::run_glIsBuffer()
{
#if GL_VERSION_ES_CM_1_0
   if (m_packet.NumItems() > 2)
      WarnDataNotHandled("glIsBuffer");
   if (m_replay->GetDeviceCaps().m_has_GL_VERSION_ES_CM_1_0 && m_replay->GetDispatch().real_glIsBuffer)
      m_replay->GetDispatch().real_glIsBuffer(GetU32(GLuint, 0));
   else
      WarnNotAvailable("glIsBuffer");
#else
   WarnNotAvailable("glIsBuffer");
#endif
}
void Command::run_glIsEnabled()
{
#if GL_VERSION_ES_CM_1_0
   if (m_packet.NumItems() > 2)
      WarnDataNotHandled("glIsEnabled");
   if (m_replay->GetDeviceCaps().m_has_GL_VERSION_ES_CM_1_0 && m_replay->GetDispatch().real_glIsEnabled)
      m_replay->GetDispatch().real_glIsEnabled(GetU32(GLenum, 0));
   else
      WarnNotAvailable("glIsEnabled");
#else
   WarnNotAvailable("glIsEnabled");
#endif
}
void Command::run_glIsTexture()
{
#if GL_VERSION_ES_CM_1_0
   if (m_packet.NumItems() > 2)
      WarnDataNotHandled("glIsTexture");
   if (m_replay->GetDeviceCaps().m_has_GL_VERSION_ES_CM_1_0 && m_replay->GetDispatch().real_glIsTexture)
      m_replay->GetDispatch().real_glIsTexture(GetU32(GLuint, 0));
   else
      WarnNotAvailable("glIsTexture");
#else
   WarnNotAvailable("glIsTexture");
#endif
}
void Command::run_glLightModelx()
{
#if GL_VERSION_ES_CM_1_0
   if (m_packet.NumItems() > 3)
      WarnDataNotHandled("glLightModelx");
   if (m_replay->GetDeviceCaps().m_has_GL_VERSION_ES_CM_1_0 && m_replay->GetDispatch().real_glLightModelx)
      m_replay->GetDispatch().real_glLightModelx(GetU32(GLenum, 0), GetU32(GLfixed, 1));
   else
      WarnNotAvailable("glLightModelx");
#else
   WarnNotAvailable("glLightModelx");
#endif
}
void Command::run_glLightModelxv()
{
#if GL_VERSION_ES_CM_1_0
   if (m_packet.NumItems() > 4)
      WarnDataNotHandled("glLightModelxv");
   if (m_replay->GetDeviceCaps().m_has_GL_VERSION_ES_CM_1_0 && m_replay->GetDispatch().real_glLightModelxv)
      m_replay->GetDispatch().real_glLightModelxv(GetU32(GLenum, 0), GetArrayPtr(const GLfixed *, 2));
   else
      WarnNotAvailable("glLightModelxv");
#else
   WarnNotAvailable("glLightModelxv");
#endif
}
void Command::run_glLightx()
{
#if GL_VERSION_ES_CM_1_0
   if (m_packet.NumItems() > 4)
      WarnDataNotHandled("glLightx");
   if (m_replay->GetDeviceCaps().m_has_GL_VERSION_ES_CM_1_0 && m_replay->GetDispatch().real_glLightx)
      m_replay->GetDispatch().real_glLightx(GetU32(GLenum, 0), GetU32(GLenum, 1), GetU32(GLfixed, 2));
   else
      WarnNotAvailable("glLightx");
#else
   WarnNotAvailable("glLightx");
#endif
}
void Command::run_glLightxv()
{
#if GL_VERSION_ES_CM_1_0
   if (m_packet.NumItems() > 5)
      WarnDataNotHandled("glLightxv");
   if (m_replay->GetDeviceCaps().m_has_GL_VERSION_ES_CM_1_0 && m_replay->GetDispatch().real_glLightxv)
      m_replay->GetDispatch().real_glLightxv(GetU32(GLenum, 0), GetU32(GLenum, 1), GetArrayPtr(const GLfixed *, 3));
   else
      WarnNotAvailable("glLightxv");
#else
   WarnNotAvailable("glLightxv");
#endif
}
void Command::run_glLineWidthx()
{
#if GL_VERSION_ES_CM_1_0
   if (m_packet.NumItems() > 2)
      WarnDataNotHandled("glLineWidthx");
   if (m_replay->GetDeviceCaps().m_has_GL_VERSION_ES_CM_1_0 && m_replay->GetDispatch().real_glLineWidthx)
      m_replay->GetDispatch().real_glLineWidthx(GetU32(GLfixed, 0));
   else
      WarnNotAvailable("glLineWidthx");
#else
   WarnNotAvailable("glLineWidthx");
#endif
}
void Command::run_glLoadIdentity()
{
#if GL_VERSION_ES_CM_1_0
   if (m_packet.NumItems() > 1)
      WarnDataNotHandled("glLoadIdentity");
   if (m_replay->GetDeviceCaps().m_has_GL_VERSION_ES_CM_1_0 && m_replay->GetDispatch().real_glLoadIdentity)
      m_replay->GetDispatch().real_glLoadIdentity();
   else
      WarnNotAvailable("glLoadIdentity");
#else
   WarnNotAvailable("glLoadIdentity");
#endif
}
void Command::run_glLoadMatrixx()
{
#if GL_VERSION_ES_CM_1_0
   if (m_packet.NumItems() > 3)
      WarnDataNotHandled("glLoadMatrixx");
   if (m_replay->GetDeviceCaps().m_has_GL_VERSION_ES_CM_1_0 && m_replay->GetDispatch().real_glLoadMatrixx)
      m_replay->GetDispatch().real_glLoadMatrixx(GetArrayPtr(const GLfixed *, 1));
   else
      WarnNotAvailable("glLoadMatrixx");
#else
   WarnNotAvailable("glLoadMatrixx");
#endif
}
void Command::run_glLogicOp()
{
#if GL_VERSION_ES_CM_1_0
   if (m_packet.NumItems() > 2)
      WarnDataNotHandled("glLogicOp");
   if (m_replay->GetDeviceCaps().m_has_GL_VERSION_ES_CM_1_0 && m_replay->GetDispatch().real_glLogicOp)
      m_replay->GetDispatch().real_glLogicOp(GetU32(GLenum, 0));
   else
      WarnNotAvailable("glLogicOp");
#else
   WarnNotAvailable("glLogicOp");
#endif
}
void Command::run_glMaterialx()
{
#if GL_VERSION_ES_CM_1_0
   if (m_packet.NumItems() > 4)
      WarnDataNotHandled("glMaterialx");
   if (m_replay->GetDeviceCaps().m_has_GL_VERSION_ES_CM_1_0 && m_replay->GetDispatch().real_glMaterialx)
      m_replay->GetDispatch().real_glMaterialx(GetU32(GLenum, 0), GetU32(GLenum, 1), GetU32(GLfixed, 2));
   else
      WarnNotAvailable("glMaterialx");
#else
   WarnNotAvailable("glMaterialx");
#endif
}
void Command::run_glMaterialxv()
{
#if GL_VERSION_ES_CM_1_0
   if (m_packet.NumItems() > 5)
      WarnDataNotHandled("glMaterialxv");
   if (m_replay->GetDeviceCaps().m_has_GL_VERSION_ES_CM_1_0 && m_replay->GetDispatch().real_glMaterialxv)
      m_replay->GetDispatch().real_glMaterialxv(GetU32(GLenum, 0), GetU32(GLenum, 1), GetArrayPtr(const GLfixed *, 3));
   else
      WarnNotAvailable("glMaterialxv");
#else
   WarnNotAvailable("glMaterialxv");
#endif
}
void Command::run_glMatrixMode()
{
#if GL_VERSION_ES_CM_1_0
   if (m_packet.NumItems() > 2)
      WarnDataNotHandled("glMatrixMode");
   if (m_replay->GetDeviceCaps().m_has_GL_VERSION_ES_CM_1_0 && m_replay->GetDispatch().real_glMatrixMode)
      m_replay->GetDispatch().real_glMatrixMode(GetU32(GLenum, 0));
   else
      WarnNotAvailable("glMatrixMode");
#else
   WarnNotAvailable("glMatrixMode");
#endif
}
void Command::run_glMultMatrixx()
{
#if GL_VERSION_ES_CM_1_0
   if (m_packet.NumItems() > 3)
      WarnDataNotHandled("glMultMatrixx");
   if (m_replay->GetDeviceCaps().m_has_GL_VERSION_ES_CM_1_0 && m_replay->GetDispatch().real_glMultMatrixx)
      m_replay->GetDispatch().real_glMultMatrixx(GetArrayPtr(const GLfixed *, 1));
   else
      WarnNotAvailable("glMultMatrixx");
#else
   WarnNotAvailable("glMultMatrixx");
#endif
}
void Command::run_glMultiTexCoord4x()
{
#if GL_VERSION_ES_CM_1_0
   if (m_packet.NumItems() > 6)
      WarnDataNotHandled("glMultiTexCoord4x");
   if (m_replay->GetDeviceCaps().m_has_GL_VERSION_ES_CM_1_0 && m_replay->GetDispatch().real_glMultiTexCoord4x)
      m_replay->GetDispatch().real_glMultiTexCoord4x(GetU32(GLenum, 0), GetU32(GLfixed, 1), GetU32(GLfixed, 2), GetU32(GLfixed, 3), GetU32(GLfixed, 4));
   else
      WarnNotAvailable("glMultiTexCoord4x");
#else
   WarnNotAvailable("glMultiTexCoord4x");
#endif
}
void Command::run_glNormal3x()
{
#if GL_VERSION_ES_CM_1_0
   if (m_packet.NumItems() > 4)
      WarnDataNotHandled("glNormal3x");
   if (m_replay->GetDeviceCaps().m_has_GL_VERSION_ES_CM_1_0 && m_replay->GetDispatch().real_glNormal3x)
      m_replay->GetDispatch().real_glNormal3x(GetU32(GLfixed, 0), GetU32(GLfixed, 1), GetU32(GLfixed, 2));
   else
      WarnNotAvailable("glNormal3x");
#else
   WarnNotAvailable("glNormal3x");
#endif
}
void Command::run_glNormalPointer()
{
#if GL_VERSION_ES_CM_1_0
   if (m_packet.NumItems() > 5)
      WarnDataNotHandled("glNormalPointer");
   if (m_replay->GetDeviceCaps().m_has_GL_VERSION_ES_CM_1_0 && m_replay->GetDispatch().real_glNormalPointer)
      m_replay->GetDispatch().real_glNormalPointer(GetU32(GLenum, 0), GetI32(GLsizei, 1), GetArrayPtr(const void *, 3));
   else
      WarnNotAvailable("glNormalPointer");
#else
   WarnNotAvailable("glNormalPointer");
#endif
}
void Command::run_glOrthox()
{
#if GL_VERSION_ES_CM_1_0
   if (m_packet.NumItems() > 7)
      WarnDataNotHandled("glOrthox");
   if (m_replay->GetDeviceCaps().m_has_GL_VERSION_ES_CM_1_0 && m_replay->GetDispatch().real_glOrthox)
      m_replay->GetDispatch().real_glOrthox(GetU32(GLfixed, 0), GetU32(GLfixed, 1), GetU32(GLfixed, 2), GetU32(GLfixed, 3), GetU32(GLfixed, 4), GetU32(GLfixed, 5));
   else
      WarnNotAvailable("glOrthox");
#else
   WarnNotAvailable("glOrthox");
#endif
}
void Command::run_glPixelStorei()
{
#if GL_VERSION_ES_CM_1_0
   if (m_packet.NumItems() > 3)
      WarnDataNotHandled("glPixelStorei");
   if (m_replay->GetDeviceCaps().m_has_GL_VERSION_ES_CM_1_0 && m_replay->GetDispatch().real_glPixelStorei)
      m_replay->GetDispatch().real_glPixelStorei(GetU32(GLenum, 0), GetI32(GLint, 1));
   else
      WarnNotAvailable("glPixelStorei");
#else
   WarnNotAvailable("glPixelStorei");
#endif
}
void Command::run_glPointParameterx()
{
#if GL_VERSION_ES_CM_1_0
   if (m_packet.NumItems() > 3)
      WarnDataNotHandled("glPointParameterx");
   if (m_replay->GetDeviceCaps().m_has_GL_VERSION_ES_CM_1_0 && m_replay->GetDispatch().real_glPointParameterx)
      m_replay->GetDispatch().real_glPointParameterx(GetU32(GLenum, 0), GetU32(GLfixed, 1));
   else
      WarnNotAvailable("glPointParameterx");
#else
   WarnNotAvailable("glPointParameterx");
#endif
}
void Command::run_glPointParameterxv()
{
#if GL_VERSION_ES_CM_1_0
   if (m_packet.NumItems() > 4)
      WarnDataNotHandled("glPointParameterxv");
   if (m_replay->GetDeviceCaps().m_has_GL_VERSION_ES_CM_1_0 && m_replay->GetDispatch().real_glPointParameterxv)
      m_replay->GetDispatch().real_glPointParameterxv(GetU32(GLenum, 0), GetArrayPtr(const GLfixed *, 2));
   else
      WarnNotAvailable("glPointParameterxv");
#else
   WarnNotAvailable("glPointParameterxv");
#endif
}
void Command::run_glPointSizex()
{
#if GL_VERSION_ES_CM_1_0
   if (m_packet.NumItems() > 2)
      WarnDataNotHandled("glPointSizex");
   if (m_replay->GetDeviceCaps().m_has_GL_VERSION_ES_CM_1_0 && m_replay->GetDispatch().real_glPointSizex)
      m_replay->GetDispatch().real_glPointSizex(GetU32(GLfixed, 0));
   else
      WarnNotAvailable("glPointSizex");
#else
   WarnNotAvailable("glPointSizex");
#endif
}
void Command::run_glPolygonOffsetx()
{
#if GL_VERSION_ES_CM_1_0
   if (m_packet.NumItems() > 3)
      WarnDataNotHandled("glPolygonOffsetx");
   if (m_replay->GetDeviceCaps().m_has_GL_VERSION_ES_CM_1_0 && m_replay->GetDispatch().real_glPolygonOffsetx)
      m_replay->GetDispatch().real_glPolygonOffsetx(GetU32(GLfixed, 0), GetU32(GLfixed, 1));
   else
      WarnNotAvailable("glPolygonOffsetx");
#else
   WarnNotAvailable("glPolygonOffsetx");
#endif
}
void Command::run_glPopMatrix()
{
#if GL_VERSION_ES_CM_1_0
   if (m_packet.NumItems() > 1)
      WarnDataNotHandled("glPopMatrix");
   if (m_replay->GetDeviceCaps().m_has_GL_VERSION_ES_CM_1_0 && m_replay->GetDispatch().real_glPopMatrix)
      m_replay->GetDispatch().real_glPopMatrix();
   else
      WarnNotAvailable("glPopMatrix");
#else
   WarnNotAvailable("glPopMatrix");
#endif
}
void Command::run_glPushMatrix()
{
#if GL_VERSION_ES_CM_1_0
   if (m_packet.NumItems() > 1)
      WarnDataNotHandled("glPushMatrix");
   if (m_replay->GetDeviceCaps().m_has_GL_VERSION_ES_CM_1_0 && m_replay->GetDispatch().real_glPushMatrix)
      m_replay->GetDispatch().real_glPushMatrix();
   else
      WarnNotAvailable("glPushMatrix");
#else
   WarnNotAvailable("glPushMatrix");
#endif
}
void Command::run_glReadPixels()
{
#if GL_VERSION_ES_CM_1_0
   if (m_packet.NumItems() > 8)
      WarnDataNotHandled("glReadPixels");
   if (m_replay->GetDeviceCaps().m_has_GL_VERSION_ES_CM_1_0 && m_replay->GetDispatch().real_glReadPixels)
      m_replay->GetDispatch().real_glReadPixels(GetI32(GLint, 0), GetI32(GLint, 1), GetI32(GLsizei, 2), GetI32(GLsizei, 3), GetU32(GLenum, 4), GetU32(GLenum, 5), dummyvoid);
   else
      WarnNotAvailable("glReadPixels");
#else
   WarnNotAvailable("glReadPixels");
#endif
}
void Command::run_glRotatex()
{
#if GL_VERSION_ES_CM_1_0
   if (m_packet.NumItems() > 5)
      WarnDataNotHandled("glRotatex");
   if (m_replay->GetDeviceCaps().m_has_GL_VERSION_ES_CM_1_0 && m_replay->GetDispatch().real_glRotatex)
      m_replay->GetDispatch().real_glRotatex(GetU32(GLfixed, 0), GetU32(GLfixed, 1), GetU32(GLfixed, 2), GetU32(GLfixed, 3));
   else
      WarnNotAvailable("glRotatex");
#else
   WarnNotAvailable("glRotatex");
#endif
}
void Command::run_glSampleCoverage()
{
#if GL_VERSION_ES_CM_1_0
   if (m_packet.NumItems() > 3)
      WarnDataNotHandled("glSampleCoverage");
   if (m_replay->GetDeviceCaps().m_has_GL_VERSION_ES_CM_1_0 && m_replay->GetDispatch().real_glSampleCoverage)
      m_replay->GetDispatch().real_glSampleCoverage(GetF(GLfloat, 0), GetB(GLboolean, 1));
   else
      WarnNotAvailable("glSampleCoverage");
#else
   WarnNotAvailable("glSampleCoverage");
#endif
}
void Command::run_glSampleCoveragex()
{
#if GL_VERSION_ES_CM_1_0
   if (m_packet.NumItems() > 3)
      WarnDataNotHandled("glSampleCoveragex");
   if (m_replay->GetDeviceCaps().m_has_GL_VERSION_ES_CM_1_0 && m_replay->GetDispatch().real_glSampleCoveragex)
      m_replay->GetDispatch().real_glSampleCoveragex(GetU32(GLclampx, 0), GetB(GLboolean, 1));
   else
      WarnNotAvailable("glSampleCoveragex");
#else
   WarnNotAvailable("glSampleCoveragex");
#endif
}
void Command::run_glScalex()
{
#if GL_VERSION_ES_CM_1_0
   if (m_packet.NumItems() > 4)
      WarnDataNotHandled("glScalex");
   if (m_replay->GetDeviceCaps().m_has_GL_VERSION_ES_CM_1_0 && m_replay->GetDispatch().real_glScalex)
      m_replay->GetDispatch().real_glScalex(GetU32(GLfixed, 0), GetU32(GLfixed, 1), GetU32(GLfixed, 2));
   else
      WarnNotAvailable("glScalex");
#else
   WarnNotAvailable("glScalex");
#endif
}
void Command::run_glScissor()
{
#if GL_VERSION_ES_CM_1_0
   if (m_packet.NumItems() > 5)
      WarnDataNotHandled("glScissor");
   if (m_replay->GetDeviceCaps().m_has_GL_VERSION_ES_CM_1_0 && m_replay->GetDispatch().real_glScissor)
      m_replay->GetDispatch().real_glScissor(GetI32(GLint, 0), GetI32(GLint, 1), GetI32(GLsizei, 2), GetI32(GLsizei, 3));
   else
      WarnNotAvailable("glScissor");
#else
   WarnNotAvailable("glScissor");
#endif
}
void Command::run_glShadeModel()
{
#if GL_VERSION_ES_CM_1_0
   if (m_packet.NumItems() > 2)
      WarnDataNotHandled("glShadeModel");
   if (m_replay->GetDeviceCaps().m_has_GL_VERSION_ES_CM_1_0 && m_replay->GetDispatch().real_glShadeModel)
      m_replay->GetDispatch().real_glShadeModel(GetU32(GLenum, 0));
   else
      WarnNotAvailable("glShadeModel");
#else
   WarnNotAvailable("glShadeModel");
#endif
}
void Command::run_glStencilFunc()
{
#if GL_VERSION_ES_CM_1_0
   if (m_packet.NumItems() > 4)
      WarnDataNotHandled("glStencilFunc");
   if (m_replay->GetDeviceCaps().m_has_GL_VERSION_ES_CM_1_0 && m_replay->GetDispatch().real_glStencilFunc)
      m_replay->GetDispatch().real_glStencilFunc(GetU32(GLenum, 0), GetI32(GLint, 1), GetU32(GLuint, 2));
   else
      WarnNotAvailable("glStencilFunc");
#else
   WarnNotAvailable("glStencilFunc");
#endif
}
void Command::run_glStencilMask()
{
#if GL_VERSION_ES_CM_1_0
   if (m_packet.NumItems() > 2)
      WarnDataNotHandled("glStencilMask");
   if (m_replay->GetDeviceCaps().m_has_GL_VERSION_ES_CM_1_0 && m_replay->GetDispatch().real_glStencilMask)
      m_replay->GetDispatch().real_glStencilMask(GetU32(GLuint, 0));
   else
      WarnNotAvailable("glStencilMask");
#else
   WarnNotAvailable("glStencilMask");
#endif
}
void Command::run_glStencilOp()
{
#if GL_VERSION_ES_CM_1_0
   if (m_packet.NumItems() > 4)
      WarnDataNotHandled("glStencilOp");
   if (m_replay->GetDeviceCaps().m_has_GL_VERSION_ES_CM_1_0 && m_replay->GetDispatch().real_glStencilOp)
      m_replay->GetDispatch().real_glStencilOp(GetU32(GLenum, 0), GetU32(GLenum, 1), GetU32(GLenum, 2));
   else
      WarnNotAvailable("glStencilOp");
#else
   WarnNotAvailable("glStencilOp");
#endif
}
void Command::run_glTexCoordPointer()
{
#if GL_VERSION_ES_CM_1_0
   if (m_packet.NumItems() > 6)
      WarnDataNotHandled("glTexCoordPointer");
   if (m_replay->GetDeviceCaps().m_has_GL_VERSION_ES_CM_1_0 && m_replay->GetDispatch().real_glTexCoordPointer)
      m_replay->GetDispatch().real_glTexCoordPointer(GetI32(GLint, 0), GetU32(GLenum, 1), GetI32(GLsizei, 2), GetArrayPtr(const void *, 4));
   else
      WarnNotAvailable("glTexCoordPointer");
#else
   WarnNotAvailable("glTexCoordPointer");
#endif
}
void Command::run_glTexEnvi()
{
#if GL_VERSION_ES_CM_1_0
   if (m_packet.NumItems() > 4)
      WarnDataNotHandled("glTexEnvi");
   if (m_replay->GetDeviceCaps().m_has_GL_VERSION_ES_CM_1_0 && m_replay->GetDispatch().real_glTexEnvi)
      m_replay->GetDispatch().real_glTexEnvi(GetU32(GLenum, 0), GetU32(GLenum, 1), GetI32(GLint, 2));
   else
      WarnNotAvailable("glTexEnvi");
#else
   WarnNotAvailable("glTexEnvi");
#endif
}
void Command::run_glTexEnvx()
{
#if GL_VERSION_ES_CM_1_0
   if (m_packet.NumItems() > 4)
      WarnDataNotHandled("glTexEnvx");
   if (m_replay->GetDeviceCaps().m_has_GL_VERSION_ES_CM_1_0 && m_replay->GetDispatch().real_glTexEnvx)
      m_replay->GetDispatch().real_glTexEnvx(GetU32(GLenum, 0), GetU32(GLenum, 1), GetU32(GLfixed, 2));
   else
      WarnNotAvailable("glTexEnvx");
#else
   WarnNotAvailable("glTexEnvx");
#endif
}
void Command::run_glTexEnviv()
{
#if GL_VERSION_ES_CM_1_0
   if (m_packet.NumItems() > 5)
      WarnDataNotHandled("glTexEnviv");
   if (m_replay->GetDeviceCaps().m_has_GL_VERSION_ES_CM_1_0 && m_replay->GetDispatch().real_glTexEnviv)
      m_replay->GetDispatch().real_glTexEnviv(GetU32(GLenum, 0), GetU32(GLenum, 1), GetArrayPtr(const GLint *, 3));
   else
      WarnNotAvailable("glTexEnviv");
#else
   WarnNotAvailable("glTexEnviv");
#endif
}
void Command::run_glTexEnvxv()
{
#if GL_VERSION_ES_CM_1_0
   if (m_packet.NumItems() > 5)
      WarnDataNotHandled("glTexEnvxv");
   if (m_replay->GetDeviceCaps().m_has_GL_VERSION_ES_CM_1_0 && m_replay->GetDispatch().real_glTexEnvxv)
      m_replay->GetDispatch().real_glTexEnvxv(GetU32(GLenum, 0), GetU32(GLenum, 1), GetArrayPtr(const GLfixed *, 3));
   else
      WarnNotAvailable("glTexEnvxv");
#else
   WarnNotAvailable("glTexEnvxv");
#endif
}
void Command::run_glTexImage2D()
{
#if GL_VERSION_ES_CM_1_0
   if (m_packet.NumItems() > 11)
      WarnDataNotHandled("glTexImage2D");
   if (m_replay->GetDeviceCaps().m_has_GL_VERSION_ES_CM_1_0 && m_replay->GetDispatch().real_glTexImage2D)
      m_replay->GetDispatch().real_glTexImage2D(GetU32(GLenum, 0), GetI32(GLint, 1), GetI32(GLint, 2), GetI32(GLsizei, 3), GetI32(GLsizei, 4), GetI32(GLint, 5), GetU32(GLenum, 6), GetU32(GLenum, 7), GetArrayPtr(const void *, 9));
   else
      WarnNotAvailable("glTexImage2D");
#else
   WarnNotAvailable("glTexImage2D");
#endif
}
void Command::run_glTexParameteri()
{
#if GL_VERSION_ES_CM_1_0
   if (m_packet.NumItems() > 4)
      WarnDataNotHandled("glTexParameteri");
   if (m_replay->GetDeviceCaps().m_has_GL_VERSION_ES_CM_1_0 && m_replay->GetDispatch().real_glTexParameteri)
      m_replay->GetDispatch().real_glTexParameteri(GetU32(GLenum, 0), GetU32(GLenum, 1), GetI32(GLint, 2));
   else
      WarnNotAvailable("glTexParameteri");
#else
   WarnNotAvailable("glTexParameteri");
#endif
}
void Command::run_glTexParameterx()
{
#if GL_VERSION_ES_CM_1_0
   if (m_packet.NumItems() > 4)
      WarnDataNotHandled("glTexParameterx");
   if (m_replay->GetDeviceCaps().m_has_GL_VERSION_ES_CM_1_0 && m_replay->GetDispatch().real_glTexParameterx)
      m_replay->GetDispatch().real_glTexParameterx(GetU32(GLenum, 0), GetU32(GLenum, 1), GetU32(GLfixed, 2));
   else
      WarnNotAvailable("glTexParameterx");
#else
   WarnNotAvailable("glTexParameterx");
#endif
}
void Command::run_glTexParameteriv()
{
#if GL_VERSION_ES_CM_1_0
   if (m_packet.NumItems() > 5)
      WarnDataNotHandled("glTexParameteriv");
   if (m_replay->GetDeviceCaps().m_has_GL_VERSION_ES_CM_1_0 && m_replay->GetDispatch().real_glTexParameteriv)
      m_replay->GetDispatch().real_glTexParameteriv(GetU32(GLenum, 0), GetU32(GLenum, 1), GetArrayPtr(const GLint *, 3));
   else
      WarnNotAvailable("glTexParameteriv");
#else
   WarnNotAvailable("glTexParameteriv");
#endif
}
void Command::run_glTexParameterxv()
{
#if GL_VERSION_ES_CM_1_0
   if (m_packet.NumItems() > 5)
      WarnDataNotHandled("glTexParameterxv");
   if (m_replay->GetDeviceCaps().m_has_GL_VERSION_ES_CM_1_0 && m_replay->GetDispatch().real_glTexParameterxv)
      m_replay->GetDispatch().real_glTexParameterxv(GetU32(GLenum, 0), GetU32(GLenum, 1), GetArrayPtr(const GLfixed *, 3));
   else
      WarnNotAvailable("glTexParameterxv");
#else
   WarnNotAvailable("glTexParameterxv");
#endif
}
void Command::run_glTexSubImage2D()
{
#if GL_VERSION_ES_CM_1_0
   if (m_packet.NumItems() > 11)
      WarnDataNotHandled("glTexSubImage2D");
   if (m_replay->GetDeviceCaps().m_has_GL_VERSION_ES_CM_1_0 && m_replay->GetDispatch().real_glTexSubImage2D)
      m_replay->GetDispatch().real_glTexSubImage2D(GetU32(GLenum, 0), GetI32(GLint, 1), GetI32(GLint, 2), GetI32(GLint, 3), GetI32(GLsizei, 4), GetI32(GLsizei, 5), GetU32(GLenum, 6), GetU32(GLenum, 7), GetArrayPtr(const void *, 9));
   else
      WarnNotAvailable("glTexSubImage2D");
#else
   WarnNotAvailable("glTexSubImage2D");
#endif
}
void Command::run_glTranslatex()
{
#if GL_VERSION_ES_CM_1_0
   if (m_packet.NumItems() > 4)
      WarnDataNotHandled("glTranslatex");
   if (m_replay->GetDeviceCaps().m_has_GL_VERSION_ES_CM_1_0 && m_replay->GetDispatch().real_glTranslatex)
      m_replay->GetDispatch().real_glTranslatex(GetU32(GLfixed, 0), GetU32(GLfixed, 1), GetU32(GLfixed, 2));
   else
      WarnNotAvailable("glTranslatex");
#else
   WarnNotAvailable("glTranslatex");
#endif
}
void Command::run_glVertexPointer()
{
#if GL_VERSION_ES_CM_1_0
   if (m_packet.NumItems() > 6)
      WarnDataNotHandled("glVertexPointer");
   if (m_replay->GetDeviceCaps().m_has_GL_VERSION_ES_CM_1_0 && m_replay->GetDispatch().real_glVertexPointer)
      m_replay->GetDispatch().real_glVertexPointer(GetI32(GLint, 0), GetU32(GLenum, 1), GetI32(GLsizei, 2), GetArrayPtr(const void *, 4));
   else
      WarnNotAvailable("glVertexPointer");
#else
   WarnNotAvailable("glVertexPointer");
#endif
}
void Command::run_glViewport()
{
#if GL_VERSION_ES_CM_1_0
   if (m_packet.NumItems() > 5)
      WarnDataNotHandled("glViewport");
   if (m_replay->GetDeviceCaps().m_has_GL_VERSION_ES_CM_1_0 && m_replay->GetDispatch().real_glViewport)
      m_replay->GetDispatch().real_glViewport(GetI32(GLint, 0), GetI32(GLint, 1), GetI32(GLsizei, 2), GetI32(GLsizei, 3));
   else
      WarnNotAvailable("glViewport");
#else
   WarnNotAvailable("glViewport");
#endif
}
void Command::run_eglBindTexImage()
{
#if EGL_VERSION_1_1
   if (m_packet.NumItems() > 4)
      WarnDataNotHandled("eglBindTexImage");
   if (m_replay->GetDeviceCaps().m_has_EGL_VERSION_1_1 && m_replay->GetDispatch().real_eglBindTexImage)
      m_replay->GetDispatch().real_eglBindTexImage(GetEGLDisplay(EGLDisplay, 0), GetEGLSurface(EGLSurface, 1), GetI32(EGLint, 2));
   else
      WarnNotAvailable("eglBindTexImage");
#else
   WarnNotAvailable("eglBindTexImage");
#endif
}
void Command::run_eglReleaseTexImage()
{
#if EGL_VERSION_1_1
   if (m_packet.NumItems() > 4)
      WarnDataNotHandled("eglReleaseTexImage");
   if (m_replay->GetDeviceCaps().m_has_EGL_VERSION_1_1 && m_replay->GetDispatch().real_eglReleaseTexImage)
      m_replay->GetDispatch().real_eglReleaseTexImage(GetEGLDisplay(EGLDisplay, 0), GetEGLSurface(EGLSurface, 1), GetI32(EGLint, 2));
   else
      WarnNotAvailable("eglReleaseTexImage");
#else
   WarnNotAvailable("eglReleaseTexImage");
#endif
}
void Command::run_eglSurfaceAttrib()
{
#if EGL_VERSION_1_1
   if (m_packet.NumItems() > 5)
      WarnDataNotHandled("eglSurfaceAttrib");
   if (m_replay->GetDeviceCaps().m_has_EGL_VERSION_1_1 && m_replay->GetDispatch().real_eglSurfaceAttrib)
      m_replay->GetDispatch().real_eglSurfaceAttrib(GetEGLDisplay(EGLDisplay, 0), GetEGLSurface(EGLSurface, 1), GetI32(EGLint, 2), GetI32(EGLint, 3));
   else
      WarnNotAvailable("eglSurfaceAttrib");
#else
   WarnNotAvailable("eglSurfaceAttrib");
#endif
}
void Command::run_eglSwapInterval()
{
#if EGL_VERSION_1_1
   if (m_packet.NumItems() > 3)
      WarnDataNotHandled("eglSwapInterval");
   if (m_replay->GetDeviceCaps().m_has_EGL_VERSION_1_1 && m_replay->GetDispatch().real_eglSwapInterval)
      m_replay->GetDispatch().real_eglSwapInterval(GetEGLDisplay(EGLDisplay, 0), GetI32(EGLint, 1));
   else
      WarnNotAvailable("eglSwapInterval");
#else
   WarnNotAvailable("eglSwapInterval");
#endif
}
void Command::run_eglBindAPI()
{
#if EGL_VERSION_1_2
   if (m_packet.NumItems() > 2)
      WarnDataNotHandled("eglBindAPI");
   if (m_replay->GetDeviceCaps().m_has_EGL_VERSION_1_2 && m_replay->GetDispatch().real_eglBindAPI)
      m_replay->GetDispatch().real_eglBindAPI(GetU32(EGLenum, 0));
   else
      WarnNotAvailable("eglBindAPI");
#else
   WarnNotAvailable("eglBindAPI");
#endif
}
void Command::run_eglQueryAPI()
{
#if EGL_VERSION_1_2
   if (m_packet.NumItems() > 1)
      WarnDataNotHandled("eglQueryAPI");
   if (m_replay->GetDeviceCaps().m_has_EGL_VERSION_1_2 && m_replay->GetDispatch().real_eglQueryAPI)
      m_replay->GetDispatch().real_eglQueryAPI();
   else
      WarnNotAvailable("eglQueryAPI");
#else
   WarnNotAvailable("eglQueryAPI");
#endif
}
void Command::run_eglCreatePbufferFromClientBuffer()
{
#if EGL_VERSION_1_2
   if (m_packet.NumItems() > 7)
      WarnDataNotHandled("eglCreatePbufferFromClientBuffer");
   if (m_replay->GetDeviceCaps().m_has_EGL_VERSION_1_2 && m_replay->GetDispatch().real_eglCreatePbufferFromClientBuffer)
      m_replay->GetDispatch().real_eglCreatePbufferFromClientBuffer(GetEGLDisplay(EGLDisplay, 0), GetU32(EGLenum, 1), GetEGLClientBuffer(EGLClientBuffer, 2), GetEGLConfig(EGLConfig, 3), GetArrayPtr(const EGLint *, 5));
   else
      WarnNotAvailable("eglCreatePbufferFromClientBuffer");
#else
   WarnNotAvailable("eglCreatePbufferFromClientBuffer");
#endif
}
void Command::run_eglReleaseThread()
{
#if EGL_VERSION_1_2
   if (m_packet.NumItems() > 1)
      WarnDataNotHandled("eglReleaseThread");
   if (m_replay->GetDeviceCaps().m_has_EGL_VERSION_1_2 && m_replay->GetDispatch().real_eglReleaseThread)
      m_replay->GetDispatch().real_eglReleaseThread();
   else
      WarnNotAvailable("eglReleaseThread");
#else
   WarnNotAvailable("eglReleaseThread");
#endif
}
void Command::run_eglWaitClient()
{
#if EGL_VERSION_1_2
   if (m_packet.NumItems() > 1)
      WarnDataNotHandled("eglWaitClient");
   if (m_replay->GetDeviceCaps().m_has_EGL_VERSION_1_2 && m_replay->GetDispatch().real_eglWaitClient)
      m_replay->GetDispatch().real_eglWaitClient();
   else
      WarnNotAvailable("eglWaitClient");
#else
   WarnNotAvailable("eglWaitClient");
#endif
}
void Command::run_eglGetCurrentContext()
{
#if EGL_VERSION_1_4
   if (m_packet.NumItems() > 1)
      WarnDataNotHandled("eglGetCurrentContext");
   if (m_replay->GetDeviceCaps().m_has_EGL_VERSION_1_4 && m_replay->GetDispatch().real_eglGetCurrentContext)
      m_replay->GetDispatch().real_eglGetCurrentContext();
   else
      WarnNotAvailable("eglGetCurrentContext");
#else
   WarnNotAvailable("eglGetCurrentContext");
#endif
}
void Command::run_eglCreateSync()
{
#if EGL_VERSION_1_5
   if (m_packet.NumItems() > 5)
      WarnDataNotHandled("eglCreateSync");
   if (m_replay->GetDeviceCaps().m_has_EGL_VERSION_1_5 && m_replay->GetDispatch().real_eglCreateSync)
      m_replay->GetDispatch().real_eglCreateSync(GetEGLDisplay(EGLDisplay, 0), GetU32(EGLenum, 1), GetArrayPtr(const EGLAttrib *, 3));
   else
      WarnNotAvailable("eglCreateSync");
#else
   WarnNotAvailable("eglCreateSync");
#endif
}
void Command::run_eglDestroySync()
{
#if EGL_VERSION_1_5
   if (m_packet.NumItems() > 3)
      WarnDataNotHandled("eglDestroySync");
   if (m_replay->GetDeviceCaps().m_has_EGL_VERSION_1_5 && m_replay->GetDispatch().real_eglDestroySync)
      m_replay->GetDispatch().real_eglDestroySync(GetEGLDisplay(EGLDisplay, 0), GetEGLSync(EGLSync, 1));
   else
      WarnNotAvailable("eglDestroySync");
#else
   WarnNotAvailable("eglDestroySync");
#endif
}
void Command::run_eglClientWaitSync()
{
#if EGL_VERSION_1_5
   if (m_packet.NumItems() > 5)
      WarnDataNotHandled("eglClientWaitSync");
   if (m_replay->GetDeviceCaps().m_has_EGL_VERSION_1_5 && m_replay->GetDispatch().real_eglClientWaitSync)
      m_replay->GetDispatch().real_eglClientWaitSync(GetEGLDisplay(EGLDisplay, 0), GetEGLSync(EGLSync, 1), GetI32(EGLint, 2), GetU32(EGLTime, 3));
   else
      WarnNotAvailable("eglClientWaitSync");
#else
   WarnNotAvailable("eglClientWaitSync");
#endif
}
void Command::run_eglGetSyncAttrib()
{
#if EGL_VERSION_1_5
   if (m_packet.NumItems() > 5)
      WarnDataNotHandled("eglGetSyncAttrib");
   if (m_replay->GetDeviceCaps().m_has_EGL_VERSION_1_5 && m_replay->GetDispatch().real_eglGetSyncAttrib)
      m_replay->GetDispatch().real_eglGetSyncAttrib(GetEGLDisplay(EGLDisplay, 0), GetEGLSync(EGLSync, 1), GetI32(EGLint, 2), dummyEGLAttrib);
   else
      WarnNotAvailable("eglGetSyncAttrib");
#else
   WarnNotAvailable("eglGetSyncAttrib");
#endif
}
void Command::run_eglCreateImage()
{
#if EGL_VERSION_1_5
   if (m_packet.NumItems() > 7)
      WarnDataNotHandled("eglCreateImage");
   if (m_replay->GetDeviceCaps().m_has_EGL_VERSION_1_5 && m_replay->GetDispatch().real_eglCreateImage)
      m_replay->GetDispatch().real_eglCreateImage(GetEGLDisplay(EGLDisplay, 0), GetEGLContext(EGLContext, 1), GetU32(EGLenum, 2), GetEGLClientBuffer(EGLClientBuffer, 3), GetArrayPtr(const EGLAttrib *, 5));
   else
      WarnNotAvailable("eglCreateImage");
#else
   WarnNotAvailable("eglCreateImage");
#endif
}
void Command::run_eglDestroyImage()
{
#if EGL_VERSION_1_5
   if (m_packet.NumItems() > 3)
      WarnDataNotHandled("eglDestroyImage");
   if (m_replay->GetDeviceCaps().m_has_EGL_VERSION_1_5 && m_replay->GetDispatch().real_eglDestroyImage)
      m_replay->GetDispatch().real_eglDestroyImage(GetEGLDisplay(EGLDisplay, 0), GetEGLImage(EGLImage, 1));
   else
      WarnNotAvailable("eglDestroyImage");
#else
   WarnNotAvailable("eglDestroyImage");
#endif
}
void Command::run_eglGetPlatformDisplay()
{
#if EGL_VERSION_1_5
   if (m_packet.NumItems() > 5)
      WarnDataNotHandled("eglGetPlatformDisplay");
   if (m_replay->GetDeviceCaps().m_has_EGL_VERSION_1_5 && m_replay->GetDispatch().real_eglGetPlatformDisplay)
      m_replay->GetDispatch().real_eglGetPlatformDisplay(GetU32(EGLenum, 0), dummyvoid, GetArrayPtr(const EGLAttrib *, 3));
   else
      WarnNotAvailable("eglGetPlatformDisplay");
#else
   WarnNotAvailable("eglGetPlatformDisplay");
#endif
}
void Command::run_eglCreatePlatformWindowSurface()
{
#if EGL_VERSION_1_5
   if (m_packet.NumItems() > 6)
      WarnDataNotHandled("eglCreatePlatformWindowSurface");
   if (m_replay->GetDeviceCaps().m_has_EGL_VERSION_1_5 && m_replay->GetDispatch().real_eglCreatePlatformWindowSurface)
      m_replay->GetDispatch().real_eglCreatePlatformWindowSurface(GetEGLDisplay(EGLDisplay, 0), GetEGLConfig(EGLConfig, 1), dummyvoid, GetArrayPtr(const EGLAttrib *, 4));
   else
      WarnNotAvailable("eglCreatePlatformWindowSurface");
#else
   WarnNotAvailable("eglCreatePlatformWindowSurface");
#endif
}
void Command::run_eglCreatePlatformPixmapSurface()
{
#if EGL_VERSION_1_5
   if (m_packet.NumItems() > 6)
      WarnDataNotHandled("eglCreatePlatformPixmapSurface");
   if (m_replay->GetDeviceCaps().m_has_EGL_VERSION_1_5 && m_replay->GetDispatch().real_eglCreatePlatformPixmapSurface)
      m_replay->GetDispatch().real_eglCreatePlatformPixmapSurface(GetEGLDisplay(EGLDisplay, 0), GetEGLConfig(EGLConfig, 1), dummyvoid, GetArrayPtr(const EGLAttrib *, 4));
   else
      WarnNotAvailable("eglCreatePlatformPixmapSurface");
#else
   WarnNotAvailable("eglCreatePlatformPixmapSurface");
#endif
}
void Command::run_eglWaitSync()
{
#if EGL_VERSION_1_5
   if (m_packet.NumItems() > 4)
      WarnDataNotHandled("eglWaitSync");
   if (m_replay->GetDeviceCaps().m_has_EGL_VERSION_1_5 && m_replay->GetDispatch().real_eglWaitSync)
      m_replay->GetDispatch().real_eglWaitSync(GetEGLDisplay(EGLDisplay, 0), GetEGLSync(EGLSync, 1), GetI32(EGLint, 2));
   else
      WarnNotAvailable("eglWaitSync");
#else
   WarnNotAvailable("eglWaitSync");
#endif
}
void Command::run_glAttachShader()
{
#if GL_ES_VERSION_2_0
   if (m_packet.NumItems() > 3)
      WarnDataNotHandled("glAttachShader");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_2_0 && m_replay->GetDispatch().real_glAttachShader)
      m_replay->GetDispatch().real_glAttachShader(GetProgram(GLuint, 0), GetShader(GLuint, 1));
   else
      WarnNotAvailable("glAttachShader");
#else
   WarnNotAvailable("glAttachShader");
#endif
}
void Command::run_glBindAttribLocation()
{
#if GL_ES_VERSION_2_0
   if (m_packet.NumItems() > 4)
      WarnDataNotHandled("glBindAttribLocation");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_2_0 && m_replay->GetDispatch().real_glBindAttribLocation)
      m_replay->GetDispatch().real_glBindAttribLocation(GetProgram(GLuint, 0), GetU32(GLuint, 1), GetCP(const GLchar *, 2));
   else
      WarnNotAvailable("glBindAttribLocation");
#else
   WarnNotAvailable("glBindAttribLocation");
#endif
}
void Command::run_glBindFramebuffer()
{
#if GL_ES_VERSION_2_0
   if (m_packet.NumItems() > 3)
      WarnDataNotHandled("glBindFramebuffer");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_2_0 && m_replay->GetDispatch().real_glBindFramebuffer)
      m_replay->GetDispatch().real_glBindFramebuffer(GetU32(GLenum, 0), GetU32(GLuint, 1));
   else
      WarnNotAvailable("glBindFramebuffer");
#else
   WarnNotAvailable("glBindFramebuffer");
#endif
}
void Command::run_glBindRenderbuffer()
{
#if GL_ES_VERSION_2_0
   if (m_packet.NumItems() > 3)
      WarnDataNotHandled("glBindRenderbuffer");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_2_0 && m_replay->GetDispatch().real_glBindRenderbuffer)
      m_replay->GetDispatch().real_glBindRenderbuffer(GetU32(GLenum, 0), GetU32(GLuint, 1));
   else
      WarnNotAvailable("glBindRenderbuffer");
#else
   WarnNotAvailable("glBindRenderbuffer");
#endif
}
void Command::run_glBlendColor()
{
#if GL_ES_VERSION_2_0
   if (m_packet.NumItems() > 5)
      WarnDataNotHandled("glBlendColor");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_2_0 && m_replay->GetDispatch().real_glBlendColor)
      m_replay->GetDispatch().real_glBlendColor(GetF(GLfloat, 0), GetF(GLfloat, 1), GetF(GLfloat, 2), GetF(GLfloat, 3));
   else
      WarnNotAvailable("glBlendColor");
#else
   WarnNotAvailable("glBlendColor");
#endif
}
void Command::run_glBlendEquation()
{
#if GL_ES_VERSION_2_0
   if (m_packet.NumItems() > 2)
      WarnDataNotHandled("glBlendEquation");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_2_0 && m_replay->GetDispatch().real_glBlendEquation)
      m_replay->GetDispatch().real_glBlendEquation(GetU32(GLenum, 0));
   else
      WarnNotAvailable("glBlendEquation");
#else
   WarnNotAvailable("glBlendEquation");
#endif
}
void Command::run_glBlendEquationSeparate()
{
#if GL_ES_VERSION_2_0
   if (m_packet.NumItems() > 3)
      WarnDataNotHandled("glBlendEquationSeparate");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_2_0 && m_replay->GetDispatch().real_glBlendEquationSeparate)
      m_replay->GetDispatch().real_glBlendEquationSeparate(GetU32(GLenum, 0), GetU32(GLenum, 1));
   else
      WarnNotAvailable("glBlendEquationSeparate");
#else
   WarnNotAvailable("glBlendEquationSeparate");
#endif
}
void Command::run_glBlendFuncSeparate()
{
#if GL_ES_VERSION_2_0
   if (m_packet.NumItems() > 5)
      WarnDataNotHandled("glBlendFuncSeparate");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_2_0 && m_replay->GetDispatch().real_glBlendFuncSeparate)
      m_replay->GetDispatch().real_glBlendFuncSeparate(GetU32(GLenum, 0), GetU32(GLenum, 1), GetU32(GLenum, 2), GetU32(GLenum, 3));
   else
      WarnNotAvailable("glBlendFuncSeparate");
#else
   WarnNotAvailable("glBlendFuncSeparate");
#endif
}
void Command::run_glCheckFramebufferStatus()
{
#if GL_ES_VERSION_2_0
   if (m_packet.NumItems() > 2)
      WarnDataNotHandled("glCheckFramebufferStatus");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_2_0 && m_replay->GetDispatch().real_glCheckFramebufferStatus)
      m_replay->GetDispatch().real_glCheckFramebufferStatus(GetU32(GLenum, 0));
   else
      WarnNotAvailable("glCheckFramebufferStatus");
#else
   WarnNotAvailable("glCheckFramebufferStatus");
#endif
}
void Command::run_glCompileShader()
{
#if GL_ES_VERSION_2_0
   if (m_packet.NumItems() > 2)
      WarnDataNotHandled("glCompileShader");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_2_0 && m_replay->GetDispatch().real_glCompileShader)
      m_replay->GetDispatch().real_glCompileShader(GetShader(GLuint, 0));
   else
      WarnNotAvailable("glCompileShader");
#else
   WarnNotAvailable("glCompileShader");
#endif
}
void Command::run_glCreateProgram()
{
#if GL_ES_VERSION_2_0
   if (m_packet.NumItems() > 1)
      WarnDataNotHandled("glCreateProgram");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_2_0 && m_replay->GetDispatch().real_glCreateProgram)
      m_replay->GetDispatch().real_glCreateProgram();
   else
      WarnNotAvailable("glCreateProgram");
#else
   WarnNotAvailable("glCreateProgram");
#endif
}
void Command::run_glCreateShader()
{
#if GL_ES_VERSION_2_0
   if (m_packet.NumItems() > 2)
      WarnDataNotHandled("glCreateShader");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_2_0 && m_replay->GetDispatch().real_glCreateShader)
      m_replay->GetDispatch().real_glCreateShader(GetU32(GLenum, 0));
   else
      WarnNotAvailable("glCreateShader");
#else
   WarnNotAvailable("glCreateShader");
#endif
}
void Command::run_glDeleteFramebuffers()
{
#if GL_ES_VERSION_2_0
   if (m_packet.NumItems() > 4)
      WarnDataNotHandled("glDeleteFramebuffers");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_2_0 && m_replay->GetDispatch().real_glDeleteFramebuffers)
      m_replay->GetDispatch().real_glDeleteFramebuffers(GetI32(GLsizei, 0), GetArrayPtr(const GLuint *, 2));
   else
      WarnNotAvailable("glDeleteFramebuffers");
#else
   WarnNotAvailable("glDeleteFramebuffers");
#endif
}
void Command::run_glDeleteProgram()
{
#if GL_ES_VERSION_2_0
   if (m_packet.NumItems() > 2)
      WarnDataNotHandled("glDeleteProgram");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_2_0 && m_replay->GetDispatch().real_glDeleteProgram)
      m_replay->GetDispatch().real_glDeleteProgram(GetProgram(GLuint, 0));
   else
      WarnNotAvailable("glDeleteProgram");
#else
   WarnNotAvailable("glDeleteProgram");
#endif
}
void Command::run_glDeleteRenderbuffers()
{
#if GL_ES_VERSION_2_0
   if (m_packet.NumItems() > 4)
      WarnDataNotHandled("glDeleteRenderbuffers");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_2_0 && m_replay->GetDispatch().real_glDeleteRenderbuffers)
      m_replay->GetDispatch().real_glDeleteRenderbuffers(GetI32(GLsizei, 0), GetArrayPtr(const GLuint *, 2));
   else
      WarnNotAvailable("glDeleteRenderbuffers");
#else
   WarnNotAvailable("glDeleteRenderbuffers");
#endif
}
void Command::run_glDeleteShader()
{
#if GL_ES_VERSION_2_0
   if (m_packet.NumItems() > 2)
      WarnDataNotHandled("glDeleteShader");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_2_0 && m_replay->GetDispatch().real_glDeleteShader)
      m_replay->GetDispatch().real_glDeleteShader(GetShader(GLuint, 0));
   else
      WarnNotAvailable("glDeleteShader");
#else
   WarnNotAvailable("glDeleteShader");
#endif
}
void Command::run_glDetachShader()
{
#if GL_ES_VERSION_2_0
   if (m_packet.NumItems() > 3)
      WarnDataNotHandled("glDetachShader");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_2_0 && m_replay->GetDispatch().real_glDetachShader)
      m_replay->GetDispatch().real_glDetachShader(GetProgram(GLuint, 0), GetShader(GLuint, 1));
   else
      WarnNotAvailable("glDetachShader");
#else
   WarnNotAvailable("glDetachShader");
#endif
}
void Command::run_glDisableVertexAttribArray()
{
#if GL_ES_VERSION_2_0
   if (m_packet.NumItems() > 2)
      WarnDataNotHandled("glDisableVertexAttribArray");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_2_0 && m_replay->GetDispatch().real_glDisableVertexAttribArray)
      m_replay->GetDispatch().real_glDisableVertexAttribArray(GetU32(GLuint, 0));
   else
      WarnNotAvailable("glDisableVertexAttribArray");
#else
   WarnNotAvailable("glDisableVertexAttribArray");
#endif
}
void Command::run_glEnableVertexAttribArray()
{
#if GL_ES_VERSION_2_0
   if (m_packet.NumItems() > 2)
      WarnDataNotHandled("glEnableVertexAttribArray");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_2_0 && m_replay->GetDispatch().real_glEnableVertexAttribArray)
      m_replay->GetDispatch().real_glEnableVertexAttribArray(GetU32(GLuint, 0));
   else
      WarnNotAvailable("glEnableVertexAttribArray");
#else
   WarnNotAvailable("glEnableVertexAttribArray");
#endif
}
void Command::run_glFramebufferRenderbuffer()
{
#if GL_ES_VERSION_2_0
   if (m_packet.NumItems() > 5)
      WarnDataNotHandled("glFramebufferRenderbuffer");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_2_0 && m_replay->GetDispatch().real_glFramebufferRenderbuffer)
      m_replay->GetDispatch().real_glFramebufferRenderbuffer(GetU32(GLenum, 0), GetU32(GLenum, 1), GetU32(GLenum, 2), GetU32(GLuint, 3));
   else
      WarnNotAvailable("glFramebufferRenderbuffer");
#else
   WarnNotAvailable("glFramebufferRenderbuffer");
#endif
}
void Command::run_glFramebufferTexture2D()
{
#if GL_ES_VERSION_2_0
   if (m_packet.NumItems() > 6)
      WarnDataNotHandled("glFramebufferTexture2D");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_2_0 && m_replay->GetDispatch().real_glFramebufferTexture2D)
      m_replay->GetDispatch().real_glFramebufferTexture2D(GetU32(GLenum, 0), GetU32(GLenum, 1), GetU32(GLenum, 2), GetU32(GLuint, 3), GetI32(GLint, 4));
   else
      WarnNotAvailable("glFramebufferTexture2D");
#else
   WarnNotAvailable("glFramebufferTexture2D");
#endif
}
void Command::run_glGenerateMipmap()
{
#if GL_ES_VERSION_2_0
   if (m_packet.NumItems() > 2)
      WarnDataNotHandled("glGenerateMipmap");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_2_0 && m_replay->GetDispatch().real_glGenerateMipmap)
      m_replay->GetDispatch().real_glGenerateMipmap(GetU32(GLenum, 0));
   else
      WarnNotAvailable("glGenerateMipmap");
#else
   WarnNotAvailable("glGenerateMipmap");
#endif
}
void Command::run_glGenFramebuffers()
{
#if GL_ES_VERSION_2_0
   if (m_packet.NumItems() > 3)
      WarnDataNotHandled("glGenFramebuffers");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_2_0 && m_replay->GetDispatch().real_glGenFramebuffers)
      m_replay->GetDispatch().real_glGenFramebuffers(GetI32(GLsizei, 0), dummyGLuint);
   else
      WarnNotAvailable("glGenFramebuffers");
#else
   WarnNotAvailable("glGenFramebuffers");
#endif
}
void Command::run_glGenRenderbuffers()
{
#if GL_ES_VERSION_2_0
   if (m_packet.NumItems() > 3)
      WarnDataNotHandled("glGenRenderbuffers");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_2_0 && m_replay->GetDispatch().real_glGenRenderbuffers)
      m_replay->GetDispatch().real_glGenRenderbuffers(GetI32(GLsizei, 0), dummyGLuint);
   else
      WarnNotAvailable("glGenRenderbuffers");
#else
   WarnNotAvailable("glGenRenderbuffers");
#endif
}
void Command::run_glGetActiveAttrib()
{
#if GL_ES_VERSION_2_0
   if (m_packet.NumItems() > 8)
      WarnDataNotHandled("glGetActiveAttrib");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_2_0 && m_replay->GetDispatch().real_glGetActiveAttrib)
      m_replay->GetDispatch().real_glGetActiveAttrib(GetProgram(GLuint, 0), GetU32(GLuint, 1), GetI32(GLsizei, 2), dummyGLsizei, dummyGLint, dummyGLenum, dummyGLchar);
   else
      WarnNotAvailable("glGetActiveAttrib");
#else
   WarnNotAvailable("glGetActiveAttrib");
#endif
}
void Command::run_glGetActiveUniform()
{
#if GL_ES_VERSION_2_0
   if (m_packet.NumItems() > 8)
      WarnDataNotHandled("glGetActiveUniform");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_2_0 && m_replay->GetDispatch().real_glGetActiveUniform)
      m_replay->GetDispatch().real_glGetActiveUniform(GetProgram(GLuint, 0), GetU32(GLuint, 1), GetI32(GLsizei, 2), dummyGLsizei, dummyGLint, dummyGLenum, dummyGLchar);
   else
      WarnNotAvailable("glGetActiveUniform");
#else
   WarnNotAvailable("glGetActiveUniform");
#endif
}
void Command::run_glGetAttachedShaders()
{
#if GL_ES_VERSION_2_0
   if (m_packet.NumItems() > 5)
      WarnDataNotHandled("glGetAttachedShaders");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_2_0 && m_replay->GetDispatch().real_glGetAttachedShaders)
      m_replay->GetDispatch().real_glGetAttachedShaders(GetProgram(GLuint, 0), GetI32(GLsizei, 1), dummyGLsizei, dummyGLuint);
   else
      WarnNotAvailable("glGetAttachedShaders");
#else
   WarnNotAvailable("glGetAttachedShaders");
#endif
}
void Command::run_glGetAttribLocation()
{
#if GL_ES_VERSION_2_0
   if (m_packet.NumItems() > 3)
      WarnDataNotHandled("glGetAttribLocation");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_2_0 && m_replay->GetDispatch().real_glGetAttribLocation)
      m_replay->GetDispatch().real_glGetAttribLocation(GetProgram(GLuint, 0), GetCP(const GLchar *, 1));
   else
      WarnNotAvailable("glGetAttribLocation");
#else
   WarnNotAvailable("glGetAttribLocation");
#endif
}
void Command::run_glGetFramebufferAttachmentParameteriv()
{
#if GL_ES_VERSION_2_0
   if (m_packet.NumItems() > 5)
      WarnDataNotHandled("glGetFramebufferAttachmentParameteriv");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_2_0 && m_replay->GetDispatch().real_glGetFramebufferAttachmentParameteriv)
      m_replay->GetDispatch().real_glGetFramebufferAttachmentParameteriv(GetU32(GLenum, 0), GetU32(GLenum, 1), GetU32(GLenum, 2), dummyGLint);
   else
      WarnNotAvailable("glGetFramebufferAttachmentParameteriv");
#else
   WarnNotAvailable("glGetFramebufferAttachmentParameteriv");
#endif
}
void Command::run_glGetProgramiv()
{
#if GL_ES_VERSION_2_0
   if (m_packet.NumItems() > 4)
      WarnDataNotHandled("glGetProgramiv");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_2_0 && m_replay->GetDispatch().real_glGetProgramiv)
      m_replay->GetDispatch().real_glGetProgramiv(GetProgram(GLuint, 0), GetU32(GLenum, 1), dummyGLint);
   else
      WarnNotAvailable("glGetProgramiv");
#else
   WarnNotAvailable("glGetProgramiv");
#endif
}
void Command::run_glGetProgramInfoLog()
{
#if GL_ES_VERSION_2_0
   if (m_packet.NumItems() > 5)
      WarnDataNotHandled("glGetProgramInfoLog");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_2_0 && m_replay->GetDispatch().real_glGetProgramInfoLog)
      m_replay->GetDispatch().real_glGetProgramInfoLog(GetProgram(GLuint, 0), GetI32(GLsizei, 1), dummyGLsizei, dummyGLchar);
   else
      WarnNotAvailable("glGetProgramInfoLog");
#else
   WarnNotAvailable("glGetProgramInfoLog");
#endif
}
void Command::run_glGetRenderbufferParameteriv()
{
#if GL_ES_VERSION_2_0
   if (m_packet.NumItems() > 4)
      WarnDataNotHandled("glGetRenderbufferParameteriv");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_2_0 && m_replay->GetDispatch().real_glGetRenderbufferParameteriv)
      m_replay->GetDispatch().real_glGetRenderbufferParameteriv(GetU32(GLenum, 0), GetU32(GLenum, 1), dummyGLint);
   else
      WarnNotAvailable("glGetRenderbufferParameteriv");
#else
   WarnNotAvailable("glGetRenderbufferParameteriv");
#endif
}
void Command::run_glGetShaderiv()
{
#if GL_ES_VERSION_2_0
   if (m_packet.NumItems() > 4)
      WarnDataNotHandled("glGetShaderiv");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_2_0 && m_replay->GetDispatch().real_glGetShaderiv)
      m_replay->GetDispatch().real_glGetShaderiv(GetShader(GLuint, 0), GetU32(GLenum, 1), dummyGLint);
   else
      WarnNotAvailable("glGetShaderiv");
#else
   WarnNotAvailable("glGetShaderiv");
#endif
}
void Command::run_glGetShaderInfoLog()
{
#if GL_ES_VERSION_2_0
   if (m_packet.NumItems() > 5)
      WarnDataNotHandled("glGetShaderInfoLog");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_2_0 && m_replay->GetDispatch().real_glGetShaderInfoLog)
      m_replay->GetDispatch().real_glGetShaderInfoLog(GetShader(GLuint, 0), GetI32(GLsizei, 1), dummyGLsizei, dummyGLchar);
   else
      WarnNotAvailable("glGetShaderInfoLog");
#else
   WarnNotAvailable("glGetShaderInfoLog");
#endif
}
void Command::run_glGetShaderPrecisionFormat()
{
#if GL_ES_VERSION_2_0
   if (m_packet.NumItems() > 5)
      WarnDataNotHandled("glGetShaderPrecisionFormat");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_2_0 && m_replay->GetDispatch().real_glGetShaderPrecisionFormat)
      m_replay->GetDispatch().real_glGetShaderPrecisionFormat(GetU32(GLenum, 0), GetU32(GLenum, 1), dummyGLint, dummyGLint);
   else
      WarnNotAvailable("glGetShaderPrecisionFormat");
#else
   WarnNotAvailable("glGetShaderPrecisionFormat");
#endif
}
void Command::run_glGetShaderSource()
{
#if GL_ES_VERSION_2_0
   if (m_packet.NumItems() > 5)
      WarnDataNotHandled("glGetShaderSource");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_2_0 && m_replay->GetDispatch().real_glGetShaderSource)
      m_replay->GetDispatch().real_glGetShaderSource(GetShader(GLuint, 0), GetI32(GLsizei, 1), dummyGLsizei, dummyGLchar);
   else
      WarnNotAvailable("glGetShaderSource");
#else
   WarnNotAvailable("glGetShaderSource");
#endif
}
void Command::run_glGetUniformfv()
{
#if GL_ES_VERSION_2_0
   if (m_packet.NumItems() > 4)
      WarnDataNotHandled("glGetUniformfv");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_2_0 && m_replay->GetDispatch().real_glGetUniformfv)
      m_replay->GetDispatch().real_glGetUniformfv(GetProgram(GLuint, 0), GetUniform(1, 0), dummyGLfloat);
   else
      WarnNotAvailable("glGetUniformfv");
#else
   WarnNotAvailable("glGetUniformfv");
#endif
}
void Command::run_glGetUniformiv()
{
#if GL_ES_VERSION_2_0
   if (m_packet.NumItems() > 4)
      WarnDataNotHandled("glGetUniformiv");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_2_0 && m_replay->GetDispatch().real_glGetUniformiv)
      m_replay->GetDispatch().real_glGetUniformiv(GetProgram(GLuint, 0), GetUniform(1, 0), dummyGLint);
   else
      WarnNotAvailable("glGetUniformiv");
#else
   WarnNotAvailable("glGetUniformiv");
#endif
}
void Command::run_glGetUniformLocation()
{
#if GL_ES_VERSION_2_0
   if (m_packet.NumItems() > 3)
      WarnDataNotHandled("glGetUniformLocation");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_2_0 && m_replay->GetDispatch().real_glGetUniformLocation)
      m_replay->GetDispatch().real_glGetUniformLocation(GetProgram(GLuint, 0), GetCP(const GLchar *, 1));
   else
      WarnNotAvailable("glGetUniformLocation");
#else
   WarnNotAvailable("glGetUniformLocation");
#endif
}
void Command::run_glGetVertexAttribfv()
{
#if GL_ES_VERSION_2_0
   if (m_packet.NumItems() > 4)
      WarnDataNotHandled("glGetVertexAttribfv");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_2_0 && m_replay->GetDispatch().real_glGetVertexAttribfv)
      m_replay->GetDispatch().real_glGetVertexAttribfv(GetU32(GLuint, 0), GetU32(GLenum, 1), dummyGLfloat);
   else
      WarnNotAvailable("glGetVertexAttribfv");
#else
   WarnNotAvailable("glGetVertexAttribfv");
#endif
}
void Command::run_glGetVertexAttribiv()
{
#if GL_ES_VERSION_2_0
   if (m_packet.NumItems() > 4)
      WarnDataNotHandled("glGetVertexAttribiv");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_2_0 && m_replay->GetDispatch().real_glGetVertexAttribiv)
      m_replay->GetDispatch().real_glGetVertexAttribiv(GetU32(GLuint, 0), GetU32(GLenum, 1), dummyGLint);
   else
      WarnNotAvailable("glGetVertexAttribiv");
#else
   WarnNotAvailable("glGetVertexAttribiv");
#endif
}
void Command::run_glGetVertexAttribPointerv()
{
#if GL_ES_VERSION_2_0
   if (m_packet.NumItems() > 4)
      WarnDataNotHandled("glGetVertexAttribPointerv");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_2_0 && m_replay->GetDispatch().real_glGetVertexAttribPointerv)
      m_replay->GetDispatch().real_glGetVertexAttribPointerv(GetU32(GLuint, 0), GetU32(GLenum, 1), dummyvoidptr);
   else
      WarnNotAvailable("glGetVertexAttribPointerv");
#else
   WarnNotAvailable("glGetVertexAttribPointerv");
#endif
}
void Command::run_glIsFramebuffer()
{
#if GL_ES_VERSION_2_0
   if (m_packet.NumItems() > 2)
      WarnDataNotHandled("glIsFramebuffer");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_2_0 && m_replay->GetDispatch().real_glIsFramebuffer)
      m_replay->GetDispatch().real_glIsFramebuffer(GetU32(GLuint, 0));
   else
      WarnNotAvailable("glIsFramebuffer");
#else
   WarnNotAvailable("glIsFramebuffer");
#endif
}
void Command::run_glIsProgram()
{
#if GL_ES_VERSION_2_0
   if (m_packet.NumItems() > 2)
      WarnDataNotHandled("glIsProgram");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_2_0 && m_replay->GetDispatch().real_glIsProgram)
      m_replay->GetDispatch().real_glIsProgram(GetProgram(GLuint, 0));
   else
      WarnNotAvailable("glIsProgram");
#else
   WarnNotAvailable("glIsProgram");
#endif
}
void Command::run_glIsRenderbuffer()
{
#if GL_ES_VERSION_2_0
   if (m_packet.NumItems() > 2)
      WarnDataNotHandled("glIsRenderbuffer");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_2_0 && m_replay->GetDispatch().real_glIsRenderbuffer)
      m_replay->GetDispatch().real_glIsRenderbuffer(GetU32(GLuint, 0));
   else
      WarnNotAvailable("glIsRenderbuffer");
#else
   WarnNotAvailable("glIsRenderbuffer");
#endif
}
void Command::run_glIsShader()
{
#if GL_ES_VERSION_2_0
   if (m_packet.NumItems() > 2)
      WarnDataNotHandled("glIsShader");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_2_0 && m_replay->GetDispatch().real_glIsShader)
      m_replay->GetDispatch().real_glIsShader(GetShader(GLuint, 0));
   else
      WarnNotAvailable("glIsShader");
#else
   WarnNotAvailable("glIsShader");
#endif
}
void Command::run_glLinkProgram()
{
#if GL_ES_VERSION_2_0
   if (m_packet.NumItems() > 2)
      WarnDataNotHandled("glLinkProgram");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_2_0 && m_replay->GetDispatch().real_glLinkProgram)
      m_replay->GetDispatch().real_glLinkProgram(GetProgram(GLuint, 0));
   else
      WarnNotAvailable("glLinkProgram");
#else
   WarnNotAvailable("glLinkProgram");
#endif
}
void Command::run_glReleaseShaderCompiler()
{
#if GL_ES_VERSION_2_0
   if (m_packet.NumItems() > 1)
      WarnDataNotHandled("glReleaseShaderCompiler");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_2_0 && m_replay->GetDispatch().real_glReleaseShaderCompiler)
      m_replay->GetDispatch().real_glReleaseShaderCompiler();
   else
      WarnNotAvailable("glReleaseShaderCompiler");
#else
   WarnNotAvailable("glReleaseShaderCompiler");
#endif
}
void Command::run_glRenderbufferStorage()
{
#if GL_ES_VERSION_2_0
   if (m_packet.NumItems() > 5)
      WarnDataNotHandled("glRenderbufferStorage");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_2_0 && m_replay->GetDispatch().real_glRenderbufferStorage)
      m_replay->GetDispatch().real_glRenderbufferStorage(GetU32(GLenum, 0), GetU32(GLenum, 1), GetI32(GLsizei, 2), GetI32(GLsizei, 3));
   else
      WarnNotAvailable("glRenderbufferStorage");
#else
   WarnNotAvailable("glRenderbufferStorage");
#endif
}
void Command::run_glShaderBinary()
{
#if GL_ES_VERSION_2_0
   if (m_packet.NumItems() > 8)
      WarnDataNotHandled("glShaderBinary");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_2_0 && m_replay->GetDispatch().real_glShaderBinary)
      m_replay->GetDispatch().real_glShaderBinary(GetI32(GLsizei, 0), GetArrayPtr(const GLuint *, 5), GetU32(GLenum, 2), GetArrayPtr(const void *, 6), GetI32(GLsizei, 4));
   else
      WarnNotAvailable("glShaderBinary");
#else
   WarnNotAvailable("glShaderBinary");
#endif
}
void Command::run_glShaderSource()
{
#if GL_ES_VERSION_2_0
   if (m_packet.NumItems() > 7)
      WarnDataNotHandled("glShaderSource");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_2_0 && m_replay->GetDispatch().real_glShaderSource)
      m_replay->GetDispatch().real_glShaderSource(GetShader(GLuint, 0), GetI32(GLsizei, 1), GetArrayPtr(const GLchar *const*, 4), GetArrayPtr(const GLint *, 5));
   else
      WarnNotAvailable("glShaderSource");
#else
   WarnNotAvailable("glShaderSource");
#endif
}
void Command::run_glStencilFuncSeparate()
{
#if GL_ES_VERSION_2_0
   if (m_packet.NumItems() > 5)
      WarnDataNotHandled("glStencilFuncSeparate");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_2_0 && m_replay->GetDispatch().real_glStencilFuncSeparate)
      m_replay->GetDispatch().real_glStencilFuncSeparate(GetU32(GLenum, 0), GetU32(GLenum, 1), GetI32(GLint, 2), GetU32(GLuint, 3));
   else
      WarnNotAvailable("glStencilFuncSeparate");
#else
   WarnNotAvailable("glStencilFuncSeparate");
#endif
}
void Command::run_glStencilMaskSeparate()
{
#if GL_ES_VERSION_2_0
   if (m_packet.NumItems() > 3)
      WarnDataNotHandled("glStencilMaskSeparate");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_2_0 && m_replay->GetDispatch().real_glStencilMaskSeparate)
      m_replay->GetDispatch().real_glStencilMaskSeparate(GetU32(GLenum, 0), GetU32(GLuint, 1));
   else
      WarnNotAvailable("glStencilMaskSeparate");
#else
   WarnNotAvailable("glStencilMaskSeparate");
#endif
}
void Command::run_glStencilOpSeparate()
{
#if GL_ES_VERSION_2_0
   if (m_packet.NumItems() > 5)
      WarnDataNotHandled("glStencilOpSeparate");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_2_0 && m_replay->GetDispatch().real_glStencilOpSeparate)
      m_replay->GetDispatch().real_glStencilOpSeparate(GetU32(GLenum, 0), GetU32(GLenum, 1), GetU32(GLenum, 2), GetU32(GLenum, 3));
   else
      WarnNotAvailable("glStencilOpSeparate");
#else
   WarnNotAvailable("glStencilOpSeparate");
#endif
}
void Command::run_glUniform1f()
{
#if GL_ES_VERSION_2_0
   if (m_packet.NumItems() > 3)
      WarnDataNotHandled("glUniform1f");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_2_0 && m_replay->GetDispatch().real_glUniform1f)
      m_replay->GetDispatch().real_glUniform1f(GetCurUniform(0), GetF(GLfloat, 1));
   else
      WarnNotAvailable("glUniform1f");
#else
   WarnNotAvailable("glUniform1f");
#endif
}
void Command::run_glUniform1fv()
{
#if GL_ES_VERSION_2_0
   if (m_packet.NumItems() > 5)
      WarnDataNotHandled("glUniform1fv");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_2_0 && m_replay->GetDispatch().real_glUniform1fv)
      m_replay->GetDispatch().real_glUniform1fv(GetCurUniform(0), GetI32(GLsizei, 1), GetArrayPtr(const GLfloat *, 3));
   else
      WarnNotAvailable("glUniform1fv");
#else
   WarnNotAvailable("glUniform1fv");
#endif
}
void Command::run_glUniform1i()
{
#if GL_ES_VERSION_2_0
   if (m_packet.NumItems() > 3)
      WarnDataNotHandled("glUniform1i");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_2_0 && m_replay->GetDispatch().real_glUniform1i)
      m_replay->GetDispatch().real_glUniform1i(GetCurUniform(0), GetI32(GLint, 1));
   else
      WarnNotAvailable("glUniform1i");
#else
   WarnNotAvailable("glUniform1i");
#endif
}
void Command::run_glUniform1iv()
{
#if GL_ES_VERSION_2_0
   if (m_packet.NumItems() > 5)
      WarnDataNotHandled("glUniform1iv");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_2_0 && m_replay->GetDispatch().real_glUniform1iv)
      m_replay->GetDispatch().real_glUniform1iv(GetCurUniform(0), GetI32(GLsizei, 1), GetArrayPtr(const GLint *, 3));
   else
      WarnNotAvailable("glUniform1iv");
#else
   WarnNotAvailable("glUniform1iv");
#endif
}
void Command::run_glUniform2f()
{
#if GL_ES_VERSION_2_0
   if (m_packet.NumItems() > 4)
      WarnDataNotHandled("glUniform2f");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_2_0 && m_replay->GetDispatch().real_glUniform2f)
      m_replay->GetDispatch().real_glUniform2f(GetCurUniform(0), GetF(GLfloat, 1), GetF(GLfloat, 2));
   else
      WarnNotAvailable("glUniform2f");
#else
   WarnNotAvailable("glUniform2f");
#endif
}
void Command::run_glUniform2fv()
{
#if GL_ES_VERSION_2_0
   if (m_packet.NumItems() > 5)
      WarnDataNotHandled("glUniform2fv");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_2_0 && m_replay->GetDispatch().real_glUniform2fv)
      m_replay->GetDispatch().real_glUniform2fv(GetCurUniform(0), GetI32(GLsizei, 1), GetArrayPtr(const GLfloat *, 3));
   else
      WarnNotAvailable("glUniform2fv");
#else
   WarnNotAvailable("glUniform2fv");
#endif
}
void Command::run_glUniform2i()
{
#if GL_ES_VERSION_2_0
   if (m_packet.NumItems() > 4)
      WarnDataNotHandled("glUniform2i");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_2_0 && m_replay->GetDispatch().real_glUniform2i)
      m_replay->GetDispatch().real_glUniform2i(GetCurUniform(0), GetI32(GLint, 1), GetI32(GLint, 2));
   else
      WarnNotAvailable("glUniform2i");
#else
   WarnNotAvailable("glUniform2i");
#endif
}
void Command::run_glUniform2iv()
{
#if GL_ES_VERSION_2_0
   if (m_packet.NumItems() > 5)
      WarnDataNotHandled("glUniform2iv");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_2_0 && m_replay->GetDispatch().real_glUniform2iv)
      m_replay->GetDispatch().real_glUniform2iv(GetCurUniform(0), GetI32(GLsizei, 1), GetArrayPtr(const GLint *, 3));
   else
      WarnNotAvailable("glUniform2iv");
#else
   WarnNotAvailable("glUniform2iv");
#endif
}
void Command::run_glUniform3f()
{
#if GL_ES_VERSION_2_0
   if (m_packet.NumItems() > 5)
      WarnDataNotHandled("glUniform3f");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_2_0 && m_replay->GetDispatch().real_glUniform3f)
      m_replay->GetDispatch().real_glUniform3f(GetCurUniform(0), GetF(GLfloat, 1), GetF(GLfloat, 2), GetF(GLfloat, 3));
   else
      WarnNotAvailable("glUniform3f");
#else
   WarnNotAvailable("glUniform3f");
#endif
}
void Command::run_glUniform3fv()
{
#if GL_ES_VERSION_2_0
   if (m_packet.NumItems() > 5)
      WarnDataNotHandled("glUniform3fv");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_2_0 && m_replay->GetDispatch().real_glUniform3fv)
      m_replay->GetDispatch().real_glUniform3fv(GetCurUniform(0), GetI32(GLsizei, 1), GetArrayPtr(const GLfloat *, 3));
   else
      WarnNotAvailable("glUniform3fv");
#else
   WarnNotAvailable("glUniform3fv");
#endif
}
void Command::run_glUniform3i()
{
#if GL_ES_VERSION_2_0
   if (m_packet.NumItems() > 5)
      WarnDataNotHandled("glUniform3i");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_2_0 && m_replay->GetDispatch().real_glUniform3i)
      m_replay->GetDispatch().real_glUniform3i(GetCurUniform(0), GetI32(GLint, 1), GetI32(GLint, 2), GetI32(GLint, 3));
   else
      WarnNotAvailable("glUniform3i");
#else
   WarnNotAvailable("glUniform3i");
#endif
}
void Command::run_glUniform3iv()
{
#if GL_ES_VERSION_2_0
   if (m_packet.NumItems() > 5)
      WarnDataNotHandled("glUniform3iv");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_2_0 && m_replay->GetDispatch().real_glUniform3iv)
      m_replay->GetDispatch().real_glUniform3iv(GetCurUniform(0), GetI32(GLsizei, 1), GetArrayPtr(const GLint *, 3));
   else
      WarnNotAvailable("glUniform3iv");
#else
   WarnNotAvailable("glUniform3iv");
#endif
}
void Command::run_glUniform4f()
{
#if GL_ES_VERSION_2_0
   if (m_packet.NumItems() > 6)
      WarnDataNotHandled("glUniform4f");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_2_0 && m_replay->GetDispatch().real_glUniform4f)
      m_replay->GetDispatch().real_glUniform4f(GetCurUniform(0), GetF(GLfloat, 1), GetF(GLfloat, 2), GetF(GLfloat, 3), GetF(GLfloat, 4));
   else
      WarnNotAvailable("glUniform4f");
#else
   WarnNotAvailable("glUniform4f");
#endif
}
void Command::run_glUniform4fv()
{
#if GL_ES_VERSION_2_0
   if (m_packet.NumItems() > 5)
      WarnDataNotHandled("glUniform4fv");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_2_0 && m_replay->GetDispatch().real_glUniform4fv)
      m_replay->GetDispatch().real_glUniform4fv(GetCurUniform(0), GetI32(GLsizei, 1), GetArrayPtr(const GLfloat *, 3));
   else
      WarnNotAvailable("glUniform4fv");
#else
   WarnNotAvailable("glUniform4fv");
#endif
}
void Command::run_glUniform4i()
{
#if GL_ES_VERSION_2_0
   if (m_packet.NumItems() > 6)
      WarnDataNotHandled("glUniform4i");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_2_0 && m_replay->GetDispatch().real_glUniform4i)
      m_replay->GetDispatch().real_glUniform4i(GetCurUniform(0), GetI32(GLint, 1), GetI32(GLint, 2), GetI32(GLint, 3), GetI32(GLint, 4));
   else
      WarnNotAvailable("glUniform4i");
#else
   WarnNotAvailable("glUniform4i");
#endif
}
void Command::run_glUniform4iv()
{
#if GL_ES_VERSION_2_0
   if (m_packet.NumItems() > 5)
      WarnDataNotHandled("glUniform4iv");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_2_0 && m_replay->GetDispatch().real_glUniform4iv)
      m_replay->GetDispatch().real_glUniform4iv(GetCurUniform(0), GetI32(GLsizei, 1), GetArrayPtr(const GLint *, 3));
   else
      WarnNotAvailable("glUniform4iv");
#else
   WarnNotAvailable("glUniform4iv");
#endif
}
void Command::run_glUniformMatrix2fv()
{
#if GL_ES_VERSION_2_0
   if (m_packet.NumItems() > 6)
      WarnDataNotHandled("glUniformMatrix2fv");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_2_0 && m_replay->GetDispatch().real_glUniformMatrix2fv)
      m_replay->GetDispatch().real_glUniformMatrix2fv(GetCurUniform(0), GetI32(GLsizei, 1), GetB(GLboolean, 2), GetArrayPtr(const GLfloat *, 4));
   else
      WarnNotAvailable("glUniformMatrix2fv");
#else
   WarnNotAvailable("glUniformMatrix2fv");
#endif
}
void Command::run_glUniformMatrix3fv()
{
#if GL_ES_VERSION_2_0
   if (m_packet.NumItems() > 6)
      WarnDataNotHandled("glUniformMatrix3fv");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_2_0 && m_replay->GetDispatch().real_glUniformMatrix3fv)
      m_replay->GetDispatch().real_glUniformMatrix3fv(GetCurUniform(0), GetI32(GLsizei, 1), GetB(GLboolean, 2), GetArrayPtr(const GLfloat *, 4));
   else
      WarnNotAvailable("glUniformMatrix3fv");
#else
   WarnNotAvailable("glUniformMatrix3fv");
#endif
}
void Command::run_glUniformMatrix4fv()
{
#if GL_ES_VERSION_2_0
   if (m_packet.NumItems() > 6)
      WarnDataNotHandled("glUniformMatrix4fv");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_2_0 && m_replay->GetDispatch().real_glUniformMatrix4fv)
      m_replay->GetDispatch().real_glUniformMatrix4fv(GetCurUniform(0), GetI32(GLsizei, 1), GetB(GLboolean, 2), GetArrayPtr(const GLfloat *, 4));
   else
      WarnNotAvailable("glUniformMatrix4fv");
#else
   WarnNotAvailable("glUniformMatrix4fv");
#endif
}
void Command::run_glUseProgram()
{
#if GL_ES_VERSION_2_0
   if (m_packet.NumItems() > 2)
      WarnDataNotHandled("glUseProgram");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_2_0 && m_replay->GetDispatch().real_glUseProgram)
      m_replay->GetDispatch().real_glUseProgram(GetProgram(GLuint, 0));
   else
      WarnNotAvailable("glUseProgram");
#else
   WarnNotAvailable("glUseProgram");
#endif
}
void Command::run_glValidateProgram()
{
#if GL_ES_VERSION_2_0
   if (m_packet.NumItems() > 2)
      WarnDataNotHandled("glValidateProgram");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_2_0 && m_replay->GetDispatch().real_glValidateProgram)
      m_replay->GetDispatch().real_glValidateProgram(GetProgram(GLuint, 0));
   else
      WarnNotAvailable("glValidateProgram");
#else
   WarnNotAvailable("glValidateProgram");
#endif
}
void Command::run_glVertexAttrib1f()
{
#if GL_ES_VERSION_2_0
   if (m_packet.NumItems() > 3)
      WarnDataNotHandled("glVertexAttrib1f");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_2_0 && m_replay->GetDispatch().real_glVertexAttrib1f)
      m_replay->GetDispatch().real_glVertexAttrib1f(GetU32(GLuint, 0), GetF(GLfloat, 1));
   else
      WarnNotAvailable("glVertexAttrib1f");
#else
   WarnNotAvailable("glVertexAttrib1f");
#endif
}
void Command::run_glVertexAttrib1fv()
{
#if GL_ES_VERSION_2_0
   if (m_packet.NumItems() > 4)
      WarnDataNotHandled("glVertexAttrib1fv");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_2_0 && m_replay->GetDispatch().real_glVertexAttrib1fv)
      m_replay->GetDispatch().real_glVertexAttrib1fv(GetU32(GLuint, 0), GetArrayPtr(const GLfloat *, 2));
   else
      WarnNotAvailable("glVertexAttrib1fv");
#else
   WarnNotAvailable("glVertexAttrib1fv");
#endif
}
void Command::run_glVertexAttrib2f()
{
#if GL_ES_VERSION_2_0
   if (m_packet.NumItems() > 4)
      WarnDataNotHandled("glVertexAttrib2f");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_2_0 && m_replay->GetDispatch().real_glVertexAttrib2f)
      m_replay->GetDispatch().real_glVertexAttrib2f(GetU32(GLuint, 0), GetF(GLfloat, 1), GetF(GLfloat, 2));
   else
      WarnNotAvailable("glVertexAttrib2f");
#else
   WarnNotAvailable("glVertexAttrib2f");
#endif
}
void Command::run_glVertexAttrib2fv()
{
#if GL_ES_VERSION_2_0
   if (m_packet.NumItems() > 4)
      WarnDataNotHandled("glVertexAttrib2fv");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_2_0 && m_replay->GetDispatch().real_glVertexAttrib2fv)
      m_replay->GetDispatch().real_glVertexAttrib2fv(GetU32(GLuint, 0), GetArrayPtr(const GLfloat *, 2));
   else
      WarnNotAvailable("glVertexAttrib2fv");
#else
   WarnNotAvailable("glVertexAttrib2fv");
#endif
}
void Command::run_glVertexAttrib3f()
{
#if GL_ES_VERSION_2_0
   if (m_packet.NumItems() > 5)
      WarnDataNotHandled("glVertexAttrib3f");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_2_0 && m_replay->GetDispatch().real_glVertexAttrib3f)
      m_replay->GetDispatch().real_glVertexAttrib3f(GetU32(GLuint, 0), GetF(GLfloat, 1), GetF(GLfloat, 2), GetF(GLfloat, 3));
   else
      WarnNotAvailable("glVertexAttrib3f");
#else
   WarnNotAvailable("glVertexAttrib3f");
#endif
}
void Command::run_glVertexAttrib3fv()
{
#if GL_ES_VERSION_2_0
   if (m_packet.NumItems() > 4)
      WarnDataNotHandled("glVertexAttrib3fv");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_2_0 && m_replay->GetDispatch().real_glVertexAttrib3fv)
      m_replay->GetDispatch().real_glVertexAttrib3fv(GetU32(GLuint, 0), GetArrayPtr(const GLfloat *, 2));
   else
      WarnNotAvailable("glVertexAttrib3fv");
#else
   WarnNotAvailable("glVertexAttrib3fv");
#endif
}
void Command::run_glVertexAttrib4f()
{
#if GL_ES_VERSION_2_0
   if (m_packet.NumItems() > 6)
      WarnDataNotHandled("glVertexAttrib4f");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_2_0 && m_replay->GetDispatch().real_glVertexAttrib4f)
      m_replay->GetDispatch().real_glVertexAttrib4f(GetU32(GLuint, 0), GetF(GLfloat, 1), GetF(GLfloat, 2), GetF(GLfloat, 3), GetF(GLfloat, 4));
   else
      WarnNotAvailable("glVertexAttrib4f");
#else
   WarnNotAvailable("glVertexAttrib4f");
#endif
}
void Command::run_glVertexAttrib4fv()
{
#if GL_ES_VERSION_2_0
   if (m_packet.NumItems() > 4)
      WarnDataNotHandled("glVertexAttrib4fv");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_2_0 && m_replay->GetDispatch().real_glVertexAttrib4fv)
      m_replay->GetDispatch().real_glVertexAttrib4fv(GetU32(GLuint, 0), GetArrayPtr(const GLfloat *, 2));
   else
      WarnNotAvailable("glVertexAttrib4fv");
#else
   WarnNotAvailable("glVertexAttrib4fv");
#endif
}
void Command::run_glVertexAttribPointer()
{
#if GL_ES_VERSION_2_0
   if (m_packet.NumItems() > 8)
      WarnDataNotHandled("glVertexAttribPointer");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_2_0 && m_replay->GetDispatch().real_glVertexAttribPointer)
      m_replay->GetDispatch().real_glVertexAttribPointer(GetU32(GLuint, 0), GetI32(GLint, 1), GetU32(GLenum, 2), GetB(GLboolean, 3), GetI32(GLsizei, 4), GetArrayPtr(const void *, 6));
   else
      WarnNotAvailable("glVertexAttribPointer");
#else
   WarnNotAvailable("glVertexAttribPointer");
#endif
}
void Command::run_glReadBuffer()
{
#if GL_ES_VERSION_3_0
   if (m_packet.NumItems() > 2)
      WarnDataNotHandled("glReadBuffer");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_0 && m_replay->GetDispatch().real_glReadBuffer)
      m_replay->GetDispatch().real_glReadBuffer(GetU32(GLenum, 0));
   else
      WarnNotAvailable("glReadBuffer");
#else
   WarnNotAvailable("glReadBuffer");
#endif
}
void Command::run_glDrawRangeElements()
{
#if GL_ES_VERSION_3_0
   if (m_packet.NumItems() > 8)
      WarnDataNotHandled("glDrawRangeElements");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_0 && m_replay->GetDispatch().real_glDrawRangeElements)
      m_replay->GetDispatch().real_glDrawRangeElements(GetU32(GLenum, 0), GetU32(GLuint, 1), GetU32(GLuint, 2), GetI32(GLsizei, 3), GetU32(GLenum, 4), GetArrayPtr(const void *, 6));
   else
      WarnNotAvailable("glDrawRangeElements");
#else
   WarnNotAvailable("glDrawRangeElements");
#endif
}
void Command::run_glTexImage3D()
{
#if GL_ES_VERSION_3_0
   if (m_packet.NumItems() > 12)
      WarnDataNotHandled("glTexImage3D");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_0 && m_replay->GetDispatch().real_glTexImage3D)
      m_replay->GetDispatch().real_glTexImage3D(GetU32(GLenum, 0), GetI32(GLint, 1), GetI32(GLint, 2), GetI32(GLsizei, 3), GetI32(GLsizei, 4), GetI32(GLsizei, 5), GetI32(GLint, 6), GetU32(GLenum, 7), GetU32(GLenum, 8), GetArrayPtr(const void *, 10));
   else
      WarnNotAvailable("glTexImage3D");
#else
   WarnNotAvailable("glTexImage3D");
#endif
}
void Command::run_glTexSubImage3D()
{
#if GL_ES_VERSION_3_0
   if (m_packet.NumItems() > 13)
      WarnDataNotHandled("glTexSubImage3D");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_0 && m_replay->GetDispatch().real_glTexSubImage3D)
      m_replay->GetDispatch().real_glTexSubImage3D(GetU32(GLenum, 0), GetI32(GLint, 1), GetI32(GLint, 2), GetI32(GLint, 3), GetI32(GLint, 4), GetI32(GLsizei, 5), GetI32(GLsizei, 6), GetI32(GLsizei, 7), GetU32(GLenum, 8), GetU32(GLenum, 9), GetArrayPtr(const void *, 11));
   else
      WarnNotAvailable("glTexSubImage3D");
#else
   WarnNotAvailable("glTexSubImage3D");
#endif
}
void Command::run_glCopyTexSubImage3D()
{
#if GL_ES_VERSION_3_0
   if (m_packet.NumItems() > 10)
      WarnDataNotHandled("glCopyTexSubImage3D");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_0 && m_replay->GetDispatch().real_glCopyTexSubImage3D)
      m_replay->GetDispatch().real_glCopyTexSubImage3D(GetU32(GLenum, 0), GetI32(GLint, 1), GetI32(GLint, 2), GetI32(GLint, 3), GetI32(GLint, 4), GetI32(GLint, 5), GetI32(GLint, 6), GetI32(GLsizei, 7), GetI32(GLsizei, 8));
   else
      WarnNotAvailable("glCopyTexSubImage3D");
#else
   WarnNotAvailable("glCopyTexSubImage3D");
#endif
}
void Command::run_glCompressedTexImage3D()
{
#if GL_ES_VERSION_3_0
   if (m_packet.NumItems() > 11)
      WarnDataNotHandled("glCompressedTexImage3D");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_0 && m_replay->GetDispatch().real_glCompressedTexImage3D)
      m_replay->GetDispatch().real_glCompressedTexImage3D(GetU32(GLenum, 0), GetI32(GLint, 1), GetU32(GLenum, 2), GetI32(GLsizei, 3), GetI32(GLsizei, 4), GetI32(GLsizei, 5), GetI32(GLint, 6), GetI32(GLsizei, 7), GetArrayPtr(const void *, 9));
   else
      WarnNotAvailable("glCompressedTexImage3D");
#else
   WarnNotAvailable("glCompressedTexImage3D");
#endif
}
void Command::run_glCompressedTexSubImage3D()
{
#if GL_ES_VERSION_3_0
   if (m_packet.NumItems() > 13)
      WarnDataNotHandled("glCompressedTexSubImage3D");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_0 && m_replay->GetDispatch().real_glCompressedTexSubImage3D)
      m_replay->GetDispatch().real_glCompressedTexSubImage3D(GetU32(GLenum, 0), GetI32(GLint, 1), GetI32(GLint, 2), GetI32(GLint, 3), GetI32(GLint, 4), GetI32(GLsizei, 5), GetI32(GLsizei, 6), GetI32(GLsizei, 7), GetU32(GLenum, 8), GetI32(GLsizei, 9), GetArrayPtr(const void *, 11));
   else
      WarnNotAvailable("glCompressedTexSubImage3D");
#else
   WarnNotAvailable("glCompressedTexSubImage3D");
#endif
}
void Command::run_glGenQueries()
{
#if GL_ES_VERSION_3_0
   if (m_packet.NumItems() > 3)
      WarnDataNotHandled("glGenQueries");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_0 && m_replay->GetDispatch().real_glGenQueries)
      m_replay->GetDispatch().real_glGenQueries(GetI32(GLsizei, 0), dummyGLuint);
   else
      WarnNotAvailable("glGenQueries");
#else
   WarnNotAvailable("glGenQueries");
#endif
}
void Command::run_glDeleteQueries()
{
#if GL_ES_VERSION_3_0
   if (m_packet.NumItems() > 4)
      WarnDataNotHandled("glDeleteQueries");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_0 && m_replay->GetDispatch().real_glDeleteQueries)
      m_replay->GetDispatch().real_glDeleteQueries(GetI32(GLsizei, 0), GetArrayPtr(const GLuint *, 2));
   else
      WarnNotAvailable("glDeleteQueries");
#else
   WarnNotAvailable("glDeleteQueries");
#endif
}
void Command::run_glIsQuery()
{
#if GL_ES_VERSION_3_0
   if (m_packet.NumItems() > 2)
      WarnDataNotHandled("glIsQuery");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_0 && m_replay->GetDispatch().real_glIsQuery)
      m_replay->GetDispatch().real_glIsQuery(GetU32(GLuint, 0));
   else
      WarnNotAvailable("glIsQuery");
#else
   WarnNotAvailable("glIsQuery");
#endif
}
void Command::run_glBeginQuery()
{
#if GL_ES_VERSION_3_0
   if (m_packet.NumItems() > 3)
      WarnDataNotHandled("glBeginQuery");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_0 && m_replay->GetDispatch().real_glBeginQuery)
      m_replay->GetDispatch().real_glBeginQuery(GetU32(GLenum, 0), GetU32(GLuint, 1));
   else
      WarnNotAvailable("glBeginQuery");
#else
   WarnNotAvailable("glBeginQuery");
#endif
}
void Command::run_glEndQuery()
{
#if GL_ES_VERSION_3_0
   if (m_packet.NumItems() > 2)
      WarnDataNotHandled("glEndQuery");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_0 && m_replay->GetDispatch().real_glEndQuery)
      m_replay->GetDispatch().real_glEndQuery(GetU32(GLenum, 0));
   else
      WarnNotAvailable("glEndQuery");
#else
   WarnNotAvailable("glEndQuery");
#endif
}
void Command::run_glGetQueryiv()
{
#if GL_ES_VERSION_3_0
   if (m_packet.NumItems() > 4)
      WarnDataNotHandled("glGetQueryiv");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_0 && m_replay->GetDispatch().real_glGetQueryiv)
      m_replay->GetDispatch().real_glGetQueryiv(GetU32(GLenum, 0), GetU32(GLenum, 1), dummyGLint);
   else
      WarnNotAvailable("glGetQueryiv");
#else
   WarnNotAvailable("glGetQueryiv");
#endif
}
void Command::run_glGetQueryObjectuiv()
{
#if GL_ES_VERSION_3_0
   if (m_packet.NumItems() > 4)
      WarnDataNotHandled("glGetQueryObjectuiv");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_0 && m_replay->GetDispatch().real_glGetQueryObjectuiv)
      m_replay->GetDispatch().real_glGetQueryObjectuiv(GetU32(GLuint, 0), GetU32(GLenum, 1), dummyGLuint);
   else
      WarnNotAvailable("glGetQueryObjectuiv");
#else
   WarnNotAvailable("glGetQueryObjectuiv");
#endif
}
void Command::run_glUnmapBuffer()
{
#if GL_ES_VERSION_3_0
   if (m_packet.NumItems() > 2)
      WarnDataNotHandled("glUnmapBuffer");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_0 && m_replay->GetDispatch().real_glUnmapBuffer)
      m_replay->GetDispatch().real_glUnmapBuffer(GetU32(GLenum, 0));
   else
      WarnNotAvailable("glUnmapBuffer");
#else
   WarnNotAvailable("glUnmapBuffer");
#endif
}
void Command::run_glGetBufferPointerv()
{
#if GL_ES_VERSION_3_0
   if (m_packet.NumItems() > 4)
      WarnDataNotHandled("glGetBufferPointerv");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_0 && m_replay->GetDispatch().real_glGetBufferPointerv)
      m_replay->GetDispatch().real_glGetBufferPointerv(GetU32(GLenum, 0), GetU32(GLenum, 1), dummyvoidptr);
   else
      WarnNotAvailable("glGetBufferPointerv");
#else
   WarnNotAvailable("glGetBufferPointerv");
#endif
}
void Command::run_glDrawBuffers()
{
#if GL_ES_VERSION_3_0
   if (m_packet.NumItems() > 4)
      WarnDataNotHandled("glDrawBuffers");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_0 && m_replay->GetDispatch().real_glDrawBuffers)
      m_replay->GetDispatch().real_glDrawBuffers(GetI32(GLsizei, 0), GetArrayPtr(const GLenum *, 2));
   else
      WarnNotAvailable("glDrawBuffers");
#else
   WarnNotAvailable("glDrawBuffers");
#endif
}
void Command::run_glUniformMatrix2x3fv()
{
#if GL_ES_VERSION_3_0
   if (m_packet.NumItems() > 6)
      WarnDataNotHandled("glUniformMatrix2x3fv");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_0 && m_replay->GetDispatch().real_glUniformMatrix2x3fv)
      m_replay->GetDispatch().real_glUniformMatrix2x3fv(GetCurUniform(0), GetI32(GLsizei, 1), GetB(GLboolean, 2), GetArrayPtr(const GLfloat *, 4));
   else
      WarnNotAvailable("glUniformMatrix2x3fv");
#else
   WarnNotAvailable("glUniformMatrix2x3fv");
#endif
}
void Command::run_glUniformMatrix3x2fv()
{
#if GL_ES_VERSION_3_0
   if (m_packet.NumItems() > 6)
      WarnDataNotHandled("glUniformMatrix3x2fv");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_0 && m_replay->GetDispatch().real_glUniformMatrix3x2fv)
      m_replay->GetDispatch().real_glUniformMatrix3x2fv(GetCurUniform(0), GetI32(GLsizei, 1), GetB(GLboolean, 2), GetArrayPtr(const GLfloat *, 4));
   else
      WarnNotAvailable("glUniformMatrix3x2fv");
#else
   WarnNotAvailable("glUniformMatrix3x2fv");
#endif
}
void Command::run_glUniformMatrix2x4fv()
{
#if GL_ES_VERSION_3_0
   if (m_packet.NumItems() > 6)
      WarnDataNotHandled("glUniformMatrix2x4fv");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_0 && m_replay->GetDispatch().real_glUniformMatrix2x4fv)
      m_replay->GetDispatch().real_glUniformMatrix2x4fv(GetCurUniform(0), GetI32(GLsizei, 1), GetB(GLboolean, 2), GetArrayPtr(const GLfloat *, 4));
   else
      WarnNotAvailable("glUniformMatrix2x4fv");
#else
   WarnNotAvailable("glUniformMatrix2x4fv");
#endif
}
void Command::run_glUniformMatrix4x2fv()
{
#if GL_ES_VERSION_3_0
   if (m_packet.NumItems() > 6)
      WarnDataNotHandled("glUniformMatrix4x2fv");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_0 && m_replay->GetDispatch().real_glUniformMatrix4x2fv)
      m_replay->GetDispatch().real_glUniformMatrix4x2fv(GetCurUniform(0), GetI32(GLsizei, 1), GetB(GLboolean, 2), GetArrayPtr(const GLfloat *, 4));
   else
      WarnNotAvailable("glUniformMatrix4x2fv");
#else
   WarnNotAvailable("glUniformMatrix4x2fv");
#endif
}
void Command::run_glUniformMatrix3x4fv()
{
#if GL_ES_VERSION_3_0
   if (m_packet.NumItems() > 6)
      WarnDataNotHandled("glUniformMatrix3x4fv");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_0 && m_replay->GetDispatch().real_glUniformMatrix3x4fv)
      m_replay->GetDispatch().real_glUniformMatrix3x4fv(GetCurUniform(0), GetI32(GLsizei, 1), GetB(GLboolean, 2), GetArrayPtr(const GLfloat *, 4));
   else
      WarnNotAvailable("glUniformMatrix3x4fv");
#else
   WarnNotAvailable("glUniformMatrix3x4fv");
#endif
}
void Command::run_glUniformMatrix4x3fv()
{
#if GL_ES_VERSION_3_0
   if (m_packet.NumItems() > 6)
      WarnDataNotHandled("glUniformMatrix4x3fv");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_0 && m_replay->GetDispatch().real_glUniformMatrix4x3fv)
      m_replay->GetDispatch().real_glUniformMatrix4x3fv(GetCurUniform(0), GetI32(GLsizei, 1), GetB(GLboolean, 2), GetArrayPtr(const GLfloat *, 4));
   else
      WarnNotAvailable("glUniformMatrix4x3fv");
#else
   WarnNotAvailable("glUniformMatrix4x3fv");
#endif
}
void Command::run_glBlitFramebuffer()
{
#if GL_ES_VERSION_3_0
   if (m_packet.NumItems() > 11)
      WarnDataNotHandled("glBlitFramebuffer");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_0 && m_replay->GetDispatch().real_glBlitFramebuffer)
      m_replay->GetDispatch().real_glBlitFramebuffer(GetI32(GLint, 0), GetI32(GLint, 1), GetI32(GLint, 2), GetI32(GLint, 3), GetI32(GLint, 4), GetI32(GLint, 5), GetI32(GLint, 6), GetI32(GLint, 7), GetU32(GLbitfield, 8), GetU32(GLenum, 9));
   else
      WarnNotAvailable("glBlitFramebuffer");
#else
   WarnNotAvailable("glBlitFramebuffer");
#endif
}
void Command::run_glRenderbufferStorageMultisample()
{
#if GL_ES_VERSION_3_0
   if (m_packet.NumItems() > 6)
      WarnDataNotHandled("glRenderbufferStorageMultisample");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_0 && m_replay->GetDispatch().real_glRenderbufferStorageMultisample)
      m_replay->GetDispatch().real_glRenderbufferStorageMultisample(GetU32(GLenum, 0), GetI32(GLsizei, 1), GetU32(GLenum, 2), GetI32(GLsizei, 3), GetI32(GLsizei, 4));
   else
      WarnNotAvailable("glRenderbufferStorageMultisample");
#else
   WarnNotAvailable("glRenderbufferStorageMultisample");
#endif
}
void Command::run_glFramebufferTextureLayer()
{
#if GL_ES_VERSION_3_0
   if (m_packet.NumItems() > 6)
      WarnDataNotHandled("glFramebufferTextureLayer");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_0 && m_replay->GetDispatch().real_glFramebufferTextureLayer)
      m_replay->GetDispatch().real_glFramebufferTextureLayer(GetU32(GLenum, 0), GetU32(GLenum, 1), GetU32(GLuint, 2), GetI32(GLint, 3), GetI32(GLint, 4));
   else
      WarnNotAvailable("glFramebufferTextureLayer");
#else
   WarnNotAvailable("glFramebufferTextureLayer");
#endif
}
void Command::run_glMapBufferRange()
{
#if GL_ES_VERSION_3_0
   if (m_packet.NumItems() > 5)
      WarnDataNotHandled("glMapBufferRange");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_0 && m_replay->GetDispatch().real_glMapBufferRange)
      m_replay->GetDispatch().real_glMapBufferRange(GetU32(GLenum, 0), GetPtr(GLintptr, 1), GetPtr(GLsizeiptr, 2), GetU32(GLbitfield, 3));
   else
      WarnNotAvailable("glMapBufferRange");
#else
   WarnNotAvailable("glMapBufferRange");
#endif
}
void Command::run_glFlushMappedBufferRange()
{
#if GL_ES_VERSION_3_0
   if (m_packet.NumItems() > 4)
      WarnDataNotHandled("glFlushMappedBufferRange");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_0 && m_replay->GetDispatch().real_glFlushMappedBufferRange)
      m_replay->GetDispatch().real_glFlushMappedBufferRange(GetU32(GLenum, 0), GetPtr(GLintptr, 1), GetPtr(GLsizeiptr, 2));
   else
      WarnNotAvailable("glFlushMappedBufferRange");
#else
   WarnNotAvailable("glFlushMappedBufferRange");
#endif
}
void Command::run_glBindVertexArray()
{
#if GL_ES_VERSION_3_0
   if (m_packet.NumItems() > 2)
      WarnDataNotHandled("glBindVertexArray");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_0 && m_replay->GetDispatch().real_glBindVertexArray)
      m_replay->GetDispatch().real_glBindVertexArray(GetVertexArray(GLuint, 0));
   else
      WarnNotAvailable("glBindVertexArray");
#else
   WarnNotAvailable("glBindVertexArray");
#endif
}
void Command::run_glDeleteVertexArrays()
{
#if GL_ES_VERSION_3_0
   if (m_packet.NumItems() > 4)
      WarnDataNotHandled("glDeleteVertexArrays");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_0 && m_replay->GetDispatch().real_glDeleteVertexArrays)
      m_replay->GetDispatch().real_glDeleteVertexArrays(GetI32(GLsizei, 0), GetArrayPtr(const GLuint *, 2));
   else
      WarnNotAvailable("glDeleteVertexArrays");
#else
   WarnNotAvailable("glDeleteVertexArrays");
#endif
}
void Command::run_glGenVertexArrays()
{
#if GL_ES_VERSION_3_0
   if (m_packet.NumItems() > 3)
      WarnDataNotHandled("glGenVertexArrays");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_0 && m_replay->GetDispatch().real_glGenVertexArrays)
      m_replay->GetDispatch().real_glGenVertexArrays(GetI32(GLsizei, 0), dummyGLuint);
   else
      WarnNotAvailable("glGenVertexArrays");
#else
   WarnNotAvailable("glGenVertexArrays");
#endif
}
void Command::run_glIsVertexArray()
{
#if GL_ES_VERSION_3_0
   if (m_packet.NumItems() > 2)
      WarnDataNotHandled("glIsVertexArray");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_0 && m_replay->GetDispatch().real_glIsVertexArray)
      m_replay->GetDispatch().real_glIsVertexArray(GetVertexArray(GLuint, 0));
   else
      WarnNotAvailable("glIsVertexArray");
#else
   WarnNotAvailable("glIsVertexArray");
#endif
}
void Command::run_glGetIntegeri_v()
{
#if GL_ES_VERSION_3_0
   if (m_packet.NumItems() > 4)
      WarnDataNotHandled("glGetIntegeri_v");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_0 && m_replay->GetDispatch().real_glGetIntegeri_v)
      m_replay->GetDispatch().real_glGetIntegeri_v(GetU32(GLenum, 0), GetU32(GLuint, 1), dummyGLint);
   else
      WarnNotAvailable("glGetIntegeri_v");
#else
   WarnNotAvailable("glGetIntegeri_v");
#endif
}
void Command::run_glBeginTransformFeedback()
{
#if GL_ES_VERSION_3_0
   if (m_packet.NumItems() > 2)
      WarnDataNotHandled("glBeginTransformFeedback");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_0 && m_replay->GetDispatch().real_glBeginTransformFeedback)
      m_replay->GetDispatch().real_glBeginTransformFeedback(GetU32(GLenum, 0));
   else
      WarnNotAvailable("glBeginTransformFeedback");
#else
   WarnNotAvailable("glBeginTransformFeedback");
#endif
}
void Command::run_glEndTransformFeedback()
{
#if GL_ES_VERSION_3_0
   if (m_packet.NumItems() > 1)
      WarnDataNotHandled("glEndTransformFeedback");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_0 && m_replay->GetDispatch().real_glEndTransformFeedback)
      m_replay->GetDispatch().real_glEndTransformFeedback();
   else
      WarnNotAvailable("glEndTransformFeedback");
#else
   WarnNotAvailable("glEndTransformFeedback");
#endif
}
void Command::run_glBindBufferRange()
{
#if GL_ES_VERSION_3_0
   if (m_packet.NumItems() > 6)
      WarnDataNotHandled("glBindBufferRange");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_0 && m_replay->GetDispatch().real_glBindBufferRange)
      m_replay->GetDispatch().real_glBindBufferRange(GetU32(GLenum, 0), GetU32(GLuint, 1), GetU32(GLuint, 2), GetPtr(GLintptr, 3), GetPtr(GLsizeiptr, 4));
   else
      WarnNotAvailable("glBindBufferRange");
#else
   WarnNotAvailable("glBindBufferRange");
#endif
}
void Command::run_glBindBufferBase()
{
#if GL_ES_VERSION_3_0
   if (m_packet.NumItems() > 4)
      WarnDataNotHandled("glBindBufferBase");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_0 && m_replay->GetDispatch().real_glBindBufferBase)
      m_replay->GetDispatch().real_glBindBufferBase(GetU32(GLenum, 0), GetU32(GLuint, 1), GetU32(GLuint, 2));
   else
      WarnNotAvailable("glBindBufferBase");
#else
   WarnNotAvailable("glBindBufferBase");
#endif
}
void Command::run_glTransformFeedbackVaryings()
{
#if GL_ES_VERSION_3_0
   if (m_packet.NumItems() > 6)
      WarnDataNotHandled("glTransformFeedbackVaryings");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_0 && m_replay->GetDispatch().real_glTransformFeedbackVaryings)
      m_replay->GetDispatch().real_glTransformFeedbackVaryings(GetProgram(GLuint, 0), GetI32(GLsizei, 1), GetArrayPtr(const GLchar *const*, 4), GetU32(GLenum, 3));
   else
      WarnNotAvailable("glTransformFeedbackVaryings");
#else
   WarnNotAvailable("glTransformFeedbackVaryings");
#endif
}
void Command::run_glGetTransformFeedbackVarying()
{
#if GL_ES_VERSION_3_0
   if (m_packet.NumItems() > 8)
      WarnDataNotHandled("glGetTransformFeedbackVarying");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_0 && m_replay->GetDispatch().real_glGetTransformFeedbackVarying)
      m_replay->GetDispatch().real_glGetTransformFeedbackVarying(GetProgram(GLuint, 0), GetU32(GLuint, 1), GetI32(GLsizei, 2), dummyGLsizei, dummyGLsizei, dummyGLenum, dummyGLchar);
   else
      WarnNotAvailable("glGetTransformFeedbackVarying");
#else
   WarnNotAvailable("glGetTransformFeedbackVarying");
#endif
}
void Command::run_glVertexAttribIPointer()
{
#if GL_ES_VERSION_3_0
   if (m_packet.NumItems() > 7)
      WarnDataNotHandled("glVertexAttribIPointer");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_0 && m_replay->GetDispatch().real_glVertexAttribIPointer)
      m_replay->GetDispatch().real_glVertexAttribIPointer(GetU32(GLuint, 0), GetI32(GLint, 1), GetU32(GLenum, 2), GetI32(GLsizei, 3), GetArrayPtr(const void *, 5));
   else
      WarnNotAvailable("glVertexAttribIPointer");
#else
   WarnNotAvailable("glVertexAttribIPointer");
#endif
}
void Command::run_glGetVertexAttribIiv()
{
#if GL_ES_VERSION_3_0
   if (m_packet.NumItems() > 4)
      WarnDataNotHandled("glGetVertexAttribIiv");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_0 && m_replay->GetDispatch().real_glGetVertexAttribIiv)
      m_replay->GetDispatch().real_glGetVertexAttribIiv(GetU32(GLuint, 0), GetU32(GLenum, 1), dummyGLint);
   else
      WarnNotAvailable("glGetVertexAttribIiv");
#else
   WarnNotAvailable("glGetVertexAttribIiv");
#endif
}
void Command::run_glGetVertexAttribIuiv()
{
#if GL_ES_VERSION_3_0
   if (m_packet.NumItems() > 4)
      WarnDataNotHandled("glGetVertexAttribIuiv");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_0 && m_replay->GetDispatch().real_glGetVertexAttribIuiv)
      m_replay->GetDispatch().real_glGetVertexAttribIuiv(GetU32(GLuint, 0), GetU32(GLenum, 1), dummyGLuint);
   else
      WarnNotAvailable("glGetVertexAttribIuiv");
#else
   WarnNotAvailable("glGetVertexAttribIuiv");
#endif
}
void Command::run_glVertexAttribI4i()
{
#if GL_ES_VERSION_3_0
   if (m_packet.NumItems() > 6)
      WarnDataNotHandled("glVertexAttribI4i");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_0 && m_replay->GetDispatch().real_glVertexAttribI4i)
      m_replay->GetDispatch().real_glVertexAttribI4i(GetU32(GLuint, 0), GetI32(GLint, 1), GetI32(GLint, 2), GetI32(GLint, 3), GetI32(GLint, 4));
   else
      WarnNotAvailable("glVertexAttribI4i");
#else
   WarnNotAvailable("glVertexAttribI4i");
#endif
}
void Command::run_glVertexAttribI4ui()
{
#if GL_ES_VERSION_3_0
   if (m_packet.NumItems() > 6)
      WarnDataNotHandled("glVertexAttribI4ui");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_0 && m_replay->GetDispatch().real_glVertexAttribI4ui)
      m_replay->GetDispatch().real_glVertexAttribI4ui(GetU32(GLuint, 0), GetU32(GLuint, 1), GetU32(GLuint, 2), GetU32(GLuint, 3), GetU32(GLuint, 4));
   else
      WarnNotAvailable("glVertexAttribI4ui");
#else
   WarnNotAvailable("glVertexAttribI4ui");
#endif
}
void Command::run_glVertexAttribI4iv()
{
#if GL_ES_VERSION_3_0
   if (m_packet.NumItems() > 4)
      WarnDataNotHandled("glVertexAttribI4iv");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_0 && m_replay->GetDispatch().real_glVertexAttribI4iv)
      m_replay->GetDispatch().real_glVertexAttribI4iv(GetU32(GLuint, 0), GetArrayPtr(const GLint *, 2));
   else
      WarnNotAvailable("glVertexAttribI4iv");
#else
   WarnNotAvailable("glVertexAttribI4iv");
#endif
}
void Command::run_glVertexAttribI4uiv()
{
#if GL_ES_VERSION_3_0
   if (m_packet.NumItems() > 4)
      WarnDataNotHandled("glVertexAttribI4uiv");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_0 && m_replay->GetDispatch().real_glVertexAttribI4uiv)
      m_replay->GetDispatch().real_glVertexAttribI4uiv(GetU32(GLuint, 0), GetArrayPtr(const GLuint *, 2));
   else
      WarnNotAvailable("glVertexAttribI4uiv");
#else
   WarnNotAvailable("glVertexAttribI4uiv");
#endif
}
void Command::run_glGetUniformuiv()
{
#if GL_ES_VERSION_3_0
   if (m_packet.NumItems() > 4)
      WarnDataNotHandled("glGetUniformuiv");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_0 && m_replay->GetDispatch().real_glGetUniformuiv)
      m_replay->GetDispatch().real_glGetUniformuiv(GetProgram(GLuint, 0), GetUniform(1, 0), dummyGLuint);
   else
      WarnNotAvailable("glGetUniformuiv");
#else
   WarnNotAvailable("glGetUniformuiv");
#endif
}
void Command::run_glGetFragDataLocation()
{
#if GL_ES_VERSION_3_0
   if (m_packet.NumItems() > 3)
      WarnDataNotHandled("glGetFragDataLocation");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_0 && m_replay->GetDispatch().real_glGetFragDataLocation)
      m_replay->GetDispatch().real_glGetFragDataLocation(GetProgram(GLuint, 0), GetCP(const GLchar *, 1));
   else
      WarnNotAvailable("glGetFragDataLocation");
#else
   WarnNotAvailable("glGetFragDataLocation");
#endif
}
void Command::run_glUniform1ui()
{
#if GL_ES_VERSION_3_0
   if (m_packet.NumItems() > 3)
      WarnDataNotHandled("glUniform1ui");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_0 && m_replay->GetDispatch().real_glUniform1ui)
      m_replay->GetDispatch().real_glUniform1ui(GetCurUniform(0), GetU32(GLuint, 1));
   else
      WarnNotAvailable("glUniform1ui");
#else
   WarnNotAvailable("glUniform1ui");
#endif
}
void Command::run_glUniform2ui()
{
#if GL_ES_VERSION_3_0
   if (m_packet.NumItems() > 4)
      WarnDataNotHandled("glUniform2ui");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_0 && m_replay->GetDispatch().real_glUniform2ui)
      m_replay->GetDispatch().real_glUniform2ui(GetCurUniform(0), GetU32(GLuint, 1), GetU32(GLuint, 2));
   else
      WarnNotAvailable("glUniform2ui");
#else
   WarnNotAvailable("glUniform2ui");
#endif
}
void Command::run_glUniform3ui()
{
#if GL_ES_VERSION_3_0
   if (m_packet.NumItems() > 5)
      WarnDataNotHandled("glUniform3ui");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_0 && m_replay->GetDispatch().real_glUniform3ui)
      m_replay->GetDispatch().real_glUniform3ui(GetCurUniform(0), GetU32(GLuint, 1), GetU32(GLuint, 2), GetU32(GLuint, 3));
   else
      WarnNotAvailable("glUniform3ui");
#else
   WarnNotAvailable("glUniform3ui");
#endif
}
void Command::run_glUniform4ui()
{
#if GL_ES_VERSION_3_0
   if (m_packet.NumItems() > 6)
      WarnDataNotHandled("glUniform4ui");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_0 && m_replay->GetDispatch().real_glUniform4ui)
      m_replay->GetDispatch().real_glUniform4ui(GetCurUniform(0), GetU32(GLuint, 1), GetU32(GLuint, 2), GetU32(GLuint, 3), GetU32(GLuint, 4));
   else
      WarnNotAvailable("glUniform4ui");
#else
   WarnNotAvailable("glUniform4ui");
#endif
}
void Command::run_glUniform1uiv()
{
#if GL_ES_VERSION_3_0
   if (m_packet.NumItems() > 5)
      WarnDataNotHandled("glUniform1uiv");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_0 && m_replay->GetDispatch().real_glUniform1uiv)
      m_replay->GetDispatch().real_glUniform1uiv(GetCurUniform(0), GetI32(GLsizei, 1), GetArrayPtr(const GLuint *, 3));
   else
      WarnNotAvailable("glUniform1uiv");
#else
   WarnNotAvailable("glUniform1uiv");
#endif
}
void Command::run_glUniform2uiv()
{
#if GL_ES_VERSION_3_0
   if (m_packet.NumItems() > 5)
      WarnDataNotHandled("glUniform2uiv");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_0 && m_replay->GetDispatch().real_glUniform2uiv)
      m_replay->GetDispatch().real_glUniform2uiv(GetCurUniform(0), GetI32(GLsizei, 1), GetArrayPtr(const GLuint *, 3));
   else
      WarnNotAvailable("glUniform2uiv");
#else
   WarnNotAvailable("glUniform2uiv");
#endif
}
void Command::run_glUniform3uiv()
{
#if GL_ES_VERSION_3_0
   if (m_packet.NumItems() > 5)
      WarnDataNotHandled("glUniform3uiv");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_0 && m_replay->GetDispatch().real_glUniform3uiv)
      m_replay->GetDispatch().real_glUniform3uiv(GetCurUniform(0), GetI32(GLsizei, 1), GetArrayPtr(const GLuint *, 3));
   else
      WarnNotAvailable("glUniform3uiv");
#else
   WarnNotAvailable("glUniform3uiv");
#endif
}
void Command::run_glUniform4uiv()
{
#if GL_ES_VERSION_3_0
   if (m_packet.NumItems() > 5)
      WarnDataNotHandled("glUniform4uiv");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_0 && m_replay->GetDispatch().real_glUniform4uiv)
      m_replay->GetDispatch().real_glUniform4uiv(GetCurUniform(0), GetI32(GLsizei, 1), GetArrayPtr(const GLuint *, 3));
   else
      WarnNotAvailable("glUniform4uiv");
#else
   WarnNotAvailable("glUniform4uiv");
#endif
}
void Command::run_glClearBufferiv()
{
#if GL_ES_VERSION_3_0
   if (m_packet.NumItems() > 5)
      WarnDataNotHandled("glClearBufferiv");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_0 && m_replay->GetDispatch().real_glClearBufferiv)
      m_replay->GetDispatch().real_glClearBufferiv(GetU32(GLenum, 0), GetI32(GLint, 1), GetArrayPtr(const GLint *, 3));
   else
      WarnNotAvailable("glClearBufferiv");
#else
   WarnNotAvailable("glClearBufferiv");
#endif
}
void Command::run_glClearBufferuiv()
{
#if GL_ES_VERSION_3_0
   if (m_packet.NumItems() > 5)
      WarnDataNotHandled("glClearBufferuiv");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_0 && m_replay->GetDispatch().real_glClearBufferuiv)
      m_replay->GetDispatch().real_glClearBufferuiv(GetU32(GLenum, 0), GetI32(GLint, 1), GetArrayPtr(const GLuint *, 3));
   else
      WarnNotAvailable("glClearBufferuiv");
#else
   WarnNotAvailable("glClearBufferuiv");
#endif
}
void Command::run_glClearBufferfv()
{
#if GL_ES_VERSION_3_0
   if (m_packet.NumItems() > 5)
      WarnDataNotHandled("glClearBufferfv");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_0 && m_replay->GetDispatch().real_glClearBufferfv)
      m_replay->GetDispatch().real_glClearBufferfv(GetU32(GLenum, 0), GetI32(GLint, 1), GetArrayPtr(const GLfloat *, 3));
   else
      WarnNotAvailable("glClearBufferfv");
#else
   WarnNotAvailable("glClearBufferfv");
#endif
}
void Command::run_glClearBufferfi()
{
#if GL_ES_VERSION_3_0
   if (m_packet.NumItems() > 5)
      WarnDataNotHandled("glClearBufferfi");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_0 && m_replay->GetDispatch().real_glClearBufferfi)
      m_replay->GetDispatch().real_glClearBufferfi(GetU32(GLenum, 0), GetI32(GLint, 1), GetF(GLfloat, 2), GetI32(GLint, 3));
   else
      WarnNotAvailable("glClearBufferfi");
#else
   WarnNotAvailable("glClearBufferfi");
#endif
}
void Command::run_glGetStringi()
{
#if GL_ES_VERSION_3_0
   if (m_packet.NumItems() > 3)
      WarnDataNotHandled("glGetStringi");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_0 && m_replay->GetDispatch().real_glGetStringi)
      m_replay->GetDispatch().real_glGetStringi(GetU32(GLenum, 0), GetU32(GLuint, 1));
   else
      WarnNotAvailable("glGetStringi");
#else
   WarnNotAvailable("glGetStringi");
#endif
}
void Command::run_glCopyBufferSubData()
{
#if GL_ES_VERSION_3_0
   if (m_packet.NumItems() > 6)
      WarnDataNotHandled("glCopyBufferSubData");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_0 && m_replay->GetDispatch().real_glCopyBufferSubData)
      m_replay->GetDispatch().real_glCopyBufferSubData(GetU32(GLenum, 0), GetU32(GLenum, 1), GetPtr(GLintptr, 2), GetPtr(GLintptr, 3), GetPtr(GLsizeiptr, 4));
   else
      WarnNotAvailable("glCopyBufferSubData");
#else
   WarnNotAvailable("glCopyBufferSubData");
#endif
}
void Command::run_glGetUniformIndices()
{
#if GL_ES_VERSION_3_0
   if (m_packet.NumItems() > 6)
      WarnDataNotHandled("glGetUniformIndices");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_0 && m_replay->GetDispatch().real_glGetUniformIndices)
      m_replay->GetDispatch().real_glGetUniformIndices(GetProgram(GLuint, 0), GetI32(GLsizei, 1), GetArrayPtr(const GLchar *const*, 4), dummyGLuint);
   else
      WarnNotAvailable("glGetUniformIndices");
#else
   WarnNotAvailable("glGetUniformIndices");
#endif
}
void Command::run_glGetActiveUniformsiv()
{
#if GL_ES_VERSION_3_0
   if (m_packet.NumItems() > 7)
      WarnDataNotHandled("glGetActiveUniformsiv");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_0 && m_replay->GetDispatch().real_glGetActiveUniformsiv)
      m_replay->GetDispatch().real_glGetActiveUniformsiv(GetProgram(GLuint, 0), GetI32(GLsizei, 1), GetArrayPtr(const GLuint *, 5), GetU32(GLenum, 3), dummyGLint);
   else
      WarnNotAvailable("glGetActiveUniformsiv");
#else
   WarnNotAvailable("glGetActiveUniformsiv");
#endif
}
void Command::run_glGetUniformBlockIndex()
{
#if GL_ES_VERSION_3_0
   if (m_packet.NumItems() > 3)
      WarnDataNotHandled("glGetUniformBlockIndex");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_0 && m_replay->GetDispatch().real_glGetUniformBlockIndex)
      m_replay->GetDispatch().real_glGetUniformBlockIndex(GetProgram(GLuint, 0), GetCP(const GLchar *, 1));
   else
      WarnNotAvailable("glGetUniformBlockIndex");
#else
   WarnNotAvailable("glGetUniformBlockIndex");
#endif
}
void Command::run_glGetActiveUniformBlockiv()
{
#if GL_ES_VERSION_3_0
   if (m_packet.NumItems() > 5)
      WarnDataNotHandled("glGetActiveUniformBlockiv");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_0 && m_replay->GetDispatch().real_glGetActiveUniformBlockiv)
      m_replay->GetDispatch().real_glGetActiveUniformBlockiv(GetProgram(GLuint, 0), GetUniformBlockIndex(1, 0), GetU32(GLenum, 2), dummyGLint);
   else
      WarnNotAvailable("glGetActiveUniformBlockiv");
#else
   WarnNotAvailable("glGetActiveUniformBlockiv");
#endif
}
void Command::run_glGetActiveUniformBlockName()
{
#if GL_ES_VERSION_3_0
   if (m_packet.NumItems() > 6)
      WarnDataNotHandled("glGetActiveUniformBlockName");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_0 && m_replay->GetDispatch().real_glGetActiveUniformBlockName)
      m_replay->GetDispatch().real_glGetActiveUniformBlockName(GetProgram(GLuint, 0), GetUniformBlockIndex(1, 0), GetI32(GLsizei, 2), dummyGLsizei, dummyGLchar);
   else
      WarnNotAvailable("glGetActiveUniformBlockName");
#else
   WarnNotAvailable("glGetActiveUniformBlockName");
#endif
}
void Command::run_glUniformBlockBinding()
{
#if GL_ES_VERSION_3_0
   if (m_packet.NumItems() > 4)
      WarnDataNotHandled("glUniformBlockBinding");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_0 && m_replay->GetDispatch().real_glUniformBlockBinding)
      m_replay->GetDispatch().real_glUniformBlockBinding(GetProgram(GLuint, 0), GetUniformBlockIndex(1, 0), GetU32(GLuint, 2));
   else
      WarnNotAvailable("glUniformBlockBinding");
#else
   WarnNotAvailable("glUniformBlockBinding");
#endif
}
void Command::run_glDrawArraysInstanced()
{
#if GL_ES_VERSION_3_0
   if (m_packet.NumItems() > 5)
      WarnDataNotHandled("glDrawArraysInstanced");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_0 && m_replay->GetDispatch().real_glDrawArraysInstanced)
      m_replay->GetDispatch().real_glDrawArraysInstanced(GetU32(GLenum, 0), GetI32(GLint, 1), GetI32(GLsizei, 2), GetI32(GLsizei, 3));
   else
      WarnNotAvailable("glDrawArraysInstanced");
#else
   WarnNotAvailable("glDrawArraysInstanced");
#endif
}
void Command::run_glDrawElementsInstanced()
{
#if GL_ES_VERSION_3_0
   if (m_packet.NumItems() > 7)
      WarnDataNotHandled("glDrawElementsInstanced");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_0 && m_replay->GetDispatch().real_glDrawElementsInstanced)
      m_replay->GetDispatch().real_glDrawElementsInstanced(GetU32(GLenum, 0), GetI32(GLsizei, 1), GetU32(GLenum, 2), GetArrayPtr(const void *, 5), GetI32(GLsizei, 4));
   else
      WarnNotAvailable("glDrawElementsInstanced");
#else
   WarnNotAvailable("glDrawElementsInstanced");
#endif
}
void Command::run_glFenceSync()
{
#if GL_ES_VERSION_3_0
   if (m_packet.NumItems() > 3)
      WarnDataNotHandled("glFenceSync");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_0 && m_replay->GetDispatch().real_glFenceSync)
      m_replay->GetDispatch().real_glFenceSync(GetU32(GLenum, 0), GetU32(GLbitfield, 1));
   else
      WarnNotAvailable("glFenceSync");
#else
   WarnNotAvailable("glFenceSync");
#endif
}
void Command::run_glIsSync()
{
#if GL_ES_VERSION_3_0
   if (m_packet.NumItems() > 2)
      WarnDataNotHandled("glIsSync");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_0 && m_replay->GetDispatch().real_glIsSync)
      m_replay->GetDispatch().real_glIsSync(GetPtr(GLsync, 0));
   else
      WarnNotAvailable("glIsSync");
#else
   WarnNotAvailable("glIsSync");
#endif
}
void Command::run_glDeleteSync()
{
#if GL_ES_VERSION_3_0
   if (m_packet.NumItems() > 2)
      WarnDataNotHandled("glDeleteSync");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_0 && m_replay->GetDispatch().real_glDeleteSync)
      m_replay->GetDispatch().real_glDeleteSync(GetPtr(GLsync, 0));
   else
      WarnNotAvailable("glDeleteSync");
#else
   WarnNotAvailable("glDeleteSync");
#endif
}
void Command::run_glClientWaitSync()
{
#if GL_ES_VERSION_3_0
   if (m_packet.NumItems() > 4)
      WarnDataNotHandled("glClientWaitSync");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_0 && m_replay->GetDispatch().real_glClientWaitSync)
      m_replay->GetDispatch().real_glClientWaitSync(GetPtr(GLsync, 0), GetU32(GLbitfield, 1), GetU32(GLuint64, 2));
   else
      WarnNotAvailable("glClientWaitSync");
#else
   WarnNotAvailable("glClientWaitSync");
#endif
}
void Command::run_glWaitSync()
{
#if GL_ES_VERSION_3_0
   if (m_packet.NumItems() > 4)
      WarnDataNotHandled("glWaitSync");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_0 && m_replay->GetDispatch().real_glWaitSync)
      m_replay->GetDispatch().real_glWaitSync(GetPtr(GLsync, 0), GetU32(GLbitfield, 1), GetU32(GLuint64, 2));
   else
      WarnNotAvailable("glWaitSync");
#else
   WarnNotAvailable("glWaitSync");
#endif
}
void Command::run_glGetInteger64v()
{
#if GL_ES_VERSION_3_0
   if (m_packet.NumItems() > 3)
      WarnDataNotHandled("glGetInteger64v");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_0 && m_replay->GetDispatch().real_glGetInteger64v)
      m_replay->GetDispatch().real_glGetInteger64v(GetU32(GLenum, 0), dummyGLint64);
   else
      WarnNotAvailable("glGetInteger64v");
#else
   WarnNotAvailable("glGetInteger64v");
#endif
}
void Command::run_glGetSynciv()
{
#if GL_ES_VERSION_3_0
   if (m_packet.NumItems() > 6)
      WarnDataNotHandled("glGetSynciv");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_0 && m_replay->GetDispatch().real_glGetSynciv)
      m_replay->GetDispatch().real_glGetSynciv(GetPtr(GLsync, 0), GetU32(GLenum, 1), GetI32(GLsizei, 2), dummyGLsizei, dummyGLint);
   else
      WarnNotAvailable("glGetSynciv");
#else
   WarnNotAvailable("glGetSynciv");
#endif
}
void Command::run_glGetInteger64i_v()
{
#if GL_ES_VERSION_3_0
   if (m_packet.NumItems() > 4)
      WarnDataNotHandled("glGetInteger64i_v");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_0 && m_replay->GetDispatch().real_glGetInteger64i_v)
      m_replay->GetDispatch().real_glGetInteger64i_v(GetU32(GLenum, 0), GetU32(GLuint, 1), dummyGLint64);
   else
      WarnNotAvailable("glGetInteger64i_v");
#else
   WarnNotAvailable("glGetInteger64i_v");
#endif
}
void Command::run_glGetBufferParameteri64v()
{
#if GL_ES_VERSION_3_0
   if (m_packet.NumItems() > 4)
      WarnDataNotHandled("glGetBufferParameteri64v");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_0 && m_replay->GetDispatch().real_glGetBufferParameteri64v)
      m_replay->GetDispatch().real_glGetBufferParameteri64v(GetU32(GLenum, 0), GetU32(GLenum, 1), dummyGLint64);
   else
      WarnNotAvailable("glGetBufferParameteri64v");
#else
   WarnNotAvailable("glGetBufferParameteri64v");
#endif
}
void Command::run_glGenSamplers()
{
#if GL_ES_VERSION_3_0
   if (m_packet.NumItems() > 3)
      WarnDataNotHandled("glGenSamplers");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_0 && m_replay->GetDispatch().real_glGenSamplers)
      m_replay->GetDispatch().real_glGenSamplers(GetI32(GLsizei, 0), dummyGLuint);
   else
      WarnNotAvailable("glGenSamplers");
#else
   WarnNotAvailable("glGenSamplers");
#endif
}
void Command::run_glDeleteSamplers()
{
#if GL_ES_VERSION_3_0
   if (m_packet.NumItems() > 4)
      WarnDataNotHandled("glDeleteSamplers");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_0 && m_replay->GetDispatch().real_glDeleteSamplers)
      m_replay->GetDispatch().real_glDeleteSamplers(GetI32(GLsizei, 0), GetArrayPtr(const GLuint *, 2));
   else
      WarnNotAvailable("glDeleteSamplers");
#else
   WarnNotAvailable("glDeleteSamplers");
#endif
}
void Command::run_glIsSampler()
{
#if GL_ES_VERSION_3_0
   if (m_packet.NumItems() > 2)
      WarnDataNotHandled("glIsSampler");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_0 && m_replay->GetDispatch().real_glIsSampler)
      m_replay->GetDispatch().real_glIsSampler(GetSampler(GLuint, 0));
   else
      WarnNotAvailable("glIsSampler");
#else
   WarnNotAvailable("glIsSampler");
#endif
}
void Command::run_glBindSampler()
{
#if GL_ES_VERSION_3_0
   if (m_packet.NumItems() > 3)
      WarnDataNotHandled("glBindSampler");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_0 && m_replay->GetDispatch().real_glBindSampler)
      m_replay->GetDispatch().real_glBindSampler(GetU32(GLuint, 0), GetSampler(GLuint, 1));
   else
      WarnNotAvailable("glBindSampler");
#else
   WarnNotAvailable("glBindSampler");
#endif
}
void Command::run_glSamplerParameteri()
{
#if GL_ES_VERSION_3_0
   if (m_packet.NumItems() > 4)
      WarnDataNotHandled("glSamplerParameteri");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_0 && m_replay->GetDispatch().real_glSamplerParameteri)
      m_replay->GetDispatch().real_glSamplerParameteri(GetSampler(GLuint, 0), GetU32(GLenum, 1), GetI32(GLint, 2));
   else
      WarnNotAvailable("glSamplerParameteri");
#else
   WarnNotAvailable("glSamplerParameteri");
#endif
}
void Command::run_glSamplerParameteriv()
{
#if GL_ES_VERSION_3_0
   if (m_packet.NumItems() > 5)
      WarnDataNotHandled("glSamplerParameteriv");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_0 && m_replay->GetDispatch().real_glSamplerParameteriv)
      m_replay->GetDispatch().real_glSamplerParameteriv(GetSampler(GLuint, 0), GetU32(GLenum, 1), GetArrayPtr(const GLint *, 3));
   else
      WarnNotAvailable("glSamplerParameteriv");
#else
   WarnNotAvailable("glSamplerParameteriv");
#endif
}
void Command::run_glSamplerParameterf()
{
#if GL_ES_VERSION_3_0
   if (m_packet.NumItems() > 4)
      WarnDataNotHandled("glSamplerParameterf");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_0 && m_replay->GetDispatch().real_glSamplerParameterf)
      m_replay->GetDispatch().real_glSamplerParameterf(GetSampler(GLuint, 0), GetU32(GLenum, 1), GetF(GLfloat, 2));
   else
      WarnNotAvailable("glSamplerParameterf");
#else
   WarnNotAvailable("glSamplerParameterf");
#endif
}
void Command::run_glSamplerParameterfv()
{
#if GL_ES_VERSION_3_0
   if (m_packet.NumItems() > 5)
      WarnDataNotHandled("glSamplerParameterfv");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_0 && m_replay->GetDispatch().real_glSamplerParameterfv)
      m_replay->GetDispatch().real_glSamplerParameterfv(GetSampler(GLuint, 0), GetU32(GLenum, 1), GetArrayPtr(const GLfloat *, 3));
   else
      WarnNotAvailable("glSamplerParameterfv");
#else
   WarnNotAvailable("glSamplerParameterfv");
#endif
}
void Command::run_glGetSamplerParameteriv()
{
#if GL_ES_VERSION_3_0
   if (m_packet.NumItems() > 4)
      WarnDataNotHandled("glGetSamplerParameteriv");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_0 && m_replay->GetDispatch().real_glGetSamplerParameteriv)
      m_replay->GetDispatch().real_glGetSamplerParameteriv(GetSampler(GLuint, 0), GetU32(GLenum, 1), dummyGLint);
   else
      WarnNotAvailable("glGetSamplerParameteriv");
#else
   WarnNotAvailable("glGetSamplerParameteriv");
#endif
}
void Command::run_glGetSamplerParameterfv()
{
#if GL_ES_VERSION_3_0
   if (m_packet.NumItems() > 4)
      WarnDataNotHandled("glGetSamplerParameterfv");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_0 && m_replay->GetDispatch().real_glGetSamplerParameterfv)
      m_replay->GetDispatch().real_glGetSamplerParameterfv(GetSampler(GLuint, 0), GetU32(GLenum, 1), dummyGLfloat);
   else
      WarnNotAvailable("glGetSamplerParameterfv");
#else
   WarnNotAvailable("glGetSamplerParameterfv");
#endif
}
void Command::run_glVertexAttribDivisor()
{
#if GL_ES_VERSION_3_0
   if (m_packet.NumItems() > 3)
      WarnDataNotHandled("glVertexAttribDivisor");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_0 && m_replay->GetDispatch().real_glVertexAttribDivisor)
      m_replay->GetDispatch().real_glVertexAttribDivisor(GetU32(GLuint, 0), GetU32(GLuint, 1));
   else
      WarnNotAvailable("glVertexAttribDivisor");
#else
   WarnNotAvailable("glVertexAttribDivisor");
#endif
}
void Command::run_glBindTransformFeedback()
{
#if GL_ES_VERSION_3_0
   if (m_packet.NumItems() > 3)
      WarnDataNotHandled("glBindTransformFeedback");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_0 && m_replay->GetDispatch().real_glBindTransformFeedback)
      m_replay->GetDispatch().real_glBindTransformFeedback(GetU32(GLenum, 0), GetTF(GLuint, 1));
   else
      WarnNotAvailable("glBindTransformFeedback");
#else
   WarnNotAvailable("glBindTransformFeedback");
#endif
}
void Command::run_glDeleteTransformFeedbacks()
{
#if GL_ES_VERSION_3_0
   if (m_packet.NumItems() > 4)
      WarnDataNotHandled("glDeleteTransformFeedbacks");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_0 && m_replay->GetDispatch().real_glDeleteTransformFeedbacks)
      m_replay->GetDispatch().real_glDeleteTransformFeedbacks(GetI32(GLsizei, 0), GetArrayPtr(const GLuint *, 2));
   else
      WarnNotAvailable("glDeleteTransformFeedbacks");
#else
   WarnNotAvailable("glDeleteTransformFeedbacks");
#endif
}
void Command::run_glGenTransformFeedbacks()
{
#if GL_ES_VERSION_3_0
   if (m_packet.NumItems() > 3)
      WarnDataNotHandled("glGenTransformFeedbacks");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_0 && m_replay->GetDispatch().real_glGenTransformFeedbacks)
      m_replay->GetDispatch().real_glGenTransformFeedbacks(GetI32(GLsizei, 0), dummyGLuint);
   else
      WarnNotAvailable("glGenTransformFeedbacks");
#else
   WarnNotAvailable("glGenTransformFeedbacks");
#endif
}
void Command::run_glIsTransformFeedback()
{
#if GL_ES_VERSION_3_0
   if (m_packet.NumItems() > 2)
      WarnDataNotHandled("glIsTransformFeedback");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_0 && m_replay->GetDispatch().real_glIsTransformFeedback)
      m_replay->GetDispatch().real_glIsTransformFeedback(GetTF(GLuint, 0));
   else
      WarnNotAvailable("glIsTransformFeedback");
#else
   WarnNotAvailable("glIsTransformFeedback");
#endif
}
void Command::run_glPauseTransformFeedback()
{
#if GL_ES_VERSION_3_0
   if (m_packet.NumItems() > 1)
      WarnDataNotHandled("glPauseTransformFeedback");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_0 && m_replay->GetDispatch().real_glPauseTransformFeedback)
      m_replay->GetDispatch().real_glPauseTransformFeedback();
   else
      WarnNotAvailable("glPauseTransformFeedback");
#else
   WarnNotAvailable("glPauseTransformFeedback");
#endif
}
void Command::run_glResumeTransformFeedback()
{
#if GL_ES_VERSION_3_0
   if (m_packet.NumItems() > 1)
      WarnDataNotHandled("glResumeTransformFeedback");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_0 && m_replay->GetDispatch().real_glResumeTransformFeedback)
      m_replay->GetDispatch().real_glResumeTransformFeedback();
   else
      WarnNotAvailable("glResumeTransformFeedback");
#else
   WarnNotAvailable("glResumeTransformFeedback");
#endif
}
void Command::run_glGetProgramBinary()
{
#if GL_ES_VERSION_3_0
   if (m_packet.NumItems() > 6)
      WarnDataNotHandled("glGetProgramBinary");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_0 && m_replay->GetDispatch().real_glGetProgramBinary)
      m_replay->GetDispatch().real_glGetProgramBinary(GetProgram(GLuint, 0), GetI32(GLsizei, 1), dummyGLsizei, dummyGLenum, dummyvoid);
   else
      WarnNotAvailable("glGetProgramBinary");
#else
   WarnNotAvailable("glGetProgramBinary");
#endif
}
void Command::run_glProgramBinary()
{
#if GL_ES_VERSION_3_0
   if (m_packet.NumItems() > 6)
      WarnDataNotHandled("glProgramBinary");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_0 && m_replay->GetDispatch().real_glProgramBinary)
      m_replay->GetDispatch().real_glProgramBinary(GetProgram(GLuint, 0), GetU32(GLenum, 1), GetArrayPtr(const void *, 4), GetI32(GLsizei, 3));
   else
      WarnNotAvailable("glProgramBinary");
#else
   WarnNotAvailable("glProgramBinary");
#endif
}
void Command::run_glProgramParameteri()
{
#if GL_ES_VERSION_3_0
   if (m_packet.NumItems() > 4)
      WarnDataNotHandled("glProgramParameteri");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_0 && m_replay->GetDispatch().real_glProgramParameteri)
      m_replay->GetDispatch().real_glProgramParameteri(GetProgram(GLuint, 0), GetU32(GLenum, 1), GetI32(GLint, 2));
   else
      WarnNotAvailable("glProgramParameteri");
#else
   WarnNotAvailable("glProgramParameteri");
#endif
}
void Command::run_glInvalidateFramebuffer()
{
#if GL_ES_VERSION_3_0
   if (m_packet.NumItems() > 5)
      WarnDataNotHandled("glInvalidateFramebuffer");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_0 && m_replay->GetDispatch().real_glInvalidateFramebuffer)
      m_replay->GetDispatch().real_glInvalidateFramebuffer(GetU32(GLenum, 0), GetI32(GLsizei, 1), GetArrayPtr(const GLenum *, 3));
   else
      WarnNotAvailable("glInvalidateFramebuffer");
#else
   WarnNotAvailable("glInvalidateFramebuffer");
#endif
}
void Command::run_glInvalidateSubFramebuffer()
{
#if GL_ES_VERSION_3_0
   if (m_packet.NumItems() > 9)
      WarnDataNotHandled("glInvalidateSubFramebuffer");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_0 && m_replay->GetDispatch().real_glInvalidateSubFramebuffer)
      m_replay->GetDispatch().real_glInvalidateSubFramebuffer(GetU32(GLenum, 0), GetI32(GLsizei, 1), GetArrayPtr(const GLenum *, 7), GetI32(GLint, 3), GetI32(GLint, 4), GetI32(GLsizei, 5), GetI32(GLsizei, 6));
   else
      WarnNotAvailable("glInvalidateSubFramebuffer");
#else
   WarnNotAvailable("glInvalidateSubFramebuffer");
#endif
}
void Command::run_glTexStorage2D()
{
#if GL_ES_VERSION_3_0
   if (m_packet.NumItems() > 6)
      WarnDataNotHandled("glTexStorage2D");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_0 && m_replay->GetDispatch().real_glTexStorage2D)
      m_replay->GetDispatch().real_glTexStorage2D(GetU32(GLenum, 0), GetI32(GLsizei, 1), GetU32(GLenum, 2), GetI32(GLsizei, 3), GetI32(GLsizei, 4));
   else
      WarnNotAvailable("glTexStorage2D");
#else
   WarnNotAvailable("glTexStorage2D");
#endif
}
void Command::run_glTexStorage3D()
{
#if GL_ES_VERSION_3_0
   if (m_packet.NumItems() > 7)
      WarnDataNotHandled("glTexStorage3D");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_0 && m_replay->GetDispatch().real_glTexStorage3D)
      m_replay->GetDispatch().real_glTexStorage3D(GetU32(GLenum, 0), GetI32(GLsizei, 1), GetU32(GLenum, 2), GetI32(GLsizei, 3), GetI32(GLsizei, 4), GetI32(GLsizei, 5));
   else
      WarnNotAvailable("glTexStorage3D");
#else
   WarnNotAvailable("glTexStorage3D");
#endif
}
void Command::run_glGetInternalformativ()
{
#if GL_ES_VERSION_3_0
   if (m_packet.NumItems() > 6)
      WarnDataNotHandled("glGetInternalformativ");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_0 && m_replay->GetDispatch().real_glGetInternalformativ)
      m_replay->GetDispatch().real_glGetInternalformativ(GetU32(GLenum, 0), GetU32(GLenum, 1), GetU32(GLenum, 2), GetI32(GLsizei, 3), dummyGLint);
   else
      WarnNotAvailable("glGetInternalformativ");
#else
   WarnNotAvailable("glGetInternalformativ");
#endif
}
void Command::run_glDispatchCompute()
{
#if GL_ES_VERSION_3_1
   if (m_packet.NumItems() > 4)
      WarnDataNotHandled("glDispatchCompute");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_1 && m_replay->GetDispatch().real_glDispatchCompute)
      m_replay->GetDispatch().real_glDispatchCompute(GetU32(GLuint, 0), GetU32(GLuint, 1), GetU32(GLuint, 2));
   else
      WarnNotAvailable("glDispatchCompute");
#else
   WarnNotAvailable("glDispatchCompute");
#endif
}
void Command::run_glDispatchComputeIndirect()
{
#if GL_ES_VERSION_3_1
   if (m_packet.NumItems() > 2)
      WarnDataNotHandled("glDispatchComputeIndirect");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_1 && m_replay->GetDispatch().real_glDispatchComputeIndirect)
      m_replay->GetDispatch().real_glDispatchComputeIndirect(GetPtr(GLintptr, 0));
   else
      WarnNotAvailable("glDispatchComputeIndirect");
#else
   WarnNotAvailable("glDispatchComputeIndirect");
#endif
}
void Command::run_glDrawArraysIndirect()
{
#if GL_ES_VERSION_3_1
   if (m_packet.NumItems() > 4)
      WarnDataNotHandled("glDrawArraysIndirect");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_1 && m_replay->GetDispatch().real_glDrawArraysIndirect)
      m_replay->GetDispatch().real_glDrawArraysIndirect(GetU32(GLenum, 0), GetArrayPtr(const void *, 2));
   else
      WarnNotAvailable("glDrawArraysIndirect");
#else
   WarnNotAvailable("glDrawArraysIndirect");
#endif
}
void Command::run_glDrawElementsIndirect()
{
#if GL_ES_VERSION_3_1
   if (m_packet.NumItems() > 5)
      WarnDataNotHandled("glDrawElementsIndirect");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_1 && m_replay->GetDispatch().real_glDrawElementsIndirect)
      m_replay->GetDispatch().real_glDrawElementsIndirect(GetU32(GLenum, 0), GetU32(GLenum, 1), GetArrayPtr(const void *, 3));
   else
      WarnNotAvailable("glDrawElementsIndirect");
#else
   WarnNotAvailable("glDrawElementsIndirect");
#endif
}
void Command::run_glFramebufferParameteri()
{
#if GL_ES_VERSION_3_1
   if (m_packet.NumItems() > 4)
      WarnDataNotHandled("glFramebufferParameteri");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_1 && m_replay->GetDispatch().real_glFramebufferParameteri)
      m_replay->GetDispatch().real_glFramebufferParameteri(GetU32(GLenum, 0), GetU32(GLenum, 1), GetI32(GLint, 2));
   else
      WarnNotAvailable("glFramebufferParameteri");
#else
   WarnNotAvailable("glFramebufferParameteri");
#endif
}
void Command::run_glGetFramebufferParameteriv()
{
#if GL_ES_VERSION_3_1
   if (m_packet.NumItems() > 4)
      WarnDataNotHandled("glGetFramebufferParameteriv");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_1 && m_replay->GetDispatch().real_glGetFramebufferParameteriv)
      m_replay->GetDispatch().real_glGetFramebufferParameteriv(GetU32(GLenum, 0), GetU32(GLenum, 1), dummyGLint);
   else
      WarnNotAvailable("glGetFramebufferParameteriv");
#else
   WarnNotAvailable("glGetFramebufferParameteriv");
#endif
}
void Command::run_glGetProgramInterfaceiv()
{
#if GL_ES_VERSION_3_1
   if (m_packet.NumItems() > 5)
      WarnDataNotHandled("glGetProgramInterfaceiv");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_1 && m_replay->GetDispatch().real_glGetProgramInterfaceiv)
      m_replay->GetDispatch().real_glGetProgramInterfaceiv(GetProgram(GLuint, 0), GetU32(GLenum, 1), GetU32(GLenum, 2), dummyGLint);
   else
      WarnNotAvailable("glGetProgramInterfaceiv");
#else
   WarnNotAvailable("glGetProgramInterfaceiv");
#endif
}
void Command::run_glGetProgramResourceIndex()
{
#if GL_ES_VERSION_3_1
   if (m_packet.NumItems() > 4)
      WarnDataNotHandled("glGetProgramResourceIndex");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_1 && m_replay->GetDispatch().real_glGetProgramResourceIndex)
      m_replay->GetDispatch().real_glGetProgramResourceIndex(GetProgram(GLuint, 0), GetU32(GLenum, 1), GetCP(const GLchar *, 2));
   else
      WarnNotAvailable("glGetProgramResourceIndex");
#else
   WarnNotAvailable("glGetProgramResourceIndex");
#endif
}
void Command::run_glGetProgramResourceName()
{
#if GL_ES_VERSION_3_1
   if (m_packet.NumItems() > 7)
      WarnDataNotHandled("glGetProgramResourceName");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_1 && m_replay->GetDispatch().real_glGetProgramResourceName)
      m_replay->GetDispatch().real_glGetProgramResourceName(GetProgram(GLuint, 0), GetU32(GLenum, 1), GetU32(GLuint, 2), GetI32(GLsizei, 3), dummyGLsizei, dummyGLchar);
   else
      WarnNotAvailable("glGetProgramResourceName");
#else
   WarnNotAvailable("glGetProgramResourceName");
#endif
}
void Command::run_glGetProgramResourceiv()
{
#if GL_ES_VERSION_3_1
   if (m_packet.NumItems() > 10)
      WarnDataNotHandled("glGetProgramResourceiv");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_1 && m_replay->GetDispatch().real_glGetProgramResourceiv)
      m_replay->GetDispatch().real_glGetProgramResourceiv(GetProgram(GLuint, 0), GetU32(GLenum, 1), GetU32(GLuint, 2), GetI32(GLsizei, 3), GetArrayPtr(const GLenum *, 8), GetI32(GLsizei, 5), dummyGLsizei, dummyGLint);
   else
      WarnNotAvailable("glGetProgramResourceiv");
#else
   WarnNotAvailable("glGetProgramResourceiv");
#endif
}
void Command::run_glGetProgramResourceLocation()
{
#if GL_ES_VERSION_3_1
   if (m_packet.NumItems() > 4)
      WarnDataNotHandled("glGetProgramResourceLocation");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_1 && m_replay->GetDispatch().real_glGetProgramResourceLocation)
      m_replay->GetDispatch().real_glGetProgramResourceLocation(GetProgram(GLuint, 0), GetU32(GLenum, 1), GetCP(const GLchar *, 2));
   else
      WarnNotAvailable("glGetProgramResourceLocation");
#else
   WarnNotAvailable("glGetProgramResourceLocation");
#endif
}
void Command::run_glUseProgramStages()
{
#if GL_ES_VERSION_3_1
   if (m_packet.NumItems() > 4)
      WarnDataNotHandled("glUseProgramStages");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_1 && m_replay->GetDispatch().real_glUseProgramStages)
      m_replay->GetDispatch().real_glUseProgramStages(GetProgramPipeline(GLuint, 0), GetU32(GLbitfield, 1), GetProgram(GLuint, 2));
   else
      WarnNotAvailable("glUseProgramStages");
#else
   WarnNotAvailable("glUseProgramStages");
#endif
}
void Command::run_glActiveShaderProgram()
{
#if GL_ES_VERSION_3_1
   if (m_packet.NumItems() > 3)
      WarnDataNotHandled("glActiveShaderProgram");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_1 && m_replay->GetDispatch().real_glActiveShaderProgram)
      m_replay->GetDispatch().real_glActiveShaderProgram(GetProgramPipeline(GLuint, 0), GetProgram(GLuint, 1));
   else
      WarnNotAvailable("glActiveShaderProgram");
#else
   WarnNotAvailable("glActiveShaderProgram");
#endif
}
void Command::run_glCreateShaderProgramv()
{
#if GL_ES_VERSION_3_1
   if (m_packet.NumItems() > 5)
      WarnDataNotHandled("glCreateShaderProgramv");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_1 && m_replay->GetDispatch().real_glCreateShaderProgramv)
      m_replay->GetDispatch().real_glCreateShaderProgramv(GetU32(GLenum, 0), GetI32(GLsizei, 1), GetArrayPtr(const GLchar *const*, 3));
   else
      WarnNotAvailable("glCreateShaderProgramv");
#else
   WarnNotAvailable("glCreateShaderProgramv");
#endif
}
void Command::run_glBindProgramPipeline()
{
#if GL_ES_VERSION_3_1
   if (m_packet.NumItems() > 2)
      WarnDataNotHandled("glBindProgramPipeline");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_1 && m_replay->GetDispatch().real_glBindProgramPipeline)
      m_replay->GetDispatch().real_glBindProgramPipeline(GetProgramPipeline(GLuint, 0));
   else
      WarnNotAvailable("glBindProgramPipeline");
#else
   WarnNotAvailable("glBindProgramPipeline");
#endif
}
void Command::run_glDeleteProgramPipelines()
{
#if GL_ES_VERSION_3_1
   if (m_packet.NumItems() > 4)
      WarnDataNotHandled("glDeleteProgramPipelines");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_1 && m_replay->GetDispatch().real_glDeleteProgramPipelines)
      m_replay->GetDispatch().real_glDeleteProgramPipelines(GetI32(GLsizei, 0), GetArrayPtr(const GLuint *, 2));
   else
      WarnNotAvailable("glDeleteProgramPipelines");
#else
   WarnNotAvailable("glDeleteProgramPipelines");
#endif
}
void Command::run_glGenProgramPipelines()
{
#if GL_ES_VERSION_3_1
   if (m_packet.NumItems() > 3)
      WarnDataNotHandled("glGenProgramPipelines");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_1 && m_replay->GetDispatch().real_glGenProgramPipelines)
      m_replay->GetDispatch().real_glGenProgramPipelines(GetI32(GLsizei, 0), dummyGLuint);
   else
      WarnNotAvailable("glGenProgramPipelines");
#else
   WarnNotAvailable("glGenProgramPipelines");
#endif
}
void Command::run_glIsProgramPipeline()
{
#if GL_ES_VERSION_3_1
   if (m_packet.NumItems() > 2)
      WarnDataNotHandled("glIsProgramPipeline");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_1 && m_replay->GetDispatch().real_glIsProgramPipeline)
      m_replay->GetDispatch().real_glIsProgramPipeline(GetProgramPipeline(GLuint, 0));
   else
      WarnNotAvailable("glIsProgramPipeline");
#else
   WarnNotAvailable("glIsProgramPipeline");
#endif
}
void Command::run_glGetProgramPipelineiv()
{
#if GL_ES_VERSION_3_1
   if (m_packet.NumItems() > 4)
      WarnDataNotHandled("glGetProgramPipelineiv");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_1 && m_replay->GetDispatch().real_glGetProgramPipelineiv)
      m_replay->GetDispatch().real_glGetProgramPipelineiv(GetProgramPipeline(GLuint, 0), GetU32(GLenum, 1), dummyGLint);
   else
      WarnNotAvailable("glGetProgramPipelineiv");
#else
   WarnNotAvailable("glGetProgramPipelineiv");
#endif
}
void Command::run_glProgramUniform1i()
{
#if GL_ES_VERSION_3_1
   if (m_packet.NumItems() > 4)
      WarnDataNotHandled("glProgramUniform1i");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_1 && m_replay->GetDispatch().real_glProgramUniform1i)
      m_replay->GetDispatch().real_glProgramUniform1i(GetProgram(GLuint, 0), GetUniform(1, 0), GetI32(GLint, 2));
   else
      WarnNotAvailable("glProgramUniform1i");
#else
   WarnNotAvailable("glProgramUniform1i");
#endif
}
void Command::run_glProgramUniform2i()
{
#if GL_ES_VERSION_3_1
   if (m_packet.NumItems() > 5)
      WarnDataNotHandled("glProgramUniform2i");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_1 && m_replay->GetDispatch().real_glProgramUniform2i)
      m_replay->GetDispatch().real_glProgramUniform2i(GetProgram(GLuint, 0), GetUniform(1, 0), GetI32(GLint, 2), GetI32(GLint, 3));
   else
      WarnNotAvailable("glProgramUniform2i");
#else
   WarnNotAvailable("glProgramUniform2i");
#endif
}
void Command::run_glProgramUniform3i()
{
#if GL_ES_VERSION_3_1
   if (m_packet.NumItems() > 6)
      WarnDataNotHandled("glProgramUniform3i");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_1 && m_replay->GetDispatch().real_glProgramUniform3i)
      m_replay->GetDispatch().real_glProgramUniform3i(GetProgram(GLuint, 0), GetUniform(1, 0), GetI32(GLint, 2), GetI32(GLint, 3), GetI32(GLint, 4));
   else
      WarnNotAvailable("glProgramUniform3i");
#else
   WarnNotAvailable("glProgramUniform3i");
#endif
}
void Command::run_glProgramUniform4i()
{
#if GL_ES_VERSION_3_1
   if (m_packet.NumItems() > 7)
      WarnDataNotHandled("glProgramUniform4i");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_1 && m_replay->GetDispatch().real_glProgramUniform4i)
      m_replay->GetDispatch().real_glProgramUniform4i(GetProgram(GLuint, 0), GetUniform(1, 0), GetI32(GLint, 2), GetI32(GLint, 3), GetI32(GLint, 4), GetI32(GLint, 5));
   else
      WarnNotAvailable("glProgramUniform4i");
#else
   WarnNotAvailable("glProgramUniform4i");
#endif
}
void Command::run_glProgramUniform1ui()
{
#if GL_ES_VERSION_3_1
   if (m_packet.NumItems() > 4)
      WarnDataNotHandled("glProgramUniform1ui");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_1 && m_replay->GetDispatch().real_glProgramUniform1ui)
      m_replay->GetDispatch().real_glProgramUniform1ui(GetProgram(GLuint, 0), GetUniform(1, 0), GetU32(GLuint, 2));
   else
      WarnNotAvailable("glProgramUniform1ui");
#else
   WarnNotAvailable("glProgramUniform1ui");
#endif
}
void Command::run_glProgramUniform2ui()
{
#if GL_ES_VERSION_3_1
   if (m_packet.NumItems() > 5)
      WarnDataNotHandled("glProgramUniform2ui");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_1 && m_replay->GetDispatch().real_glProgramUniform2ui)
      m_replay->GetDispatch().real_glProgramUniform2ui(GetProgram(GLuint, 0), GetUniform(1, 0), GetU32(GLuint, 2), GetU32(GLuint, 3));
   else
      WarnNotAvailable("glProgramUniform2ui");
#else
   WarnNotAvailable("glProgramUniform2ui");
#endif
}
void Command::run_glProgramUniform3ui()
{
#if GL_ES_VERSION_3_1
   if (m_packet.NumItems() > 6)
      WarnDataNotHandled("glProgramUniform3ui");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_1 && m_replay->GetDispatch().real_glProgramUniform3ui)
      m_replay->GetDispatch().real_glProgramUniform3ui(GetProgram(GLuint, 0), GetUniform(1, 0), GetU32(GLuint, 2), GetU32(GLuint, 3), GetU32(GLuint, 4));
   else
      WarnNotAvailable("glProgramUniform3ui");
#else
   WarnNotAvailable("glProgramUniform3ui");
#endif
}
void Command::run_glProgramUniform4ui()
{
#if GL_ES_VERSION_3_1
   if (m_packet.NumItems() > 7)
      WarnDataNotHandled("glProgramUniform4ui");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_1 && m_replay->GetDispatch().real_glProgramUniform4ui)
      m_replay->GetDispatch().real_glProgramUniform4ui(GetProgram(GLuint, 0), GetUniform(1, 0), GetU32(GLuint, 2), GetU32(GLuint, 3), GetU32(GLuint, 4), GetU32(GLuint, 5));
   else
      WarnNotAvailable("glProgramUniform4ui");
#else
   WarnNotAvailable("glProgramUniform4ui");
#endif
}
void Command::run_glProgramUniform1f()
{
#if GL_ES_VERSION_3_1
   if (m_packet.NumItems() > 4)
      WarnDataNotHandled("glProgramUniform1f");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_1 && m_replay->GetDispatch().real_glProgramUniform1f)
      m_replay->GetDispatch().real_glProgramUniform1f(GetProgram(GLuint, 0), GetUniform(1, 0), GetF(GLfloat, 2));
   else
      WarnNotAvailable("glProgramUniform1f");
#else
   WarnNotAvailable("glProgramUniform1f");
#endif
}
void Command::run_glProgramUniform2f()
{
#if GL_ES_VERSION_3_1
   if (m_packet.NumItems() > 5)
      WarnDataNotHandled("glProgramUniform2f");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_1 && m_replay->GetDispatch().real_glProgramUniform2f)
      m_replay->GetDispatch().real_glProgramUniform2f(GetProgram(GLuint, 0), GetUniform(1, 0), GetF(GLfloat, 2), GetF(GLfloat, 3));
   else
      WarnNotAvailable("glProgramUniform2f");
#else
   WarnNotAvailable("glProgramUniform2f");
#endif
}
void Command::run_glProgramUniform3f()
{
#if GL_ES_VERSION_3_1
   if (m_packet.NumItems() > 6)
      WarnDataNotHandled("glProgramUniform3f");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_1 && m_replay->GetDispatch().real_glProgramUniform3f)
      m_replay->GetDispatch().real_glProgramUniform3f(GetProgram(GLuint, 0), GetUniform(1, 0), GetF(GLfloat, 2), GetF(GLfloat, 3), GetF(GLfloat, 4));
   else
      WarnNotAvailable("glProgramUniform3f");
#else
   WarnNotAvailable("glProgramUniform3f");
#endif
}
void Command::run_glProgramUniform4f()
{
#if GL_ES_VERSION_3_1
   if (m_packet.NumItems() > 7)
      WarnDataNotHandled("glProgramUniform4f");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_1 && m_replay->GetDispatch().real_glProgramUniform4f)
      m_replay->GetDispatch().real_glProgramUniform4f(GetProgram(GLuint, 0), GetUniform(1, 0), GetF(GLfloat, 2), GetF(GLfloat, 3), GetF(GLfloat, 4), GetF(GLfloat, 5));
   else
      WarnNotAvailable("glProgramUniform4f");
#else
   WarnNotAvailable("glProgramUniform4f");
#endif
}
void Command::run_glProgramUniform1iv()
{
#if GL_ES_VERSION_3_1
   if (m_packet.NumItems() > 6)
      WarnDataNotHandled("glProgramUniform1iv");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_1 && m_replay->GetDispatch().real_glProgramUniform1iv)
      m_replay->GetDispatch().real_glProgramUniform1iv(GetProgram(GLuint, 0), GetUniform(1, 0), GetI32(GLsizei, 2), GetArrayPtr(const GLint *, 4));
   else
      WarnNotAvailable("glProgramUniform1iv");
#else
   WarnNotAvailable("glProgramUniform1iv");
#endif
}
void Command::run_glProgramUniform2iv()
{
#if GL_ES_VERSION_3_1
   if (m_packet.NumItems() > 6)
      WarnDataNotHandled("glProgramUniform2iv");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_1 && m_replay->GetDispatch().real_glProgramUniform2iv)
      m_replay->GetDispatch().real_glProgramUniform2iv(GetProgram(GLuint, 0), GetUniform(1, 0), GetI32(GLsizei, 2), GetArrayPtr(const GLint *, 4));
   else
      WarnNotAvailable("glProgramUniform2iv");
#else
   WarnNotAvailable("glProgramUniform2iv");
#endif
}
void Command::run_glProgramUniform3iv()
{
#if GL_ES_VERSION_3_1
   if (m_packet.NumItems() > 6)
      WarnDataNotHandled("glProgramUniform3iv");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_1 && m_replay->GetDispatch().real_glProgramUniform3iv)
      m_replay->GetDispatch().real_glProgramUniform3iv(GetProgram(GLuint, 0), GetUniform(1, 0), GetI32(GLsizei, 2), GetArrayPtr(const GLint *, 4));
   else
      WarnNotAvailable("glProgramUniform3iv");
#else
   WarnNotAvailable("glProgramUniform3iv");
#endif
}
void Command::run_glProgramUniform4iv()
{
#if GL_ES_VERSION_3_1
   if (m_packet.NumItems() > 6)
      WarnDataNotHandled("glProgramUniform4iv");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_1 && m_replay->GetDispatch().real_glProgramUniform4iv)
      m_replay->GetDispatch().real_glProgramUniform4iv(GetProgram(GLuint, 0), GetUniform(1, 0), GetI32(GLsizei, 2), GetArrayPtr(const GLint *, 4));
   else
      WarnNotAvailable("glProgramUniform4iv");
#else
   WarnNotAvailable("glProgramUniform4iv");
#endif
}
void Command::run_glProgramUniform1uiv()
{
#if GL_ES_VERSION_3_1
   if (m_packet.NumItems() > 6)
      WarnDataNotHandled("glProgramUniform1uiv");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_1 && m_replay->GetDispatch().real_glProgramUniform1uiv)
      m_replay->GetDispatch().real_glProgramUniform1uiv(GetProgram(GLuint, 0), GetUniform(1, 0), GetI32(GLsizei, 2), GetArrayPtr(const GLuint *, 4));
   else
      WarnNotAvailable("glProgramUniform1uiv");
#else
   WarnNotAvailable("glProgramUniform1uiv");
#endif
}
void Command::run_glProgramUniform2uiv()
{
#if GL_ES_VERSION_3_1
   if (m_packet.NumItems() > 6)
      WarnDataNotHandled("glProgramUniform2uiv");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_1 && m_replay->GetDispatch().real_glProgramUniform2uiv)
      m_replay->GetDispatch().real_glProgramUniform2uiv(GetProgram(GLuint, 0), GetUniform(1, 0), GetI32(GLsizei, 2), GetArrayPtr(const GLuint *, 4));
   else
      WarnNotAvailable("glProgramUniform2uiv");
#else
   WarnNotAvailable("glProgramUniform2uiv");
#endif
}
void Command::run_glProgramUniform3uiv()
{
#if GL_ES_VERSION_3_1
   if (m_packet.NumItems() > 6)
      WarnDataNotHandled("glProgramUniform3uiv");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_1 && m_replay->GetDispatch().real_glProgramUniform3uiv)
      m_replay->GetDispatch().real_glProgramUniform3uiv(GetProgram(GLuint, 0), GetUniform(1, 0), GetI32(GLsizei, 2), GetArrayPtr(const GLuint *, 4));
   else
      WarnNotAvailable("glProgramUniform3uiv");
#else
   WarnNotAvailable("glProgramUniform3uiv");
#endif
}
void Command::run_glProgramUniform4uiv()
{
#if GL_ES_VERSION_3_1
   if (m_packet.NumItems() > 6)
      WarnDataNotHandled("glProgramUniform4uiv");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_1 && m_replay->GetDispatch().real_glProgramUniform4uiv)
      m_replay->GetDispatch().real_glProgramUniform4uiv(GetProgram(GLuint, 0), GetUniform(1, 0), GetI32(GLsizei, 2), GetArrayPtr(const GLuint *, 4));
   else
      WarnNotAvailable("glProgramUniform4uiv");
#else
   WarnNotAvailable("glProgramUniform4uiv");
#endif
}
void Command::run_glProgramUniform1fv()
{
#if GL_ES_VERSION_3_1
   if (m_packet.NumItems() > 6)
      WarnDataNotHandled("glProgramUniform1fv");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_1 && m_replay->GetDispatch().real_glProgramUniform1fv)
      m_replay->GetDispatch().real_glProgramUniform1fv(GetProgram(GLuint, 0), GetUniform(1, 0), GetI32(GLsizei, 2), GetArrayPtr(const GLfloat *, 4));
   else
      WarnNotAvailable("glProgramUniform1fv");
#else
   WarnNotAvailable("glProgramUniform1fv");
#endif
}
void Command::run_glProgramUniform2fv()
{
#if GL_ES_VERSION_3_1
   if (m_packet.NumItems() > 6)
      WarnDataNotHandled("glProgramUniform2fv");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_1 && m_replay->GetDispatch().real_glProgramUniform2fv)
      m_replay->GetDispatch().real_glProgramUniform2fv(GetProgram(GLuint, 0), GetUniform(1, 0), GetI32(GLsizei, 2), GetArrayPtr(const GLfloat *, 4));
   else
      WarnNotAvailable("glProgramUniform2fv");
#else
   WarnNotAvailable("glProgramUniform2fv");
#endif
}
void Command::run_glProgramUniform3fv()
{
#if GL_ES_VERSION_3_1
   if (m_packet.NumItems() > 6)
      WarnDataNotHandled("glProgramUniform3fv");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_1 && m_replay->GetDispatch().real_glProgramUniform3fv)
      m_replay->GetDispatch().real_glProgramUniform3fv(GetProgram(GLuint, 0), GetUniform(1, 0), GetI32(GLsizei, 2), GetArrayPtr(const GLfloat *, 4));
   else
      WarnNotAvailable("glProgramUniform3fv");
#else
   WarnNotAvailable("glProgramUniform3fv");
#endif
}
void Command::run_glProgramUniform4fv()
{
#if GL_ES_VERSION_3_1
   if (m_packet.NumItems() > 6)
      WarnDataNotHandled("glProgramUniform4fv");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_1 && m_replay->GetDispatch().real_glProgramUniform4fv)
      m_replay->GetDispatch().real_glProgramUniform4fv(GetProgram(GLuint, 0), GetUniform(1, 0), GetI32(GLsizei, 2), GetArrayPtr(const GLfloat *, 4));
   else
      WarnNotAvailable("glProgramUniform4fv");
#else
   WarnNotAvailable("glProgramUniform4fv");
#endif
}
void Command::run_glProgramUniformMatrix2fv()
{
#if GL_ES_VERSION_3_1
   if (m_packet.NumItems() > 7)
      WarnDataNotHandled("glProgramUniformMatrix2fv");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_1 && m_replay->GetDispatch().real_glProgramUniformMatrix2fv)
      m_replay->GetDispatch().real_glProgramUniformMatrix2fv(GetProgram(GLuint, 0), GetUniform(1, 0), GetI32(GLsizei, 2), GetB(GLboolean, 3), GetArrayPtr(const GLfloat *, 5));
   else
      WarnNotAvailable("glProgramUniformMatrix2fv");
#else
   WarnNotAvailable("glProgramUniformMatrix2fv");
#endif
}
void Command::run_glProgramUniformMatrix3fv()
{
#if GL_ES_VERSION_3_1
   if (m_packet.NumItems() > 7)
      WarnDataNotHandled("glProgramUniformMatrix3fv");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_1 && m_replay->GetDispatch().real_glProgramUniformMatrix3fv)
      m_replay->GetDispatch().real_glProgramUniformMatrix3fv(GetProgram(GLuint, 0), GetUniform(1, 0), GetI32(GLsizei, 2), GetB(GLboolean, 3), GetArrayPtr(const GLfloat *, 5));
   else
      WarnNotAvailable("glProgramUniformMatrix3fv");
#else
   WarnNotAvailable("glProgramUniformMatrix3fv");
#endif
}
void Command::run_glProgramUniformMatrix4fv()
{
#if GL_ES_VERSION_3_1
   if (m_packet.NumItems() > 7)
      WarnDataNotHandled("glProgramUniformMatrix4fv");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_1 && m_replay->GetDispatch().real_glProgramUniformMatrix4fv)
      m_replay->GetDispatch().real_glProgramUniformMatrix4fv(GetProgram(GLuint, 0), GetUniform(1, 0), GetI32(GLsizei, 2), GetB(GLboolean, 3), GetArrayPtr(const GLfloat *, 5));
   else
      WarnNotAvailable("glProgramUniformMatrix4fv");
#else
   WarnNotAvailable("glProgramUniformMatrix4fv");
#endif
}
void Command::run_glProgramUniformMatrix2x3fv()
{
#if GL_ES_VERSION_3_1
   if (m_packet.NumItems() > 7)
      WarnDataNotHandled("glProgramUniformMatrix2x3fv");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_1 && m_replay->GetDispatch().real_glProgramUniformMatrix2x3fv)
      m_replay->GetDispatch().real_glProgramUniformMatrix2x3fv(GetProgram(GLuint, 0), GetUniform(1, 0), GetI32(GLsizei, 2), GetB(GLboolean, 3), GetArrayPtr(const GLfloat *, 5));
   else
      WarnNotAvailable("glProgramUniformMatrix2x3fv");
#else
   WarnNotAvailable("glProgramUniformMatrix2x3fv");
#endif
}
void Command::run_glProgramUniformMatrix3x2fv()
{
#if GL_ES_VERSION_3_1
   if (m_packet.NumItems() > 7)
      WarnDataNotHandled("glProgramUniformMatrix3x2fv");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_1 && m_replay->GetDispatch().real_glProgramUniformMatrix3x2fv)
      m_replay->GetDispatch().real_glProgramUniformMatrix3x2fv(GetProgram(GLuint, 0), GetUniform(1, 0), GetI32(GLsizei, 2), GetB(GLboolean, 3), GetArrayPtr(const GLfloat *, 5));
   else
      WarnNotAvailable("glProgramUniformMatrix3x2fv");
#else
   WarnNotAvailable("glProgramUniformMatrix3x2fv");
#endif
}
void Command::run_glProgramUniformMatrix2x4fv()
{
#if GL_ES_VERSION_3_1
   if (m_packet.NumItems() > 7)
      WarnDataNotHandled("glProgramUniformMatrix2x4fv");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_1 && m_replay->GetDispatch().real_glProgramUniformMatrix2x4fv)
      m_replay->GetDispatch().real_glProgramUniformMatrix2x4fv(GetProgram(GLuint, 0), GetUniform(1, 0), GetI32(GLsizei, 2), GetB(GLboolean, 3), GetArrayPtr(const GLfloat *, 5));
   else
      WarnNotAvailable("glProgramUniformMatrix2x4fv");
#else
   WarnNotAvailable("glProgramUniformMatrix2x4fv");
#endif
}
void Command::run_glProgramUniformMatrix4x2fv()
{
#if GL_ES_VERSION_3_1
   if (m_packet.NumItems() > 7)
      WarnDataNotHandled("glProgramUniformMatrix4x2fv");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_1 && m_replay->GetDispatch().real_glProgramUniformMatrix4x2fv)
      m_replay->GetDispatch().real_glProgramUniformMatrix4x2fv(GetProgram(GLuint, 0), GetUniform(1, 0), GetI32(GLsizei, 2), GetB(GLboolean, 3), GetArrayPtr(const GLfloat *, 5));
   else
      WarnNotAvailable("glProgramUniformMatrix4x2fv");
#else
   WarnNotAvailable("glProgramUniformMatrix4x2fv");
#endif
}
void Command::run_glProgramUniformMatrix3x4fv()
{
#if GL_ES_VERSION_3_1
   if (m_packet.NumItems() > 7)
      WarnDataNotHandled("glProgramUniformMatrix3x4fv");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_1 && m_replay->GetDispatch().real_glProgramUniformMatrix3x4fv)
      m_replay->GetDispatch().real_glProgramUniformMatrix3x4fv(GetProgram(GLuint, 0), GetUniform(1, 0), GetI32(GLsizei, 2), GetB(GLboolean, 3), GetArrayPtr(const GLfloat *, 5));
   else
      WarnNotAvailable("glProgramUniformMatrix3x4fv");
#else
   WarnNotAvailable("glProgramUniformMatrix3x4fv");
#endif
}
void Command::run_glProgramUniformMatrix4x3fv()
{
#if GL_ES_VERSION_3_1
   if (m_packet.NumItems() > 7)
      WarnDataNotHandled("glProgramUniformMatrix4x3fv");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_1 && m_replay->GetDispatch().real_glProgramUniformMatrix4x3fv)
      m_replay->GetDispatch().real_glProgramUniformMatrix4x3fv(GetProgram(GLuint, 0), GetUniform(1, 0), GetI32(GLsizei, 2), GetB(GLboolean, 3), GetArrayPtr(const GLfloat *, 5));
   else
      WarnNotAvailable("glProgramUniformMatrix4x3fv");
#else
   WarnNotAvailable("glProgramUniformMatrix4x3fv");
#endif
}
void Command::run_glValidateProgramPipeline()
{
#if GL_ES_VERSION_3_1
   if (m_packet.NumItems() > 2)
      WarnDataNotHandled("glValidateProgramPipeline");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_1 && m_replay->GetDispatch().real_glValidateProgramPipeline)
      m_replay->GetDispatch().real_glValidateProgramPipeline(GetProgramPipeline(GLuint, 0));
   else
      WarnNotAvailable("glValidateProgramPipeline");
#else
   WarnNotAvailable("glValidateProgramPipeline");
#endif
}
void Command::run_glGetProgramPipelineInfoLog()
{
#if GL_ES_VERSION_3_1
   if (m_packet.NumItems() > 5)
      WarnDataNotHandled("glGetProgramPipelineInfoLog");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_1 && m_replay->GetDispatch().real_glGetProgramPipelineInfoLog)
      m_replay->GetDispatch().real_glGetProgramPipelineInfoLog(GetProgramPipeline(GLuint, 0), GetI32(GLsizei, 1), dummyGLsizei, dummyGLchar);
   else
      WarnNotAvailable("glGetProgramPipelineInfoLog");
#else
   WarnNotAvailable("glGetProgramPipelineInfoLog");
#endif
}
void Command::run_glBindImageTexture()
{
#if GL_ES_VERSION_3_1
   if (m_packet.NumItems() > 8)
      WarnDataNotHandled("glBindImageTexture");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_1 && m_replay->GetDispatch().real_glBindImageTexture)
      m_replay->GetDispatch().real_glBindImageTexture(GetU32(GLuint, 0), GetU32(GLuint, 1), GetI32(GLint, 2), GetB(GLboolean, 3), GetI32(GLint, 4), GetU32(GLenum, 5), GetU32(GLenum, 6));
   else
      WarnNotAvailable("glBindImageTexture");
#else
   WarnNotAvailable("glBindImageTexture");
#endif
}
void Command::run_glGetBooleani_v()
{
#if GL_ES_VERSION_3_1
   if (m_packet.NumItems() > 4)
      WarnDataNotHandled("glGetBooleani_v");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_1 && m_replay->GetDispatch().real_glGetBooleani_v)
      m_replay->GetDispatch().real_glGetBooleani_v(GetU32(GLenum, 0), GetU32(GLuint, 1), dummyGLboolean);
   else
      WarnNotAvailable("glGetBooleani_v");
#else
   WarnNotAvailable("glGetBooleani_v");
#endif
}
void Command::run_glMemoryBarrier()
{
#if GL_ES_VERSION_3_1
   if (m_packet.NumItems() > 2)
      WarnDataNotHandled("glMemoryBarrier");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_1 && m_replay->GetDispatch().real_glMemoryBarrier)
      m_replay->GetDispatch().real_glMemoryBarrier(GetU32(GLbitfield, 0));
   else
      WarnNotAvailable("glMemoryBarrier");
#else
   WarnNotAvailable("glMemoryBarrier");
#endif
}
void Command::run_glMemoryBarrierByRegion()
{
#if GL_ES_VERSION_3_1
   if (m_packet.NumItems() > 2)
      WarnDataNotHandled("glMemoryBarrierByRegion");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_1 && m_replay->GetDispatch().real_glMemoryBarrierByRegion)
      m_replay->GetDispatch().real_glMemoryBarrierByRegion(GetU32(GLbitfield, 0));
   else
      WarnNotAvailable("glMemoryBarrierByRegion");
#else
   WarnNotAvailable("glMemoryBarrierByRegion");
#endif
}
void Command::run_glTexStorage2DMultisample()
{
#if GL_ES_VERSION_3_1
   if (m_packet.NumItems() > 7)
      WarnDataNotHandled("glTexStorage2DMultisample");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_1 && m_replay->GetDispatch().real_glTexStorage2DMultisample)
      m_replay->GetDispatch().real_glTexStorage2DMultisample(GetU32(GLenum, 0), GetI32(GLsizei, 1), GetU32(GLenum, 2), GetI32(GLsizei, 3), GetI32(GLsizei, 4), GetB(GLboolean, 5));
   else
      WarnNotAvailable("glTexStorage2DMultisample");
#else
   WarnNotAvailable("glTexStorage2DMultisample");
#endif
}
void Command::run_glGetMultisamplefv()
{
#if GL_ES_VERSION_3_1
   if (m_packet.NumItems() > 4)
      WarnDataNotHandled("glGetMultisamplefv");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_1 && m_replay->GetDispatch().real_glGetMultisamplefv)
      m_replay->GetDispatch().real_glGetMultisamplefv(GetU32(GLenum, 0), GetU32(GLuint, 1), dummyGLfloat);
   else
      WarnNotAvailable("glGetMultisamplefv");
#else
   WarnNotAvailable("glGetMultisamplefv");
#endif
}
void Command::run_glSampleMaski()
{
#if GL_ES_VERSION_3_1
   if (m_packet.NumItems() > 3)
      WarnDataNotHandled("glSampleMaski");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_1 && m_replay->GetDispatch().real_glSampleMaski)
      m_replay->GetDispatch().real_glSampleMaski(GetU32(GLuint, 0), GetU32(GLbitfield, 1));
   else
      WarnNotAvailable("glSampleMaski");
#else
   WarnNotAvailable("glSampleMaski");
#endif
}
void Command::run_glGetTexLevelParameteriv()
{
#if GL_ES_VERSION_3_1
   if (m_packet.NumItems() > 5)
      WarnDataNotHandled("glGetTexLevelParameteriv");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_1 && m_replay->GetDispatch().real_glGetTexLevelParameteriv)
      m_replay->GetDispatch().real_glGetTexLevelParameteriv(GetU32(GLenum, 0), GetI32(GLint, 1), GetU32(GLenum, 2), dummyGLint);
   else
      WarnNotAvailable("glGetTexLevelParameteriv");
#else
   WarnNotAvailable("glGetTexLevelParameteriv");
#endif
}
void Command::run_glGetTexLevelParameterfv()
{
#if GL_ES_VERSION_3_1
   if (m_packet.NumItems() > 5)
      WarnDataNotHandled("glGetTexLevelParameterfv");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_1 && m_replay->GetDispatch().real_glGetTexLevelParameterfv)
      m_replay->GetDispatch().real_glGetTexLevelParameterfv(GetU32(GLenum, 0), GetI32(GLint, 1), GetU32(GLenum, 2), dummyGLfloat);
   else
      WarnNotAvailable("glGetTexLevelParameterfv");
#else
   WarnNotAvailable("glGetTexLevelParameterfv");
#endif
}
void Command::run_glBindVertexBuffer()
{
#if GL_ES_VERSION_3_1
   if (m_packet.NumItems() > 5)
      WarnDataNotHandled("glBindVertexBuffer");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_1 && m_replay->GetDispatch().real_glBindVertexBuffer)
      m_replay->GetDispatch().real_glBindVertexBuffer(GetU32(GLuint, 0), GetU32(GLuint, 1), GetPtr(GLintptr, 2), GetI32(GLsizei, 3));
   else
      WarnNotAvailable("glBindVertexBuffer");
#else
   WarnNotAvailable("glBindVertexBuffer");
#endif
}
void Command::run_glVertexAttribFormat()
{
#if GL_ES_VERSION_3_1
   if (m_packet.NumItems() > 6)
      WarnDataNotHandled("glVertexAttribFormat");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_1 && m_replay->GetDispatch().real_glVertexAttribFormat)
      m_replay->GetDispatch().real_glVertexAttribFormat(GetU32(GLuint, 0), GetI32(GLint, 1), GetU32(GLenum, 2), GetB(GLboolean, 3), GetU32(GLuint, 4));
   else
      WarnNotAvailable("glVertexAttribFormat");
#else
   WarnNotAvailable("glVertexAttribFormat");
#endif
}
void Command::run_glVertexAttribIFormat()
{
#if GL_ES_VERSION_3_1
   if (m_packet.NumItems() > 5)
      WarnDataNotHandled("glVertexAttribIFormat");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_1 && m_replay->GetDispatch().real_glVertexAttribIFormat)
      m_replay->GetDispatch().real_glVertexAttribIFormat(GetU32(GLuint, 0), GetI32(GLint, 1), GetU32(GLenum, 2), GetU32(GLuint, 3));
   else
      WarnNotAvailable("glVertexAttribIFormat");
#else
   WarnNotAvailable("glVertexAttribIFormat");
#endif
}
void Command::run_glVertexAttribBinding()
{
#if GL_ES_VERSION_3_1
   if (m_packet.NumItems() > 3)
      WarnDataNotHandled("glVertexAttribBinding");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_1 && m_replay->GetDispatch().real_glVertexAttribBinding)
      m_replay->GetDispatch().real_glVertexAttribBinding(GetU32(GLuint, 0), GetU32(GLuint, 1));
   else
      WarnNotAvailable("glVertexAttribBinding");
#else
   WarnNotAvailable("glVertexAttribBinding");
#endif
}
void Command::run_glVertexBindingDivisor()
{
#if GL_ES_VERSION_3_1
   if (m_packet.NumItems() > 3)
      WarnDataNotHandled("glVertexBindingDivisor");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_1 && m_replay->GetDispatch().real_glVertexBindingDivisor)
      m_replay->GetDispatch().real_glVertexBindingDivisor(GetU32(GLuint, 0), GetU32(GLuint, 1));
   else
      WarnNotAvailable("glVertexBindingDivisor");
#else
   WarnNotAvailable("glVertexBindingDivisor");
#endif
}
void Command::run_glBlendBarrier()
{
#if GL_ES_VERSION_3_2
   if (m_packet.NumItems() > 1)
      WarnDataNotHandled("glBlendBarrier");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_2 && m_replay->GetDispatch().real_glBlendBarrier)
      m_replay->GetDispatch().real_glBlendBarrier();
   else
      WarnNotAvailable("glBlendBarrier");
#else
   WarnNotAvailable("glBlendBarrier");
#endif
}
void Command::run_glCopyImageSubData()
{
#if GL_ES_VERSION_3_2
   if (m_packet.NumItems() > 16)
      WarnDataNotHandled("glCopyImageSubData");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_2 && m_replay->GetDispatch().real_glCopyImageSubData)
      m_replay->GetDispatch().real_glCopyImageSubData(GetU32(GLuint, 0), GetU32(GLenum, 1), GetI32(GLint, 2), GetI32(GLint, 3), GetI32(GLint, 4), GetI32(GLint, 5), GetU32(GLuint, 6), GetU32(GLenum, 7), GetI32(GLint, 8), GetI32(GLint, 9), GetI32(GLint, 10), GetI32(GLint, 11), GetI32(GLsizei, 12), GetI32(GLsizei, 13), GetI32(GLsizei, 14));
   else
      WarnNotAvailable("glCopyImageSubData");
#else
   WarnNotAvailable("glCopyImageSubData");
#endif
}
void Command::run_glDebugMessageControl()
{
#if GL_ES_VERSION_3_2
   if (m_packet.NumItems() > 8)
      WarnDataNotHandled("glDebugMessageControl");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_2 && m_replay->GetDispatch().real_glDebugMessageControl)
      m_replay->GetDispatch().real_glDebugMessageControl(GetU32(GLenum, 0), GetU32(GLenum, 1), GetU32(GLenum, 2), GetI32(GLsizei, 3), GetArrayPtr(const GLuint *, 6), GetB(GLboolean, 5));
   else
      WarnNotAvailable("glDebugMessageControl");
#else
   WarnNotAvailable("glDebugMessageControl");
#endif
}
void Command::run_glDebugMessageInsert()
{
#if GL_ES_VERSION_3_2
   if (m_packet.NumItems() > 7)
      WarnDataNotHandled("glDebugMessageInsert");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_2 && m_replay->GetDispatch().real_glDebugMessageInsert)
      m_replay->GetDispatch().real_glDebugMessageInsert(GetU32(GLenum, 0), GetU32(GLenum, 1), GetU32(GLuint, 2), GetU32(GLenum, 3), GetI32(GLsizei, 4), GetCP(const GLchar *, 5));
   else
      WarnNotAvailable("glDebugMessageInsert");
#else
   WarnNotAvailable("glDebugMessageInsert");
#endif
}
void Command::run_glDebugMessageCallback()
{
#if GL_ES_VERSION_3_2
   if (m_packet.NumItems() > 4)
      WarnDataNotHandled("glDebugMessageCallback");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_2 && m_replay->GetDispatch().real_glDebugMessageCallback)
      m_replay->GetDispatch().real_glDebugMessageCallback(GetPtr(GLDEBUGPROC, 0), GetArrayPtr(const void *, 2));
   else
      WarnNotAvailable("glDebugMessageCallback");
#else
   WarnNotAvailable("glDebugMessageCallback");
#endif
}
void Command::run_glGetDebugMessageLog()
{
#if GL_ES_VERSION_3_2
   if (m_packet.NumItems() > 9)
      WarnDataNotHandled("glGetDebugMessageLog");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_2 && m_replay->GetDispatch().real_glGetDebugMessageLog)
      m_replay->GetDispatch().real_glGetDebugMessageLog(GetU32(GLuint, 0), GetI32(GLsizei, 1), dummyGLenum, dummyGLenum, dummyGLuint, dummyGLenum, dummyGLsizei, dummyGLchar);
   else
      WarnNotAvailable("glGetDebugMessageLog");
#else
   WarnNotAvailable("glGetDebugMessageLog");
#endif
}
void Command::run_glPushDebugGroup()
{
#if GL_ES_VERSION_3_2
   if (m_packet.NumItems() > 5)
      WarnDataNotHandled("glPushDebugGroup");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_2 && m_replay->GetDispatch().real_glPushDebugGroup)
      m_replay->GetDispatch().real_glPushDebugGroup(GetU32(GLenum, 0), GetU32(GLuint, 1), GetI32(GLsizei, 2), GetCP(const GLchar *, 3));
   else
      WarnNotAvailable("glPushDebugGroup");
#else
   WarnNotAvailable("glPushDebugGroup");
#endif
}
void Command::run_glPopDebugGroup()
{
#if GL_ES_VERSION_3_2
   if (m_packet.NumItems() > 1)
      WarnDataNotHandled("glPopDebugGroup");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_2 && m_replay->GetDispatch().real_glPopDebugGroup)
      m_replay->GetDispatch().real_glPopDebugGroup();
   else
      WarnNotAvailable("glPopDebugGroup");
#else
   WarnNotAvailable("glPopDebugGroup");
#endif
}
void Command::run_glObjectLabel()
{
#if GL_ES_VERSION_3_2
   if (m_packet.NumItems() > 5)
      WarnDataNotHandled("glObjectLabel");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_2 && m_replay->GetDispatch().real_glObjectLabel)
      m_replay->GetDispatch().real_glObjectLabel(GetU32(GLenum, 0), GetU32(GLuint, 1), GetI32(GLsizei, 2), GetCP(const GLchar *, 3));
   else
      WarnNotAvailable("glObjectLabel");
#else
   WarnNotAvailable("glObjectLabel");
#endif
}
void Command::run_glGetObjectLabel()
{
#if GL_ES_VERSION_3_2
   if (m_packet.NumItems() > 6)
      WarnDataNotHandled("glGetObjectLabel");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_2 && m_replay->GetDispatch().real_glGetObjectLabel)
      m_replay->GetDispatch().real_glGetObjectLabel(GetU32(GLenum, 0), GetU32(GLuint, 1), GetI32(GLsizei, 2), dummyGLsizei, dummyGLchar);
   else
      WarnNotAvailable("glGetObjectLabel");
#else
   WarnNotAvailable("glGetObjectLabel");
#endif
}
void Command::run_glObjectPtrLabel()
{
#if GL_ES_VERSION_3_2
   if (m_packet.NumItems() > 5)
      WarnDataNotHandled("glObjectPtrLabel");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_2 && m_replay->GetDispatch().real_glObjectPtrLabel)
      m_replay->GetDispatch().real_glObjectPtrLabel(GetArrayPtr(const void *, 3), GetI32(GLsizei, 1), GetCP(const GLchar *, 2));
   else
      WarnNotAvailable("glObjectPtrLabel");
#else
   WarnNotAvailable("glObjectPtrLabel");
#endif
}
void Command::run_glGetObjectPtrLabel()
{
#if GL_ES_VERSION_3_2
   if (m_packet.NumItems() > 6)
      WarnDataNotHandled("glGetObjectPtrLabel");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_2 && m_replay->GetDispatch().real_glGetObjectPtrLabel)
      m_replay->GetDispatch().real_glGetObjectPtrLabel(GetArrayPtr(const void *, 4), GetI32(GLsizei, 1), dummyGLsizei, dummyGLchar);
   else
      WarnNotAvailable("glGetObjectPtrLabel");
#else
   WarnNotAvailable("glGetObjectPtrLabel");
#endif
}
void Command::run_glEnablei()
{
#if GL_ES_VERSION_3_2
   if (m_packet.NumItems() > 3)
      WarnDataNotHandled("glEnablei");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_2 && m_replay->GetDispatch().real_glEnablei)
      m_replay->GetDispatch().real_glEnablei(GetU32(GLenum, 0), GetU32(GLuint, 1));
   else
      WarnNotAvailable("glEnablei");
#else
   WarnNotAvailable("glEnablei");
#endif
}
void Command::run_glDisablei()
{
#if GL_ES_VERSION_3_2
   if (m_packet.NumItems() > 3)
      WarnDataNotHandled("glDisablei");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_2 && m_replay->GetDispatch().real_glDisablei)
      m_replay->GetDispatch().real_glDisablei(GetU32(GLenum, 0), GetU32(GLuint, 1));
   else
      WarnNotAvailable("glDisablei");
#else
   WarnNotAvailable("glDisablei");
#endif
}
void Command::run_glBlendEquationi()
{
#if GL_ES_VERSION_3_2
   if (m_packet.NumItems() > 3)
      WarnDataNotHandled("glBlendEquationi");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_2 && m_replay->GetDispatch().real_glBlendEquationi)
      m_replay->GetDispatch().real_glBlendEquationi(GetU32(GLuint, 0), GetU32(GLenum, 1));
   else
      WarnNotAvailable("glBlendEquationi");
#else
   WarnNotAvailable("glBlendEquationi");
#endif
}
void Command::run_glBlendEquationSeparatei()
{
#if GL_ES_VERSION_3_2
   if (m_packet.NumItems() > 4)
      WarnDataNotHandled("glBlendEquationSeparatei");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_2 && m_replay->GetDispatch().real_glBlendEquationSeparatei)
      m_replay->GetDispatch().real_glBlendEquationSeparatei(GetU32(GLuint, 0), GetU32(GLenum, 1), GetU32(GLenum, 2));
   else
      WarnNotAvailable("glBlendEquationSeparatei");
#else
   WarnNotAvailable("glBlendEquationSeparatei");
#endif
}
void Command::run_glBlendFunci()
{
#if GL_ES_VERSION_3_2
   if (m_packet.NumItems() > 4)
      WarnDataNotHandled("glBlendFunci");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_2 && m_replay->GetDispatch().real_glBlendFunci)
      m_replay->GetDispatch().real_glBlendFunci(GetU32(GLuint, 0), GetU32(GLenum, 1), GetU32(GLenum, 2));
   else
      WarnNotAvailable("glBlendFunci");
#else
   WarnNotAvailable("glBlendFunci");
#endif
}
void Command::run_glBlendFuncSeparatei()
{
#if GL_ES_VERSION_3_2
   if (m_packet.NumItems() > 6)
      WarnDataNotHandled("glBlendFuncSeparatei");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_2 && m_replay->GetDispatch().real_glBlendFuncSeparatei)
      m_replay->GetDispatch().real_glBlendFuncSeparatei(GetU32(GLuint, 0), GetU32(GLenum, 1), GetU32(GLenum, 2), GetU32(GLenum, 3), GetU32(GLenum, 4));
   else
      WarnNotAvailable("glBlendFuncSeparatei");
#else
   WarnNotAvailable("glBlendFuncSeparatei");
#endif
}
void Command::run_glColorMaski()
{
#if GL_ES_VERSION_3_2
   if (m_packet.NumItems() > 6)
      WarnDataNotHandled("glColorMaski");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_2 && m_replay->GetDispatch().real_glColorMaski)
      m_replay->GetDispatch().real_glColorMaski(GetU32(GLuint, 0), GetB(GLboolean, 1), GetB(GLboolean, 2), GetB(GLboolean, 3), GetB(GLboolean, 4));
   else
      WarnNotAvailable("glColorMaski");
#else
   WarnNotAvailable("glColorMaski");
#endif
}
void Command::run_glIsEnabledi()
{
#if GL_ES_VERSION_3_2
   if (m_packet.NumItems() > 3)
      WarnDataNotHandled("glIsEnabledi");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_2 && m_replay->GetDispatch().real_glIsEnabledi)
      m_replay->GetDispatch().real_glIsEnabledi(GetU32(GLenum, 0), GetU32(GLuint, 1));
   else
      WarnNotAvailable("glIsEnabledi");
#else
   WarnNotAvailable("glIsEnabledi");
#endif
}
void Command::run_glDrawElementsBaseVertex()
{
#if GL_ES_VERSION_3_2
   if (m_packet.NumItems() > 7)
      WarnDataNotHandled("glDrawElementsBaseVertex");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_2 && m_replay->GetDispatch().real_glDrawElementsBaseVertex)
      m_replay->GetDispatch().real_glDrawElementsBaseVertex(GetU32(GLenum, 0), GetI32(GLsizei, 1), GetU32(GLenum, 2), GetArrayPtr(const void *, 5), GetI32(GLint, 4));
   else
      WarnNotAvailable("glDrawElementsBaseVertex");
#else
   WarnNotAvailable("glDrawElementsBaseVertex");
#endif
}
void Command::run_glDrawRangeElementsBaseVertex()
{
#if GL_ES_VERSION_3_2
   if (m_packet.NumItems() > 9)
      WarnDataNotHandled("glDrawRangeElementsBaseVertex");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_2 && m_replay->GetDispatch().real_glDrawRangeElementsBaseVertex)
      m_replay->GetDispatch().real_glDrawRangeElementsBaseVertex(GetU32(GLenum, 0), GetU32(GLuint, 1), GetU32(GLuint, 2), GetI32(GLsizei, 3), GetU32(GLenum, 4), GetArrayPtr(const void *, 7), GetI32(GLint, 6));
   else
      WarnNotAvailable("glDrawRangeElementsBaseVertex");
#else
   WarnNotAvailable("glDrawRangeElementsBaseVertex");
#endif
}
void Command::run_glDrawElementsInstancedBaseVertex()
{
#if GL_ES_VERSION_3_2
   if (m_packet.NumItems() > 8)
      WarnDataNotHandled("glDrawElementsInstancedBaseVertex");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_2 && m_replay->GetDispatch().real_glDrawElementsInstancedBaseVertex)
      m_replay->GetDispatch().real_glDrawElementsInstancedBaseVertex(GetU32(GLenum, 0), GetI32(GLsizei, 1), GetU32(GLenum, 2), GetArrayPtr(const void *, 6), GetI32(GLsizei, 4), GetI32(GLint, 5));
   else
      WarnNotAvailable("glDrawElementsInstancedBaseVertex");
#else
   WarnNotAvailable("glDrawElementsInstancedBaseVertex");
#endif
}
void Command::run_glFramebufferTexture()
{
#if GL_ES_VERSION_3_2
   if (m_packet.NumItems() > 5)
      WarnDataNotHandled("glFramebufferTexture");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_2 && m_replay->GetDispatch().real_glFramebufferTexture)
      m_replay->GetDispatch().real_glFramebufferTexture(GetU32(GLenum, 0), GetU32(GLenum, 1), GetU32(GLuint, 2), GetI32(GLint, 3));
   else
      WarnNotAvailable("glFramebufferTexture");
#else
   WarnNotAvailable("glFramebufferTexture");
#endif
}
void Command::run_glPrimitiveBoundingBox()
{
#if GL_ES_VERSION_3_2
   if (m_packet.NumItems() > 9)
      WarnDataNotHandled("glPrimitiveBoundingBox");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_2 && m_replay->GetDispatch().real_glPrimitiveBoundingBox)
      m_replay->GetDispatch().real_glPrimitiveBoundingBox(GetF(GLfloat, 0), GetF(GLfloat, 1), GetF(GLfloat, 2), GetF(GLfloat, 3), GetF(GLfloat, 4), GetF(GLfloat, 5), GetF(GLfloat, 6), GetF(GLfloat, 7));
   else
      WarnNotAvailable("glPrimitiveBoundingBox");
#else
   WarnNotAvailable("glPrimitiveBoundingBox");
#endif
}
void Command::run_glGetGraphicsResetStatus()
{
#if GL_ES_VERSION_3_2
   if (m_packet.NumItems() > 1)
      WarnDataNotHandled("glGetGraphicsResetStatus");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_2 && m_replay->GetDispatch().real_glGetGraphicsResetStatus)
      m_replay->GetDispatch().real_glGetGraphicsResetStatus();
   else
      WarnNotAvailable("glGetGraphicsResetStatus");
#else
   WarnNotAvailable("glGetGraphicsResetStatus");
#endif
}
void Command::run_glReadnPixels()
{
#if GL_ES_VERSION_3_2
   if (m_packet.NumItems() > 9)
      WarnDataNotHandled("glReadnPixels");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_2 && m_replay->GetDispatch().real_glReadnPixels)
      m_replay->GetDispatch().real_glReadnPixels(GetI32(GLint, 0), GetI32(GLint, 1), GetI32(GLsizei, 2), GetI32(GLsizei, 3), GetU32(GLenum, 4), GetU32(GLenum, 5), GetI32(GLsizei, 6), dummyvoid);
   else
      WarnNotAvailable("glReadnPixels");
#else
   WarnNotAvailable("glReadnPixels");
#endif
}
void Command::run_glGetnUniformfv()
{
#if GL_ES_VERSION_3_2
   if (m_packet.NumItems() > 5)
      WarnDataNotHandled("glGetnUniformfv");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_2 && m_replay->GetDispatch().real_glGetnUniformfv)
      m_replay->GetDispatch().real_glGetnUniformfv(GetProgram(GLuint, 0), GetUniform(1, 0), GetI32(GLsizei, 2), dummyGLfloat);
   else
      WarnNotAvailable("glGetnUniformfv");
#else
   WarnNotAvailable("glGetnUniformfv");
#endif
}
void Command::run_glGetnUniformiv()
{
#if GL_ES_VERSION_3_2
   if (m_packet.NumItems() > 5)
      WarnDataNotHandled("glGetnUniformiv");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_2 && m_replay->GetDispatch().real_glGetnUniformiv)
      m_replay->GetDispatch().real_glGetnUniformiv(GetProgram(GLuint, 0), GetUniform(1, 0), GetI32(GLsizei, 2), dummyGLint);
   else
      WarnNotAvailable("glGetnUniformiv");
#else
   WarnNotAvailable("glGetnUniformiv");
#endif
}
void Command::run_glGetnUniformuiv()
{
#if GL_ES_VERSION_3_2
   if (m_packet.NumItems() > 5)
      WarnDataNotHandled("glGetnUniformuiv");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_2 && m_replay->GetDispatch().real_glGetnUniformuiv)
      m_replay->GetDispatch().real_glGetnUniformuiv(GetProgram(GLuint, 0), GetUniform(1, 0), GetI32(GLsizei, 2), dummyGLuint);
   else
      WarnNotAvailable("glGetnUniformuiv");
#else
   WarnNotAvailable("glGetnUniformuiv");
#endif
}
void Command::run_glMinSampleShading()
{
#if GL_ES_VERSION_3_2
   if (m_packet.NumItems() > 2)
      WarnDataNotHandled("glMinSampleShading");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_2 && m_replay->GetDispatch().real_glMinSampleShading)
      m_replay->GetDispatch().real_glMinSampleShading(GetF(GLfloat, 0));
   else
      WarnNotAvailable("glMinSampleShading");
#else
   WarnNotAvailable("glMinSampleShading");
#endif
}
void Command::run_glPatchParameteri()
{
#if GL_ES_VERSION_3_2
   if (m_packet.NumItems() > 3)
      WarnDataNotHandled("glPatchParameteri");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_2 && m_replay->GetDispatch().real_glPatchParameteri)
      m_replay->GetDispatch().real_glPatchParameteri(GetU32(GLenum, 0), GetI32(GLint, 1));
   else
      WarnNotAvailable("glPatchParameteri");
#else
   WarnNotAvailable("glPatchParameteri");
#endif
}
void Command::run_glTexParameterIiv()
{
#if GL_ES_VERSION_3_2
   if (m_packet.NumItems() > 5)
      WarnDataNotHandled("glTexParameterIiv");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_2 && m_replay->GetDispatch().real_glTexParameterIiv)
      m_replay->GetDispatch().real_glTexParameterIiv(GetU32(GLenum, 0), GetU32(GLenum, 1), GetArrayPtr(const GLint *, 3));
   else
      WarnNotAvailable("glTexParameterIiv");
#else
   WarnNotAvailable("glTexParameterIiv");
#endif
}
void Command::run_glTexParameterIuiv()
{
#if GL_ES_VERSION_3_2
   if (m_packet.NumItems() > 5)
      WarnDataNotHandled("glTexParameterIuiv");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_2 && m_replay->GetDispatch().real_glTexParameterIuiv)
      m_replay->GetDispatch().real_glTexParameterIuiv(GetU32(GLenum, 0), GetU32(GLenum, 1), GetArrayPtr(const GLuint *, 3));
   else
      WarnNotAvailable("glTexParameterIuiv");
#else
   WarnNotAvailable("glTexParameterIuiv");
#endif
}
void Command::run_glGetTexParameterIiv()
{
#if GL_ES_VERSION_3_2
   if (m_packet.NumItems() > 4)
      WarnDataNotHandled("glGetTexParameterIiv");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_2 && m_replay->GetDispatch().real_glGetTexParameterIiv)
      m_replay->GetDispatch().real_glGetTexParameterIiv(GetU32(GLenum, 0), GetU32(GLenum, 1), dummyGLint);
   else
      WarnNotAvailable("glGetTexParameterIiv");
#else
   WarnNotAvailable("glGetTexParameterIiv");
#endif
}
void Command::run_glGetTexParameterIuiv()
{
#if GL_ES_VERSION_3_2
   if (m_packet.NumItems() > 4)
      WarnDataNotHandled("glGetTexParameterIuiv");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_2 && m_replay->GetDispatch().real_glGetTexParameterIuiv)
      m_replay->GetDispatch().real_glGetTexParameterIuiv(GetU32(GLenum, 0), GetU32(GLenum, 1), dummyGLuint);
   else
      WarnNotAvailable("glGetTexParameterIuiv");
#else
   WarnNotAvailable("glGetTexParameterIuiv");
#endif
}
void Command::run_glSamplerParameterIiv()
{
#if GL_ES_VERSION_3_2
   if (m_packet.NumItems() > 5)
      WarnDataNotHandled("glSamplerParameterIiv");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_2 && m_replay->GetDispatch().real_glSamplerParameterIiv)
      m_replay->GetDispatch().real_glSamplerParameterIiv(GetSampler(GLuint, 0), GetU32(GLenum, 1), GetArrayPtr(const GLint *, 3));
   else
      WarnNotAvailable("glSamplerParameterIiv");
#else
   WarnNotAvailable("glSamplerParameterIiv");
#endif
}
void Command::run_glSamplerParameterIuiv()
{
#if GL_ES_VERSION_3_2
   if (m_packet.NumItems() > 5)
      WarnDataNotHandled("glSamplerParameterIuiv");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_2 && m_replay->GetDispatch().real_glSamplerParameterIuiv)
      m_replay->GetDispatch().real_glSamplerParameterIuiv(GetSampler(GLuint, 0), GetU32(GLenum, 1), GetArrayPtr(const GLuint *, 3));
   else
      WarnNotAvailable("glSamplerParameterIuiv");
#else
   WarnNotAvailable("glSamplerParameterIuiv");
#endif
}
void Command::run_glGetSamplerParameterIiv()
{
#if GL_ES_VERSION_3_2
   if (m_packet.NumItems() > 4)
      WarnDataNotHandled("glGetSamplerParameterIiv");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_2 && m_replay->GetDispatch().real_glGetSamplerParameterIiv)
      m_replay->GetDispatch().real_glGetSamplerParameterIiv(GetSampler(GLuint, 0), GetU32(GLenum, 1), dummyGLint);
   else
      WarnNotAvailable("glGetSamplerParameterIiv");
#else
   WarnNotAvailable("glGetSamplerParameterIiv");
#endif
}
void Command::run_glGetSamplerParameterIuiv()
{
#if GL_ES_VERSION_3_2
   if (m_packet.NumItems() > 4)
      WarnDataNotHandled("glGetSamplerParameterIuiv");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_2 && m_replay->GetDispatch().real_glGetSamplerParameterIuiv)
      m_replay->GetDispatch().real_glGetSamplerParameterIuiv(GetSampler(GLuint, 0), GetU32(GLenum, 1), dummyGLuint);
   else
      WarnNotAvailable("glGetSamplerParameterIuiv");
#else
   WarnNotAvailable("glGetSamplerParameterIuiv");
#endif
}
void Command::run_glTexBuffer()
{
#if GL_ES_VERSION_3_2
   if (m_packet.NumItems() > 4)
      WarnDataNotHandled("glTexBuffer");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_2 && m_replay->GetDispatch().real_glTexBuffer)
      m_replay->GetDispatch().real_glTexBuffer(GetU32(GLenum, 0), GetU32(GLenum, 1), GetU32(GLuint, 2));
   else
      WarnNotAvailable("glTexBuffer");
#else
   WarnNotAvailable("glTexBuffer");
#endif
}
void Command::run_glTexBufferRange()
{
#if GL_ES_VERSION_3_2
   if (m_packet.NumItems() > 6)
      WarnDataNotHandled("glTexBufferRange");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_2 && m_replay->GetDispatch().real_glTexBufferRange)
      m_replay->GetDispatch().real_glTexBufferRange(GetU32(GLenum, 0), GetU32(GLenum, 1), GetU32(GLuint, 2), GetPtr(GLintptr, 3), GetPtr(GLsizeiptr, 4));
   else
      WarnNotAvailable("glTexBufferRange");
#else
   WarnNotAvailable("glTexBufferRange");
#endif
}
void Command::run_glTexStorage3DMultisample()
{
#if GL_ES_VERSION_3_2
   if (m_packet.NumItems() > 8)
      WarnDataNotHandled("glTexStorage3DMultisample");
   if (m_replay->GetDeviceCaps().m_has_GL_ES_VERSION_3_2 && m_replay->GetDispatch().real_glTexStorage3DMultisample)
      m_replay->GetDispatch().real_glTexStorage3DMultisample(GetU32(GLenum, 0), GetI32(GLsizei, 1), GetU32(GLenum, 2), GetI32(GLsizei, 3), GetI32(GLsizei, 4), GetI32(GLsizei, 5), GetB(GLboolean, 6));
   else
      WarnNotAvailable("glTexStorage3DMultisample");
#else
   WarnNotAvailable("glTexStorage3DMultisample");
#endif
}
void Command::run_eglCreateSync64KHR()
{
#if EGL_KHR_cl_event2
   if (m_packet.NumItems() > 5)
      WarnDataNotHandled("eglCreateSync64KHR");
   if (m_replay->GetDeviceCaps().m_has_EGL_KHR_cl_event2 && m_replay->GetDispatch().real_eglCreateSync64KHR)
      m_replay->GetDispatch().real_eglCreateSync64KHR(GetEGLDisplay(EGLDisplay, 0), GetU32(EGLenum, 1), GetArrayPtr(const EGLAttribKHR *, 3));
   else
      WarnNotAvailable("eglCreateSync64KHR");
#else
   WarnNotAvailable("eglCreateSync64KHR");
#endif
}
void Command::run_eglCreateSyncKHR()
{
#if EGL_KHR_fence_sync
   if (m_packet.NumItems() > 5)
      WarnDataNotHandled("eglCreateSyncKHR");
   if (m_replay->GetDeviceCaps().m_has_EGL_KHR_fence_sync && m_replay->GetDispatch().real_eglCreateSyncKHR)
      m_replay->GetDispatch().real_eglCreateSyncKHR(GetEGLDisplay(EGLDisplay, 0), GetU32(EGLenum, 1), GetArrayPtr(const EGLint *, 3));
   else
      WarnNotAvailable("eglCreateSyncKHR");
#else
   WarnNotAvailable("eglCreateSyncKHR");
#endif
}
void Command::run_eglDestroySyncKHR()
{
#if EGL_KHR_fence_sync
   if (m_packet.NumItems() > 3)
      WarnDataNotHandled("eglDestroySyncKHR");
   if (m_replay->GetDeviceCaps().m_has_EGL_KHR_fence_sync && m_replay->GetDispatch().real_eglDestroySyncKHR)
      m_replay->GetDispatch().real_eglDestroySyncKHR(GetEGLDisplay(EGLDisplay, 0), GetEGLSync(EGLSyncKHR, 1));
   else
      WarnNotAvailable("eglDestroySyncKHR");
#else
   WarnNotAvailable("eglDestroySyncKHR");
#endif
}
void Command::run_eglClientWaitSyncKHR()
{
#if EGL_KHR_fence_sync
   if (m_packet.NumItems() > 5)
      WarnDataNotHandled("eglClientWaitSyncKHR");
   if (m_replay->GetDeviceCaps().m_has_EGL_KHR_fence_sync && m_replay->GetDispatch().real_eglClientWaitSyncKHR)
      m_replay->GetDispatch().real_eglClientWaitSyncKHR(GetEGLDisplay(EGLDisplay, 0), GetEGLSync(EGLSyncKHR, 1), GetI32(EGLint, 2), GetU32(EGLTimeKHR, 3));
   else
      WarnNotAvailable("eglClientWaitSyncKHR");
#else
   WarnNotAvailable("eglClientWaitSyncKHR");
#endif
}
void Command::run_eglGetSyncAttribKHR()
{
#if EGL_KHR_fence_sync
   if (m_packet.NumItems() > 5)
      WarnDataNotHandled("eglGetSyncAttribKHR");
   if (m_replay->GetDeviceCaps().m_has_EGL_KHR_fence_sync && m_replay->GetDispatch().real_eglGetSyncAttribKHR)
      m_replay->GetDispatch().real_eglGetSyncAttribKHR(GetEGLDisplay(EGLDisplay, 0), GetEGLSync(EGLSyncKHR, 1), GetI32(EGLint, 2), dummyEGLint);
   else
      WarnNotAvailable("eglGetSyncAttribKHR");
#else
   WarnNotAvailable("eglGetSyncAttribKHR");
#endif
}
void Command::run_eglCreateImageKHR()
{
#if EGL_KHR_image
   if (m_packet.NumItems() > 7)
      WarnDataNotHandled("eglCreateImageKHR");
   if (m_replay->GetDeviceCaps().m_has_EGL_KHR_image && m_replay->GetDispatch().real_eglCreateImageKHR)
      m_replay->GetDispatch().real_eglCreateImageKHR(GetEGLDisplay(EGLDisplay, 0), GetEGLContext(EGLContext, 1), GetU32(EGLenum, 2), GetEGLClientBuffer(EGLClientBuffer, 3), GetArrayPtr(const EGLint *, 5));
   else
      WarnNotAvailable("eglCreateImageKHR");
#else
   WarnNotAvailable("eglCreateImageKHR");
#endif
}
void Command::run_eglDestroyImageKHR()
{
#if EGL_KHR_image
   if (m_packet.NumItems() > 3)
      WarnDataNotHandled("eglDestroyImageKHR");
   if (m_replay->GetDeviceCaps().m_has_EGL_KHR_image && m_replay->GetDispatch().real_eglDestroyImageKHR)
      m_replay->GetDispatch().real_eglDestroyImageKHR(GetEGLDisplay(EGLDisplay, 0), GetEGLImage(EGLImageKHR, 1));
   else
      WarnNotAvailable("eglDestroyImageKHR");
#else
   WarnNotAvailable("eglDestroyImageKHR");
#endif
}
void Command::run_eglWaitSyncKHR()
{
#if EGL_KHR_wait_sync
   if (m_packet.NumItems() > 4)
      WarnDataNotHandled("eglWaitSyncKHR");
   if (m_replay->GetDeviceCaps().m_has_EGL_KHR_wait_sync && m_replay->GetDispatch().real_eglWaitSyncKHR)
      m_replay->GetDispatch().real_eglWaitSyncKHR(GetEGLDisplay(EGLDisplay, 0), GetEGLSync(EGLSyncKHR, 1), GetI32(EGLint, 2));
   else
      WarnNotAvailable("eglWaitSyncKHR");
#else
   WarnNotAvailable("eglWaitSyncKHR");
#endif
}
void Command::run_glBlendBarrierKHR()
{
#if GL_KHR_blend_equation_advanced
   if (m_packet.NumItems() > 1)
      WarnDataNotHandled("glBlendBarrierKHR");
   if (m_replay->GetDeviceCaps().m_has_GL_KHR_blend_equation_advanced && m_replay->GetDispatch().real_glBlendBarrierKHR)
      m_replay->GetDispatch().real_glBlendBarrierKHR();
   else
      WarnNotAvailable("glBlendBarrierKHR");
#else
   WarnNotAvailable("glBlendBarrierKHR");
#endif
}
void Command::run_glDebugMessageControlKHR()
{
#if GL_KHR_debug
   if (m_packet.NumItems() > 8)
      WarnDataNotHandled("glDebugMessageControlKHR");
   if (m_replay->GetDeviceCaps().m_has_GL_KHR_debug && m_replay->GetDispatch().real_glDebugMessageControlKHR)
      m_replay->GetDispatch().real_glDebugMessageControlKHR(GetU32(GLenum, 0), GetU32(GLenum, 1), GetU32(GLenum, 2), GetI32(GLsizei, 3), GetArrayPtr(const GLuint *, 6), GetB(GLboolean, 5));
   else
      WarnNotAvailable("glDebugMessageControlKHR");
#else
   WarnNotAvailable("glDebugMessageControlKHR");
#endif
}
void Command::run_glDebugMessageInsertKHR()
{
#if GL_KHR_debug
   if (m_packet.NumItems() > 7)
      WarnDataNotHandled("glDebugMessageInsertKHR");
   if (m_replay->GetDeviceCaps().m_has_GL_KHR_debug && m_replay->GetDispatch().real_glDebugMessageInsertKHR)
      m_replay->GetDispatch().real_glDebugMessageInsertKHR(GetU32(GLenum, 0), GetU32(GLenum, 1), GetU32(GLuint, 2), GetU32(GLenum, 3), GetI32(GLsizei, 4), GetCP(const GLchar *, 5));
   else
      WarnNotAvailable("glDebugMessageInsertKHR");
#else
   WarnNotAvailable("glDebugMessageInsertKHR");
#endif
}
void Command::run_glDebugMessageCallbackKHR()
{
#if GL_KHR_debug
   if (m_packet.NumItems() > 4)
      WarnDataNotHandled("glDebugMessageCallbackKHR");
   if (m_replay->GetDeviceCaps().m_has_GL_KHR_debug && m_replay->GetDispatch().real_glDebugMessageCallbackKHR)
      m_replay->GetDispatch().real_glDebugMessageCallbackKHR(GetPtr(GLDEBUGPROCKHR, 0), GetArrayPtr(const void *, 2));
   else
      WarnNotAvailable("glDebugMessageCallbackKHR");
#else
   WarnNotAvailable("glDebugMessageCallbackKHR");
#endif
}
void Command::run_glGetDebugMessageLogKHR()
{
#if GL_KHR_debug
   if (m_packet.NumItems() > 9)
      WarnDataNotHandled("glGetDebugMessageLogKHR");
   if (m_replay->GetDeviceCaps().m_has_GL_KHR_debug && m_replay->GetDispatch().real_glGetDebugMessageLogKHR)
      m_replay->GetDispatch().real_glGetDebugMessageLogKHR(GetU32(GLuint, 0), GetI32(GLsizei, 1), dummyGLenum, dummyGLenum, dummyGLuint, dummyGLenum, dummyGLsizei, dummyGLchar);
   else
      WarnNotAvailable("glGetDebugMessageLogKHR");
#else
   WarnNotAvailable("glGetDebugMessageLogKHR");
#endif
}
void Command::run_glPushDebugGroupKHR()
{
#if GL_KHR_debug
   if (m_packet.NumItems() > 5)
      WarnDataNotHandled("glPushDebugGroupKHR");
   if (m_replay->GetDeviceCaps().m_has_GL_KHR_debug && m_replay->GetDispatch().real_glPushDebugGroupKHR)
      m_replay->GetDispatch().real_glPushDebugGroupKHR(GetU32(GLenum, 0), GetU32(GLuint, 1), GetI32(GLsizei, 2), GetCP(const GLchar *, 3));
   else
      WarnNotAvailable("glPushDebugGroupKHR");
#else
   WarnNotAvailable("glPushDebugGroupKHR");
#endif
}
void Command::run_glPopDebugGroupKHR()
{
#if GL_KHR_debug
   if (m_packet.NumItems() > 1)
      WarnDataNotHandled("glPopDebugGroupKHR");
   if (m_replay->GetDeviceCaps().m_has_GL_KHR_debug && m_replay->GetDispatch().real_glPopDebugGroupKHR)
      m_replay->GetDispatch().real_glPopDebugGroupKHR();
   else
      WarnNotAvailable("glPopDebugGroupKHR");
#else
   WarnNotAvailable("glPopDebugGroupKHR");
#endif
}
void Command::run_glObjectLabelKHR()
{
#if GL_KHR_debug
   if (m_packet.NumItems() > 5)
      WarnDataNotHandled("glObjectLabelKHR");
   if (m_replay->GetDeviceCaps().m_has_GL_KHR_debug && m_replay->GetDispatch().real_glObjectLabelKHR)
      m_replay->GetDispatch().real_glObjectLabelKHR(GetU32(GLenum, 0), GetU32(GLuint, 1), GetI32(GLsizei, 2), GetCP(const GLchar *, 3));
   else
      WarnNotAvailable("glObjectLabelKHR");
#else
   WarnNotAvailable("glObjectLabelKHR");
#endif
}
void Command::run_glGetObjectLabelKHR()
{
#if GL_KHR_debug
   if (m_packet.NumItems() > 6)
      WarnDataNotHandled("glGetObjectLabelKHR");
   if (m_replay->GetDeviceCaps().m_has_GL_KHR_debug && m_replay->GetDispatch().real_glGetObjectLabelKHR)
      m_replay->GetDispatch().real_glGetObjectLabelKHR(GetU32(GLenum, 0), GetU32(GLuint, 1), GetI32(GLsizei, 2), dummyGLsizei, dummyGLchar);
   else
      WarnNotAvailable("glGetObjectLabelKHR");
#else
   WarnNotAvailable("glGetObjectLabelKHR");
#endif
}
void Command::run_glObjectPtrLabelKHR()
{
#if GL_KHR_debug
   if (m_packet.NumItems() > 5)
      WarnDataNotHandled("glObjectPtrLabelKHR");
   if (m_replay->GetDeviceCaps().m_has_GL_KHR_debug && m_replay->GetDispatch().real_glObjectPtrLabelKHR)
      m_replay->GetDispatch().real_glObjectPtrLabelKHR(GetArrayPtr(const void *, 3), GetI32(GLsizei, 1), GetCP(const GLchar *, 2));
   else
      WarnNotAvailable("glObjectPtrLabelKHR");
#else
   WarnNotAvailable("glObjectPtrLabelKHR");
#endif
}
void Command::run_glGetObjectPtrLabelKHR()
{
#if GL_KHR_debug
   if (m_packet.NumItems() > 6)
      WarnDataNotHandled("glGetObjectPtrLabelKHR");
   if (m_replay->GetDeviceCaps().m_has_GL_KHR_debug && m_replay->GetDispatch().real_glGetObjectPtrLabelKHR)
      m_replay->GetDispatch().real_glGetObjectPtrLabelKHR(GetArrayPtr(const void *, 4), GetI32(GLsizei, 1), dummyGLsizei, dummyGLchar);
   else
      WarnNotAvailable("glGetObjectPtrLabelKHR");
#else
   WarnNotAvailable("glGetObjectPtrLabelKHR");
#endif
}
void Command::run_glGetPointervKHR()
{
#if GL_KHR_debug
   if (m_packet.NumItems() > 3)
      WarnDataNotHandled("glGetPointervKHR");
   if (m_replay->GetDeviceCaps().m_has_GL_KHR_debug && m_replay->GetDispatch().real_glGetPointervKHR)
      m_replay->GetDispatch().real_glGetPointervKHR(GetU32(GLenum, 0), dummyvoidptr);
   else
      WarnNotAvailable("glGetPointervKHR");
#else
   WarnNotAvailable("glGetPointervKHR");
#endif
}
void Command::run_glEGLImageTargetTexture2DOES()
{
#if GL_OES_EGL_image
   if (m_packet.NumItems() > 3)
      WarnDataNotHandled("glEGLImageTargetTexture2DOES");
   if (m_replay->GetDeviceCaps().m_has_GL_OES_EGL_image && m_replay->GetDispatch().real_glEGLImageTargetTexture2DOES)
      m_replay->GetDispatch().real_glEGLImageTargetTexture2DOES(GetU32(GLenum, 0), GetEGLImage(GLeglImageOES, 1));
   else
      WarnNotAvailable("glEGLImageTargetTexture2DOES");
#else
   WarnNotAvailable("glEGLImageTargetTexture2DOES");
#endif
}
void Command::run_glEGLImageTargetRenderbufferStorageOES()
{
#if GL_OES_EGL_image
   if (m_packet.NumItems() > 3)
      WarnDataNotHandled("glEGLImageTargetRenderbufferStorageOES");
   if (m_replay->GetDeviceCaps().m_has_GL_OES_EGL_image && m_replay->GetDispatch().real_glEGLImageTargetRenderbufferStorageOES)
      m_replay->GetDispatch().real_glEGLImageTargetRenderbufferStorageOES(GetU32(GLenum, 0), GetEGLImage(GLeglImageOES, 1));
   else
      WarnNotAvailable("glEGLImageTargetRenderbufferStorageOES");
#else
   WarnNotAvailable("glEGLImageTargetRenderbufferStorageOES");
#endif
}
void Command::run_glCopyImageSubDataOES()
{
#if GL_OES_copy_image
   if (m_packet.NumItems() > 16)
      WarnDataNotHandled("glCopyImageSubDataOES");
   if (m_replay->GetDeviceCaps().m_has_GL_OES_copy_image && m_replay->GetDispatch().real_glCopyImageSubDataOES)
      m_replay->GetDispatch().real_glCopyImageSubDataOES(GetU32(GLuint, 0), GetU32(GLenum, 1), GetI32(GLint, 2), GetI32(GLint, 3), GetI32(GLint, 4), GetI32(GLint, 5), GetU32(GLuint, 6), GetU32(GLenum, 7), GetI32(GLint, 8), GetI32(GLint, 9), GetI32(GLint, 10), GetI32(GLint, 11), GetI32(GLsizei, 12), GetI32(GLsizei, 13), GetI32(GLsizei, 14));
   else
      WarnNotAvailable("glCopyImageSubDataOES");
#else
   WarnNotAvailable("glCopyImageSubDataOES");
#endif
}
void Command::run_glEnableiOES()
{
#if GL_OES_draw_buffers_indexed
   if (m_packet.NumItems() > 3)
      WarnDataNotHandled("glEnableiOES");
   if (m_replay->GetDeviceCaps().m_has_GL_OES_draw_buffers_indexed && m_replay->GetDispatch().real_glEnableiOES)
      m_replay->GetDispatch().real_glEnableiOES(GetU32(GLenum, 0), GetU32(GLuint, 1));
   else
      WarnNotAvailable("glEnableiOES");
#else
   WarnNotAvailable("glEnableiOES");
#endif
}
void Command::run_glDisableiOES()
{
#if GL_OES_draw_buffers_indexed
   if (m_packet.NumItems() > 3)
      WarnDataNotHandled("glDisableiOES");
   if (m_replay->GetDeviceCaps().m_has_GL_OES_draw_buffers_indexed && m_replay->GetDispatch().real_glDisableiOES)
      m_replay->GetDispatch().real_glDisableiOES(GetU32(GLenum, 0), GetU32(GLuint, 1));
   else
      WarnNotAvailable("glDisableiOES");
#else
   WarnNotAvailable("glDisableiOES");
#endif
}
void Command::run_glBlendEquationiOES()
{
#if GL_OES_draw_buffers_indexed
   if (m_packet.NumItems() > 3)
      WarnDataNotHandled("glBlendEquationiOES");
   if (m_replay->GetDeviceCaps().m_has_GL_OES_draw_buffers_indexed && m_replay->GetDispatch().real_glBlendEquationiOES)
      m_replay->GetDispatch().real_glBlendEquationiOES(GetU32(GLuint, 0), GetU32(GLenum, 1));
   else
      WarnNotAvailable("glBlendEquationiOES");
#else
   WarnNotAvailable("glBlendEquationiOES");
#endif
}
void Command::run_glBlendEquationSeparateiOES()
{
#if GL_OES_draw_buffers_indexed
   if (m_packet.NumItems() > 4)
      WarnDataNotHandled("glBlendEquationSeparateiOES");
   if (m_replay->GetDeviceCaps().m_has_GL_OES_draw_buffers_indexed && m_replay->GetDispatch().real_glBlendEquationSeparateiOES)
      m_replay->GetDispatch().real_glBlendEquationSeparateiOES(GetU32(GLuint, 0), GetU32(GLenum, 1), GetU32(GLenum, 2));
   else
      WarnNotAvailable("glBlendEquationSeparateiOES");
#else
   WarnNotAvailable("glBlendEquationSeparateiOES");
#endif
}
void Command::run_glBlendFunciOES()
{
#if GL_OES_draw_buffers_indexed
   if (m_packet.NumItems() > 4)
      WarnDataNotHandled("glBlendFunciOES");
   if (m_replay->GetDeviceCaps().m_has_GL_OES_draw_buffers_indexed && m_replay->GetDispatch().real_glBlendFunciOES)
      m_replay->GetDispatch().real_glBlendFunciOES(GetU32(GLuint, 0), GetU32(GLenum, 1), GetU32(GLenum, 2));
   else
      WarnNotAvailable("glBlendFunciOES");
#else
   WarnNotAvailable("glBlendFunciOES");
#endif
}
void Command::run_glBlendFuncSeparateiOES()
{
#if GL_OES_draw_buffers_indexed
   if (m_packet.NumItems() > 6)
      WarnDataNotHandled("glBlendFuncSeparateiOES");
   if (m_replay->GetDeviceCaps().m_has_GL_OES_draw_buffers_indexed && m_replay->GetDispatch().real_glBlendFuncSeparateiOES)
      m_replay->GetDispatch().real_glBlendFuncSeparateiOES(GetU32(GLuint, 0), GetU32(GLenum, 1), GetU32(GLenum, 2), GetU32(GLenum, 3), GetU32(GLenum, 4));
   else
      WarnNotAvailable("glBlendFuncSeparateiOES");
#else
   WarnNotAvailable("glBlendFuncSeparateiOES");
#endif
}
void Command::run_glColorMaskiOES()
{
#if GL_OES_draw_buffers_indexed
   if (m_packet.NumItems() > 6)
      WarnDataNotHandled("glColorMaskiOES");
   if (m_replay->GetDeviceCaps().m_has_GL_OES_draw_buffers_indexed && m_replay->GetDispatch().real_glColorMaskiOES)
      m_replay->GetDispatch().real_glColorMaskiOES(GetU32(GLuint, 0), GetB(GLboolean, 1), GetB(GLboolean, 2), GetB(GLboolean, 3), GetB(GLboolean, 4));
   else
      WarnNotAvailable("glColorMaskiOES");
#else
   WarnNotAvailable("glColorMaskiOES");
#endif
}
void Command::run_glIsEnablediOES()
{
#if GL_OES_draw_buffers_indexed
   if (m_packet.NumItems() > 3)
      WarnDataNotHandled("glIsEnablediOES");
   if (m_replay->GetDeviceCaps().m_has_GL_OES_draw_buffers_indexed && m_replay->GetDispatch().real_glIsEnablediOES)
      m_replay->GetDispatch().real_glIsEnablediOES(GetU32(GLenum, 0), GetU32(GLuint, 1));
   else
      WarnNotAvailable("glIsEnablediOES");
#else
   WarnNotAvailable("glIsEnablediOES");
#endif
}
void Command::run_glDrawElementsBaseVertexOES()
{
#if GL_OES_draw_elements_base_vertex
   if (m_packet.NumItems() > 7)
      WarnDataNotHandled("glDrawElementsBaseVertexOES");
   if (m_replay->GetDeviceCaps().m_has_GL_OES_draw_elements_base_vertex && m_replay->GetDispatch().real_glDrawElementsBaseVertexOES)
      m_replay->GetDispatch().real_glDrawElementsBaseVertexOES(GetU32(GLenum, 0), GetI32(GLsizei, 1), GetU32(GLenum, 2), GetArrayPtr(const void *, 5), GetI32(GLint, 4));
   else
      WarnNotAvailable("glDrawElementsBaseVertexOES");
#else
   WarnNotAvailable("glDrawElementsBaseVertexOES");
#endif
}
void Command::run_glDrawRangeElementsBaseVertexOES()
{
#if GL_OES_draw_elements_base_vertex
   if (m_packet.NumItems() > 9)
      WarnDataNotHandled("glDrawRangeElementsBaseVertexOES");
   if (m_replay->GetDeviceCaps().m_has_GL_OES_draw_elements_base_vertex && m_replay->GetDispatch().real_glDrawRangeElementsBaseVertexOES)
      m_replay->GetDispatch().real_glDrawRangeElementsBaseVertexOES(GetU32(GLenum, 0), GetU32(GLuint, 1), GetU32(GLuint, 2), GetI32(GLsizei, 3), GetU32(GLenum, 4), GetArrayPtr(const void *, 7), GetI32(GLint, 6));
   else
      WarnNotAvailable("glDrawRangeElementsBaseVertexOES");
#else
   WarnNotAvailable("glDrawRangeElementsBaseVertexOES");
#endif
}
void Command::run_glDrawElementsInstancedBaseVertexOES()
{
#if GL_OES_draw_elements_base_vertex
   if (m_packet.NumItems() > 8)
      WarnDataNotHandled("glDrawElementsInstancedBaseVertexOES");
   if (m_replay->GetDeviceCaps().m_has_GL_OES_draw_elements_base_vertex && m_replay->GetDispatch().real_glDrawElementsInstancedBaseVertexOES)
      m_replay->GetDispatch().real_glDrawElementsInstancedBaseVertexOES(GetU32(GLenum, 0), GetI32(GLsizei, 1), GetU32(GLenum, 2), GetArrayPtr(const void *, 6), GetI32(GLsizei, 4), GetI32(GLint, 5));
   else
      WarnNotAvailable("glDrawElementsInstancedBaseVertexOES");
#else
   WarnNotAvailable("glDrawElementsInstancedBaseVertexOES");
#endif
}
void Command::run_glMultiDrawElementsBaseVertexOES()
{
#if GL_OES_draw_elements_base_vertex
   if (m_packet.NumItems() > 10)
      WarnDataNotHandled("glMultiDrawElementsBaseVertexOES");
   if (m_replay->GetDeviceCaps().m_has_GL_OES_draw_elements_base_vertex && m_replay->GetDispatch().real_glMultiDrawElementsBaseVertexOES)
      m_replay->GetDispatch().real_glMultiDrawElementsBaseVertexOES(GetU32(GLenum, 0), GetArrayPtr(const GLsizei *, 6), GetU32(GLenum, 2), GetArrayPtr(const void *const*, 7), GetI32(GLsizei, 4), GetArrayPtr(const GLint *, 8));
   else
      WarnNotAvailable("glMultiDrawElementsBaseVertexOES");
#else
   WarnNotAvailable("glMultiDrawElementsBaseVertexOES");
#endif
}
void Command::run_glDrawTexsOES()
{
#if GL_OES_draw_texture
   if (m_packet.NumItems() > 6)
      WarnDataNotHandled("glDrawTexsOES");
   if (m_replay->GetDeviceCaps().m_has_GL_OES_draw_texture && m_replay->GetDispatch().real_glDrawTexsOES)
      m_replay->GetDispatch().real_glDrawTexsOES(GetI16(GLshort, 0), GetI16(GLshort, 1), GetI16(GLshort, 2), GetI16(GLshort, 3), GetI16(GLshort, 4));
   else
      WarnNotAvailable("glDrawTexsOES");
#else
   WarnNotAvailable("glDrawTexsOES");
#endif
}
void Command::run_glDrawTexiOES()
{
#if GL_OES_draw_texture
   if (m_packet.NumItems() > 6)
      WarnDataNotHandled("glDrawTexiOES");
   if (m_replay->GetDeviceCaps().m_has_GL_OES_draw_texture && m_replay->GetDispatch().real_glDrawTexiOES)
      m_replay->GetDispatch().real_glDrawTexiOES(GetI32(GLint, 0), GetI32(GLint, 1), GetI32(GLint, 2), GetI32(GLint, 3), GetI32(GLint, 4));
   else
      WarnNotAvailable("glDrawTexiOES");
#else
   WarnNotAvailable("glDrawTexiOES");
#endif
}
void Command::run_glDrawTexxOES()
{
#if GL_OES_draw_texture
   if (m_packet.NumItems() > 6)
      WarnDataNotHandled("glDrawTexxOES");
   if (m_replay->GetDeviceCaps().m_has_GL_OES_draw_texture && m_replay->GetDispatch().real_glDrawTexxOES)
      m_replay->GetDispatch().real_glDrawTexxOES(GetU32(GLfixed, 0), GetU32(GLfixed, 1), GetU32(GLfixed, 2), GetU32(GLfixed, 3), GetU32(GLfixed, 4));
   else
      WarnNotAvailable("glDrawTexxOES");
#else
   WarnNotAvailable("glDrawTexxOES");
#endif
}
void Command::run_glDrawTexsvOES()
{
#if GL_OES_draw_texture
   if (m_packet.NumItems() > 3)
      WarnDataNotHandled("glDrawTexsvOES");
   if (m_replay->GetDeviceCaps().m_has_GL_OES_draw_texture && m_replay->GetDispatch().real_glDrawTexsvOES)
      m_replay->GetDispatch().real_glDrawTexsvOES(GetArrayPtr(const GLshort *, 1));
   else
      WarnNotAvailable("glDrawTexsvOES");
#else
   WarnNotAvailable("glDrawTexsvOES");
#endif
}
void Command::run_glDrawTexivOES()
{
#if GL_OES_draw_texture
   if (m_packet.NumItems() > 3)
      WarnDataNotHandled("glDrawTexivOES");
   if (m_replay->GetDeviceCaps().m_has_GL_OES_draw_texture && m_replay->GetDispatch().real_glDrawTexivOES)
      m_replay->GetDispatch().real_glDrawTexivOES(GetArrayPtr(const GLint *, 1));
   else
      WarnNotAvailable("glDrawTexivOES");
#else
   WarnNotAvailable("glDrawTexivOES");
#endif
}
void Command::run_glDrawTexxvOES()
{
#if GL_OES_draw_texture
   if (m_packet.NumItems() > 3)
      WarnDataNotHandled("glDrawTexxvOES");
   if (m_replay->GetDeviceCaps().m_has_GL_OES_draw_texture && m_replay->GetDispatch().real_glDrawTexxvOES)
      m_replay->GetDispatch().real_glDrawTexxvOES(GetArrayPtr(const GLfixed *, 1));
   else
      WarnNotAvailable("glDrawTexxvOES");
#else
   WarnNotAvailable("glDrawTexxvOES");
#endif
}
void Command::run_glDrawTexfOES()
{
#if GL_OES_draw_texture
   if (m_packet.NumItems() > 6)
      WarnDataNotHandled("glDrawTexfOES");
   if (m_replay->GetDeviceCaps().m_has_GL_OES_draw_texture && m_replay->GetDispatch().real_glDrawTexfOES)
      m_replay->GetDispatch().real_glDrawTexfOES(GetF(GLfloat, 0), GetF(GLfloat, 1), GetF(GLfloat, 2), GetF(GLfloat, 3), GetF(GLfloat, 4));
   else
      WarnNotAvailable("glDrawTexfOES");
#else
   WarnNotAvailable("glDrawTexfOES");
#endif
}
void Command::run_glDrawTexfvOES()
{
#if GL_OES_draw_texture
   if (m_packet.NumItems() > 3)
      WarnDataNotHandled("glDrawTexfvOES");
   if (m_replay->GetDeviceCaps().m_has_GL_OES_draw_texture && m_replay->GetDispatch().real_glDrawTexfvOES)
      m_replay->GetDispatch().real_glDrawTexfvOES(GetArrayPtr(const GLfloat *, 1));
   else
      WarnNotAvailable("glDrawTexfvOES");
#else
   WarnNotAvailable("glDrawTexfvOES");
#endif
}
void Command::run_glIsRenderbufferOES()
{
#if GL_OES_framebuffer_object
   if (m_packet.NumItems() > 2)
      WarnDataNotHandled("glIsRenderbufferOES");
   if (m_replay->GetDeviceCaps().m_has_GL_OES_framebuffer_object && m_replay->GetDispatch().real_glIsRenderbufferOES)
      m_replay->GetDispatch().real_glIsRenderbufferOES(GetU32(GLuint, 0));
   else
      WarnNotAvailable("glIsRenderbufferOES");
#else
   WarnNotAvailable("glIsRenderbufferOES");
#endif
}
void Command::run_glBindRenderbufferOES()
{
#if GL_OES_framebuffer_object
   if (m_packet.NumItems() > 3)
      WarnDataNotHandled("glBindRenderbufferOES");
   if (m_replay->GetDeviceCaps().m_has_GL_OES_framebuffer_object && m_replay->GetDispatch().real_glBindRenderbufferOES)
      m_replay->GetDispatch().real_glBindRenderbufferOES(GetU32(GLenum, 0), GetU32(GLuint, 1));
   else
      WarnNotAvailable("glBindRenderbufferOES");
#else
   WarnNotAvailable("glBindRenderbufferOES");
#endif
}
void Command::run_glDeleteRenderbuffersOES()
{
#if GL_OES_framebuffer_object
   if (m_packet.NumItems() > 4)
      WarnDataNotHandled("glDeleteRenderbuffersOES");
   if (m_replay->GetDeviceCaps().m_has_GL_OES_framebuffer_object && m_replay->GetDispatch().real_glDeleteRenderbuffersOES)
      m_replay->GetDispatch().real_glDeleteRenderbuffersOES(GetI32(GLsizei, 0), GetArrayPtr(const GLuint *, 2));
   else
      WarnNotAvailable("glDeleteRenderbuffersOES");
#else
   WarnNotAvailable("glDeleteRenderbuffersOES");
#endif
}
void Command::run_glGenRenderbuffersOES()
{
#if GL_OES_framebuffer_object
   if (m_packet.NumItems() > 3)
      WarnDataNotHandled("glGenRenderbuffersOES");
   if (m_replay->GetDeviceCaps().m_has_GL_OES_framebuffer_object && m_replay->GetDispatch().real_glGenRenderbuffersOES)
      m_replay->GetDispatch().real_glGenRenderbuffersOES(GetI32(GLsizei, 0), dummyGLuint);
   else
      WarnNotAvailable("glGenRenderbuffersOES");
#else
   WarnNotAvailable("glGenRenderbuffersOES");
#endif
}
void Command::run_glRenderbufferStorageOES()
{
#if GL_OES_framebuffer_object
   if (m_packet.NumItems() > 5)
      WarnDataNotHandled("glRenderbufferStorageOES");
   if (m_replay->GetDeviceCaps().m_has_GL_OES_framebuffer_object && m_replay->GetDispatch().real_glRenderbufferStorageOES)
      m_replay->GetDispatch().real_glRenderbufferStorageOES(GetU32(GLenum, 0), GetU32(GLenum, 1), GetI32(GLsizei, 2), GetI32(GLsizei, 3));
   else
      WarnNotAvailable("glRenderbufferStorageOES");
#else
   WarnNotAvailable("glRenderbufferStorageOES");
#endif
}
void Command::run_glGetRenderbufferParameterivOES()
{
#if GL_OES_framebuffer_object
   if (m_packet.NumItems() > 4)
      WarnDataNotHandled("glGetRenderbufferParameterivOES");
   if (m_replay->GetDeviceCaps().m_has_GL_OES_framebuffer_object && m_replay->GetDispatch().real_glGetRenderbufferParameterivOES)
      m_replay->GetDispatch().real_glGetRenderbufferParameterivOES(GetU32(GLenum, 0), GetU32(GLenum, 1), dummyGLint);
   else
      WarnNotAvailable("glGetRenderbufferParameterivOES");
#else
   WarnNotAvailable("glGetRenderbufferParameterivOES");
#endif
}
void Command::run_glIsFramebufferOES()
{
#if GL_OES_framebuffer_object
   if (m_packet.NumItems() > 2)
      WarnDataNotHandled("glIsFramebufferOES");
   if (m_replay->GetDeviceCaps().m_has_GL_OES_framebuffer_object && m_replay->GetDispatch().real_glIsFramebufferOES)
      m_replay->GetDispatch().real_glIsFramebufferOES(GetU32(GLuint, 0));
   else
      WarnNotAvailable("glIsFramebufferOES");
#else
   WarnNotAvailable("glIsFramebufferOES");
#endif
}
void Command::run_glBindFramebufferOES()
{
#if GL_OES_framebuffer_object
   if (m_packet.NumItems() > 3)
      WarnDataNotHandled("glBindFramebufferOES");
   if (m_replay->GetDeviceCaps().m_has_GL_OES_framebuffer_object && m_replay->GetDispatch().real_glBindFramebufferOES)
      m_replay->GetDispatch().real_glBindFramebufferOES(GetU32(GLenum, 0), GetU32(GLuint, 1));
   else
      WarnNotAvailable("glBindFramebufferOES");
#else
   WarnNotAvailable("glBindFramebufferOES");
#endif
}
void Command::run_glDeleteFramebuffersOES()
{
#if GL_OES_framebuffer_object
   if (m_packet.NumItems() > 4)
      WarnDataNotHandled("glDeleteFramebuffersOES");
   if (m_replay->GetDeviceCaps().m_has_GL_OES_framebuffer_object && m_replay->GetDispatch().real_glDeleteFramebuffersOES)
      m_replay->GetDispatch().real_glDeleteFramebuffersOES(GetI32(GLsizei, 0), GetArrayPtr(const GLuint *, 2));
   else
      WarnNotAvailable("glDeleteFramebuffersOES");
#else
   WarnNotAvailable("glDeleteFramebuffersOES");
#endif
}
void Command::run_glGenFramebuffersOES()
{
#if GL_OES_framebuffer_object
   if (m_packet.NumItems() > 3)
      WarnDataNotHandled("glGenFramebuffersOES");
   if (m_replay->GetDeviceCaps().m_has_GL_OES_framebuffer_object && m_replay->GetDispatch().real_glGenFramebuffersOES)
      m_replay->GetDispatch().real_glGenFramebuffersOES(GetI32(GLsizei, 0), dummyGLuint);
   else
      WarnNotAvailable("glGenFramebuffersOES");
#else
   WarnNotAvailable("glGenFramebuffersOES");
#endif
}
void Command::run_glCheckFramebufferStatusOES()
{
#if GL_OES_framebuffer_object
   if (m_packet.NumItems() > 2)
      WarnDataNotHandled("glCheckFramebufferStatusOES");
   if (m_replay->GetDeviceCaps().m_has_GL_OES_framebuffer_object && m_replay->GetDispatch().real_glCheckFramebufferStatusOES)
      m_replay->GetDispatch().real_glCheckFramebufferStatusOES(GetU32(GLenum, 0));
   else
      WarnNotAvailable("glCheckFramebufferStatusOES");
#else
   WarnNotAvailable("glCheckFramebufferStatusOES");
#endif
}
void Command::run_glFramebufferRenderbufferOES()
{
#if GL_OES_framebuffer_object
   if (m_packet.NumItems() > 5)
      WarnDataNotHandled("glFramebufferRenderbufferOES");
   if (m_replay->GetDeviceCaps().m_has_GL_OES_framebuffer_object && m_replay->GetDispatch().real_glFramebufferRenderbufferOES)
      m_replay->GetDispatch().real_glFramebufferRenderbufferOES(GetU32(GLenum, 0), GetU32(GLenum, 1), GetU32(GLenum, 2), GetU32(GLuint, 3));
   else
      WarnNotAvailable("glFramebufferRenderbufferOES");
#else
   WarnNotAvailable("glFramebufferRenderbufferOES");
#endif
}
void Command::run_glFramebufferTexture2DOES()
{
#if GL_OES_framebuffer_object
   if (m_packet.NumItems() > 6)
      WarnDataNotHandled("glFramebufferTexture2DOES");
   if (m_replay->GetDeviceCaps().m_has_GL_OES_framebuffer_object && m_replay->GetDispatch().real_glFramebufferTexture2DOES)
      m_replay->GetDispatch().real_glFramebufferTexture2DOES(GetU32(GLenum, 0), GetU32(GLenum, 1), GetU32(GLenum, 2), GetU32(GLuint, 3), GetI32(GLint, 4));
   else
      WarnNotAvailable("glFramebufferTexture2DOES");
#else
   WarnNotAvailable("glFramebufferTexture2DOES");
#endif
}
void Command::run_glGetFramebufferAttachmentParameterivOES()
{
#if GL_OES_framebuffer_object
   if (m_packet.NumItems() > 5)
      WarnDataNotHandled("glGetFramebufferAttachmentParameterivOES");
   if (m_replay->GetDeviceCaps().m_has_GL_OES_framebuffer_object && m_replay->GetDispatch().real_glGetFramebufferAttachmentParameterivOES)
      m_replay->GetDispatch().real_glGetFramebufferAttachmentParameterivOES(GetU32(GLenum, 0), GetU32(GLenum, 1), GetU32(GLenum, 2), dummyGLint);
   else
      WarnNotAvailable("glGetFramebufferAttachmentParameterivOES");
#else
   WarnNotAvailable("glGetFramebufferAttachmentParameterivOES");
#endif
}
void Command::run_glGenerateMipmapOES()
{
#if GL_OES_framebuffer_object
   if (m_packet.NumItems() > 2)
      WarnDataNotHandled("glGenerateMipmapOES");
   if (m_replay->GetDeviceCaps().m_has_GL_OES_framebuffer_object && m_replay->GetDispatch().real_glGenerateMipmapOES)
      m_replay->GetDispatch().real_glGenerateMipmapOES(GetU32(GLenum, 0));
   else
      WarnNotAvailable("glGenerateMipmapOES");
#else
   WarnNotAvailable("glGenerateMipmapOES");
#endif
}
void Command::run_glFramebufferTextureOES()
{
#if GL_OES_geometry_shader
   if (m_packet.NumItems() > 5)
      WarnDataNotHandled("glFramebufferTextureOES");
   if (m_replay->GetDeviceCaps().m_has_GL_OES_geometry_shader && m_replay->GetDispatch().real_glFramebufferTextureOES)
      m_replay->GetDispatch().real_glFramebufferTextureOES(GetU32(GLenum, 0), GetU32(GLenum, 1), GetU32(GLuint, 2), GetI32(GLint, 3));
   else
      WarnNotAvailable("glFramebufferTextureOES");
#else
   WarnNotAvailable("glFramebufferTextureOES");
#endif
}
void Command::run_glMapBufferOES()
{
#if GL_OES_mapbuffer
   if (m_packet.NumItems() > 3)
      WarnDataNotHandled("glMapBufferOES");
   if (m_replay->GetDeviceCaps().m_has_GL_OES_mapbuffer && m_replay->GetDispatch().real_glMapBufferOES)
      m_replay->GetDispatch().real_glMapBufferOES(GetU32(GLenum, 0), GetU32(GLenum, 1));
   else
      WarnNotAvailable("glMapBufferOES");
#else
   WarnNotAvailable("glMapBufferOES");
#endif
}
void Command::run_glUnmapBufferOES()
{
#if GL_OES_mapbuffer
   if (m_packet.NumItems() > 2)
      WarnDataNotHandled("glUnmapBufferOES");
   if (m_replay->GetDeviceCaps().m_has_GL_OES_mapbuffer && m_replay->GetDispatch().real_glUnmapBufferOES)
      m_replay->GetDispatch().real_glUnmapBufferOES(GetU32(GLenum, 0));
   else
      WarnNotAvailable("glUnmapBufferOES");
#else
   WarnNotAvailable("glUnmapBufferOES");
#endif
}
void Command::run_glGetBufferPointervOES()
{
#if GL_OES_mapbuffer
   if (m_packet.NumItems() > 4)
      WarnDataNotHandled("glGetBufferPointervOES");
   if (m_replay->GetDeviceCaps().m_has_GL_OES_mapbuffer && m_replay->GetDispatch().real_glGetBufferPointervOES)
      m_replay->GetDispatch().real_glGetBufferPointervOES(GetU32(GLenum, 0), GetU32(GLenum, 1), dummyvoidptr);
   else
      WarnNotAvailable("glGetBufferPointervOES");
#else
   WarnNotAvailable("glGetBufferPointervOES");
#endif
}
void Command::run_glCurrentPaletteMatrixOES()
{
#if GL_OES_matrix_palette
   if (m_packet.NumItems() > 2)
      WarnDataNotHandled("glCurrentPaletteMatrixOES");
   if (m_replay->GetDeviceCaps().m_has_GL_OES_matrix_palette && m_replay->GetDispatch().real_glCurrentPaletteMatrixOES)
      m_replay->GetDispatch().real_glCurrentPaletteMatrixOES(GetU32(GLuint, 0));
   else
      WarnNotAvailable("glCurrentPaletteMatrixOES");
#else
   WarnNotAvailable("glCurrentPaletteMatrixOES");
#endif
}
void Command::run_glLoadPaletteFromModelViewMatrixOES()
{
#if GL_OES_matrix_palette
   if (m_packet.NumItems() > 1)
      WarnDataNotHandled("glLoadPaletteFromModelViewMatrixOES");
   if (m_replay->GetDeviceCaps().m_has_GL_OES_matrix_palette && m_replay->GetDispatch().real_glLoadPaletteFromModelViewMatrixOES)
      m_replay->GetDispatch().real_glLoadPaletteFromModelViewMatrixOES();
   else
      WarnNotAvailable("glLoadPaletteFromModelViewMatrixOES");
#else
   WarnNotAvailable("glLoadPaletteFromModelViewMatrixOES");
#endif
}
void Command::run_glMatrixIndexPointerOES()
{
#if GL_OES_matrix_palette
   if (m_packet.NumItems() > 6)
      WarnDataNotHandled("glMatrixIndexPointerOES");
   if (m_replay->GetDeviceCaps().m_has_GL_OES_matrix_palette && m_replay->GetDispatch().real_glMatrixIndexPointerOES)
      m_replay->GetDispatch().real_glMatrixIndexPointerOES(GetI32(GLint, 0), GetU32(GLenum, 1), GetI32(GLsizei, 2), GetArrayPtr(const void *, 4));
   else
      WarnNotAvailable("glMatrixIndexPointerOES");
#else
   WarnNotAvailable("glMatrixIndexPointerOES");
#endif
}
void Command::run_glWeightPointerOES()
{
#if GL_OES_matrix_palette
   if (m_packet.NumItems() > 6)
      WarnDataNotHandled("glWeightPointerOES");
   if (m_replay->GetDeviceCaps().m_has_GL_OES_matrix_palette && m_replay->GetDispatch().real_glWeightPointerOES)
      m_replay->GetDispatch().real_glWeightPointerOES(GetI32(GLint, 0), GetU32(GLenum, 1), GetI32(GLsizei, 2), GetArrayPtr(const void *, 4));
   else
      WarnNotAvailable("glWeightPointerOES");
#else
   WarnNotAvailable("glWeightPointerOES");
#endif
}
void Command::run_glPointSizePointerOES()
{
#if GL_OES_point_size_array
   if (m_packet.NumItems() > 5)
      WarnDataNotHandled("glPointSizePointerOES");
   if (m_replay->GetDeviceCaps().m_has_GL_OES_point_size_array && m_replay->GetDispatch().real_glPointSizePointerOES)
      m_replay->GetDispatch().real_glPointSizePointerOES(GetU32(GLenum, 0), GetI32(GLsizei, 1), GetArrayPtr(const void *, 3));
   else
      WarnNotAvailable("glPointSizePointerOES");
#else
   WarnNotAvailable("glPointSizePointerOES");
#endif
}
void Command::run_glPrimitiveBoundingBoxOES()
{
#if GL_OES_primitive_bounding_box
   if (m_packet.NumItems() > 9)
      WarnDataNotHandled("glPrimitiveBoundingBoxOES");
   if (m_replay->GetDeviceCaps().m_has_GL_OES_primitive_bounding_box && m_replay->GetDispatch().real_glPrimitiveBoundingBoxOES)
      m_replay->GetDispatch().real_glPrimitiveBoundingBoxOES(GetF(GLfloat, 0), GetF(GLfloat, 1), GetF(GLfloat, 2), GetF(GLfloat, 3), GetF(GLfloat, 4), GetF(GLfloat, 5), GetF(GLfloat, 6), GetF(GLfloat, 7));
   else
      WarnNotAvailable("glPrimitiveBoundingBoxOES");
#else
   WarnNotAvailable("glPrimitiveBoundingBoxOES");
#endif
}
void Command::run_glQueryMatrixxOES()
{
#if GL_OES_query_matrix
   if (m_packet.NumItems() > 3)
      WarnDataNotHandled("glQueryMatrixxOES");
   if (m_replay->GetDeviceCaps().m_has_GL_OES_query_matrix && m_replay->GetDispatch().real_glQueryMatrixxOES)
      m_replay->GetDispatch().real_glQueryMatrixxOES(dummyGLfixed, dummyGLint);
   else
      WarnNotAvailable("glQueryMatrixxOES");
#else
   WarnNotAvailable("glQueryMatrixxOES");
#endif
}
void Command::run_glMinSampleShadingOES()
{
#if GL_OES_sample_shading
   if (m_packet.NumItems() > 2)
      WarnDataNotHandled("glMinSampleShadingOES");
   if (m_replay->GetDeviceCaps().m_has_GL_OES_sample_shading && m_replay->GetDispatch().real_glMinSampleShadingOES)
      m_replay->GetDispatch().real_glMinSampleShadingOES(GetF(GLfloat, 0));
   else
      WarnNotAvailable("glMinSampleShadingOES");
#else
   WarnNotAvailable("glMinSampleShadingOES");
#endif
}
void Command::run_glPatchParameteriOES()
{
#if GL_OES_tessellation_shader
   if (m_packet.NumItems() > 3)
      WarnDataNotHandled("glPatchParameteriOES");
   if (m_replay->GetDeviceCaps().m_has_GL_OES_tessellation_shader && m_replay->GetDispatch().real_glPatchParameteriOES)
      m_replay->GetDispatch().real_glPatchParameteriOES(GetU32(GLenum, 0), GetI32(GLint, 1));
   else
      WarnNotAvailable("glPatchParameteriOES");
#else
   WarnNotAvailable("glPatchParameteriOES");
#endif
}
void Command::run_glTexParameterIivOES()
{
#if GL_OES_texture_border_clamp
   if (m_packet.NumItems() > 5)
      WarnDataNotHandled("glTexParameterIivOES");
   if (m_replay->GetDeviceCaps().m_has_GL_OES_texture_border_clamp && m_replay->GetDispatch().real_glTexParameterIivOES)
      m_replay->GetDispatch().real_glTexParameterIivOES(GetU32(GLenum, 0), GetU32(GLenum, 1), GetArrayPtr(const GLint *, 3));
   else
      WarnNotAvailable("glTexParameterIivOES");
#else
   WarnNotAvailable("glTexParameterIivOES");
#endif
}
void Command::run_glTexParameterIuivOES()
{
#if GL_OES_texture_border_clamp
   if (m_packet.NumItems() > 5)
      WarnDataNotHandled("glTexParameterIuivOES");
   if (m_replay->GetDeviceCaps().m_has_GL_OES_texture_border_clamp && m_replay->GetDispatch().real_glTexParameterIuivOES)
      m_replay->GetDispatch().real_glTexParameterIuivOES(GetU32(GLenum, 0), GetU32(GLenum, 1), GetArrayPtr(const GLuint *, 3));
   else
      WarnNotAvailable("glTexParameterIuivOES");
#else
   WarnNotAvailable("glTexParameterIuivOES");
#endif
}
void Command::run_glGetTexParameterIivOES()
{
#if GL_OES_texture_border_clamp
   if (m_packet.NumItems() > 4)
      WarnDataNotHandled("glGetTexParameterIivOES");
   if (m_replay->GetDeviceCaps().m_has_GL_OES_texture_border_clamp && m_replay->GetDispatch().real_glGetTexParameterIivOES)
      m_replay->GetDispatch().real_glGetTexParameterIivOES(GetU32(GLenum, 0), GetU32(GLenum, 1), dummyGLint);
   else
      WarnNotAvailable("glGetTexParameterIivOES");
#else
   WarnNotAvailable("glGetTexParameterIivOES");
#endif
}
void Command::run_glGetTexParameterIuivOES()
{
#if GL_OES_texture_border_clamp
   if (m_packet.NumItems() > 4)
      WarnDataNotHandled("glGetTexParameterIuivOES");
   if (m_replay->GetDeviceCaps().m_has_GL_OES_texture_border_clamp && m_replay->GetDispatch().real_glGetTexParameterIuivOES)
      m_replay->GetDispatch().real_glGetTexParameterIuivOES(GetU32(GLenum, 0), GetU32(GLenum, 1), dummyGLuint);
   else
      WarnNotAvailable("glGetTexParameterIuivOES");
#else
   WarnNotAvailable("glGetTexParameterIuivOES");
#endif
}
void Command::run_glSamplerParameterIivOES()
{
#if GL_OES_texture_border_clamp
   if (m_packet.NumItems() > 5)
      WarnDataNotHandled("glSamplerParameterIivOES");
   if (m_replay->GetDeviceCaps().m_has_GL_OES_texture_border_clamp && m_replay->GetDispatch().real_glSamplerParameterIivOES)
      m_replay->GetDispatch().real_glSamplerParameterIivOES(GetSampler(GLuint, 0), GetU32(GLenum, 1), GetArrayPtr(const GLint *, 3));
   else
      WarnNotAvailable("glSamplerParameterIivOES");
#else
   WarnNotAvailable("glSamplerParameterIivOES");
#endif
}
void Command::run_glSamplerParameterIuivOES()
{
#if GL_OES_texture_border_clamp
   if (m_packet.NumItems() > 5)
      WarnDataNotHandled("glSamplerParameterIuivOES");
   if (m_replay->GetDeviceCaps().m_has_GL_OES_texture_border_clamp && m_replay->GetDispatch().real_glSamplerParameterIuivOES)
      m_replay->GetDispatch().real_glSamplerParameterIuivOES(GetSampler(GLuint, 0), GetU32(GLenum, 1), GetArrayPtr(const GLuint *, 3));
   else
      WarnNotAvailable("glSamplerParameterIuivOES");
#else
   WarnNotAvailable("glSamplerParameterIuivOES");
#endif
}
void Command::run_glGetSamplerParameterIivOES()
{
#if GL_OES_texture_border_clamp
   if (m_packet.NumItems() > 4)
      WarnDataNotHandled("glGetSamplerParameterIivOES");
   if (m_replay->GetDeviceCaps().m_has_GL_OES_texture_border_clamp && m_replay->GetDispatch().real_glGetSamplerParameterIivOES)
      m_replay->GetDispatch().real_glGetSamplerParameterIivOES(GetSampler(GLuint, 0), GetU32(GLenum, 1), dummyGLint);
   else
      WarnNotAvailable("glGetSamplerParameterIivOES");
#else
   WarnNotAvailable("glGetSamplerParameterIivOES");
#endif
}
void Command::run_glGetSamplerParameterIuivOES()
{
#if GL_OES_texture_border_clamp
   if (m_packet.NumItems() > 4)
      WarnDataNotHandled("glGetSamplerParameterIuivOES");
   if (m_replay->GetDeviceCaps().m_has_GL_OES_texture_border_clamp && m_replay->GetDispatch().real_glGetSamplerParameterIuivOES)
      m_replay->GetDispatch().real_glGetSamplerParameterIuivOES(GetSampler(GLuint, 0), GetU32(GLenum, 1), dummyGLuint);
   else
      WarnNotAvailable("glGetSamplerParameterIuivOES");
#else
   WarnNotAvailable("glGetSamplerParameterIuivOES");
#endif
}
void Command::run_glTexBufferOES()
{
#if GL_OES_texture_buffer
   if (m_packet.NumItems() > 4)
      WarnDataNotHandled("glTexBufferOES");
   if (m_replay->GetDeviceCaps().m_has_GL_OES_texture_buffer && m_replay->GetDispatch().real_glTexBufferOES)
      m_replay->GetDispatch().real_glTexBufferOES(GetU32(GLenum, 0), GetU32(GLenum, 1), GetU32(GLuint, 2));
   else
      WarnNotAvailable("glTexBufferOES");
#else
   WarnNotAvailable("glTexBufferOES");
#endif
}
void Command::run_glTexBufferRangeOES()
{
#if GL_OES_texture_buffer
   if (m_packet.NumItems() > 6)
      WarnDataNotHandled("glTexBufferRangeOES");
   if (m_replay->GetDeviceCaps().m_has_GL_OES_texture_buffer && m_replay->GetDispatch().real_glTexBufferRangeOES)
      m_replay->GetDispatch().real_glTexBufferRangeOES(GetU32(GLenum, 0), GetU32(GLenum, 1), GetU32(GLuint, 2), GetPtr(GLintptr, 3), GetPtr(GLsizeiptr, 4));
   else
      WarnNotAvailable("glTexBufferRangeOES");
#else
   WarnNotAvailable("glTexBufferRangeOES");
#endif
}
void Command::run_glTexStorage3DMultisampleOES()
{
#if GL_OES_texture_storage_multisample_2d_array
   if (m_packet.NumItems() > 8)
      WarnDataNotHandled("glTexStorage3DMultisampleOES");
   if (m_replay->GetDeviceCaps().m_has_GL_OES_texture_storage_multisample_2d_array && m_replay->GetDispatch().real_glTexStorage3DMultisampleOES)
      m_replay->GetDispatch().real_glTexStorage3DMultisampleOES(GetU32(GLenum, 0), GetI32(GLsizei, 1), GetU32(GLenum, 2), GetI32(GLsizei, 3), GetI32(GLsizei, 4), GetI32(GLsizei, 5), GetB(GLboolean, 6));
   else
      WarnNotAvailable("glTexStorage3DMultisampleOES");
#else
   WarnNotAvailable("glTexStorage3DMultisampleOES");
#endif
}
void Command::run_glBindVertexArrayOES()
{
#if GL_OES_vertex_array_object
   if (m_packet.NumItems() > 2)
      WarnDataNotHandled("glBindVertexArrayOES");
   if (m_replay->GetDeviceCaps().m_has_GL_OES_vertex_array_object && m_replay->GetDispatch().real_glBindVertexArrayOES)
      m_replay->GetDispatch().real_glBindVertexArrayOES(GetVertexArray(GLuint, 0));
   else
      WarnNotAvailable("glBindVertexArrayOES");
#else
   WarnNotAvailable("glBindVertexArrayOES");
#endif
}
void Command::run_glDeleteVertexArraysOES()
{
#if GL_OES_vertex_array_object
   if (m_packet.NumItems() > 4)
      WarnDataNotHandled("glDeleteVertexArraysOES");
   if (m_replay->GetDeviceCaps().m_has_GL_OES_vertex_array_object && m_replay->GetDispatch().real_glDeleteVertexArraysOES)
      m_replay->GetDispatch().real_glDeleteVertexArraysOES(GetI32(GLsizei, 0), GetArrayPtr(const GLuint *, 2));
   else
      WarnNotAvailable("glDeleteVertexArraysOES");
#else
   WarnNotAvailable("glDeleteVertexArraysOES");
#endif
}
void Command::run_glGenVertexArraysOES()
{
#if GL_OES_vertex_array_object
   if (m_packet.NumItems() > 3)
      WarnDataNotHandled("glGenVertexArraysOES");
   if (m_replay->GetDeviceCaps().m_has_GL_OES_vertex_array_object && m_replay->GetDispatch().real_glGenVertexArraysOES)
      m_replay->GetDispatch().real_glGenVertexArraysOES(GetI32(GLsizei, 0), dummyGLuint);
   else
      WarnNotAvailable("glGenVertexArraysOES");
#else
   WarnNotAvailable("glGenVertexArraysOES");
#endif
}
void Command::run_glIsVertexArrayOES()
{
#if GL_OES_vertex_array_object
   if (m_packet.NumItems() > 2)
      WarnDataNotHandled("glIsVertexArrayOES");
   if (m_replay->GetDeviceCaps().m_has_GL_OES_vertex_array_object && m_replay->GetDispatch().real_glIsVertexArrayOES)
      m_replay->GetDispatch().real_glIsVertexArrayOES(GetVertexArray(GLuint, 0));
   else
      WarnNotAvailable("glIsVertexArrayOES");
#else
   WarnNotAvailable("glIsVertexArrayOES");
#endif
}
void Command::run_eglDupNativeFenceFDANDROID()
{
#if defined(ANDROID) && EGL_ANDROID_native_fence_sync
   if (m_packet.NumItems() > 3)
      WarnDataNotHandled("eglDupNativeFenceFDANDROID");
   if (m_replay->GetDeviceCaps().m_has_EGL_ANDROID_native_fence_sync && m_replay->GetDispatch().real_eglDupNativeFenceFDANDROID)
      m_replay->GetDispatch().real_eglDupNativeFenceFDANDROID(GetEGLDisplay(EGLDisplay, 0), GetEGLSync(EGLSyncKHR, 1));
   else
      WarnNotAvailable("eglDupNativeFenceFDANDROID");
#else
   WarnNotAvailable("eglDupNativeFenceFDANDROID");
#endif
}
void Command::run_eglGetEventConstantBRCM()
{
#if EGL_BRCM_event_monitor
   if (m_packet.NumItems() > 2)
      WarnDataNotHandled("eglGetEventConstantBRCM");
   if (m_replay->GetDeviceCaps().m_has_EGL_BRCM_event_monitor && m_replay->GetDispatch().real_eglGetEventConstantBRCM)
      m_replay->GetDispatch().real_eglGetEventConstantBRCM(GetU32(EGLenum, 0));
   else
      WarnNotAvailable("eglGetEventConstantBRCM");
#else
   WarnNotAvailable("eglGetEventConstantBRCM");
#endif
}
void Command::run_eglGetEventTrackInfoBRCM()
{
#if EGL_BRCM_event_monitor
   if (m_packet.NumItems() > 4)
      WarnDataNotHandled("eglGetEventTrackInfoBRCM");
   if (m_replay->GetDeviceCaps().m_has_EGL_BRCM_event_monitor && m_replay->GetDispatch().real_eglGetEventTrackInfoBRCM)
      m_replay->GetDispatch().real_eglGetEventTrackInfoBRCM(GetI32(EGLint, 0), GetI32(EGLint, 1), dummychar);
   else
      WarnNotAvailable("eglGetEventTrackInfoBRCM");
#else
   WarnNotAvailable("eglGetEventTrackInfoBRCM");
#endif
}
void Command::run_eglGetEventInfoBRCM()
{
#if EGL_BRCM_event_monitor
   if (m_packet.NumItems() > 5)
      WarnDataNotHandled("eglGetEventInfoBRCM");
   if (m_replay->GetDeviceCaps().m_has_EGL_BRCM_event_monitor && m_replay->GetDispatch().real_eglGetEventInfoBRCM)
      m_replay->GetDispatch().real_eglGetEventInfoBRCM(GetI32(EGLint, 0), GetI32(EGLint, 1), dummychar, dummyEGLint);
   else
      WarnNotAvailable("eglGetEventInfoBRCM");
#else
   WarnNotAvailable("eglGetEventInfoBRCM");
#endif
}
void Command::run_eglGetEventDataFieldInfoBRCM()
{
#if EGL_BRCM_event_monitor
   if (m_packet.NumItems() > 7)
      WarnDataNotHandled("eglGetEventDataFieldInfoBRCM");
   if (m_replay->GetDeviceCaps().m_has_EGL_BRCM_event_monitor && m_replay->GetDispatch().real_eglGetEventDataFieldInfoBRCM)
      m_replay->GetDispatch().real_eglGetEventDataFieldInfoBRCM(GetI32(EGLint, 0), GetI32(EGLint, 1), GetI32(EGLint, 2), dummychar, dummyEGLBoolean, dummyEGLint);
   else
      WarnNotAvailable("eglGetEventDataFieldInfoBRCM");
#else
   WarnNotAvailable("eglGetEventDataFieldInfoBRCM");
#endif
}
void Command::run_eglSetEventCollectionBRCM()
{
#if EGL_BRCM_event_monitor
   if (m_packet.NumItems() > 2)
      WarnDataNotHandled("eglSetEventCollectionBRCM");
   if (m_replay->GetDeviceCaps().m_has_EGL_BRCM_event_monitor && m_replay->GetDispatch().real_eglSetEventCollectionBRCM)
      m_replay->GetDispatch().real_eglSetEventCollectionBRCM(GetU32(EGLenum, 0));
   else
      WarnNotAvailable("eglSetEventCollectionBRCM");
#else
   WarnNotAvailable("eglSetEventCollectionBRCM");
#endif
}
void Command::run_eglGetEventDataBRCM()
{
#if EGL_BRCM_event_monitor
   if (m_packet.NumItems() > 6)
      WarnDataNotHandled("eglGetEventDataBRCM");
   if (m_replay->GetDeviceCaps().m_has_EGL_BRCM_event_monitor && m_replay->GetDispatch().real_eglGetEventDataBRCM)
      m_replay->GetDispatch().real_eglGetEventDataBRCM(GetI32(EGLint, 0), dummyvoid, dummyEGLint, dummyEGLBoolean, dummyEGLuint64BRCM);
   else
      WarnNotAvailable("eglGetEventDataBRCM");
#else
   WarnNotAvailable("eglGetEventDataBRCM");
#endif
}
void Command::run_eglImageUpdateParameterivBRCM()
{
#if EGL_BRCM_image_update_control
   if (m_packet.NumItems() > 6)
      WarnDataNotHandled("eglImageUpdateParameterivBRCM");
   if (m_replay->GetDeviceCaps().m_has_EGL_BRCM_image_update_control && m_replay->GetDispatch().real_eglImageUpdateParameterivBRCM)
      m_replay->GetDispatch().real_eglImageUpdateParameterivBRCM(GetEGLDisplay(EGLDisplay, 0), GetEGLImage(EGLImageKHR, 1), GetU32(EGLenum, 2), GetArrayPtr(const EGLint *, 4));
   else
      WarnNotAvailable("eglImageUpdateParameterivBRCM");
#else
   WarnNotAvailable("eglImageUpdateParameterivBRCM");
#endif
}
void Command::run_eglImageUpdateParameteriBRCM()
{
#if EGL_BRCM_image_update_control
   if (m_packet.NumItems() > 5)
      WarnDataNotHandled("eglImageUpdateParameteriBRCM");
   if (m_replay->GetDeviceCaps().m_has_EGL_BRCM_image_update_control && m_replay->GetDispatch().real_eglImageUpdateParameteriBRCM)
      m_replay->GetDispatch().real_eglImageUpdateParameteriBRCM(GetEGLDisplay(EGLDisplay, 0), GetEGLImage(EGLImageKHR, 1), GetU32(EGLenum, 2), GetI32(EGLint, 3));
   else
      WarnNotAvailable("eglImageUpdateParameteriBRCM");
#else
   WarnNotAvailable("eglImageUpdateParameteriBRCM");
#endif
}
void Command::run_eglGetPerfCounterConstantBRCM()
{
#if EGL_BRCM_performance_counters
   if (m_packet.NumItems() > 2)
      WarnDataNotHandled("eglGetPerfCounterConstantBRCM");
   if (m_replay->GetDeviceCaps().m_has_EGL_BRCM_performance_counters && m_replay->GetDispatch().real_eglGetPerfCounterConstantBRCM)
      m_replay->GetDispatch().real_eglGetPerfCounterConstantBRCM(GetU32(EGLenum, 0));
   else
      WarnNotAvailable("eglGetPerfCounterConstantBRCM");
#else
   WarnNotAvailable("eglGetPerfCounterConstantBRCM");
#endif
}
void Command::run_eglGetPerfCounterGroupInfoBRCM()
{
#if EGL_BRCM_performance_counters
   if (m_packet.NumItems() > 6)
      WarnDataNotHandled("eglGetPerfCounterGroupInfoBRCM");
   if (m_replay->GetDeviceCaps().m_has_EGL_BRCM_performance_counters && m_replay->GetDispatch().real_eglGetPerfCounterGroupInfoBRCM)
      m_replay->GetDispatch().real_eglGetPerfCounterGroupInfoBRCM(GetI32(EGLint, 0), GetI32(EGLint, 1), dummyGLchar, dummyEGLint, dummyEGLint);
   else
      WarnNotAvailable("eglGetPerfCounterGroupInfoBRCM");
#else
   WarnNotAvailable("eglGetPerfCounterGroupInfoBRCM");
#endif
}
void Command::run_eglGetPerfCounterInfoBRCM()
{
#if EGL_BRCM_performance_counters
   if (m_packet.NumItems() > 10)
      WarnDataNotHandled("eglGetPerfCounterInfoBRCM");
   if (m_replay->GetDeviceCaps().m_has_EGL_BRCM_performance_counters && m_replay->GetDispatch().real_eglGetPerfCounterInfoBRCM)
      m_replay->GetDispatch().real_eglGetPerfCounterInfoBRCM(GetI32(EGLint, 0), GetI32(EGLint, 1), dummyEGLuint64BRCM, dummyEGLuint64BRCM, dummyEGLuint64BRCM, GetI32(EGLint, 5), dummychar, GetI32(EGLint, 7), dummychar);
   else
      WarnNotAvailable("eglGetPerfCounterInfoBRCM");
#else
   WarnNotAvailable("eglGetPerfCounterInfoBRCM");
#endif
}
void Command::run_eglSetPerfCountingBRCM()
{
#if EGL_BRCM_performance_counters
   if (m_packet.NumItems() > 2)
      WarnDataNotHandled("eglSetPerfCountingBRCM");
   if (m_replay->GetDeviceCaps().m_has_EGL_BRCM_performance_counters && m_replay->GetDispatch().real_eglSetPerfCountingBRCM)
      m_replay->GetDispatch().real_eglSetPerfCountingBRCM(GetU32(EGLenum, 0));
   else
      WarnNotAvailable("eglSetPerfCountingBRCM");
#else
   WarnNotAvailable("eglSetPerfCountingBRCM");
#endif
}
void Command::run_eglChoosePerfCountersBRCM()
{
#if EGL_BRCM_performance_counters
   if (m_packet.NumItems() > 5)
      WarnDataNotHandled("eglChoosePerfCountersBRCM");
   if (m_replay->GetDeviceCaps().m_has_EGL_BRCM_performance_counters && m_replay->GetDispatch().real_eglChoosePerfCountersBRCM)
      m_replay->GetDispatch().real_eglChoosePerfCountersBRCM(GetB(EGLBoolean, 0), GetI32(EGLint, 1), GetI32(EGLint, 2), dummyEGLint);
   else
      WarnNotAvailable("eglChoosePerfCountersBRCM");
#else
   WarnNotAvailable("eglChoosePerfCountersBRCM");
#endif
}
void Command::run_eglGetPerfCounterDataBRCM()
{
#if EGL_BRCM_performance_counters
   if (m_packet.NumItems() > 5)
      WarnDataNotHandled("eglGetPerfCounterDataBRCM");
   if (m_replay->GetDeviceCaps().m_has_EGL_BRCM_performance_counters && m_replay->GetDispatch().real_eglGetPerfCounterDataBRCM)
      m_replay->GetDispatch().real_eglGetPerfCounterDataBRCM(GetI32(EGLint, 0), dummyvoid, dummyEGLint, GetB(EGLBoolean, 3));
   else
      WarnNotAvailable("eglGetPerfCounterDataBRCM");
#else
   WarnNotAvailable("eglGetPerfCounterDataBRCM");
#endif
}
void Command::run_eglGetPlatformDisplayEXT()
{
#if EGL_EXT_platform_base
   if (m_packet.NumItems() > 5)
      WarnDataNotHandled("eglGetPlatformDisplayEXT");
   if (m_replay->GetDeviceCaps().m_has_EGL_EXT_platform_base && m_replay->GetDispatch().real_eglGetPlatformDisplayEXT)
      m_replay->GetDispatch().real_eglGetPlatformDisplayEXT(GetU32(EGLenum, 0), dummyvoid, GetArrayPtr(const EGLint *, 3));
   else
      WarnNotAvailable("eglGetPlatformDisplayEXT");
#else
   WarnNotAvailable("eglGetPlatformDisplayEXT");
#endif
}
void Command::run_eglCreatePlatformWindowSurfaceEXT()
{
#if EGL_EXT_platform_base
   if (m_packet.NumItems() > 6)
      WarnDataNotHandled("eglCreatePlatformWindowSurfaceEXT");
   if (m_replay->GetDeviceCaps().m_has_EGL_EXT_platform_base && m_replay->GetDispatch().real_eglCreatePlatformWindowSurfaceEXT)
      m_replay->GetDispatch().real_eglCreatePlatformWindowSurfaceEXT(GetEGLDisplay(EGLDisplay, 0), GetEGLConfig(EGLConfig, 1), dummyvoid, GetArrayPtr(const EGLint *, 4));
   else
      WarnNotAvailable("eglCreatePlatformWindowSurfaceEXT");
#else
   WarnNotAvailable("eglCreatePlatformWindowSurfaceEXT");
#endif
}
void Command::run_eglCreatePlatformPixmapSurfaceEXT()
{
#if EGL_EXT_platform_base
   if (m_packet.NumItems() > 6)
      WarnDataNotHandled("eglCreatePlatformPixmapSurfaceEXT");
   if (m_replay->GetDeviceCaps().m_has_EGL_EXT_platform_base && m_replay->GetDispatch().real_eglCreatePlatformPixmapSurfaceEXT)
      m_replay->GetDispatch().real_eglCreatePlatformPixmapSurfaceEXT(GetEGLDisplay(EGLDisplay, 0), GetEGLConfig(EGLConfig, 1), dummyvoid, GetArrayPtr(const EGLint *, 4));
   else
      WarnNotAvailable("eglCreatePlatformPixmapSurfaceEXT");
#else
   WarnNotAvailable("eglCreatePlatformPixmapSurfaceEXT");
#endif
}
void Command::run_eglBindWaylandDisplayWL()
{
#if EGL_WL_bind_wayland_display
   if (m_packet.NumItems() > 3)
      WarnDataNotHandled("eglBindWaylandDisplayWL");
   if (m_replay->GetDeviceCaps().m_has_EGL_WL_bind_wayland_display && m_replay->GetDispatch().real_eglBindWaylandDisplayWL)
      m_replay->GetDispatch().real_eglBindWaylandDisplayWL(GetEGLDisplay(EGLDisplay, 0), GetPtr(struct wl_display *, 1));
   else
      WarnNotAvailable("eglBindWaylandDisplayWL");
#else
   WarnNotAvailable("eglBindWaylandDisplayWL");
#endif
}
void Command::run_eglUnbindWaylandDisplayWL()
{
#if EGL_WL_bind_wayland_display
   if (m_packet.NumItems() > 3)
      WarnDataNotHandled("eglUnbindWaylandDisplayWL");
   if (m_replay->GetDeviceCaps().m_has_EGL_WL_bind_wayland_display && m_replay->GetDispatch().real_eglUnbindWaylandDisplayWL)
      m_replay->GetDispatch().real_eglUnbindWaylandDisplayWL(GetEGLDisplay(EGLDisplay, 0), GetPtr(struct wl_display *, 1));
   else
      WarnNotAvailable("eglUnbindWaylandDisplayWL");
#else
   WarnNotAvailable("eglUnbindWaylandDisplayWL");
#endif
}
void Command::run_eglQueryWaylandBufferWL()
{
#if EGL_WL_bind_wayland_display
   if (m_packet.NumItems() > 5)
      WarnDataNotHandled("eglQueryWaylandBufferWL");
   if (m_replay->GetDeviceCaps().m_has_EGL_WL_bind_wayland_display && m_replay->GetDispatch().real_eglQueryWaylandBufferWL)
      m_replay->GetDispatch().real_eglQueryWaylandBufferWL(GetEGLDisplay(EGLDisplay, 0), GetPtr(struct wl_resource *, 1), GetI32(EGLint, 2), dummyEGLint);
   else
      WarnNotAvailable("eglQueryWaylandBufferWL");
#else
   WarnNotAvailable("eglQueryWaylandBufferWL");
#endif
}
void Command::run_glPolygonModeBRCM()
{
#if GL_BRCM_polygon_mode
   if (m_packet.NumItems() > 2)
      WarnDataNotHandled("glPolygonModeBRCM");
   if (m_replay->GetDeviceCaps().m_has_GL_BRCM_polygon_mode && m_replay->GetDispatch().real_glPolygonModeBRCM)
      m_replay->GetDispatch().real_glPolygonModeBRCM(GetU32(GLenum, 0));
   else
      WarnNotAvailable("glPolygonModeBRCM");
#else
   WarnNotAvailable("glPolygonModeBRCM");
#endif
}
void Command::run_glProvokingVertexBRCM()
{
#if GL_BRCM_provoking_vertex
   if (m_packet.NumItems() > 2)
      WarnDataNotHandled("glProvokingVertexBRCM");
   if (m_replay->GetDeviceCaps().m_has_GL_BRCM_provoking_vertex && m_replay->GetDispatch().real_glProvokingVertexBRCM)
      m_replay->GetDispatch().real_glProvokingVertexBRCM(GetU32(GLenum, 0));
   else
      WarnNotAvailable("glProvokingVertexBRCM");
#else
   WarnNotAvailable("glProvokingVertexBRCM");
#endif
}
void Command::run_glTexImage1DBRCM()
{
#if GL_BRCM_texture_1D
   if (m_packet.NumItems() > 10)
      WarnDataNotHandled("glTexImage1DBRCM");
   if (m_replay->GetDeviceCaps().m_has_GL_BRCM_texture_1D && m_replay->GetDispatch().real_glTexImage1DBRCM)
      m_replay->GetDispatch().real_glTexImage1DBRCM(GetU32(GLenum, 0), GetI32(GLint, 1), GetI32(GLint, 2), GetI32(GLsizei, 3), GetI32(GLint, 4), GetU32(GLenum, 5), GetU32(GLenum, 6), GetArrayPtr(const GLvoid *, 8));
   else
      WarnNotAvailable("glTexImage1DBRCM");
#else
   WarnNotAvailable("glTexImage1DBRCM");
#endif
}
void Command::run_glDrawArraysInstancedBaseInstanceEXT()
{
#if GL_EXT_base_instance
   if (m_packet.NumItems() > 6)
      WarnDataNotHandled("glDrawArraysInstancedBaseInstanceEXT");
   if (m_replay->GetDeviceCaps().m_has_GL_EXT_base_instance && m_replay->GetDispatch().real_glDrawArraysInstancedBaseInstanceEXT)
      m_replay->GetDispatch().real_glDrawArraysInstancedBaseInstanceEXT(GetU32(GLenum, 0), GetI32(GLint, 1), GetI32(GLsizei, 2), GetI32(GLsizei, 3), GetU32(GLuint, 4));
   else
      WarnNotAvailable("glDrawArraysInstancedBaseInstanceEXT");
#else
   WarnNotAvailable("glDrawArraysInstancedBaseInstanceEXT");
#endif
}
void Command::run_glDrawElementsInstancedBaseInstanceEXT()
{
#if GL_EXT_base_instance
   if (m_packet.NumItems() > 8)
      WarnDataNotHandled("glDrawElementsInstancedBaseInstanceEXT");
   if (m_replay->GetDeviceCaps().m_has_GL_EXT_base_instance && m_replay->GetDispatch().real_glDrawElementsInstancedBaseInstanceEXT)
      m_replay->GetDispatch().real_glDrawElementsInstancedBaseInstanceEXT(GetU32(GLenum, 0), GetI32(GLsizei, 1), GetU32(GLenum, 2), GetArrayPtr(const void *, 6), GetI32(GLsizei, 4), GetU32(GLuint, 5));
   else
      WarnNotAvailable("glDrawElementsInstancedBaseInstanceEXT");
#else
   WarnNotAvailable("glDrawElementsInstancedBaseInstanceEXT");
#endif
}
void Command::run_glDrawElementsInstancedBaseVertexBaseInstanceEXT()
{
#if GL_EXT_base_instance
   if (m_packet.NumItems() > 9)
      WarnDataNotHandled("glDrawElementsInstancedBaseVertexBaseInstanceEXT");
   if (m_replay->GetDeviceCaps().m_has_GL_EXT_base_instance && m_replay->GetDispatch().real_glDrawElementsInstancedBaseVertexBaseInstanceEXT)
      m_replay->GetDispatch().real_glDrawElementsInstancedBaseVertexBaseInstanceEXT(GetU32(GLenum, 0), GetI32(GLsizei, 1), GetU32(GLenum, 2), GetArrayPtr(const void *, 7), GetI32(GLsizei, 4), GetI32(GLint, 5), GetU32(GLuint, 6));
   else
      WarnNotAvailable("glDrawElementsInstancedBaseVertexBaseInstanceEXT");
#else
   WarnNotAvailable("glDrawElementsInstancedBaseVertexBaseInstanceEXT");
#endif
}
void Command::run_glCopyImageSubDataEXT()
{
#if GL_EXT_copy_image
   if (m_packet.NumItems() > 16)
      WarnDataNotHandled("glCopyImageSubDataEXT");
   if (m_replay->GetDeviceCaps().m_has_GL_EXT_copy_image && m_replay->GetDispatch().real_glCopyImageSubDataEXT)
      m_replay->GetDispatch().real_glCopyImageSubDataEXT(GetU32(GLuint, 0), GetU32(GLenum, 1), GetI32(GLint, 2), GetI32(GLint, 3), GetI32(GLint, 4), GetI32(GLint, 5), GetU32(GLuint, 6), GetU32(GLenum, 7), GetI32(GLint, 8), GetI32(GLint, 9), GetI32(GLint, 10), GetI32(GLint, 11), GetI32(GLsizei, 12), GetI32(GLsizei, 13), GetI32(GLsizei, 14));
   else
      WarnNotAvailable("glCopyImageSubDataEXT");
#else
   WarnNotAvailable("glCopyImageSubDataEXT");
#endif
}
void Command::run_glInsertEventMarkerEXT()
{
#if GL_EXT_debug_marker
   if (m_packet.NumItems() > 3)
      WarnDataNotHandled("glInsertEventMarkerEXT");
   if (m_replay->GetDeviceCaps().m_has_GL_EXT_debug_marker && m_replay->GetDispatch().real_glInsertEventMarkerEXT)
      m_replay->GetDispatch().real_glInsertEventMarkerEXT(GetI32(GLsizei, 0), GetCP(const GLchar *, 1));
   else
      WarnNotAvailable("glInsertEventMarkerEXT");
#else
   WarnNotAvailable("glInsertEventMarkerEXT");
#endif
}
void Command::run_glPushGroupMarkerEXT()
{
#if GL_EXT_debug_marker
   if (m_packet.NumItems() > 3)
      WarnDataNotHandled("glPushGroupMarkerEXT");
   if (m_replay->GetDeviceCaps().m_has_GL_EXT_debug_marker && m_replay->GetDispatch().real_glPushGroupMarkerEXT)
      m_replay->GetDispatch().real_glPushGroupMarkerEXT(GetI32(GLsizei, 0), GetCP(const GLchar *, 1));
   else
      WarnNotAvailable("glPushGroupMarkerEXT");
#else
   WarnNotAvailable("glPushGroupMarkerEXT");
#endif
}
void Command::run_glPopGroupMarkerEXT()
{
#if GL_EXT_debug_marker
   if (m_packet.NumItems() > 1)
      WarnDataNotHandled("glPopGroupMarkerEXT");
   if (m_replay->GetDeviceCaps().m_has_GL_EXT_debug_marker && m_replay->GetDispatch().real_glPopGroupMarkerEXT)
      m_replay->GetDispatch().real_glPopGroupMarkerEXT();
   else
      WarnNotAvailable("glPopGroupMarkerEXT");
#else
   WarnNotAvailable("glPopGroupMarkerEXT");
#endif
}
void Command::run_glDiscardFramebufferEXT()
{
#if GL_EXT_discard_framebuffer
   if (m_packet.NumItems() > 5)
      WarnDataNotHandled("glDiscardFramebufferEXT");
   if (m_replay->GetDeviceCaps().m_has_GL_EXT_discard_framebuffer && m_replay->GetDispatch().real_glDiscardFramebufferEXT)
      m_replay->GetDispatch().real_glDiscardFramebufferEXT(GetU32(GLenum, 0), GetI32(GLsizei, 1), GetArrayPtr(const GLenum *, 3));
   else
      WarnNotAvailable("glDiscardFramebufferEXT");
#else
   WarnNotAvailable("glDiscardFramebufferEXT");
#endif
}
void Command::run_glEnableiEXT()
{
#if GL_EXT_draw_buffers_indexed
   if (m_packet.NumItems() > 3)
      WarnDataNotHandled("glEnableiEXT");
   if (m_replay->GetDeviceCaps().m_has_GL_EXT_draw_buffers_indexed && m_replay->GetDispatch().real_glEnableiEXT)
      m_replay->GetDispatch().real_glEnableiEXT(GetU32(GLenum, 0), GetU32(GLuint, 1));
   else
      WarnNotAvailable("glEnableiEXT");
#else
   WarnNotAvailable("glEnableiEXT");
#endif
}
void Command::run_glDisableiEXT()
{
#if GL_EXT_draw_buffers_indexed
   if (m_packet.NumItems() > 3)
      WarnDataNotHandled("glDisableiEXT");
   if (m_replay->GetDeviceCaps().m_has_GL_EXT_draw_buffers_indexed && m_replay->GetDispatch().real_glDisableiEXT)
      m_replay->GetDispatch().real_glDisableiEXT(GetU32(GLenum, 0), GetU32(GLuint, 1));
   else
      WarnNotAvailable("glDisableiEXT");
#else
   WarnNotAvailable("glDisableiEXT");
#endif
}
void Command::run_glBlendEquationiEXT()
{
#if GL_EXT_draw_buffers_indexed
   if (m_packet.NumItems() > 3)
      WarnDataNotHandled("glBlendEquationiEXT");
   if (m_replay->GetDeviceCaps().m_has_GL_EXT_draw_buffers_indexed && m_replay->GetDispatch().real_glBlendEquationiEXT)
      m_replay->GetDispatch().real_glBlendEquationiEXT(GetU32(GLuint, 0), GetU32(GLenum, 1));
   else
      WarnNotAvailable("glBlendEquationiEXT");
#else
   WarnNotAvailable("glBlendEquationiEXT");
#endif
}
void Command::run_glBlendEquationSeparateiEXT()
{
#if GL_EXT_draw_buffers_indexed
   if (m_packet.NumItems() > 4)
      WarnDataNotHandled("glBlendEquationSeparateiEXT");
   if (m_replay->GetDeviceCaps().m_has_GL_EXT_draw_buffers_indexed && m_replay->GetDispatch().real_glBlendEquationSeparateiEXT)
      m_replay->GetDispatch().real_glBlendEquationSeparateiEXT(GetU32(GLuint, 0), GetU32(GLenum, 1), GetU32(GLenum, 2));
   else
      WarnNotAvailable("glBlendEquationSeparateiEXT");
#else
   WarnNotAvailable("glBlendEquationSeparateiEXT");
#endif
}
void Command::run_glBlendFunciEXT()
{
#if GL_EXT_draw_buffers_indexed
   if (m_packet.NumItems() > 4)
      WarnDataNotHandled("glBlendFunciEXT");
   if (m_replay->GetDeviceCaps().m_has_GL_EXT_draw_buffers_indexed && m_replay->GetDispatch().real_glBlendFunciEXT)
      m_replay->GetDispatch().real_glBlendFunciEXT(GetU32(GLuint, 0), GetU32(GLenum, 1), GetU32(GLenum, 2));
   else
      WarnNotAvailable("glBlendFunciEXT");
#else
   WarnNotAvailable("glBlendFunciEXT");
#endif
}
void Command::run_glBlendFuncSeparateiEXT()
{
#if GL_EXT_draw_buffers_indexed
   if (m_packet.NumItems() > 6)
      WarnDataNotHandled("glBlendFuncSeparateiEXT");
   if (m_replay->GetDeviceCaps().m_has_GL_EXT_draw_buffers_indexed && m_replay->GetDispatch().real_glBlendFuncSeparateiEXT)
      m_replay->GetDispatch().real_glBlendFuncSeparateiEXT(GetU32(GLuint, 0), GetU32(GLenum, 1), GetU32(GLenum, 2), GetU32(GLenum, 3), GetU32(GLenum, 4));
   else
      WarnNotAvailable("glBlendFuncSeparateiEXT");
#else
   WarnNotAvailable("glBlendFuncSeparateiEXT");
#endif
}
void Command::run_glColorMaskiEXT()
{
#if GL_EXT_draw_buffers_indexed
   if (m_packet.NumItems() > 6)
      WarnDataNotHandled("glColorMaskiEXT");
   if (m_replay->GetDeviceCaps().m_has_GL_EXT_draw_buffers_indexed && m_replay->GetDispatch().real_glColorMaskiEXT)
      m_replay->GetDispatch().real_glColorMaskiEXT(GetU32(GLuint, 0), GetB(GLboolean, 1), GetB(GLboolean, 2), GetB(GLboolean, 3), GetB(GLboolean, 4));
   else
      WarnNotAvailable("glColorMaskiEXT");
#else
   WarnNotAvailable("glColorMaskiEXT");
#endif
}
void Command::run_glIsEnablediEXT()
{
#if GL_EXT_draw_buffers_indexed
   if (m_packet.NumItems() > 3)
      WarnDataNotHandled("glIsEnablediEXT");
   if (m_replay->GetDeviceCaps().m_has_GL_EXT_draw_buffers_indexed && m_replay->GetDispatch().real_glIsEnablediEXT)
      m_replay->GetDispatch().real_glIsEnablediEXT(GetU32(GLenum, 0), GetU32(GLuint, 1));
   else
      WarnNotAvailable("glIsEnablediEXT");
#else
   WarnNotAvailable("glIsEnablediEXT");
#endif
}
void Command::run_glDrawElementsBaseVertexEXT()
{
#if GL_EXT_draw_elements_base_vertex
   if (m_packet.NumItems() > 7)
      WarnDataNotHandled("glDrawElementsBaseVertexEXT");
   if (m_replay->GetDeviceCaps().m_has_GL_EXT_draw_elements_base_vertex && m_replay->GetDispatch().real_glDrawElementsBaseVertexEXT)
      m_replay->GetDispatch().real_glDrawElementsBaseVertexEXT(GetU32(GLenum, 0), GetI32(GLsizei, 1), GetU32(GLenum, 2), GetArrayPtr(const void *, 5), GetI32(GLint, 4));
   else
      WarnNotAvailable("glDrawElementsBaseVertexEXT");
#else
   WarnNotAvailable("glDrawElementsBaseVertexEXT");
#endif
}
void Command::run_glDrawRangeElementsBaseVertexEXT()
{
#if GL_EXT_draw_elements_base_vertex
   if (m_packet.NumItems() > 9)
      WarnDataNotHandled("glDrawRangeElementsBaseVertexEXT");
   if (m_replay->GetDeviceCaps().m_has_GL_EXT_draw_elements_base_vertex && m_replay->GetDispatch().real_glDrawRangeElementsBaseVertexEXT)
      m_replay->GetDispatch().real_glDrawRangeElementsBaseVertexEXT(GetU32(GLenum, 0), GetU32(GLuint, 1), GetU32(GLuint, 2), GetI32(GLsizei, 3), GetU32(GLenum, 4), GetArrayPtr(const void *, 7), GetI32(GLint, 6));
   else
      WarnNotAvailable("glDrawRangeElementsBaseVertexEXT");
#else
   WarnNotAvailable("glDrawRangeElementsBaseVertexEXT");
#endif
}
void Command::run_glDrawElementsInstancedBaseVertexEXT()
{
#if GL_EXT_draw_elements_base_vertex
   if (m_packet.NumItems() > 8)
      WarnDataNotHandled("glDrawElementsInstancedBaseVertexEXT");
   if (m_replay->GetDeviceCaps().m_has_GL_EXT_draw_elements_base_vertex && m_replay->GetDispatch().real_glDrawElementsInstancedBaseVertexEXT)
      m_replay->GetDispatch().real_glDrawElementsInstancedBaseVertexEXT(GetU32(GLenum, 0), GetI32(GLsizei, 1), GetU32(GLenum, 2), GetArrayPtr(const void *, 6), GetI32(GLsizei, 4), GetI32(GLint, 5));
   else
      WarnNotAvailable("glDrawElementsInstancedBaseVertexEXT");
#else
   WarnNotAvailable("glDrawElementsInstancedBaseVertexEXT");
#endif
}
void Command::run_glMultiDrawElementsBaseVertexEXT()
{
#if GL_EXT_draw_elements_base_vertex
   if (m_packet.NumItems() > 10)
      WarnDataNotHandled("glMultiDrawElementsBaseVertexEXT");
   if (m_replay->GetDeviceCaps().m_has_GL_EXT_draw_elements_base_vertex && m_replay->GetDispatch().real_glMultiDrawElementsBaseVertexEXT)
      m_replay->GetDispatch().real_glMultiDrawElementsBaseVertexEXT(GetU32(GLenum, 0), GetArrayPtr(const GLsizei *, 6), GetU32(GLenum, 2), GetArrayPtr(const void *const*, 7), GetI32(GLsizei, 4), GetArrayPtr(const GLint *, 8));
   else
      WarnNotAvailable("glMultiDrawElementsBaseVertexEXT");
#else
   WarnNotAvailable("glMultiDrawElementsBaseVertexEXT");
#endif
}
void Command::run_glFramebufferTextureEXT()
{
#if GL_EXT_geometry_shader
   if (m_packet.NumItems() > 5)
      WarnDataNotHandled("glFramebufferTextureEXT");
   if (m_replay->GetDeviceCaps().m_has_GL_EXT_geometry_shader && m_replay->GetDispatch().real_glFramebufferTextureEXT)
      m_replay->GetDispatch().real_glFramebufferTextureEXT(GetU32(GLenum, 0), GetU32(GLenum, 1), GetU32(GLuint, 2), GetI32(GLint, 3));
   else
      WarnNotAvailable("glFramebufferTextureEXT");
#else
   WarnNotAvailable("glFramebufferTextureEXT");
#endif
}
void Command::run_glMultiDrawArraysIndirectEXT()
{
#if GL_EXT_multi_draw_indirect
   if (m_packet.NumItems() > 6)
      WarnDataNotHandled("glMultiDrawArraysIndirectEXT");
   if (m_replay->GetDeviceCaps().m_has_GL_EXT_multi_draw_indirect && m_replay->GetDispatch().real_glMultiDrawArraysIndirectEXT)
      m_replay->GetDispatch().real_glMultiDrawArraysIndirectEXT(GetU32(GLenum, 0), GetArrayPtr(const void *, 4), GetI32(GLsizei, 2), GetI32(GLsizei, 3));
   else
      WarnNotAvailable("glMultiDrawArraysIndirectEXT");
#else
   WarnNotAvailable("glMultiDrawArraysIndirectEXT");
#endif
}
void Command::run_glMultiDrawElementsIndirectEXT()
{
#if GL_EXT_multi_draw_indirect
   if (m_packet.NumItems() > 7)
      WarnDataNotHandled("glMultiDrawElementsIndirectEXT");
   if (m_replay->GetDeviceCaps().m_has_GL_EXT_multi_draw_indirect && m_replay->GetDispatch().real_glMultiDrawElementsIndirectEXT)
      m_replay->GetDispatch().real_glMultiDrawElementsIndirectEXT(GetU32(GLenum, 0), GetU32(GLenum, 1), GetArrayPtr(const void *, 5), GetI32(GLsizei, 3), GetI32(GLsizei, 4));
   else
      WarnNotAvailable("glMultiDrawElementsIndirectEXT");
#else
   WarnNotAvailable("glMultiDrawElementsIndirectEXT");
#endif
}
void Command::run_glRenderbufferStorageMultisampleEXT()
{
#if GL_EXT_multisampled_render_to_texture
   if (m_packet.NumItems() > 6)
      WarnDataNotHandled("glRenderbufferStorageMultisampleEXT");
   if (m_replay->GetDeviceCaps().m_has_GL_EXT_multisampled_render_to_texture && m_replay->GetDispatch().real_glRenderbufferStorageMultisampleEXT)
      m_replay->GetDispatch().real_glRenderbufferStorageMultisampleEXT(GetU32(GLenum, 0), GetI32(GLsizei, 1), GetU32(GLenum, 2), GetI32(GLsizei, 3), GetI32(GLsizei, 4));
   else
      WarnNotAvailable("glRenderbufferStorageMultisampleEXT");
#else
   WarnNotAvailable("glRenderbufferStorageMultisampleEXT");
#endif
}
void Command::run_glFramebufferTexture2DMultisampleEXT()
{
#if GL_EXT_multisampled_render_to_texture
   if (m_packet.NumItems() > 7)
      WarnDataNotHandled("glFramebufferTexture2DMultisampleEXT");
   if (m_replay->GetDeviceCaps().m_has_GL_EXT_multisampled_render_to_texture && m_replay->GetDispatch().real_glFramebufferTexture2DMultisampleEXT)
      m_replay->GetDispatch().real_glFramebufferTexture2DMultisampleEXT(GetU32(GLenum, 0), GetU32(GLenum, 1), GetU32(GLenum, 2), GetU32(GLuint, 3), GetI32(GLint, 4), GetI32(GLsizei, 5));
   else
      WarnNotAvailable("glFramebufferTexture2DMultisampleEXT");
#else
   WarnNotAvailable("glFramebufferTexture2DMultisampleEXT");
#endif
}
void Command::run_glPolygonOffsetClampEXT()
{
#if GL_EXT_polygon_offset_clamp
   if (m_packet.NumItems() > 4)
      WarnDataNotHandled("glPolygonOffsetClampEXT");
   if (m_replay->GetDeviceCaps().m_has_GL_EXT_polygon_offset_clamp && m_replay->GetDispatch().real_glPolygonOffsetClampEXT)
      m_replay->GetDispatch().real_glPolygonOffsetClampEXT(GetF(GLfloat, 0), GetF(GLfloat, 1), GetF(GLfloat, 2));
   else
      WarnNotAvailable("glPolygonOffsetClampEXT");
#else
   WarnNotAvailable("glPolygonOffsetClampEXT");
#endif
}
void Command::run_glPrimitiveBoundingBoxEXT()
{
#if GL_EXT_primitive_bounding_box
   if (m_packet.NumItems() > 9)
      WarnDataNotHandled("glPrimitiveBoundingBoxEXT");
   if (m_replay->GetDeviceCaps().m_has_GL_EXT_primitive_bounding_box && m_replay->GetDispatch().real_glPrimitiveBoundingBoxEXT)
      m_replay->GetDispatch().real_glPrimitiveBoundingBoxEXT(GetF(GLfloat, 0), GetF(GLfloat, 1), GetF(GLfloat, 2), GetF(GLfloat, 3), GetF(GLfloat, 4), GetF(GLfloat, 5), GetF(GLfloat, 6), GetF(GLfloat, 7));
   else
      WarnNotAvailable("glPrimitiveBoundingBoxEXT");
#else
   WarnNotAvailable("glPrimitiveBoundingBoxEXT");
#endif
}
void Command::run_glGetGraphicsResetStatusEXT()
{
#if GL_EXT_robustness
   if (m_packet.NumItems() > 1)
      WarnDataNotHandled("glGetGraphicsResetStatusEXT");
   if (m_replay->GetDeviceCaps().m_has_GL_EXT_robustness && m_replay->GetDispatch().real_glGetGraphicsResetStatusEXT)
      m_replay->GetDispatch().real_glGetGraphicsResetStatusEXT();
   else
      WarnNotAvailable("glGetGraphicsResetStatusEXT");
#else
   WarnNotAvailable("glGetGraphicsResetStatusEXT");
#endif
}
void Command::run_glReadnPixelsEXT()
{
#if GL_EXT_robustness
   if (m_packet.NumItems() > 9)
      WarnDataNotHandled("glReadnPixelsEXT");
   if (m_replay->GetDeviceCaps().m_has_GL_EXT_robustness && m_replay->GetDispatch().real_glReadnPixelsEXT)
      m_replay->GetDispatch().real_glReadnPixelsEXT(GetI32(GLint, 0), GetI32(GLint, 1), GetI32(GLsizei, 2), GetI32(GLsizei, 3), GetU32(GLenum, 4), GetU32(GLenum, 5), GetI32(GLsizei, 6), dummyvoid);
   else
      WarnNotAvailable("glReadnPixelsEXT");
#else
   WarnNotAvailable("glReadnPixelsEXT");
#endif
}
void Command::run_glGetnUniformfvEXT()
{
#if GL_EXT_robustness
   if (m_packet.NumItems() > 5)
      WarnDataNotHandled("glGetnUniformfvEXT");
   if (m_replay->GetDeviceCaps().m_has_GL_EXT_robustness && m_replay->GetDispatch().real_glGetnUniformfvEXT)
      m_replay->GetDispatch().real_glGetnUniformfvEXT(GetProgram(GLuint, 0), GetUniform(1, 0), GetI32(GLsizei, 2), dummyGLfloat);
   else
      WarnNotAvailable("glGetnUniformfvEXT");
#else
   WarnNotAvailable("glGetnUniformfvEXT");
#endif
}
void Command::run_glGetnUniformivEXT()
{
#if GL_EXT_robustness
   if (m_packet.NumItems() > 5)
      WarnDataNotHandled("glGetnUniformivEXT");
   if (m_replay->GetDeviceCaps().m_has_GL_EXT_robustness && m_replay->GetDispatch().real_glGetnUniformivEXT)
      m_replay->GetDispatch().real_glGetnUniformivEXT(GetProgram(GLuint, 0), GetUniform(1, 0), GetI32(GLsizei, 2), dummyGLint);
   else
      WarnNotAvailable("glGetnUniformivEXT");
#else
   WarnNotAvailable("glGetnUniformivEXT");
#endif
}
void Command::run_glPatchParameteriEXT()
{
#if GL_EXT_tessellation_shader
   if (m_packet.NumItems() > 3)
      WarnDataNotHandled("glPatchParameteriEXT");
   if (m_replay->GetDeviceCaps().m_has_GL_EXT_tessellation_shader && m_replay->GetDispatch().real_glPatchParameteriEXT)
      m_replay->GetDispatch().real_glPatchParameteriEXT(GetU32(GLenum, 0), GetI32(GLint, 1));
   else
      WarnNotAvailable("glPatchParameteriEXT");
#else
   WarnNotAvailable("glPatchParameteriEXT");
#endif
}
void Command::run_glTexParameterIivEXT()
{
#if GL_EXT_texture_border_clamp
   if (m_packet.NumItems() > 5)
      WarnDataNotHandled("glTexParameterIivEXT");
   if (m_replay->GetDeviceCaps().m_has_GL_EXT_texture_border_clamp && m_replay->GetDispatch().real_glTexParameterIivEXT)
      m_replay->GetDispatch().real_glTexParameterIivEXT(GetU32(GLenum, 0), GetU32(GLenum, 1), GetArrayPtr(const GLint *, 3));
   else
      WarnNotAvailable("glTexParameterIivEXT");
#else
   WarnNotAvailable("glTexParameterIivEXT");
#endif
}
void Command::run_glTexParameterIuivEXT()
{
#if GL_EXT_texture_border_clamp
   if (m_packet.NumItems() > 5)
      WarnDataNotHandled("glTexParameterIuivEXT");
   if (m_replay->GetDeviceCaps().m_has_GL_EXT_texture_border_clamp && m_replay->GetDispatch().real_glTexParameterIuivEXT)
      m_replay->GetDispatch().real_glTexParameterIuivEXT(GetU32(GLenum, 0), GetU32(GLenum, 1), GetArrayPtr(const GLuint *, 3));
   else
      WarnNotAvailable("glTexParameterIuivEXT");
#else
   WarnNotAvailable("glTexParameterIuivEXT");
#endif
}
void Command::run_glGetTexParameterIivEXT()
{
#if GL_EXT_texture_border_clamp
   if (m_packet.NumItems() > 4)
      WarnDataNotHandled("glGetTexParameterIivEXT");
   if (m_replay->GetDeviceCaps().m_has_GL_EXT_texture_border_clamp && m_replay->GetDispatch().real_glGetTexParameterIivEXT)
      m_replay->GetDispatch().real_glGetTexParameterIivEXT(GetU32(GLenum, 0), GetU32(GLenum, 1), dummyGLint);
   else
      WarnNotAvailable("glGetTexParameterIivEXT");
#else
   WarnNotAvailable("glGetTexParameterIivEXT");
#endif
}
void Command::run_glGetTexParameterIuivEXT()
{
#if GL_EXT_texture_border_clamp
   if (m_packet.NumItems() > 4)
      WarnDataNotHandled("glGetTexParameterIuivEXT");
   if (m_replay->GetDeviceCaps().m_has_GL_EXT_texture_border_clamp && m_replay->GetDispatch().real_glGetTexParameterIuivEXT)
      m_replay->GetDispatch().real_glGetTexParameterIuivEXT(GetU32(GLenum, 0), GetU32(GLenum, 1), dummyGLuint);
   else
      WarnNotAvailable("glGetTexParameterIuivEXT");
#else
   WarnNotAvailable("glGetTexParameterIuivEXT");
#endif
}
void Command::run_glSamplerParameterIivEXT()
{
#if GL_EXT_texture_border_clamp
   if (m_packet.NumItems() > 5)
      WarnDataNotHandled("glSamplerParameterIivEXT");
   if (m_replay->GetDeviceCaps().m_has_GL_EXT_texture_border_clamp && m_replay->GetDispatch().real_glSamplerParameterIivEXT)
      m_replay->GetDispatch().real_glSamplerParameterIivEXT(GetSampler(GLuint, 0), GetU32(GLenum, 1), GetArrayPtr(const GLint *, 3));
   else
      WarnNotAvailable("glSamplerParameterIivEXT");
#else
   WarnNotAvailable("glSamplerParameterIivEXT");
#endif
}
void Command::run_glSamplerParameterIuivEXT()
{
#if GL_EXT_texture_border_clamp
   if (m_packet.NumItems() > 5)
      WarnDataNotHandled("glSamplerParameterIuivEXT");
   if (m_replay->GetDeviceCaps().m_has_GL_EXT_texture_border_clamp && m_replay->GetDispatch().real_glSamplerParameterIuivEXT)
      m_replay->GetDispatch().real_glSamplerParameterIuivEXT(GetSampler(GLuint, 0), GetU32(GLenum, 1), GetArrayPtr(const GLuint *, 3));
   else
      WarnNotAvailable("glSamplerParameterIuivEXT");
#else
   WarnNotAvailable("glSamplerParameterIuivEXT");
#endif
}
void Command::run_glGetSamplerParameterIivEXT()
{
#if GL_EXT_texture_border_clamp
   if (m_packet.NumItems() > 4)
      WarnDataNotHandled("glGetSamplerParameterIivEXT");
   if (m_replay->GetDeviceCaps().m_has_GL_EXT_texture_border_clamp && m_replay->GetDispatch().real_glGetSamplerParameterIivEXT)
      m_replay->GetDispatch().real_glGetSamplerParameterIivEXT(GetSampler(GLuint, 0), GetU32(GLenum, 1), dummyGLint);
   else
      WarnNotAvailable("glGetSamplerParameterIivEXT");
#else
   WarnNotAvailable("glGetSamplerParameterIivEXT");
#endif
}
void Command::run_glGetSamplerParameterIuivEXT()
{
#if GL_EXT_texture_border_clamp
   if (m_packet.NumItems() > 4)
      WarnDataNotHandled("glGetSamplerParameterIuivEXT");
   if (m_replay->GetDeviceCaps().m_has_GL_EXT_texture_border_clamp && m_replay->GetDispatch().real_glGetSamplerParameterIuivEXT)
      m_replay->GetDispatch().real_glGetSamplerParameterIuivEXT(GetSampler(GLuint, 0), GetU32(GLenum, 1), dummyGLuint);
   else
      WarnNotAvailable("glGetSamplerParameterIuivEXT");
#else
   WarnNotAvailable("glGetSamplerParameterIuivEXT");
#endif
}
void Command::run_glTexBufferEXT()
{
#if GL_EXT_texture_buffer
   if (m_packet.NumItems() > 4)
      WarnDataNotHandled("glTexBufferEXT");
   if (m_replay->GetDeviceCaps().m_has_GL_EXT_texture_buffer && m_replay->GetDispatch().real_glTexBufferEXT)
      m_replay->GetDispatch().real_glTexBufferEXT(GetU32(GLenum, 0), GetU32(GLenum, 1), GetU32(GLuint, 2));
   else
      WarnNotAvailable("glTexBufferEXT");
#else
   WarnNotAvailable("glTexBufferEXT");
#endif
}
void Command::run_glTexBufferRangeEXT()
{
#if GL_EXT_texture_buffer
   if (m_packet.NumItems() > 6)
      WarnDataNotHandled("glTexBufferRangeEXT");
   if (m_replay->GetDeviceCaps().m_has_GL_EXT_texture_buffer && m_replay->GetDispatch().real_glTexBufferRangeEXT)
      m_replay->GetDispatch().real_glTexBufferRangeEXT(GetU32(GLenum, 0), GetU32(GLenum, 1), GetU32(GLuint, 2), GetPtr(GLintptr, 3), GetPtr(GLsizeiptr, 4));
   else
      WarnNotAvailable("glTexBufferRangeEXT");
#else
   WarnNotAvailable("glTexBufferRangeEXT");
#endif
}
