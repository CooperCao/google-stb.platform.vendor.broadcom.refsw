
	#include video_tex_pre.bfx

	#include video_vertex_shader.bfx

	FRAGMENT_SHADER
	{
	   precision mediump float;

	   uniform sampler2D u_tex;
	   uniform vec2      u_texelSize;
	   varying vec2      v_texCoord;

	   #include video_tex_funcs.bfx

	   #define TEX(a, b) yuv_709_to_rgb(texture2D(a, b).rgb)

	   void main()
	   {
			vec3 sample[9];
			float lx = v_texCoord.x - u_texelSize.x;
			float rx = v_texCoord.x + u_texelSize.x;
			float by = v_texCoord.y - u_texelSize.y;
			float ty = v_texCoord.y + u_texelSize.y;

			sample[0] = TEX(u_tex, vec2(lx, by));
			sample[1] = TEX(u_tex, vec2(v_texCoord.x, by));
			sample[2] = TEX(u_tex, vec2(rx, by));
			sample[3] = TEX(u_tex, vec2(lx, v_texCoord.y));
			// sample[4] = TEX(u_tex, v_texCoord);
			sample[5] = TEX(u_tex, vec2(rx, v_texCoord.y));
			sample[6] = TEX(u_tex, vec2(lx, ty));
			sample[7] = TEX(u_tex, vec2(v_texCoord.x, ty));
			sample[8] = TEX(u_tex, vec2(rx, ty));

			//    -1 -2 -1       1 0 -1 
			// H = 0  0  0   V = 2 0 -2
			//     1  2  1       1 0 -1
			//
			// result = sqrt(H^2 + V^2)

			vec3 horizEdge = sample[2] + (2.0 * sample[5]) + sample[8] -
								(sample[0] + (2.0 * sample[3]) + sample[6]);

			vec3 vertEdge = sample[0] + (2.0 * sample[1]) + sample[2] -
							(sample[6] + (2.0 * sample[7]) + sample[8]);

			gl_FragColor = vec4(sqrt((horizEdge * horizEdge) + (vertEdge * vertEdge)), 1.0);
		}
	}

	#include video_tex_post.bfx

