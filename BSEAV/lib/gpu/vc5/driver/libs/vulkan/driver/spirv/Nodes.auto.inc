/******************************************************************************************************
 * Copyright (C) 2017 Broadcom. The term "Broadcom" refers to Broadcom Limited and/or its subsidiaries.
 *****************************************************************************************************/

/* Auto-generated by libs/vulkan/scripts/spirv/spirv.py */
/*                   DO NOT HAND EDIT                   */


class NodeNop : public Node
{
public:
   NodeNop(Extractor &ext)
      : Node()
   {
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpNop;
   }

private:
};

class NodeUndef : public Node
{
public:
   NodeUndef(Extractor &ext)
      : Node()
   {
      ext >> m_resultType >> m_resultId;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpUndef;
   }

private:
};

class NodeSourceContinued : public Node
{
public:
   NodeSourceContinued(Extractor &ext)
      : Node()
      , m_continuedSource(ext.GetAllocator())
   {
      ext >> m_continuedSource;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const spv::string &GetContinuedSource() const
   {
      return m_continuedSource;
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpSourceContinued;
   }

private:
   spv::string    m_continuedSource;
};

class NodeSource : public Node
{
public:
   NodeSource(Extractor &ext)
      : Node()
      , m_source(ext.GetAllocator())
   {
      ext >> m_sourceLanguage >> m_version >> m_file >> m_source;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   spv::SourceLanguage GetSourceLanguage() const
   {
      return m_sourceLanguage;
   }

   uint32_t GetVersion() const
   {
      return m_version;
   }

   const Optional<NodeConstPtr> &GetFile() const
   {
      return m_file;
   }

   const spv::string &GetSource() const
   {
      return m_source;
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpSource;
   }

private:
   spv::SourceLanguage       m_sourceLanguage;
   uint32_t                  m_version;
   Optional<NodeConstPtr>    m_file;
   spv::string               m_source;
};

class NodeSourceExtension : public Node
{
public:
   NodeSourceExtension(Extractor &ext)
      : Node()
      , m_extension(ext.GetAllocator())
   {
      ext >> m_extension;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const spv::string &GetExtension() const
   {
      return m_extension;
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpSourceExtension;
   }

private:
   spv::string    m_extension;
};

class NodeName : public Node
{
public:
   NodeName(Extractor &ext)
      : Node()
      , m_name(ext.GetAllocator())
   {
      ext >> m_target >> m_name;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetTarget() const
   {
      return m_target;
   }

   const spv::string &GetName() const
   {
      return m_name;
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpName;
   }

private:
   NodeConstPtr    m_target;
   spv::string     m_name;
};

class NodeMemberName : public Node
{
public:
   NodeMemberName(Extractor &ext)
      : Node()
      , m_name(ext.GetAllocator())
   {
      ext >> m_type >> m_member >> m_name;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetType() const
   {
      return m_type;
   }

   uint32_t GetMember() const
   {
      return m_member;
   }

   const spv::string &GetName() const
   {
      return m_name;
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpMemberName;
   }

private:
   NodeConstPtr    m_type;
   uint32_t        m_member;
   spv::string     m_name;
};

class NodeString : public Node
{
public:
   NodeString(Extractor &ext)
      : Node()
      , m_string(ext.GetAllocator())
   {
      ext >> m_resultId >> m_string;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const spv::string &GetString() const
   {
      return m_string;
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpString;
   }

private:
   spv::string    m_string;
};

class NodeLine : public Node
{
public:
   NodeLine(Extractor &ext)
      : Node()
   {
      ext >> m_file >> m_line >> m_column;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetFile() const
   {
      return m_file;
   }

   uint32_t GetLine() const
   {
      return m_line;
   }

   uint32_t GetColumn() const
   {
      return m_column;
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpLine;
   }

private:
   NodeConstPtr    m_file;
   uint32_t        m_line;
   uint32_t        m_column;
};

class NodeExtension : public Node
{
public:
   NodeExtension(Extractor &ext)
      : Node()
      , m_name(ext.GetAllocator())
   {
      ext >> m_name;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const spv::string &GetName() const
   {
      return m_name;
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpExtension;
   }

private:
   spv::string    m_name;
};

class NodeExtInstImport : public Node
{
public:
   NodeExtInstImport(Extractor &ext)
      : Node()
      , m_name(ext.GetAllocator())
   {
      ext >> m_resultId >> m_name;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const spv::string &GetName() const
   {
      return m_name;
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpExtInstImport;
   }

private:
   spv::string    m_name;
};

class NodeExtInst : public Node
{
public:
   NodeExtInst(Extractor &ext)
      : Node()
      , m_operands(ext.GetAllocator())
   {
      ext >> m_resultType >> m_resultId >> m_set >> m_instruction >> m_operands;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetSet() const
   {
      return m_set;
   }

   uint32_t GetInstruction() const
   {
      return m_instruction;
   }

   const spv::vector<NodeConstPtr> &GetOperands() const
   {
      return m_operands;
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpExtInst;
   }

private:
   NodeConstPtr                 m_set;
   uint32_t                     m_instruction;
   spv::vector<NodeConstPtr>    m_operands;
};

class NodeMemoryModel : public Node
{
public:
   NodeMemoryModel(Extractor &ext)
      : Node()
   {
      ext >> m_addressingModel >> m_memoryModel;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   spv::AddressingModel GetAddressingModel() const
   {
      return m_addressingModel;
   }

   spv::MemoryModel GetMemoryModel() const
   {
      return m_memoryModel;
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpMemoryModel;
   }

private:
   spv::AddressingModel    m_addressingModel;
   spv::MemoryModel        m_memoryModel;
};

class NodeEntryPoint : public Node
{
public:
   NodeEntryPoint(Extractor &ext)
      : Node()
      , m_name(ext.GetAllocator())
      , m_interface(ext.GetAllocator())
      , m_data(spv::ModuleAllocator<DataEntryPoint>(ext.GetAllocator()).New(ext.GetAllocator()))
   {
      ext >> m_executionModel >> m_entryPoint >> m_name >> m_interface;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   spv::ExecutionModel GetExecutionModel() const
   {
      return m_executionModel;
   }

   const NodeConstPtr &GetEntryPoint() const
   {
      return m_entryPoint;
   }

   const spv::string &GetName() const
   {
      return m_name;
   }

   const spv::vector<NodeConstPtr> &GetInterface() const
   {
      return m_interface;
   }

   DataEntryPoint *GetData() { return m_data; }
   DataEntryPoint *GetData() const { return m_data; }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpEntryPoint;
   }

private:
   spv::ExecutionModel          m_executionModel;
   NodeConstPtr                 m_entryPoint;
   spv::string                  m_name;
   spv::vector<NodeConstPtr>    m_interface;

   DataEntryPoint *m_data;
};

class NodeCapability : public Node
{
public:
   NodeCapability(Extractor &ext)
      : Node()
   {
      ext >> m_capability;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   spv::Capability GetCapability() const
   {
      return m_capability;
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpCapability;
   }

private:
   spv::Capability    m_capability;
};

class NodeTypeVoid : public NodeType
{
public:
   NodeTypeVoid(Extractor &ext)
      : NodeType()
   {
      ext >> m_resultId;
   }

   void AcceptType(NodeTypeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpTypeVoid;
   }

private:
};

class NodeTypeBool : public NodeType
{
public:
   NodeTypeBool(Extractor &ext)
      : NodeType()
   {
      ext >> m_resultId;
   }

   void AcceptType(NodeTypeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpTypeBool;
   }

private:
};

class NodeTypeInt : public NodeType
{
public:
   NodeTypeInt(Extractor &ext)
      : NodeType()
   {
      ext >> m_resultId >> m_width >> m_signedness;
   }

   void AcceptType(NodeTypeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   uint32_t GetWidth() const
   {
      return m_width;
   }

   uint32_t GetSignedness() const
   {
      return m_signedness;
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpTypeInt;
   }

private:
   uint32_t    m_width;
   uint32_t    m_signedness;
};

class NodeTypeFloat : public NodeType
{
public:
   NodeTypeFloat(Extractor &ext)
      : NodeType()
   {
      ext >> m_resultId >> m_width;
   }

   void AcceptType(NodeTypeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   uint32_t GetWidth() const
   {
      return m_width;
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpTypeFloat;
   }

private:
   uint32_t    m_width;
};

class NodeTypeVector : public NodeType
{
public:
   NodeTypeVector(Extractor &ext)
      : NodeType()
   {
      ext >> m_resultId >> m_componentType >> m_componentCount;
   }

   void AcceptType(NodeTypeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetComponentType() const
   {
      return m_componentType;
   }

   uint32_t GetComponentCount() const
   {
      return m_componentCount;
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpTypeVector;
   }

private:
   NodeConstPtr    m_componentType;
   uint32_t        m_componentCount;
};

class NodeTypeMatrix : public NodeType
{
public:
   NodeTypeMatrix(Extractor &ext)
      : NodeType()
   {
      ext >> m_resultId >> m_columnType >> m_columnCount;
   }

   void AcceptType(NodeTypeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetColumnType() const
   {
      return m_columnType;
   }

   uint32_t GetColumnCount() const
   {
      return m_columnCount;
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpTypeMatrix;
   }

   uint32_t GetRowCount() const
   {
      auto columnType = GetColumnType()->As<const NodeTypeVector *>();

      return columnType->GetComponentCount();
   }

   struct Size
   {
      Size(uint32_t cols, uint32_t rows) :
         cols(cols),
         rows(rows)
      {}

      uint32_t cols;
      uint32_t rows;
   };

   Size GetSize() const
   {
      return Size(GetColumnCount(), GetRowCount());
   }

private:
   NodeConstPtr    m_columnType;
   uint32_t        m_columnCount;
};

class NodeTypeImage : public NodeType
{
public:
   NodeTypeImage(Extractor &ext)
      : NodeType()
   {
      ext >> m_resultId >> m_sampledType >> m_dim >> m_depth >> m_arrayed >> m_mS >> m_sampled >> m_imageFormat >> m_accessQualifier;
   }

   void AcceptType(NodeTypeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetSampledType() const
   {
      return m_sampledType;
   }

   spv::Dim GetDim() const
   {
      return m_dim;
   }

   uint32_t GetDepth() const
   {
      return m_depth;
   }

   uint32_t GetArrayed() const
   {
      return m_arrayed;
   }

   uint32_t GetMS() const
   {
      return m_mS;
   }

   uint32_t GetSampled() const
   {
      return m_sampled;
   }

   spv::ImageFormat GetImageFormat() const
   {
      return m_imageFormat;
   }

   const Optional<spv::AccessQualifier> &GetAccessQualifier() const
   {
      return m_accessQualifier;
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpTypeImage;
   }

private:
   NodeConstPtr                      m_sampledType;
   spv::Dim                          m_dim;
   uint32_t                          m_depth;
   uint32_t                          m_arrayed;
   uint32_t                          m_mS;
   uint32_t                          m_sampled;
   spv::ImageFormat                  m_imageFormat;
   Optional<spv::AccessQualifier>    m_accessQualifier;
};

class NodeTypeSampler : public NodeType
{
public:
   NodeTypeSampler(Extractor &ext)
      : NodeType()
   {
      ext >> m_resultId;
   }

   void AcceptType(NodeTypeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpTypeSampler;
   }

private:
};

class NodeTypeSampledImage : public NodeType
{
public:
   NodeTypeSampledImage(Extractor &ext)
      : NodeType()
   {
      ext >> m_resultId >> m_imageType;
   }

   void AcceptType(NodeTypeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetImageType() const
   {
      return m_imageType;
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpTypeSampledImage;
   }

private:
   NodeConstPtr    m_imageType;
};

class NodeTypeStruct : public NodeType
{
public:
   NodeTypeStruct(Extractor &ext)
      : NodeType()
      , m_memberstype(ext.GetAllocator())
      , m_data(spv::ModuleAllocator<DataTypeStruct>(ext.GetAllocator()).New(ext.GetAllocator()))
   {
      ext >> m_resultId >> m_memberstype;
   }

   void AcceptType(NodeTypeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const spv::vector<NodeConstPtr> &GetMemberstype() const
   {
      return m_memberstype;
   }

   DataTypeStruct *GetData() { return m_data; }
   DataTypeStruct *GetData() const { return m_data; }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpTypeStruct;
   }

private:
   spv::vector<NodeConstPtr>    m_memberstype;

   DataTypeStruct *m_data;
};

class NodeTypePointer : public NodeType
{
public:
   NodeTypePointer(Extractor &ext)
      : NodeType()
   {
      ext >> m_resultId >> m_storageClass >> m_type;
   }

   void AcceptType(NodeTypeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   spv::StorageClass GetStorageClass() const
   {
      return m_storageClass;
   }

   const NodeConstPtr &GetType() const
   {
      return m_type;
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpTypePointer;
   }

private:
   spv::StorageClass    m_storageClass;
   NodeConstPtr         m_type;
};

class NodeTypeFunction : public NodeType
{
public:
   NodeTypeFunction(Extractor &ext)
      : NodeType()
      , m_parametersType(ext.GetAllocator())
   {
      ext >> m_resultId >> m_returnType >> m_parametersType;
   }

   void AcceptType(NodeTypeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetReturnType() const
   {
      return m_returnType;
   }

   const spv::vector<NodeConstPtr> &GetParametersType() const
   {
      return m_parametersType;
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpTypeFunction;
   }

private:
   NodeConstPtr                 m_returnType;
   spv::vector<NodeConstPtr>    m_parametersType;
};

class NodeConstantTrue : public Node
{
public:
   NodeConstantTrue(Extractor &ext)
      : Node()
   {
      ext >> m_resultType >> m_resultId;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpConstantTrue;
   }

private:
};

class NodeConstantFalse : public Node
{
public:
   NodeConstantFalse(Extractor &ext)
      : Node()
   {
      ext >> m_resultType >> m_resultId;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpConstantFalse;
   }

private:
};

class NodeConstant : public Node
{
public:
   NodeConstant(Extractor &ext)
      : Node()
   {
      ext >> m_resultType >> m_resultId >> m_value;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   uint32_t GetValue() const
   {
      return m_value;
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpConstant;
   }

private:
   uint32_t    m_value;
};

class NodeConstantComposite : public Node
{
public:
   NodeConstantComposite(Extractor &ext)
      : Node()
      , m_constituents(ext.GetAllocator())
   {
      ext >> m_resultType >> m_resultId >> m_constituents;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const spv::vector<NodeConstPtr> &GetConstituents() const
   {
      return m_constituents;
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpConstantComposite;
   }

private:
   spv::vector<NodeConstPtr>    m_constituents;
};

class NodeConstantNull : public Node
{
public:
   NodeConstantNull(Extractor &ext)
      : Node()
   {
      ext >> m_resultType >> m_resultId;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpConstantNull;
   }

private:
};

class NodeSpecConstantTrue : public Node
{
public:
   NodeSpecConstantTrue(Extractor &ext)
      : Node()
   {
      ext >> m_resultType >> m_resultId;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpSpecConstantTrue;
   }

private:
};

class NodeSpecConstantFalse : public Node
{
public:
   NodeSpecConstantFalse(Extractor &ext)
      : Node()
   {
      ext >> m_resultType >> m_resultId;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpSpecConstantFalse;
   }

private:
};

class NodeSpecConstant : public Node
{
public:
   NodeSpecConstant(Extractor &ext)
      : Node()
   {
      ext >> m_resultType >> m_resultId >> m_value;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   uint32_t GetValue() const
   {
      return m_value;
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpSpecConstant;
   }

private:
   uint32_t    m_value;
};

class NodeSpecConstantComposite : public Node
{
public:
   NodeSpecConstantComposite(Extractor &ext)
      : Node()
      , m_constituents(ext.GetAllocator())
   {
      ext >> m_resultType >> m_resultId >> m_constituents;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const spv::vector<NodeConstPtr> &GetConstituents() const
   {
      return m_constituents;
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpSpecConstantComposite;
   }

private:
   spv::vector<NodeConstPtr>    m_constituents;
};

class NodeFunction : public Node
{
public:
   NodeFunction(Extractor &ext)
      : Node()
      , m_data(spv::ModuleAllocator<DataFunction>(ext.GetAllocator()).New(ext.GetAllocator()))
   {
      ext >> m_resultType >> m_resultId >> m_functionControl >> m_functionType;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   spv::FunctionControlMask GetFunctionControl() const
   {
      return m_functionControl;
   }

   const NodeConstPtr &GetFunctionType() const
   {
      return m_functionType;
   }

   DataFunction *GetData() { return m_data; }
   DataFunction *GetData() const { return m_data; }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpFunction;
   }

private:
   spv::FunctionControlMask    m_functionControl;
   NodeConstPtr                m_functionType;

   DataFunction *m_data;
};

class NodeFunctionParameter : public Node
{
public:
   NodeFunctionParameter(Extractor &ext)
      : Node()
   {
      ext >> m_resultType >> m_resultId;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpFunctionParameter;
   }

private:
};

class NodeFunctionEnd : public Node
{
public:
   NodeFunctionEnd(Extractor &ext)
      : Node()
   {
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpFunctionEnd;
   }

private:
};

class NodeFunctionCall : public Node
{
public:
   NodeFunctionCall(Extractor &ext)
      : Node()
      , m_arguments(ext.GetAllocator())
   {
      ext >> m_resultType >> m_resultId >> m_function >> m_arguments;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetFunction() const
   {
      return m_function;
   }

   const spv::vector<NodeConstPtr> &GetArguments() const
   {
      return m_arguments;
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpFunctionCall;
   }

private:
   NodeConstPtr                 m_function;
   spv::vector<NodeConstPtr>    m_arguments;
};

class NodeVariable : public Node
{
public:
   NodeVariable(Extractor &ext)
      : Node()
      , m_data(spv::ModuleAllocator<DataVariable>(ext.GetAllocator()).New(ext.GetAllocator()))
   {
      ext >> m_resultType >> m_resultId >> m_storageClass >> m_initializer;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   spv::StorageClass GetStorageClass() const
   {
      return m_storageClass;
   }

   const Optional<NodeConstPtr> &GetInitializer() const
   {
      return m_initializer;
   }

   DataVariable *GetData() { return m_data; }
   DataVariable *GetData() const { return m_data; }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpVariable;
   }

   const NodeType *TypeOfTarget() const
   {
      auto  pointerType = m_resultType->As<const NodeTypePointer *>();
      return pointerType->GetType()->As<const NodeType *>();
   }

private:
   spv::StorageClass         m_storageClass;
   Optional<NodeConstPtr>    m_initializer;

   DataVariable *m_data;
};

class NodeImageTexelPointer : public Node
{
public:
   NodeImageTexelPointer(Extractor &ext)
      : Node()
   {
      ext >> m_resultType >> m_resultId >> m_image >> m_coordinate >> m_sample;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetImage() const
   {
      return m_image;
   }

   const NodeConstPtr &GetCoordinate() const
   {
      return m_coordinate;
   }

   const NodeConstPtr &GetSample() const
   {
      return m_sample;
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpImageTexelPointer;
   }

private:
   NodeConstPtr    m_image;
   NodeConstPtr    m_coordinate;
   NodeConstPtr    m_sample;
};

class NodeLoad : public Node
{
public:
   NodeLoad(Extractor &ext)
      : Node()
   {
      ext >> m_resultType >> m_resultId >> m_pointer >> m_memoryAccess;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetPointer() const
   {
      return m_pointer;
   }

   const Optional<uint32_t> &GetMemoryAccess() const
   {
      return m_memoryAccess;
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpLoad;
   }

private:
   NodeConstPtr          m_pointer;
   Optional<uint32_t>    m_memoryAccess;
};

class NodeStore : public Node
{
public:
   NodeStore(Extractor &ext)
      : Node()
   {
      ext >> m_pointer >> m_object >> m_memoryAccess;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetPointer() const
   {
      return m_pointer;
   }

   const NodeConstPtr &GetObject() const
   {
      return m_object;
   }

   const Optional<uint32_t> &GetMemoryAccess() const
   {
      return m_memoryAccess;
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpStore;
   }

private:
   NodeConstPtr          m_pointer;
   NodeConstPtr          m_object;
   Optional<uint32_t>    m_memoryAccess;
};

class NodeCopyMemory : public Node
{
public:
   NodeCopyMemory(Extractor &ext)
      : Node()
   {
      ext >> m_target >> m_source >> m_memoryAccess;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetTarget() const
   {
      return m_target;
   }

   const NodeConstPtr &GetSource() const
   {
      return m_source;
   }

   const Optional<uint32_t> &GetMemoryAccess() const
   {
      return m_memoryAccess;
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpCopyMemory;
   }

private:
   NodeConstPtr          m_target;
   NodeConstPtr          m_source;
   Optional<uint32_t>    m_memoryAccess;
};

class NodeArrayLength : public Node
{
public:
   NodeArrayLength(Extractor &ext)
      : Node()
   {
      ext >> m_resultType >> m_resultId >> m_structure >> m_arraymember;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetStructure() const
   {
      return m_structure;
   }

   uint32_t GetArraymember() const
   {
      return m_arraymember;
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpArrayLength;
   }

private:
   NodeConstPtr    m_structure;
   uint32_t        m_arraymember;
};

class NodeDecorate : public Node
{
public:
   NodeDecorate(Extractor &ext)
      : Node()
   {
      ext >> m_target >> m_decoration;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetTarget() const
   {
      return m_target;
   }

   const Decoration &GetDecoration() const
   {
      return m_decoration;
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpDecorate;
   }

private:
   NodeConstPtr    m_target;
   Decoration      m_decoration;
};

class NodeMemberDecorate : public Node
{
public:
   NodeMemberDecorate(Extractor &ext)
      : Node()
      , m_data(spv::ModuleAllocator<DataMemberDecorate>(ext.GetAllocator()).New(ext.GetAllocator()))
   {
      ext >> m_structureType >> m_member >> m_decoration;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetStructureType() const
   {
      return m_structureType;
   }

   uint32_t GetMember() const
   {
      return m_member;
   }

   const Decoration &GetDecoration() const
   {
      return m_decoration;
   }

   DataMemberDecorate *GetData() { return m_data; }
   DataMemberDecorate *GetData() const { return m_data; }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpMemberDecorate;
   }

private:
   NodeConstPtr    m_structureType;
   uint32_t        m_member;
   Decoration      m_decoration;

   DataMemberDecorate *m_data;
};

class NodeDecorationGroup : public Node
{
public:
   NodeDecorationGroup(Extractor &ext)
      : Node()
   {
      ext >> m_resultId;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpDecorationGroup;
   }

private:
};

class NodeGroupDecorate : public Node
{
public:
   NodeGroupDecorate(Extractor &ext)
      : Node()
      , m_targets(ext.GetAllocator())
   {
      ext >> m_decorationGroup >> m_targets;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetDecorationGroup() const
   {
      return m_decorationGroup;
   }

   const spv::vector<NodeConstPtr> &GetTargets() const
   {
      return m_targets;
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpGroupDecorate;
   }

private:
   NodeConstPtr                 m_decorationGroup;
   spv::vector<NodeConstPtr>    m_targets;
};

class NodeGroupMemberDecorate : public Node
{
public:
   NodeGroupMemberDecorate(Extractor &ext)
      : Node()
      , m_targets(ext.GetAllocator())
   {
      ext >> m_decorationGroup >> m_targets;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetDecorationGroup() const
   {
      return m_decorationGroup;
   }

   const spv::vector<std::pair<NodeConstPtr, uint32_t>> &GetTargets() const
   {
      return m_targets;
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpGroupMemberDecorate;
   }

private:
   NodeConstPtr                                      m_decorationGroup;
   spv::vector<std::pair<NodeConstPtr, uint32_t>>    m_targets;
};

class NodeVectorExtractDynamic : public Node
{
public:
   NodeVectorExtractDynamic(Extractor &ext)
      : Node()
   {
      ext >> m_resultType >> m_resultId >> m_vector >> m_index;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetVector() const
   {
      return m_vector;
   }

   const NodeConstPtr &GetIndex() const
   {
      return m_index;
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpVectorExtractDynamic;
   }

private:
   NodeConstPtr    m_vector;
   NodeConstPtr    m_index;
};

class NodeVectorInsertDynamic : public Node
{
public:
   NodeVectorInsertDynamic(Extractor &ext)
      : Node()
   {
      ext >> m_resultType >> m_resultId >> m_vector >> m_component >> m_index;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetVector() const
   {
      return m_vector;
   }

   const NodeConstPtr &GetComponent() const
   {
      return m_component;
   }

   const NodeConstPtr &GetIndex() const
   {
      return m_index;
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpVectorInsertDynamic;
   }

private:
   NodeConstPtr    m_vector;
   NodeConstPtr    m_component;
   NodeConstPtr    m_index;
};

class NodeVectorShuffle : public Node
{
public:
   NodeVectorShuffle(Extractor &ext)
      : Node()
      , m_components(ext.GetAllocator())
   {
      ext >> m_resultType >> m_resultId >> m_vector1 >> m_vector2 >> m_components;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetVector1() const
   {
      return m_vector1;
   }

   const NodeConstPtr &GetVector2() const
   {
      return m_vector2;
   }

   const spv::vector<uint32_t> &GetComponents() const
   {
      return m_components;
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpVectorShuffle;
   }

private:
   NodeConstPtr             m_vector1;
   NodeConstPtr             m_vector2;
   spv::vector<uint32_t>    m_components;
};

class NodeCompositeConstruct : public Node
{
public:
   NodeCompositeConstruct(Extractor &ext)
      : Node()
      , m_constituents(ext.GetAllocator())
   {
      ext >> m_resultType >> m_resultId >> m_constituents;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const spv::vector<NodeConstPtr> &GetConstituents() const
   {
      return m_constituents;
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpCompositeConstruct;
   }

private:
   spv::vector<NodeConstPtr>    m_constituents;
};

class NodeCompositeExtract : public Node
{
public:
   NodeCompositeExtract(Extractor &ext)
      : Node()
      , m_indices(ext.GetAllocator())
   {
      ext >> m_resultType >> m_resultId >> m_composite >> m_indices;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetComposite() const
   {
      return m_composite;
   }

   const spv::vector<uint32_t> &GetIndices() const
   {
      return m_indices;
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpCompositeExtract;
   }

private:
   NodeConstPtr             m_composite;
   spv::vector<uint32_t>    m_indices;
};

class NodeCompositeInsert : public Node
{
public:
   NodeCompositeInsert(Extractor &ext)
      : Node()
      , m_indices(ext.GetAllocator())
   {
      ext >> m_resultType >> m_resultId >> m_object >> m_composite >> m_indices;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetObject() const
   {
      return m_object;
   }

   const NodeConstPtr &GetComposite() const
   {
      return m_composite;
   }

   const spv::vector<uint32_t> &GetIndices() const
   {
      return m_indices;
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpCompositeInsert;
   }

private:
   NodeConstPtr             m_object;
   NodeConstPtr             m_composite;
   spv::vector<uint32_t>    m_indices;
};

class NodeCopyObject : public Node
{
public:
   NodeCopyObject(Extractor &ext)
      : Node()
   {
      ext >> m_resultType >> m_resultId >> m_operand;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetOperand() const
   {
      return m_operand;
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpCopyObject;
   }

private:
   NodeConstPtr    m_operand;
};

class NodeTranspose : public Node
{
public:
   NodeTranspose(Extractor &ext)
      : Node()
   {
      ext >> m_resultType >> m_resultId >> m_matrix;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetMatrix() const
   {
      return m_matrix;
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpTranspose;
   }

private:
   NodeConstPtr    m_matrix;
};

class NodeSampledImage : public Node
{
public:
   NodeSampledImage(Extractor &ext)
      : Node()
   {
      ext >> m_resultType >> m_resultId >> m_image >> m_sampler;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetImage() const
   {
      return m_image;
   }

   const NodeConstPtr &GetSampler() const
   {
      return m_sampler;
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpSampledImage;
   }

private:
   NodeConstPtr    m_image;
   NodeConstPtr    m_sampler;
};

class NodeImageSampleImplicitLod : public Node
{
public:
   NodeImageSampleImplicitLod(Extractor &ext)
      : Node()
   {
      ext >> m_resultType >> m_resultId >> m_sampledImage >> m_coordinate >> m_imageOperands;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetSampledImage() const
   {
      return m_sampledImage;
   }

   const NodeConstPtr &GetCoordinate() const
   {
      return m_coordinate;
   }

   const Optional<ImageOperands> &GetImageOperands() const
   {
      return m_imageOperands;
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpImageSampleImplicitLod;
   }

private:
   NodeConstPtr               m_sampledImage;
   NodeConstPtr               m_coordinate;
   Optional<ImageOperands>    m_imageOperands;
};

class NodeImageSampleExplicitLod : public Node
{
public:
   NodeImageSampleExplicitLod(Extractor &ext)
      : Node()
   {
      ext >> m_resultType >> m_resultId >> m_sampledImage >> m_coordinate >> m_imageOperands;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetSampledImage() const
   {
      return m_sampledImage;
   }

   const NodeConstPtr &GetCoordinate() const
   {
      return m_coordinate;
   }

   const ImageOperands &GetImageOperands() const
   {
      return m_imageOperands;
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpImageSampleExplicitLod;
   }

private:
   NodeConstPtr     m_sampledImage;
   NodeConstPtr     m_coordinate;
   ImageOperands    m_imageOperands;
};

class NodeImageSampleDrefImplicitLod : public Node
{
public:
   NodeImageSampleDrefImplicitLod(Extractor &ext)
      : Node()
   {
      ext >> m_resultType >> m_resultId >> m_sampledImage >> m_coordinate >> m_dref >> m_imageOperands;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetSampledImage() const
   {
      return m_sampledImage;
   }

   const NodeConstPtr &GetCoordinate() const
   {
      return m_coordinate;
   }

   const NodeConstPtr &GetDref() const
   {
      return m_dref;
   }

   const Optional<ImageOperands> &GetImageOperands() const
   {
      return m_imageOperands;
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpImageSampleDrefImplicitLod;
   }

private:
   NodeConstPtr               m_sampledImage;
   NodeConstPtr               m_coordinate;
   NodeConstPtr               m_dref;
   Optional<ImageOperands>    m_imageOperands;
};

class NodeImageSampleDrefExplicitLod : public Node
{
public:
   NodeImageSampleDrefExplicitLod(Extractor &ext)
      : Node()
   {
      ext >> m_resultType >> m_resultId >> m_sampledImage >> m_coordinate >> m_dref >> m_imageOperands;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetSampledImage() const
   {
      return m_sampledImage;
   }

   const NodeConstPtr &GetCoordinate() const
   {
      return m_coordinate;
   }

   const NodeConstPtr &GetDref() const
   {
      return m_dref;
   }

   const ImageOperands &GetImageOperands() const
   {
      return m_imageOperands;
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpImageSampleDrefExplicitLod;
   }

private:
   NodeConstPtr     m_sampledImage;
   NodeConstPtr     m_coordinate;
   NodeConstPtr     m_dref;
   ImageOperands    m_imageOperands;
};

class NodeImageSampleProjImplicitLod : public Node
{
public:
   NodeImageSampleProjImplicitLod(Extractor &ext)
      : Node()
   {
      ext >> m_resultType >> m_resultId >> m_sampledImage >> m_coordinate >> m_imageOperands;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetSampledImage() const
   {
      return m_sampledImage;
   }

   const NodeConstPtr &GetCoordinate() const
   {
      return m_coordinate;
   }

   const Optional<ImageOperands> &GetImageOperands() const
   {
      return m_imageOperands;
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpImageSampleProjImplicitLod;
   }

private:
   NodeConstPtr               m_sampledImage;
   NodeConstPtr               m_coordinate;
   Optional<ImageOperands>    m_imageOperands;
};

class NodeImageSampleProjExplicitLod : public Node
{
public:
   NodeImageSampleProjExplicitLod(Extractor &ext)
      : Node()
   {
      ext >> m_resultType >> m_resultId >> m_sampledImage >> m_coordinate >> m_imageOperands;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetSampledImage() const
   {
      return m_sampledImage;
   }

   const NodeConstPtr &GetCoordinate() const
   {
      return m_coordinate;
   }

   const ImageOperands &GetImageOperands() const
   {
      return m_imageOperands;
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpImageSampleProjExplicitLod;
   }

private:
   NodeConstPtr     m_sampledImage;
   NodeConstPtr     m_coordinate;
   ImageOperands    m_imageOperands;
};

class NodeImageSampleProjDrefImplicitLod : public Node
{
public:
   NodeImageSampleProjDrefImplicitLod(Extractor &ext)
      : Node()
   {
      ext >> m_resultType >> m_resultId >> m_sampledImage >> m_coordinate >> m_dref >> m_imageOperands;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetSampledImage() const
   {
      return m_sampledImage;
   }

   const NodeConstPtr &GetCoordinate() const
   {
      return m_coordinate;
   }

   const NodeConstPtr &GetDref() const
   {
      return m_dref;
   }

   const Optional<ImageOperands> &GetImageOperands() const
   {
      return m_imageOperands;
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpImageSampleProjDrefImplicitLod;
   }

private:
   NodeConstPtr               m_sampledImage;
   NodeConstPtr               m_coordinate;
   NodeConstPtr               m_dref;
   Optional<ImageOperands>    m_imageOperands;
};

class NodeImageSampleProjDrefExplicitLod : public Node
{
public:
   NodeImageSampleProjDrefExplicitLod(Extractor &ext)
      : Node()
   {
      ext >> m_resultType >> m_resultId >> m_sampledImage >> m_coordinate >> m_dref >> m_imageOperands;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetSampledImage() const
   {
      return m_sampledImage;
   }

   const NodeConstPtr &GetCoordinate() const
   {
      return m_coordinate;
   }

   const NodeConstPtr &GetDref() const
   {
      return m_dref;
   }

   const ImageOperands &GetImageOperands() const
   {
      return m_imageOperands;
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpImageSampleProjDrefExplicitLod;
   }

private:
   NodeConstPtr     m_sampledImage;
   NodeConstPtr     m_coordinate;
   NodeConstPtr     m_dref;
   ImageOperands    m_imageOperands;
};

class NodeImageFetch : public Node
{
public:
   NodeImageFetch(Extractor &ext)
      : Node()
   {
      ext >> m_resultType >> m_resultId >> m_image >> m_coordinate >> m_imageOperands;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetImage() const
   {
      return m_image;
   }

   const NodeConstPtr &GetCoordinate() const
   {
      return m_coordinate;
   }

   const Optional<ImageOperands> &GetImageOperands() const
   {
      return m_imageOperands;
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpImageFetch;
   }

private:
   NodeConstPtr               m_image;
   NodeConstPtr               m_coordinate;
   Optional<ImageOperands>    m_imageOperands;
};

class NodeImageGather : public Node
{
public:
   NodeImageGather(Extractor &ext)
      : Node()
   {
      ext >> m_resultType >> m_resultId >> m_sampledImage >> m_coordinate >> m_component >> m_imageOperands;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetSampledImage() const
   {
      return m_sampledImage;
   }

   const NodeConstPtr &GetCoordinate() const
   {
      return m_coordinate;
   }

   const NodeConstPtr &GetComponent() const
   {
      return m_component;
   }

   const Optional<ImageOperands> &GetImageOperands() const
   {
      return m_imageOperands;
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpImageGather;
   }

private:
   NodeConstPtr               m_sampledImage;
   NodeConstPtr               m_coordinate;
   NodeConstPtr               m_component;
   Optional<ImageOperands>    m_imageOperands;
};

class NodeImageDrefGather : public Node
{
public:
   NodeImageDrefGather(Extractor &ext)
      : Node()
   {
      ext >> m_resultType >> m_resultId >> m_sampledImage >> m_coordinate >> m_dref >> m_imageOperands;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetSampledImage() const
   {
      return m_sampledImage;
   }

   const NodeConstPtr &GetCoordinate() const
   {
      return m_coordinate;
   }

   const NodeConstPtr &GetDref() const
   {
      return m_dref;
   }

   const Optional<ImageOperands> &GetImageOperands() const
   {
      return m_imageOperands;
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpImageDrefGather;
   }

private:
   NodeConstPtr               m_sampledImage;
   NodeConstPtr               m_coordinate;
   NodeConstPtr               m_dref;
   Optional<ImageOperands>    m_imageOperands;
};

class NodeImageRead : public Node
{
public:
   NodeImageRead(Extractor &ext)
      : Node()
   {
      ext >> m_resultType >> m_resultId >> m_image >> m_coordinate >> m_imageOperands;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetImage() const
   {
      return m_image;
   }

   const NodeConstPtr &GetCoordinate() const
   {
      return m_coordinate;
   }

   const Optional<ImageOperands> &GetImageOperands() const
   {
      return m_imageOperands;
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpImageRead;
   }

private:
   NodeConstPtr               m_image;
   NodeConstPtr               m_coordinate;
   Optional<ImageOperands>    m_imageOperands;
};

class NodeImageWrite : public Node
{
public:
   NodeImageWrite(Extractor &ext)
      : Node()
   {
      ext >> m_image >> m_coordinate >> m_texel >> m_imageOperands;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetImage() const
   {
      return m_image;
   }

   const NodeConstPtr &GetCoordinate() const
   {
      return m_coordinate;
   }

   const NodeConstPtr &GetTexel() const
   {
      return m_texel;
   }

   const Optional<ImageOperands> &GetImageOperands() const
   {
      return m_imageOperands;
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpImageWrite;
   }

private:
   NodeConstPtr               m_image;
   NodeConstPtr               m_coordinate;
   NodeConstPtr               m_texel;
   Optional<ImageOperands>    m_imageOperands;
};

class NodeImage : public Node
{
public:
   NodeImage(Extractor &ext)
      : Node()
   {
      ext >> m_resultType >> m_resultId >> m_sampledImage;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetSampledImage() const
   {
      return m_sampledImage;
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpImage;
   }

private:
   NodeConstPtr    m_sampledImage;
};

class NodeImageQuerySizeLod : public Node
{
public:
   NodeImageQuerySizeLod(Extractor &ext)
      : Node()
   {
      ext >> m_resultType >> m_resultId >> m_image >> m_levelofDetail;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetImage() const
   {
      return m_image;
   }

   const NodeConstPtr &GetLevelofDetail() const
   {
      return m_levelofDetail;
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpImageQuerySizeLod;
   }

private:
   NodeConstPtr    m_image;
   NodeConstPtr    m_levelofDetail;
};

class NodeImageQuerySize : public Node
{
public:
   NodeImageQuerySize(Extractor &ext)
      : Node()
   {
      ext >> m_resultType >> m_resultId >> m_image;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetImage() const
   {
      return m_image;
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpImageQuerySize;
   }

private:
   NodeConstPtr    m_image;
};

class NodeImageQueryLod : public Node
{
public:
   NodeImageQueryLod(Extractor &ext)
      : Node()
   {
      ext >> m_resultType >> m_resultId >> m_sampledImage >> m_coordinate;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetSampledImage() const
   {
      return m_sampledImage;
   }

   const NodeConstPtr &GetCoordinate() const
   {
      return m_coordinate;
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpImageQueryLod;
   }

private:
   NodeConstPtr    m_sampledImage;
   NodeConstPtr    m_coordinate;
};

class NodeImageQueryLevels : public Node
{
public:
   NodeImageQueryLevels(Extractor &ext)
      : Node()
   {
      ext >> m_resultType >> m_resultId >> m_image;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetImage() const
   {
      return m_image;
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpImageQueryLevels;
   }

private:
   NodeConstPtr    m_image;
};

class NodeImageQuerySamples : public Node
{
public:
   NodeImageQuerySamples(Extractor &ext)
      : Node()
   {
      ext >> m_resultType >> m_resultId >> m_image;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetImage() const
   {
      return m_image;
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpImageQuerySamples;
   }

private:
   NodeConstPtr    m_image;
};

class NodeConvertFToU : public Node
{
public:
   NodeConvertFToU(Extractor &ext)
      : Node()
   {
      ext >> m_resultType >> m_resultId >> m_floatValue;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetFloatValue() const
   {
      return m_floatValue;
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpConvertFToU;
   }

private:
   NodeConstPtr    m_floatValue;
};

class NodeConvertFToS : public Node
{
public:
   NodeConvertFToS(Extractor &ext)
      : Node()
   {
      ext >> m_resultType >> m_resultId >> m_floatValue;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetFloatValue() const
   {
      return m_floatValue;
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpConvertFToS;
   }

private:
   NodeConstPtr    m_floatValue;
};

class NodeConvertSToF : public Node
{
public:
   NodeConvertSToF(Extractor &ext)
      : Node()
   {
      ext >> m_resultType >> m_resultId >> m_signedValue;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetSignedValue() const
   {
      return m_signedValue;
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpConvertSToF;
   }

private:
   NodeConstPtr    m_signedValue;
};

class NodeConvertUToF : public Node
{
public:
   NodeConvertUToF(Extractor &ext)
      : Node()
   {
      ext >> m_resultType >> m_resultId >> m_unsignedValue;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetUnsignedValue() const
   {
      return m_unsignedValue;
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpConvertUToF;
   }

private:
   NodeConstPtr    m_unsignedValue;
};

class NodeUConvert : public Node
{
public:
   NodeUConvert(Extractor &ext)
      : Node()
   {
      ext >> m_resultType >> m_resultId >> m_unsignedValue;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetUnsignedValue() const
   {
      return m_unsignedValue;
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpUConvert;
   }

private:
   NodeConstPtr    m_unsignedValue;
};

class NodeSConvert : public Node
{
public:
   NodeSConvert(Extractor &ext)
      : Node()
   {
      ext >> m_resultType >> m_resultId >> m_signedValue;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetSignedValue() const
   {
      return m_signedValue;
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpSConvert;
   }

private:
   NodeConstPtr    m_signedValue;
};

class NodeFConvert : public Node
{
public:
   NodeFConvert(Extractor &ext)
      : Node()
   {
      ext >> m_resultType >> m_resultId >> m_floatValue;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetFloatValue() const
   {
      return m_floatValue;
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpFConvert;
   }

private:
   NodeConstPtr    m_floatValue;
};

class NodeQuantizeToF16 : public Node
{
public:
   NodeQuantizeToF16(Extractor &ext)
      : Node()
   {
      ext >> m_resultType >> m_resultId >> m_value;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetValue() const
   {
      return m_value;
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpQuantizeToF16;
   }

private:
   NodeConstPtr    m_value;
};

class NodeBitcast : public Node
{
public:
   NodeBitcast(Extractor &ext)
      : Node()
   {
      ext >> m_resultType >> m_resultId >> m_operand;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetOperand() const
   {
      return m_operand;
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpBitcast;
   }

private:
   NodeConstPtr    m_operand;
};

class NodeSNegate : public Node
{
public:
   NodeSNegate(Extractor &ext)
      : Node()
   {
      ext >> m_resultType >> m_resultId >> m_operand;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetOperand() const
   {
      return m_operand;
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpSNegate;
   }

private:
   NodeConstPtr    m_operand;
};

class NodeFNegate : public Node
{
public:
   NodeFNegate(Extractor &ext)
      : Node()
   {
      ext >> m_resultType >> m_resultId >> m_operand;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetOperand() const
   {
      return m_operand;
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpFNegate;
   }

private:
   NodeConstPtr    m_operand;
};

class NodeIAdd : public Node
{
public:
   NodeIAdd(Extractor &ext)
      : Node()
   {
      ext >> m_resultType >> m_resultId >> m_operand1 >> m_operand2;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetOperand1() const
   {
      return m_operand1;
   }

   const NodeConstPtr &GetOperand2() const
   {
      return m_operand2;
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpIAdd;
   }

private:
   NodeConstPtr    m_operand1;
   NodeConstPtr    m_operand2;
};

class NodeFAdd : public Node
{
public:
   NodeFAdd(Extractor &ext)
      : Node()
   {
      ext >> m_resultType >> m_resultId >> m_operand1 >> m_operand2;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetOperand1() const
   {
      return m_operand1;
   }

   const NodeConstPtr &GetOperand2() const
   {
      return m_operand2;
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpFAdd;
   }

private:
   NodeConstPtr    m_operand1;
   NodeConstPtr    m_operand2;
};

class NodeISub : public Node
{
public:
   NodeISub(Extractor &ext)
      : Node()
   {
      ext >> m_resultType >> m_resultId >> m_operand1 >> m_operand2;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetOperand1() const
   {
      return m_operand1;
   }

   const NodeConstPtr &GetOperand2() const
   {
      return m_operand2;
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpISub;
   }

private:
   NodeConstPtr    m_operand1;
   NodeConstPtr    m_operand2;
};

class NodeFSub : public Node
{
public:
   NodeFSub(Extractor &ext)
      : Node()
   {
      ext >> m_resultType >> m_resultId >> m_operand1 >> m_operand2;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetOperand1() const
   {
      return m_operand1;
   }

   const NodeConstPtr &GetOperand2() const
   {
      return m_operand2;
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpFSub;
   }

private:
   NodeConstPtr    m_operand1;
   NodeConstPtr    m_operand2;
};

class NodeIMul : public Node
{
public:
   NodeIMul(Extractor &ext)
      : Node()
   {
      ext >> m_resultType >> m_resultId >> m_operand1 >> m_operand2;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetOperand1() const
   {
      return m_operand1;
   }

   const NodeConstPtr &GetOperand2() const
   {
      return m_operand2;
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpIMul;
   }

private:
   NodeConstPtr    m_operand1;
   NodeConstPtr    m_operand2;
};

class NodeFMul : public Node
{
public:
   NodeFMul(Extractor &ext)
      : Node()
   {
      ext >> m_resultType >> m_resultId >> m_operand1 >> m_operand2;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetOperand1() const
   {
      return m_operand1;
   }

   const NodeConstPtr &GetOperand2() const
   {
      return m_operand2;
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpFMul;
   }

private:
   NodeConstPtr    m_operand1;
   NodeConstPtr    m_operand2;
};

class NodeUDiv : public Node
{
public:
   NodeUDiv(Extractor &ext)
      : Node()
   {
      ext >> m_resultType >> m_resultId >> m_operand1 >> m_operand2;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetOperand1() const
   {
      return m_operand1;
   }

   const NodeConstPtr &GetOperand2() const
   {
      return m_operand2;
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpUDiv;
   }

private:
   NodeConstPtr    m_operand1;
   NodeConstPtr    m_operand2;
};

class NodeSDiv : public Node
{
public:
   NodeSDiv(Extractor &ext)
      : Node()
   {
      ext >> m_resultType >> m_resultId >> m_operand1 >> m_operand2;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetOperand1() const
   {
      return m_operand1;
   }

   const NodeConstPtr &GetOperand2() const
   {
      return m_operand2;
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpSDiv;
   }

private:
   NodeConstPtr    m_operand1;
   NodeConstPtr    m_operand2;
};

class NodeFDiv : public Node
{
public:
   NodeFDiv(Extractor &ext)
      : Node()
   {
      ext >> m_resultType >> m_resultId >> m_operand1 >> m_operand2;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetOperand1() const
   {
      return m_operand1;
   }

   const NodeConstPtr &GetOperand2() const
   {
      return m_operand2;
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpFDiv;
   }

private:
   NodeConstPtr    m_operand1;
   NodeConstPtr    m_operand2;
};

class NodeUMod : public Node
{
public:
   NodeUMod(Extractor &ext)
      : Node()
   {
      ext >> m_resultType >> m_resultId >> m_operand1 >> m_operand2;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetOperand1() const
   {
      return m_operand1;
   }

   const NodeConstPtr &GetOperand2() const
   {
      return m_operand2;
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpUMod;
   }

private:
   NodeConstPtr    m_operand1;
   NodeConstPtr    m_operand2;
};

class NodeSRem : public Node
{
public:
   NodeSRem(Extractor &ext)
      : Node()
   {
      ext >> m_resultType >> m_resultId >> m_operand1 >> m_operand2;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetOperand1() const
   {
      return m_operand1;
   }

   const NodeConstPtr &GetOperand2() const
   {
      return m_operand2;
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpSRem;
   }

private:
   NodeConstPtr    m_operand1;
   NodeConstPtr    m_operand2;
};

class NodeSMod : public Node
{
public:
   NodeSMod(Extractor &ext)
      : Node()
   {
      ext >> m_resultType >> m_resultId >> m_operand1 >> m_operand2;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetOperand1() const
   {
      return m_operand1;
   }

   const NodeConstPtr &GetOperand2() const
   {
      return m_operand2;
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpSMod;
   }

private:
   NodeConstPtr    m_operand1;
   NodeConstPtr    m_operand2;
};

class NodeFRem : public Node
{
public:
   NodeFRem(Extractor &ext)
      : Node()
   {
      ext >> m_resultType >> m_resultId >> m_operand1 >> m_operand2;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetOperand1() const
   {
      return m_operand1;
   }

   const NodeConstPtr &GetOperand2() const
   {
      return m_operand2;
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpFRem;
   }

private:
   NodeConstPtr    m_operand1;
   NodeConstPtr    m_operand2;
};

class NodeFMod : public Node
{
public:
   NodeFMod(Extractor &ext)
      : Node()
   {
      ext >> m_resultType >> m_resultId >> m_operand1 >> m_operand2;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetOperand1() const
   {
      return m_operand1;
   }

   const NodeConstPtr &GetOperand2() const
   {
      return m_operand2;
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpFMod;
   }

private:
   NodeConstPtr    m_operand1;
   NodeConstPtr    m_operand2;
};

class NodeVectorTimesScalar : public Node
{
public:
   NodeVectorTimesScalar(Extractor &ext)
      : Node()
   {
      ext >> m_resultType >> m_resultId >> m_vector >> m_scalar;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetVector() const
   {
      return m_vector;
   }

   const NodeConstPtr &GetScalar() const
   {
      return m_scalar;
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpVectorTimesScalar;
   }

private:
   NodeConstPtr    m_vector;
   NodeConstPtr    m_scalar;
};

class NodeMatrixTimesScalar : public Node
{
public:
   NodeMatrixTimesScalar(Extractor &ext)
      : Node()
   {
      ext >> m_resultType >> m_resultId >> m_matrix >> m_scalar;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetMatrix() const
   {
      return m_matrix;
   }

   const NodeConstPtr &GetScalar() const
   {
      return m_scalar;
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpMatrixTimesScalar;
   }

private:
   NodeConstPtr    m_matrix;
   NodeConstPtr    m_scalar;
};

class NodeVectorTimesMatrix : public Node
{
public:
   NodeVectorTimesMatrix(Extractor &ext)
      : Node()
   {
      ext >> m_resultType >> m_resultId >> m_vector >> m_matrix;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetVector() const
   {
      return m_vector;
   }

   const NodeConstPtr &GetMatrix() const
   {
      return m_matrix;
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpVectorTimesMatrix;
   }

private:
   NodeConstPtr    m_vector;
   NodeConstPtr    m_matrix;
};

class NodeMatrixTimesVector : public Node
{
public:
   NodeMatrixTimesVector(Extractor &ext)
      : Node()
   {
      ext >> m_resultType >> m_resultId >> m_matrix >> m_vector;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetMatrix() const
   {
      return m_matrix;
   }

   const NodeConstPtr &GetVector() const
   {
      return m_vector;
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpMatrixTimesVector;
   }

private:
   NodeConstPtr    m_matrix;
   NodeConstPtr    m_vector;
};

class NodeMatrixTimesMatrix : public Node
{
public:
   NodeMatrixTimesMatrix(Extractor &ext)
      : Node()
   {
      ext >> m_resultType >> m_resultId >> m_leftMatrix >> m_rightMatrix;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetLeftMatrix() const
   {
      return m_leftMatrix;
   }

   const NodeConstPtr &GetRightMatrix() const
   {
      return m_rightMatrix;
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpMatrixTimesMatrix;
   }

private:
   NodeConstPtr    m_leftMatrix;
   NodeConstPtr    m_rightMatrix;
};

class NodeOuterProduct : public Node
{
public:
   NodeOuterProduct(Extractor &ext)
      : Node()
   {
      ext >> m_resultType >> m_resultId >> m_vector1 >> m_vector2;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetVector1() const
   {
      return m_vector1;
   }

   const NodeConstPtr &GetVector2() const
   {
      return m_vector2;
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpOuterProduct;
   }

private:
   NodeConstPtr    m_vector1;
   NodeConstPtr    m_vector2;
};

class NodeDot : public Node
{
public:
   NodeDot(Extractor &ext)
      : Node()
   {
      ext >> m_resultType >> m_resultId >> m_vector1 >> m_vector2;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetVector1() const
   {
      return m_vector1;
   }

   const NodeConstPtr &GetVector2() const
   {
      return m_vector2;
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpDot;
   }

private:
   NodeConstPtr    m_vector1;
   NodeConstPtr    m_vector2;
};

class NodeIAddCarry : public Node
{
public:
   NodeIAddCarry(Extractor &ext)
      : Node()
   {
      ext >> m_resultType >> m_resultId >> m_operand1 >> m_operand2;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetOperand1() const
   {
      return m_operand1;
   }

   const NodeConstPtr &GetOperand2() const
   {
      return m_operand2;
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpIAddCarry;
   }

private:
   NodeConstPtr    m_operand1;
   NodeConstPtr    m_operand2;
};

class NodeISubBorrow : public Node
{
public:
   NodeISubBorrow(Extractor &ext)
      : Node()
   {
      ext >> m_resultType >> m_resultId >> m_operand1 >> m_operand2;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetOperand1() const
   {
      return m_operand1;
   }

   const NodeConstPtr &GetOperand2() const
   {
      return m_operand2;
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpISubBorrow;
   }

private:
   NodeConstPtr    m_operand1;
   NodeConstPtr    m_operand2;
};

class NodeUMulExtended : public Node
{
public:
   NodeUMulExtended(Extractor &ext)
      : Node()
   {
      ext >> m_resultType >> m_resultId >> m_operand1 >> m_operand2;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetOperand1() const
   {
      return m_operand1;
   }

   const NodeConstPtr &GetOperand2() const
   {
      return m_operand2;
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpUMulExtended;
   }

private:
   NodeConstPtr    m_operand1;
   NodeConstPtr    m_operand2;
};

class NodeSMulExtended : public Node
{
public:
   NodeSMulExtended(Extractor &ext)
      : Node()
   {
      ext >> m_resultType >> m_resultId >> m_operand1 >> m_operand2;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetOperand1() const
   {
      return m_operand1;
   }

   const NodeConstPtr &GetOperand2() const
   {
      return m_operand2;
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpSMulExtended;
   }

private:
   NodeConstPtr    m_operand1;
   NodeConstPtr    m_operand2;
};

class NodeAny : public Node
{
public:
   NodeAny(Extractor &ext)
      : Node()
   {
      ext >> m_resultType >> m_resultId >> m_vector;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetVector() const
   {
      return m_vector;
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpAny;
   }

private:
   NodeConstPtr    m_vector;
};

class NodeAll : public Node
{
public:
   NodeAll(Extractor &ext)
      : Node()
   {
      ext >> m_resultType >> m_resultId >> m_vector;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetVector() const
   {
      return m_vector;
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpAll;
   }

private:
   NodeConstPtr    m_vector;
};

class NodeIsNan : public Node
{
public:
   NodeIsNan(Extractor &ext)
      : Node()
   {
      ext >> m_resultType >> m_resultId >> m_x;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetX() const
   {
      return m_x;
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpIsNan;
   }

private:
   NodeConstPtr    m_x;
};

class NodeIsInf : public Node
{
public:
   NodeIsInf(Extractor &ext)
      : Node()
   {
      ext >> m_resultType >> m_resultId >> m_x;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetX() const
   {
      return m_x;
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpIsInf;
   }

private:
   NodeConstPtr    m_x;
};

class NodeLogicalEqual : public Node
{
public:
   NodeLogicalEqual(Extractor &ext)
      : Node()
   {
      ext >> m_resultType >> m_resultId >> m_operand1 >> m_operand2;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetOperand1() const
   {
      return m_operand1;
   }

   const NodeConstPtr &GetOperand2() const
   {
      return m_operand2;
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpLogicalEqual;
   }

private:
   NodeConstPtr    m_operand1;
   NodeConstPtr    m_operand2;
};

class NodeLogicalNotEqual : public Node
{
public:
   NodeLogicalNotEqual(Extractor &ext)
      : Node()
   {
      ext >> m_resultType >> m_resultId >> m_operand1 >> m_operand2;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetOperand1() const
   {
      return m_operand1;
   }

   const NodeConstPtr &GetOperand2() const
   {
      return m_operand2;
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpLogicalNotEqual;
   }

private:
   NodeConstPtr    m_operand1;
   NodeConstPtr    m_operand2;
};

class NodeLogicalOr : public Node
{
public:
   NodeLogicalOr(Extractor &ext)
      : Node()
   {
      ext >> m_resultType >> m_resultId >> m_operand1 >> m_operand2;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetOperand1() const
   {
      return m_operand1;
   }

   const NodeConstPtr &GetOperand2() const
   {
      return m_operand2;
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpLogicalOr;
   }

private:
   NodeConstPtr    m_operand1;
   NodeConstPtr    m_operand2;
};

class NodeLogicalAnd : public Node
{
public:
   NodeLogicalAnd(Extractor &ext)
      : Node()
   {
      ext >> m_resultType >> m_resultId >> m_operand1 >> m_operand2;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetOperand1() const
   {
      return m_operand1;
   }

   const NodeConstPtr &GetOperand2() const
   {
      return m_operand2;
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpLogicalAnd;
   }

private:
   NodeConstPtr    m_operand1;
   NodeConstPtr    m_operand2;
};

class NodeLogicalNot : public Node
{
public:
   NodeLogicalNot(Extractor &ext)
      : Node()
   {
      ext >> m_resultType >> m_resultId >> m_operand;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetOperand() const
   {
      return m_operand;
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpLogicalNot;
   }

private:
   NodeConstPtr    m_operand;
};

class NodeSelect : public Node
{
public:
   NodeSelect(Extractor &ext)
      : Node()
   {
      ext >> m_resultType >> m_resultId >> m_condition >> m_object1 >> m_object2;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetCondition() const
   {
      return m_condition;
   }

   const NodeConstPtr &GetObject1() const
   {
      return m_object1;
   }

   const NodeConstPtr &GetObject2() const
   {
      return m_object2;
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpSelect;
   }

private:
   NodeConstPtr    m_condition;
   NodeConstPtr    m_object1;
   NodeConstPtr    m_object2;
};

class NodeIEqual : public Node
{
public:
   NodeIEqual(Extractor &ext)
      : Node()
   {
      ext >> m_resultType >> m_resultId >> m_operand1 >> m_operand2;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetOperand1() const
   {
      return m_operand1;
   }

   const NodeConstPtr &GetOperand2() const
   {
      return m_operand2;
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpIEqual;
   }

private:
   NodeConstPtr    m_operand1;
   NodeConstPtr    m_operand2;
};

class NodeINotEqual : public Node
{
public:
   NodeINotEqual(Extractor &ext)
      : Node()
   {
      ext >> m_resultType >> m_resultId >> m_operand1 >> m_operand2;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetOperand1() const
   {
      return m_operand1;
   }

   const NodeConstPtr &GetOperand2() const
   {
      return m_operand2;
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpINotEqual;
   }

private:
   NodeConstPtr    m_operand1;
   NodeConstPtr    m_operand2;
};

class NodeUGreaterThan : public Node
{
public:
   NodeUGreaterThan(Extractor &ext)
      : Node()
   {
      ext >> m_resultType >> m_resultId >> m_operand1 >> m_operand2;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetOperand1() const
   {
      return m_operand1;
   }

   const NodeConstPtr &GetOperand2() const
   {
      return m_operand2;
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpUGreaterThan;
   }

private:
   NodeConstPtr    m_operand1;
   NodeConstPtr    m_operand2;
};

class NodeSGreaterThan : public Node
{
public:
   NodeSGreaterThan(Extractor &ext)
      : Node()
   {
      ext >> m_resultType >> m_resultId >> m_operand1 >> m_operand2;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetOperand1() const
   {
      return m_operand1;
   }

   const NodeConstPtr &GetOperand2() const
   {
      return m_operand2;
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpSGreaterThan;
   }

private:
   NodeConstPtr    m_operand1;
   NodeConstPtr    m_operand2;
};

class NodeUGreaterThanEqual : public Node
{
public:
   NodeUGreaterThanEqual(Extractor &ext)
      : Node()
   {
      ext >> m_resultType >> m_resultId >> m_operand1 >> m_operand2;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetOperand1() const
   {
      return m_operand1;
   }

   const NodeConstPtr &GetOperand2() const
   {
      return m_operand2;
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpUGreaterThanEqual;
   }

private:
   NodeConstPtr    m_operand1;
   NodeConstPtr    m_operand2;
};

class NodeSGreaterThanEqual : public Node
{
public:
   NodeSGreaterThanEqual(Extractor &ext)
      : Node()
   {
      ext >> m_resultType >> m_resultId >> m_operand1 >> m_operand2;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetOperand1() const
   {
      return m_operand1;
   }

   const NodeConstPtr &GetOperand2() const
   {
      return m_operand2;
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpSGreaterThanEqual;
   }

private:
   NodeConstPtr    m_operand1;
   NodeConstPtr    m_operand2;
};

class NodeULessThan : public Node
{
public:
   NodeULessThan(Extractor &ext)
      : Node()
   {
      ext >> m_resultType >> m_resultId >> m_operand1 >> m_operand2;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetOperand1() const
   {
      return m_operand1;
   }

   const NodeConstPtr &GetOperand2() const
   {
      return m_operand2;
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpULessThan;
   }

private:
   NodeConstPtr    m_operand1;
   NodeConstPtr    m_operand2;
};

class NodeSLessThan : public Node
{
public:
   NodeSLessThan(Extractor &ext)
      : Node()
   {
      ext >> m_resultType >> m_resultId >> m_operand1 >> m_operand2;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetOperand1() const
   {
      return m_operand1;
   }

   const NodeConstPtr &GetOperand2() const
   {
      return m_operand2;
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpSLessThan;
   }

private:
   NodeConstPtr    m_operand1;
   NodeConstPtr    m_operand2;
};

class NodeULessThanEqual : public Node
{
public:
   NodeULessThanEqual(Extractor &ext)
      : Node()
   {
      ext >> m_resultType >> m_resultId >> m_operand1 >> m_operand2;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetOperand1() const
   {
      return m_operand1;
   }

   const NodeConstPtr &GetOperand2() const
   {
      return m_operand2;
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpULessThanEqual;
   }

private:
   NodeConstPtr    m_operand1;
   NodeConstPtr    m_operand2;
};

class NodeSLessThanEqual : public Node
{
public:
   NodeSLessThanEqual(Extractor &ext)
      : Node()
   {
      ext >> m_resultType >> m_resultId >> m_operand1 >> m_operand2;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetOperand1() const
   {
      return m_operand1;
   }

   const NodeConstPtr &GetOperand2() const
   {
      return m_operand2;
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpSLessThanEqual;
   }

private:
   NodeConstPtr    m_operand1;
   NodeConstPtr    m_operand2;
};

class NodeFOrdEqual : public Node
{
public:
   NodeFOrdEqual(Extractor &ext)
      : Node()
   {
      ext >> m_resultType >> m_resultId >> m_operand1 >> m_operand2;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetOperand1() const
   {
      return m_operand1;
   }

   const NodeConstPtr &GetOperand2() const
   {
      return m_operand2;
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpFOrdEqual;
   }

private:
   NodeConstPtr    m_operand1;
   NodeConstPtr    m_operand2;
};

class NodeFUnordEqual : public Node
{
public:
   NodeFUnordEqual(Extractor &ext)
      : Node()
   {
      ext >> m_resultType >> m_resultId >> m_operand1 >> m_operand2;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetOperand1() const
   {
      return m_operand1;
   }

   const NodeConstPtr &GetOperand2() const
   {
      return m_operand2;
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpFUnordEqual;
   }

private:
   NodeConstPtr    m_operand1;
   NodeConstPtr    m_operand2;
};

class NodeFOrdNotEqual : public Node
{
public:
   NodeFOrdNotEqual(Extractor &ext)
      : Node()
   {
      ext >> m_resultType >> m_resultId >> m_operand1 >> m_operand2;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetOperand1() const
   {
      return m_operand1;
   }

   const NodeConstPtr &GetOperand2() const
   {
      return m_operand2;
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpFOrdNotEqual;
   }

private:
   NodeConstPtr    m_operand1;
   NodeConstPtr    m_operand2;
};

class NodeFUnordNotEqual : public Node
{
public:
   NodeFUnordNotEqual(Extractor &ext)
      : Node()
   {
      ext >> m_resultType >> m_resultId >> m_operand1 >> m_operand2;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetOperand1() const
   {
      return m_operand1;
   }

   const NodeConstPtr &GetOperand2() const
   {
      return m_operand2;
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpFUnordNotEqual;
   }

private:
   NodeConstPtr    m_operand1;
   NodeConstPtr    m_operand2;
};

class NodeFOrdLessThan : public Node
{
public:
   NodeFOrdLessThan(Extractor &ext)
      : Node()
   {
      ext >> m_resultType >> m_resultId >> m_operand1 >> m_operand2;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetOperand1() const
   {
      return m_operand1;
   }

   const NodeConstPtr &GetOperand2() const
   {
      return m_operand2;
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpFOrdLessThan;
   }

private:
   NodeConstPtr    m_operand1;
   NodeConstPtr    m_operand2;
};

class NodeFUnordLessThan : public Node
{
public:
   NodeFUnordLessThan(Extractor &ext)
      : Node()
   {
      ext >> m_resultType >> m_resultId >> m_operand1 >> m_operand2;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetOperand1() const
   {
      return m_operand1;
   }

   const NodeConstPtr &GetOperand2() const
   {
      return m_operand2;
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpFUnordLessThan;
   }

private:
   NodeConstPtr    m_operand1;
   NodeConstPtr    m_operand2;
};

class NodeFOrdGreaterThan : public Node
{
public:
   NodeFOrdGreaterThan(Extractor &ext)
      : Node()
   {
      ext >> m_resultType >> m_resultId >> m_operand1 >> m_operand2;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetOperand1() const
   {
      return m_operand1;
   }

   const NodeConstPtr &GetOperand2() const
   {
      return m_operand2;
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpFOrdGreaterThan;
   }

private:
   NodeConstPtr    m_operand1;
   NodeConstPtr    m_operand2;
};

class NodeFUnordGreaterThan : public Node
{
public:
   NodeFUnordGreaterThan(Extractor &ext)
      : Node()
   {
      ext >> m_resultType >> m_resultId >> m_operand1 >> m_operand2;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetOperand1() const
   {
      return m_operand1;
   }

   const NodeConstPtr &GetOperand2() const
   {
      return m_operand2;
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpFUnordGreaterThan;
   }

private:
   NodeConstPtr    m_operand1;
   NodeConstPtr    m_operand2;
};

class NodeFOrdLessThanEqual : public Node
{
public:
   NodeFOrdLessThanEqual(Extractor &ext)
      : Node()
   {
      ext >> m_resultType >> m_resultId >> m_operand1 >> m_operand2;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetOperand1() const
   {
      return m_operand1;
   }

   const NodeConstPtr &GetOperand2() const
   {
      return m_operand2;
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpFOrdLessThanEqual;
   }

private:
   NodeConstPtr    m_operand1;
   NodeConstPtr    m_operand2;
};

class NodeFUnordLessThanEqual : public Node
{
public:
   NodeFUnordLessThanEqual(Extractor &ext)
      : Node()
   {
      ext >> m_resultType >> m_resultId >> m_operand1 >> m_operand2;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetOperand1() const
   {
      return m_operand1;
   }

   const NodeConstPtr &GetOperand2() const
   {
      return m_operand2;
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpFUnordLessThanEqual;
   }

private:
   NodeConstPtr    m_operand1;
   NodeConstPtr    m_operand2;
};

class NodeFOrdGreaterThanEqual : public Node
{
public:
   NodeFOrdGreaterThanEqual(Extractor &ext)
      : Node()
   {
      ext >> m_resultType >> m_resultId >> m_operand1 >> m_operand2;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetOperand1() const
   {
      return m_operand1;
   }

   const NodeConstPtr &GetOperand2() const
   {
      return m_operand2;
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpFOrdGreaterThanEqual;
   }

private:
   NodeConstPtr    m_operand1;
   NodeConstPtr    m_operand2;
};

class NodeFUnordGreaterThanEqual : public Node
{
public:
   NodeFUnordGreaterThanEqual(Extractor &ext)
      : Node()
   {
      ext >> m_resultType >> m_resultId >> m_operand1 >> m_operand2;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetOperand1() const
   {
      return m_operand1;
   }

   const NodeConstPtr &GetOperand2() const
   {
      return m_operand2;
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpFUnordGreaterThanEqual;
   }

private:
   NodeConstPtr    m_operand1;
   NodeConstPtr    m_operand2;
};

class NodeShiftRightLogical : public Node
{
public:
   NodeShiftRightLogical(Extractor &ext)
      : Node()
   {
      ext >> m_resultType >> m_resultId >> m_base >> m_shift;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetBase() const
   {
      return m_base;
   }

   const NodeConstPtr &GetShift() const
   {
      return m_shift;
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpShiftRightLogical;
   }

private:
   NodeConstPtr    m_base;
   NodeConstPtr    m_shift;
};

class NodeShiftRightArithmetic : public Node
{
public:
   NodeShiftRightArithmetic(Extractor &ext)
      : Node()
   {
      ext >> m_resultType >> m_resultId >> m_base >> m_shift;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetBase() const
   {
      return m_base;
   }

   const NodeConstPtr &GetShift() const
   {
      return m_shift;
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpShiftRightArithmetic;
   }

private:
   NodeConstPtr    m_base;
   NodeConstPtr    m_shift;
};

class NodeShiftLeftLogical : public Node
{
public:
   NodeShiftLeftLogical(Extractor &ext)
      : Node()
   {
      ext >> m_resultType >> m_resultId >> m_base >> m_shift;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetBase() const
   {
      return m_base;
   }

   const NodeConstPtr &GetShift() const
   {
      return m_shift;
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpShiftLeftLogical;
   }

private:
   NodeConstPtr    m_base;
   NodeConstPtr    m_shift;
};

class NodeBitwiseOr : public Node
{
public:
   NodeBitwiseOr(Extractor &ext)
      : Node()
   {
      ext >> m_resultType >> m_resultId >> m_operand1 >> m_operand2;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetOperand1() const
   {
      return m_operand1;
   }

   const NodeConstPtr &GetOperand2() const
   {
      return m_operand2;
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpBitwiseOr;
   }

private:
   NodeConstPtr    m_operand1;
   NodeConstPtr    m_operand2;
};

class NodeBitwiseXor : public Node
{
public:
   NodeBitwiseXor(Extractor &ext)
      : Node()
   {
      ext >> m_resultType >> m_resultId >> m_operand1 >> m_operand2;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetOperand1() const
   {
      return m_operand1;
   }

   const NodeConstPtr &GetOperand2() const
   {
      return m_operand2;
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpBitwiseXor;
   }

private:
   NodeConstPtr    m_operand1;
   NodeConstPtr    m_operand2;
};

class NodeBitwiseAnd : public Node
{
public:
   NodeBitwiseAnd(Extractor &ext)
      : Node()
   {
      ext >> m_resultType >> m_resultId >> m_operand1 >> m_operand2;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetOperand1() const
   {
      return m_operand1;
   }

   const NodeConstPtr &GetOperand2() const
   {
      return m_operand2;
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpBitwiseAnd;
   }

private:
   NodeConstPtr    m_operand1;
   NodeConstPtr    m_operand2;
};

class NodeNot : public Node
{
public:
   NodeNot(Extractor &ext)
      : Node()
   {
      ext >> m_resultType >> m_resultId >> m_operand;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetOperand() const
   {
      return m_operand;
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpNot;
   }

private:
   NodeConstPtr    m_operand;
};

class NodeBitFieldInsert : public Node
{
public:
   NodeBitFieldInsert(Extractor &ext)
      : Node()
   {
      ext >> m_resultType >> m_resultId >> m_base >> m_insert >> m_offset >> m_count;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetBase() const
   {
      return m_base;
   }

   const NodeConstPtr &GetInsert() const
   {
      return m_insert;
   }

   const NodeConstPtr &GetOffset() const
   {
      return m_offset;
   }

   const NodeConstPtr &GetCount() const
   {
      return m_count;
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpBitFieldInsert;
   }

private:
   NodeConstPtr    m_base;
   NodeConstPtr    m_insert;
   NodeConstPtr    m_offset;
   NodeConstPtr    m_count;
};

class NodeBitFieldSExtract : public Node
{
public:
   NodeBitFieldSExtract(Extractor &ext)
      : Node()
   {
      ext >> m_resultType >> m_resultId >> m_base >> m_offset >> m_count;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetBase() const
   {
      return m_base;
   }

   const NodeConstPtr &GetOffset() const
   {
      return m_offset;
   }

   const NodeConstPtr &GetCount() const
   {
      return m_count;
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpBitFieldSExtract;
   }

private:
   NodeConstPtr    m_base;
   NodeConstPtr    m_offset;
   NodeConstPtr    m_count;
};

class NodeBitFieldUExtract : public Node
{
public:
   NodeBitFieldUExtract(Extractor &ext)
      : Node()
   {
      ext >> m_resultType >> m_resultId >> m_base >> m_offset >> m_count;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetBase() const
   {
      return m_base;
   }

   const NodeConstPtr &GetOffset() const
   {
      return m_offset;
   }

   const NodeConstPtr &GetCount() const
   {
      return m_count;
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpBitFieldUExtract;
   }

private:
   NodeConstPtr    m_base;
   NodeConstPtr    m_offset;
   NodeConstPtr    m_count;
};

class NodeBitReverse : public Node
{
public:
   NodeBitReverse(Extractor &ext)
      : Node()
   {
      ext >> m_resultType >> m_resultId >> m_base;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetBase() const
   {
      return m_base;
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpBitReverse;
   }

private:
   NodeConstPtr    m_base;
};

class NodeBitCount : public Node
{
public:
   NodeBitCount(Extractor &ext)
      : Node()
   {
      ext >> m_resultType >> m_resultId >> m_base;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetBase() const
   {
      return m_base;
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpBitCount;
   }

private:
   NodeConstPtr    m_base;
};

class NodeDPdx : public Node
{
public:
   NodeDPdx(Extractor &ext)
      : Node()
   {
      ext >> m_resultType >> m_resultId >> m_p;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetP() const
   {
      return m_p;
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpDPdx;
   }

private:
   NodeConstPtr    m_p;
};

class NodeDPdy : public Node
{
public:
   NodeDPdy(Extractor &ext)
      : Node()
   {
      ext >> m_resultType >> m_resultId >> m_p;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetP() const
   {
      return m_p;
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpDPdy;
   }

private:
   NodeConstPtr    m_p;
};

class NodeFwidth : public Node
{
public:
   NodeFwidth(Extractor &ext)
      : Node()
   {
      ext >> m_resultType >> m_resultId >> m_p;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetP() const
   {
      return m_p;
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpFwidth;
   }

private:
   NodeConstPtr    m_p;
};

class NodeDPdxFine : public Node
{
public:
   NodeDPdxFine(Extractor &ext)
      : Node()
   {
      ext >> m_resultType >> m_resultId >> m_p;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetP() const
   {
      return m_p;
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpDPdxFine;
   }

private:
   NodeConstPtr    m_p;
};

class NodeDPdyFine : public Node
{
public:
   NodeDPdyFine(Extractor &ext)
      : Node()
   {
      ext >> m_resultType >> m_resultId >> m_p;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetP() const
   {
      return m_p;
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpDPdyFine;
   }

private:
   NodeConstPtr    m_p;
};

class NodeFwidthFine : public Node
{
public:
   NodeFwidthFine(Extractor &ext)
      : Node()
   {
      ext >> m_resultType >> m_resultId >> m_p;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetP() const
   {
      return m_p;
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpFwidthFine;
   }

private:
   NodeConstPtr    m_p;
};

class NodeDPdxCoarse : public Node
{
public:
   NodeDPdxCoarse(Extractor &ext)
      : Node()
   {
      ext >> m_resultType >> m_resultId >> m_p;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetP() const
   {
      return m_p;
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpDPdxCoarse;
   }

private:
   NodeConstPtr    m_p;
};

class NodeDPdyCoarse : public Node
{
public:
   NodeDPdyCoarse(Extractor &ext)
      : Node()
   {
      ext >> m_resultType >> m_resultId >> m_p;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetP() const
   {
      return m_p;
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpDPdyCoarse;
   }

private:
   NodeConstPtr    m_p;
};

class NodeFwidthCoarse : public Node
{
public:
   NodeFwidthCoarse(Extractor &ext)
      : Node()
   {
      ext >> m_resultType >> m_resultId >> m_p;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetP() const
   {
      return m_p;
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpFwidthCoarse;
   }

private:
   NodeConstPtr    m_p;
};

class NodeControlBarrier : public Node
{
public:
   NodeControlBarrier(Extractor &ext)
      : Node()
   {
      ext >> m_execution >> m_memory >> m_semantics;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetExecution() const
   {
      return m_execution;
   }

   const NodeConstPtr &GetMemory() const
   {
      return m_memory;
   }

   const NodeConstPtr &GetSemantics() const
   {
      return m_semantics;
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpControlBarrier;
   }

private:
   NodeConstPtr    m_execution;
   NodeConstPtr    m_memory;
   NodeConstPtr    m_semantics;
};

class NodeMemoryBarrier : public Node
{
public:
   NodeMemoryBarrier(Extractor &ext)
      : Node()
   {
      ext >> m_memory >> m_semantics;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetMemory() const
   {
      return m_memory;
   }

   const NodeConstPtr &GetSemantics() const
   {
      return m_semantics;
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpMemoryBarrier;
   }

private:
   NodeConstPtr    m_memory;
   NodeConstPtr    m_semantics;
};

class NodeAtomicLoad : public Node
{
public:
   NodeAtomicLoad(Extractor &ext)
      : Node()
   {
      ext >> m_resultType >> m_resultId >> m_pointer >> m_scope >> m_semantics;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetPointer() const
   {
      return m_pointer;
   }

   const NodeConstPtr &GetScope() const
   {
      return m_scope;
   }

   const NodeConstPtr &GetSemantics() const
   {
      return m_semantics;
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpAtomicLoad;
   }

private:
   NodeConstPtr    m_pointer;
   NodeConstPtr    m_scope;
   NodeConstPtr    m_semantics;
};

class NodeAtomicStore : public Node
{
public:
   NodeAtomicStore(Extractor &ext)
      : Node()
   {
      ext >> m_pointer >> m_scope >> m_semantics >> m_value;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetPointer() const
   {
      return m_pointer;
   }

   const NodeConstPtr &GetScope() const
   {
      return m_scope;
   }

   const NodeConstPtr &GetSemantics() const
   {
      return m_semantics;
   }

   const NodeConstPtr &GetValue() const
   {
      return m_value;
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpAtomicStore;
   }

private:
   NodeConstPtr    m_pointer;
   NodeConstPtr    m_scope;
   NodeConstPtr    m_semantics;
   NodeConstPtr    m_value;
};

class NodeAtomicExchange : public Node
{
public:
   NodeAtomicExchange(Extractor &ext)
      : Node()
   {
      ext >> m_resultType >> m_resultId >> m_pointer >> m_scope >> m_semantics >> m_value;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetPointer() const
   {
      return m_pointer;
   }

   const NodeConstPtr &GetScope() const
   {
      return m_scope;
   }

   const NodeConstPtr &GetSemantics() const
   {
      return m_semantics;
   }

   const NodeConstPtr &GetValue() const
   {
      return m_value;
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpAtomicExchange;
   }

private:
   NodeConstPtr    m_pointer;
   NodeConstPtr    m_scope;
   NodeConstPtr    m_semantics;
   NodeConstPtr    m_value;
};

class NodeAtomicCompareExchange : public Node
{
public:
   NodeAtomicCompareExchange(Extractor &ext)
      : Node()
   {
      ext >> m_resultType >> m_resultId >> m_pointer >> m_scope >> m_equal >> m_unequal >> m_value >> m_comparator;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetPointer() const
   {
      return m_pointer;
   }

   const NodeConstPtr &GetScope() const
   {
      return m_scope;
   }

   const NodeConstPtr &GetEqual() const
   {
      return m_equal;
   }

   const NodeConstPtr &GetUnequal() const
   {
      return m_unequal;
   }

   const NodeConstPtr &GetValue() const
   {
      return m_value;
   }

   const NodeConstPtr &GetComparator() const
   {
      return m_comparator;
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpAtomicCompareExchange;
   }

private:
   NodeConstPtr    m_pointer;
   NodeConstPtr    m_scope;
   NodeConstPtr    m_equal;
   NodeConstPtr    m_unequal;
   NodeConstPtr    m_value;
   NodeConstPtr    m_comparator;
};

class NodeAtomicIIncrement : public Node
{
public:
   NodeAtomicIIncrement(Extractor &ext)
      : Node()
   {
      ext >> m_resultType >> m_resultId >> m_pointer >> m_scope >> m_semantics;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetPointer() const
   {
      return m_pointer;
   }

   const NodeConstPtr &GetScope() const
   {
      return m_scope;
   }

   const NodeConstPtr &GetSemantics() const
   {
      return m_semantics;
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpAtomicIIncrement;
   }

private:
   NodeConstPtr    m_pointer;
   NodeConstPtr    m_scope;
   NodeConstPtr    m_semantics;
};

class NodeAtomicIDecrement : public Node
{
public:
   NodeAtomicIDecrement(Extractor &ext)
      : Node()
   {
      ext >> m_resultType >> m_resultId >> m_pointer >> m_scope >> m_semantics;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetPointer() const
   {
      return m_pointer;
   }

   const NodeConstPtr &GetScope() const
   {
      return m_scope;
   }

   const NodeConstPtr &GetSemantics() const
   {
      return m_semantics;
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpAtomicIDecrement;
   }

private:
   NodeConstPtr    m_pointer;
   NodeConstPtr    m_scope;
   NodeConstPtr    m_semantics;
};

class NodeAtomicIAdd : public Node
{
public:
   NodeAtomicIAdd(Extractor &ext)
      : Node()
   {
      ext >> m_resultType >> m_resultId >> m_pointer >> m_scope >> m_semantics >> m_value;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetPointer() const
   {
      return m_pointer;
   }

   const NodeConstPtr &GetScope() const
   {
      return m_scope;
   }

   const NodeConstPtr &GetSemantics() const
   {
      return m_semantics;
   }

   const NodeConstPtr &GetValue() const
   {
      return m_value;
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpAtomicIAdd;
   }

private:
   NodeConstPtr    m_pointer;
   NodeConstPtr    m_scope;
   NodeConstPtr    m_semantics;
   NodeConstPtr    m_value;
};

class NodeAtomicISub : public Node
{
public:
   NodeAtomicISub(Extractor &ext)
      : Node()
   {
      ext >> m_resultType >> m_resultId >> m_pointer >> m_scope >> m_semantics >> m_value;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetPointer() const
   {
      return m_pointer;
   }

   const NodeConstPtr &GetScope() const
   {
      return m_scope;
   }

   const NodeConstPtr &GetSemantics() const
   {
      return m_semantics;
   }

   const NodeConstPtr &GetValue() const
   {
      return m_value;
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpAtomicISub;
   }

private:
   NodeConstPtr    m_pointer;
   NodeConstPtr    m_scope;
   NodeConstPtr    m_semantics;
   NodeConstPtr    m_value;
};

class NodeAtomicSMin : public Node
{
public:
   NodeAtomicSMin(Extractor &ext)
      : Node()
   {
      ext >> m_resultType >> m_resultId >> m_pointer >> m_scope >> m_semantics >> m_value;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetPointer() const
   {
      return m_pointer;
   }

   const NodeConstPtr &GetScope() const
   {
      return m_scope;
   }

   const NodeConstPtr &GetSemantics() const
   {
      return m_semantics;
   }

   const NodeConstPtr &GetValue() const
   {
      return m_value;
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpAtomicSMin;
   }

private:
   NodeConstPtr    m_pointer;
   NodeConstPtr    m_scope;
   NodeConstPtr    m_semantics;
   NodeConstPtr    m_value;
};

class NodeAtomicUMin : public Node
{
public:
   NodeAtomicUMin(Extractor &ext)
      : Node()
   {
      ext >> m_resultType >> m_resultId >> m_pointer >> m_scope >> m_semantics >> m_value;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetPointer() const
   {
      return m_pointer;
   }

   const NodeConstPtr &GetScope() const
   {
      return m_scope;
   }

   const NodeConstPtr &GetSemantics() const
   {
      return m_semantics;
   }

   const NodeConstPtr &GetValue() const
   {
      return m_value;
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpAtomicUMin;
   }

private:
   NodeConstPtr    m_pointer;
   NodeConstPtr    m_scope;
   NodeConstPtr    m_semantics;
   NodeConstPtr    m_value;
};

class NodeAtomicSMax : public Node
{
public:
   NodeAtomicSMax(Extractor &ext)
      : Node()
   {
      ext >> m_resultType >> m_resultId >> m_pointer >> m_scope >> m_semantics >> m_value;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetPointer() const
   {
      return m_pointer;
   }

   const NodeConstPtr &GetScope() const
   {
      return m_scope;
   }

   const NodeConstPtr &GetSemantics() const
   {
      return m_semantics;
   }

   const NodeConstPtr &GetValue() const
   {
      return m_value;
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpAtomicSMax;
   }

private:
   NodeConstPtr    m_pointer;
   NodeConstPtr    m_scope;
   NodeConstPtr    m_semantics;
   NodeConstPtr    m_value;
};

class NodeAtomicUMax : public Node
{
public:
   NodeAtomicUMax(Extractor &ext)
      : Node()
   {
      ext >> m_resultType >> m_resultId >> m_pointer >> m_scope >> m_semantics >> m_value;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetPointer() const
   {
      return m_pointer;
   }

   const NodeConstPtr &GetScope() const
   {
      return m_scope;
   }

   const NodeConstPtr &GetSemantics() const
   {
      return m_semantics;
   }

   const NodeConstPtr &GetValue() const
   {
      return m_value;
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpAtomicUMax;
   }

private:
   NodeConstPtr    m_pointer;
   NodeConstPtr    m_scope;
   NodeConstPtr    m_semantics;
   NodeConstPtr    m_value;
};

class NodeAtomicAnd : public Node
{
public:
   NodeAtomicAnd(Extractor &ext)
      : Node()
   {
      ext >> m_resultType >> m_resultId >> m_pointer >> m_scope >> m_semantics >> m_value;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetPointer() const
   {
      return m_pointer;
   }

   const NodeConstPtr &GetScope() const
   {
      return m_scope;
   }

   const NodeConstPtr &GetSemantics() const
   {
      return m_semantics;
   }

   const NodeConstPtr &GetValue() const
   {
      return m_value;
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpAtomicAnd;
   }

private:
   NodeConstPtr    m_pointer;
   NodeConstPtr    m_scope;
   NodeConstPtr    m_semantics;
   NodeConstPtr    m_value;
};

class NodeAtomicOr : public Node
{
public:
   NodeAtomicOr(Extractor &ext)
      : Node()
   {
      ext >> m_resultType >> m_resultId >> m_pointer >> m_scope >> m_semantics >> m_value;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetPointer() const
   {
      return m_pointer;
   }

   const NodeConstPtr &GetScope() const
   {
      return m_scope;
   }

   const NodeConstPtr &GetSemantics() const
   {
      return m_semantics;
   }

   const NodeConstPtr &GetValue() const
   {
      return m_value;
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpAtomicOr;
   }

private:
   NodeConstPtr    m_pointer;
   NodeConstPtr    m_scope;
   NodeConstPtr    m_semantics;
   NodeConstPtr    m_value;
};

class NodeAtomicXor : public Node
{
public:
   NodeAtomicXor(Extractor &ext)
      : Node()
   {
      ext >> m_resultType >> m_resultId >> m_pointer >> m_scope >> m_semantics >> m_value;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetPointer() const
   {
      return m_pointer;
   }

   const NodeConstPtr &GetScope() const
   {
      return m_scope;
   }

   const NodeConstPtr &GetSemantics() const
   {
      return m_semantics;
   }

   const NodeConstPtr &GetValue() const
   {
      return m_value;
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpAtomicXor;
   }

private:
   NodeConstPtr    m_pointer;
   NodeConstPtr    m_scope;
   NodeConstPtr    m_semantics;
   NodeConstPtr    m_value;
};

class NodePhi : public Node
{
public:
   NodePhi(Extractor &ext)
      : Node()
      , m_variable(ext.GetAllocator())
   {
      ext >> m_resultType >> m_resultId >> m_variable;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const spv::vector<std::pair<NodeConstPtr, NodeConstPtr>> &GetVariable() const
   {
      return m_variable;
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpPhi;
   }

private:
   spv::vector<std::pair<NodeConstPtr, NodeConstPtr>>    m_variable;
};

class NodeLoopMerge : public Node
{
public:
   NodeLoopMerge(Extractor &ext)
      : Node()
   {
      ext >> m_mergeBlock >> m_continueTarget >> m_loopControl;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetMergeBlock() const
   {
      return m_mergeBlock;
   }

   const NodeConstPtr &GetContinueTarget() const
   {
      return m_continueTarget;
   }

   spv::LoopControlMask GetLoopControl() const
   {
      return m_loopControl;
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpLoopMerge;
   }

private:
   NodeConstPtr            m_mergeBlock;
   NodeConstPtr            m_continueTarget;
   spv::LoopControlMask    m_loopControl;
};

class NodeSelectionMerge : public Node
{
public:
   NodeSelectionMerge(Extractor &ext)
      : Node()
   {
      ext >> m_mergeBlock >> m_selectionControl;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetMergeBlock() const
   {
      return m_mergeBlock;
   }

   spv::SelectionControlMask GetSelectionControl() const
   {
      return m_selectionControl;
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpSelectionMerge;
   }

private:
   NodeConstPtr                 m_mergeBlock;
   spv::SelectionControlMask    m_selectionControl;
};

class NodeLabel : public Node
{
public:
   NodeLabel(Extractor &ext)
      : Node()
      , m_data(spv::ModuleAllocator<DataLabel>(ext.GetAllocator()).New(ext.GetAllocator()))
   {
      ext >> m_resultId;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   DataLabel *GetData() { return m_data; }
   DataLabel *GetData() const { return m_data; }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpLabel;
   }

private:

   DataLabel *m_data;
};

class NodeBranch : public Node
{
public:
   NodeBranch(Extractor &ext)
      : Node()
   {
      ext >> m_targetLabel;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetTargetLabel() const
   {
      return m_targetLabel;
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpBranch;
   }

private:
   NodeConstPtr    m_targetLabel;
};

class NodeBranchConditional : public Node
{
public:
   NodeBranchConditional(Extractor &ext)
      : Node()
      , m_branchweights(ext.GetAllocator())
   {
      ext >> m_condition >> m_trueLabel >> m_falseLabel >> m_branchweights;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetCondition() const
   {
      return m_condition;
   }

   const NodeConstPtr &GetTrueLabel() const
   {
      return m_trueLabel;
   }

   const NodeConstPtr &GetFalseLabel() const
   {
      return m_falseLabel;
   }

   const spv::vector<uint32_t> &GetBranchweights() const
   {
      return m_branchweights;
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpBranchConditional;
   }

private:
   NodeConstPtr             m_condition;
   NodeConstPtr             m_trueLabel;
   NodeConstPtr             m_falseLabel;
   spv::vector<uint32_t>    m_branchweights;
};

class NodeSwitch : public Node
{
public:
   NodeSwitch(Extractor &ext)
      : Node()
      , m_target(ext.GetAllocator())
   {
      ext >> m_selector >> m_default >> m_target;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetSelector() const
   {
      return m_selector;
   }

   const NodeConstPtr &GetDefault() const
   {
      return m_default;
   }

   const spv::vector<std::pair<uint32_t, NodeConstPtr>> &GetTarget() const
   {
      return m_target;
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpSwitch;
   }

private:
   NodeConstPtr                                      m_selector;
   NodeConstPtr                                      m_default;
   spv::vector<std::pair<uint32_t, NodeConstPtr>>    m_target;
};

class NodeKill : public Node
{
public:
   NodeKill(Extractor &ext)
      : Node()
   {
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpKill;
   }

private:
};

class NodeReturn : public Node
{
public:
   NodeReturn(Extractor &ext)
      : Node()
   {
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpReturn;
   }

private:
};

class NodeReturnValue : public Node
{
public:
   NodeReturnValue(Extractor &ext)
      : Node()
   {
      ext >> m_value;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetValue() const
   {
      return m_value;
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpReturnValue;
   }

private:
   NodeConstPtr    m_value;
};

class NodeUnreachable : public Node
{
public:
   NodeUnreachable(Extractor &ext)
      : Node()
   {
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpUnreachable;
   }

private:
};

class NodeNoLine : public Node
{
public:
   NodeNoLine(Extractor &ext)
      : Node()
   {
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpNoLine;
   }

private:
};

class NodeModuleProcessed : public Node
{
public:
   NodeModuleProcessed(Extractor &ext)
      : Node()
      , m_process(ext.GetAllocator())
   {
      ext >> m_process;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const spv::string &GetProcess() const
   {
      return m_process;
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpModuleProcessed;
   }

private:
   spv::string    m_process;
};

class NodeExecutionModeId : public Node
{
public:
   NodeExecutionModeId(Extractor &ext)
      : Node()
   {
      ext >> m_entryPoint >> m_mode;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetEntryPoint() const
   {
      return m_entryPoint;
   }

   spv::ExecutionMode GetMode() const
   {
      return m_mode;
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpExecutionModeId;
   }

private:
   NodeConstPtr          m_entryPoint;
   spv::ExecutionMode    m_mode;
};

class NodeDecorateId : public Node
{
public:
   NodeDecorateId(Extractor &ext)
      : Node()
   {
      ext >> m_target >> m_decoration;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetTarget() const
   {
      return m_target;
   }

   const Decoration &GetDecoration() const
   {
      return m_decoration;
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpDecorateId;
   }

private:
   NodeConstPtr    m_target;
   Decoration      m_decoration;
};

class NodeGroupNonUniformElect : public Node
{
public:
   NodeGroupNonUniformElect(Extractor &ext)
      : Node()
   {
      ext >> m_resultType >> m_resultId >> m_execution;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetExecution() const
   {
      return m_execution;
   }

   spv::Core GetOpCode() const override
   {
      return spv::Core::OpGroupNonUniformElect;
   }

private:
   NodeConstPtr    m_execution;
};

class NodeStdRound : public NodeGLSL
{
public:
   NodeStdRound(Extractor &ext)
      : NodeGLSL()
   {
      ext >> m_resultType >> m_resultId >> nullptr >> nullptr >> m_x;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetX() const
   {
      return m_x;
   }

private:
   NodeConstPtr    m_x;
};

class NodeStdRoundEven : public NodeGLSL
{
public:
   NodeStdRoundEven(Extractor &ext)
      : NodeGLSL()
   {
      ext >> m_resultType >> m_resultId >> nullptr >> nullptr >> m_x;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetX() const
   {
      return m_x;
   }

private:
   NodeConstPtr    m_x;
};

class NodeStdTrunc : public NodeGLSL
{
public:
   NodeStdTrunc(Extractor &ext)
      : NodeGLSL()
   {
      ext >> m_resultType >> m_resultId >> nullptr >> nullptr >> m_x;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetX() const
   {
      return m_x;
   }

private:
   NodeConstPtr    m_x;
};

class NodeStdFAbs : public NodeGLSL
{
public:
   NodeStdFAbs(Extractor &ext)
      : NodeGLSL()
   {
      ext >> m_resultType >> m_resultId >> nullptr >> nullptr >> m_x;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetX() const
   {
      return m_x;
   }

private:
   NodeConstPtr    m_x;
};

class NodeStdSAbs : public NodeGLSL
{
public:
   NodeStdSAbs(Extractor &ext)
      : NodeGLSL()
   {
      ext >> m_resultType >> m_resultId >> nullptr >> nullptr >> m_x;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetX() const
   {
      return m_x;
   }

private:
   NodeConstPtr    m_x;
};

class NodeStdFSign : public NodeGLSL
{
public:
   NodeStdFSign(Extractor &ext)
      : NodeGLSL()
   {
      ext >> m_resultType >> m_resultId >> nullptr >> nullptr >> m_x;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetX() const
   {
      return m_x;
   }

private:
   NodeConstPtr    m_x;
};

class NodeStdSSign : public NodeGLSL
{
public:
   NodeStdSSign(Extractor &ext)
      : NodeGLSL()
   {
      ext >> m_resultType >> m_resultId >> nullptr >> nullptr >> m_x;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetX() const
   {
      return m_x;
   }

private:
   NodeConstPtr    m_x;
};

class NodeStdFloor : public NodeGLSL
{
public:
   NodeStdFloor(Extractor &ext)
      : NodeGLSL()
   {
      ext >> m_resultType >> m_resultId >> nullptr >> nullptr >> m_x;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetX() const
   {
      return m_x;
   }

private:
   NodeConstPtr    m_x;
};

class NodeStdCeil : public NodeGLSL
{
public:
   NodeStdCeil(Extractor &ext)
      : NodeGLSL()
   {
      ext >> m_resultType >> m_resultId >> nullptr >> nullptr >> m_x;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetX() const
   {
      return m_x;
   }

private:
   NodeConstPtr    m_x;
};

class NodeStdFract : public NodeGLSL
{
public:
   NodeStdFract(Extractor &ext)
      : NodeGLSL()
   {
      ext >> m_resultType >> m_resultId >> nullptr >> nullptr >> m_x;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetX() const
   {
      return m_x;
   }

private:
   NodeConstPtr    m_x;
};

class NodeStdRadians : public NodeGLSL
{
public:
   NodeStdRadians(Extractor &ext)
      : NodeGLSL()
   {
      ext >> m_resultType >> m_resultId >> nullptr >> nullptr >> m_degrees;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetDegrees() const
   {
      return m_degrees;
   }

private:
   NodeConstPtr    m_degrees;
};

class NodeStdDegrees : public NodeGLSL
{
public:
   NodeStdDegrees(Extractor &ext)
      : NodeGLSL()
   {
      ext >> m_resultType >> m_resultId >> nullptr >> nullptr >> m_radians;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetRadians() const
   {
      return m_radians;
   }

private:
   NodeConstPtr    m_radians;
};

class NodeStdSin : public NodeGLSL
{
public:
   NodeStdSin(Extractor &ext)
      : NodeGLSL()
   {
      ext >> m_resultType >> m_resultId >> nullptr >> nullptr >> m_x;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetX() const
   {
      return m_x;
   }

private:
   NodeConstPtr    m_x;
};

class NodeStdCos : public NodeGLSL
{
public:
   NodeStdCos(Extractor &ext)
      : NodeGLSL()
   {
      ext >> m_resultType >> m_resultId >> nullptr >> nullptr >> m_x;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetX() const
   {
      return m_x;
   }

private:
   NodeConstPtr    m_x;
};

class NodeStdTan : public NodeGLSL
{
public:
   NodeStdTan(Extractor &ext)
      : NodeGLSL()
   {
      ext >> m_resultType >> m_resultId >> nullptr >> nullptr >> m_x;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetX() const
   {
      return m_x;
   }

private:
   NodeConstPtr    m_x;
};

class NodeStdAsin : public NodeGLSL
{
public:
   NodeStdAsin(Extractor &ext)
      : NodeGLSL()
   {
      ext >> m_resultType >> m_resultId >> nullptr >> nullptr >> m_x;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetX() const
   {
      return m_x;
   }

private:
   NodeConstPtr    m_x;
};

class NodeStdAcos : public NodeGLSL
{
public:
   NodeStdAcos(Extractor &ext)
      : NodeGLSL()
   {
      ext >> m_resultType >> m_resultId >> nullptr >> nullptr >> m_x;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetX() const
   {
      return m_x;
   }

private:
   NodeConstPtr    m_x;
};

class NodeStdAtan : public NodeGLSL
{
public:
   NodeStdAtan(Extractor &ext)
      : NodeGLSL()
   {
      ext >> m_resultType >> m_resultId >> nullptr >> nullptr >> m_y_over_x;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetY_over_x() const
   {
      return m_y_over_x;
   }

private:
   NodeConstPtr    m_y_over_x;
};

class NodeStdSinh : public NodeGLSL
{
public:
   NodeStdSinh(Extractor &ext)
      : NodeGLSL()
   {
      ext >> m_resultType >> m_resultId >> nullptr >> nullptr >> m_x;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetX() const
   {
      return m_x;
   }

private:
   NodeConstPtr    m_x;
};

class NodeStdCosh : public NodeGLSL
{
public:
   NodeStdCosh(Extractor &ext)
      : NodeGLSL()
   {
      ext >> m_resultType >> m_resultId >> nullptr >> nullptr >> m_x;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetX() const
   {
      return m_x;
   }

private:
   NodeConstPtr    m_x;
};

class NodeStdTanh : public NodeGLSL
{
public:
   NodeStdTanh(Extractor &ext)
      : NodeGLSL()
   {
      ext >> m_resultType >> m_resultId >> nullptr >> nullptr >> m_x;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetX() const
   {
      return m_x;
   }

private:
   NodeConstPtr    m_x;
};

class NodeStdAsinh : public NodeGLSL
{
public:
   NodeStdAsinh(Extractor &ext)
      : NodeGLSL()
   {
      ext >> m_resultType >> m_resultId >> nullptr >> nullptr >> m_x;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetX() const
   {
      return m_x;
   }

private:
   NodeConstPtr    m_x;
};

class NodeStdAcosh : public NodeGLSL
{
public:
   NodeStdAcosh(Extractor &ext)
      : NodeGLSL()
   {
      ext >> m_resultType >> m_resultId >> nullptr >> nullptr >> m_x;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetX() const
   {
      return m_x;
   }

private:
   NodeConstPtr    m_x;
};

class NodeStdAtanh : public NodeGLSL
{
public:
   NodeStdAtanh(Extractor &ext)
      : NodeGLSL()
   {
      ext >> m_resultType >> m_resultId >> nullptr >> nullptr >> m_x;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetX() const
   {
      return m_x;
   }

private:
   NodeConstPtr    m_x;
};

class NodeStdAtan2 : public NodeGLSL
{
public:
   NodeStdAtan2(Extractor &ext)
      : NodeGLSL()
   {
      ext >> m_resultType >> m_resultId >> nullptr >> nullptr >> m_y >> m_x;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetY() const
   {
      return m_y;
   }

   const NodeConstPtr &GetX() const
   {
      return m_x;
   }

private:
   NodeConstPtr    m_y;
   NodeConstPtr    m_x;
};

class NodeStdPow : public NodeGLSL
{
public:
   NodeStdPow(Extractor &ext)
      : NodeGLSL()
   {
      ext >> m_resultType >> m_resultId >> nullptr >> nullptr >> m_x >> m_y;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetX() const
   {
      return m_x;
   }

   const NodeConstPtr &GetY() const
   {
      return m_y;
   }

private:
   NodeConstPtr    m_x;
   NodeConstPtr    m_y;
};

class NodeStdExp : public NodeGLSL
{
public:
   NodeStdExp(Extractor &ext)
      : NodeGLSL()
   {
      ext >> m_resultType >> m_resultId >> nullptr >> nullptr >> m_x;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetX() const
   {
      return m_x;
   }

private:
   NodeConstPtr    m_x;
};

class NodeStdLog : public NodeGLSL
{
public:
   NodeStdLog(Extractor &ext)
      : NodeGLSL()
   {
      ext >> m_resultType >> m_resultId >> nullptr >> nullptr >> m_x;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetX() const
   {
      return m_x;
   }

private:
   NodeConstPtr    m_x;
};

class NodeStdExp2 : public NodeGLSL
{
public:
   NodeStdExp2(Extractor &ext)
      : NodeGLSL()
   {
      ext >> m_resultType >> m_resultId >> nullptr >> nullptr >> m_x;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetX() const
   {
      return m_x;
   }

private:
   NodeConstPtr    m_x;
};

class NodeStdLog2 : public NodeGLSL
{
public:
   NodeStdLog2(Extractor &ext)
      : NodeGLSL()
   {
      ext >> m_resultType >> m_resultId >> nullptr >> nullptr >> m_x;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetX() const
   {
      return m_x;
   }

private:
   NodeConstPtr    m_x;
};

class NodeStdSqrt : public NodeGLSL
{
public:
   NodeStdSqrt(Extractor &ext)
      : NodeGLSL()
   {
      ext >> m_resultType >> m_resultId >> nullptr >> nullptr >> m_x;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetX() const
   {
      return m_x;
   }

private:
   NodeConstPtr    m_x;
};

class NodeStdInverseSqrt : public NodeGLSL
{
public:
   NodeStdInverseSqrt(Extractor &ext)
      : NodeGLSL()
   {
      ext >> m_resultType >> m_resultId >> nullptr >> nullptr >> m_x;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetX() const
   {
      return m_x;
   }

private:
   NodeConstPtr    m_x;
};

class NodeStdDeterminant : public NodeGLSL
{
public:
   NodeStdDeterminant(Extractor &ext)
      : NodeGLSL()
   {
      ext >> m_resultType >> m_resultId >> nullptr >> nullptr >> m_x;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetX() const
   {
      return m_x;
   }

private:
   NodeConstPtr    m_x;
};

class NodeStdMatrixInverse : public NodeGLSL
{
public:
   NodeStdMatrixInverse(Extractor &ext)
      : NodeGLSL()
   {
      ext >> m_resultType >> m_resultId >> nullptr >> nullptr >> m_x;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetX() const
   {
      return m_x;
   }

private:
   NodeConstPtr    m_x;
};

class NodeStdModf : public NodeGLSL
{
public:
   NodeStdModf(Extractor &ext)
      : NodeGLSL()
   {
      ext >> m_resultType >> m_resultId >> nullptr >> nullptr >> m_x >> m_i;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetX() const
   {
      return m_x;
   }

   const NodeConstPtr &GetI() const
   {
      return m_i;
   }

private:
   NodeConstPtr    m_x;
   NodeConstPtr    m_i;
};

class NodeStdModfStruct : public NodeGLSL
{
public:
   NodeStdModfStruct(Extractor &ext)
      : NodeGLSL()
   {
      ext >> m_resultType >> m_resultId >> nullptr >> nullptr >> m_x;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetX() const
   {
      return m_x;
   }

private:
   NodeConstPtr    m_x;
};

class NodeStdFMin : public NodeGLSL
{
public:
   NodeStdFMin(Extractor &ext)
      : NodeGLSL()
   {
      ext >> m_resultType >> m_resultId >> nullptr >> nullptr >> m_x >> m_y;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetX() const
   {
      return m_x;
   }

   const NodeConstPtr &GetY() const
   {
      return m_y;
   }

private:
   NodeConstPtr    m_x;
   NodeConstPtr    m_y;
};

class NodeStdUMin : public NodeGLSL
{
public:
   NodeStdUMin(Extractor &ext)
      : NodeGLSL()
   {
      ext >> m_resultType >> m_resultId >> nullptr >> nullptr >> m_x >> m_y;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetX() const
   {
      return m_x;
   }

   const NodeConstPtr &GetY() const
   {
      return m_y;
   }

private:
   NodeConstPtr    m_x;
   NodeConstPtr    m_y;
};

class NodeStdSMin : public NodeGLSL
{
public:
   NodeStdSMin(Extractor &ext)
      : NodeGLSL()
   {
      ext >> m_resultType >> m_resultId >> nullptr >> nullptr >> m_x >> m_y;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetX() const
   {
      return m_x;
   }

   const NodeConstPtr &GetY() const
   {
      return m_y;
   }

private:
   NodeConstPtr    m_x;
   NodeConstPtr    m_y;
};

class NodeStdFMax : public NodeGLSL
{
public:
   NodeStdFMax(Extractor &ext)
      : NodeGLSL()
   {
      ext >> m_resultType >> m_resultId >> nullptr >> nullptr >> m_x >> m_y;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetX() const
   {
      return m_x;
   }

   const NodeConstPtr &GetY() const
   {
      return m_y;
   }

private:
   NodeConstPtr    m_x;
   NodeConstPtr    m_y;
};

class NodeStdUMax : public NodeGLSL
{
public:
   NodeStdUMax(Extractor &ext)
      : NodeGLSL()
   {
      ext >> m_resultType >> m_resultId >> nullptr >> nullptr >> m_x >> m_y;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetX() const
   {
      return m_x;
   }

   const NodeConstPtr &GetY() const
   {
      return m_y;
   }

private:
   NodeConstPtr    m_x;
   NodeConstPtr    m_y;
};

class NodeStdSMax : public NodeGLSL
{
public:
   NodeStdSMax(Extractor &ext)
      : NodeGLSL()
   {
      ext >> m_resultType >> m_resultId >> nullptr >> nullptr >> m_x >> m_y;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetX() const
   {
      return m_x;
   }

   const NodeConstPtr &GetY() const
   {
      return m_y;
   }

private:
   NodeConstPtr    m_x;
   NodeConstPtr    m_y;
};

class NodeStdFClamp : public NodeGLSL
{
public:
   NodeStdFClamp(Extractor &ext)
      : NodeGLSL()
   {
      ext >> m_resultType >> m_resultId >> nullptr >> nullptr >> m_x >> m_minVal >> m_maxVal;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetX() const
   {
      return m_x;
   }

   const NodeConstPtr &GetMinVal() const
   {
      return m_minVal;
   }

   const NodeConstPtr &GetMaxVal() const
   {
      return m_maxVal;
   }

private:
   NodeConstPtr    m_x;
   NodeConstPtr    m_minVal;
   NodeConstPtr    m_maxVal;
};

class NodeStdUClamp : public NodeGLSL
{
public:
   NodeStdUClamp(Extractor &ext)
      : NodeGLSL()
   {
      ext >> m_resultType >> m_resultId >> nullptr >> nullptr >> m_x >> m_minVal >> m_maxVal;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetX() const
   {
      return m_x;
   }

   const NodeConstPtr &GetMinVal() const
   {
      return m_minVal;
   }

   const NodeConstPtr &GetMaxVal() const
   {
      return m_maxVal;
   }

private:
   NodeConstPtr    m_x;
   NodeConstPtr    m_minVal;
   NodeConstPtr    m_maxVal;
};

class NodeStdSClamp : public NodeGLSL
{
public:
   NodeStdSClamp(Extractor &ext)
      : NodeGLSL()
   {
      ext >> m_resultType >> m_resultId >> nullptr >> nullptr >> m_x >> m_minVal >> m_maxVal;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetX() const
   {
      return m_x;
   }

   const NodeConstPtr &GetMinVal() const
   {
      return m_minVal;
   }

   const NodeConstPtr &GetMaxVal() const
   {
      return m_maxVal;
   }

private:
   NodeConstPtr    m_x;
   NodeConstPtr    m_minVal;
   NodeConstPtr    m_maxVal;
};

class NodeStdFMix : public NodeGLSL
{
public:
   NodeStdFMix(Extractor &ext)
      : NodeGLSL()
   {
      ext >> m_resultType >> m_resultId >> nullptr >> nullptr >> m_x >> m_y >> m_a;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetX() const
   {
      return m_x;
   }

   const NodeConstPtr &GetY() const
   {
      return m_y;
   }

   const NodeConstPtr &GetA() const
   {
      return m_a;
   }

private:
   NodeConstPtr    m_x;
   NodeConstPtr    m_y;
   NodeConstPtr    m_a;
};

class NodeStdIMix : public NodeGLSL
{
public:
   NodeStdIMix(Extractor &ext)
      : NodeGLSL()
   {
      ext >> m_resultType >> m_resultId >> nullptr >> nullptr >> m_x >> m_y >> m_a;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetX() const
   {
      return m_x;
   }

   const NodeConstPtr &GetY() const
   {
      return m_y;
   }

   const NodeConstPtr &GetA() const
   {
      return m_a;
   }

private:
   NodeConstPtr    m_x;
   NodeConstPtr    m_y;
   NodeConstPtr    m_a;
};

class NodeStdStep : public NodeGLSL
{
public:
   NodeStdStep(Extractor &ext)
      : NodeGLSL()
   {
      ext >> m_resultType >> m_resultId >> nullptr >> nullptr >> m_edge >> m_x;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetEdge() const
   {
      return m_edge;
   }

   const NodeConstPtr &GetX() const
   {
      return m_x;
   }

private:
   NodeConstPtr    m_edge;
   NodeConstPtr    m_x;
};

class NodeStdSmoothStep : public NodeGLSL
{
public:
   NodeStdSmoothStep(Extractor &ext)
      : NodeGLSL()
   {
      ext >> m_resultType >> m_resultId >> nullptr >> nullptr >> m_edge0 >> m_edge1 >> m_x;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetEdge0() const
   {
      return m_edge0;
   }

   const NodeConstPtr &GetEdge1() const
   {
      return m_edge1;
   }

   const NodeConstPtr &GetX() const
   {
      return m_x;
   }

private:
   NodeConstPtr    m_edge0;
   NodeConstPtr    m_edge1;
   NodeConstPtr    m_x;
};

class NodeStdFma : public NodeGLSL
{
public:
   NodeStdFma(Extractor &ext)
      : NodeGLSL()
   {
      ext >> m_resultType >> m_resultId >> nullptr >> nullptr >> m_a >> m_b >> m_c;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetA() const
   {
      return m_a;
   }

   const NodeConstPtr &GetB() const
   {
      return m_b;
   }

   const NodeConstPtr &GetC() const
   {
      return m_c;
   }

private:
   NodeConstPtr    m_a;
   NodeConstPtr    m_b;
   NodeConstPtr    m_c;
};

class NodeStdFrexp : public NodeGLSL
{
public:
   NodeStdFrexp(Extractor &ext)
      : NodeGLSL()
   {
      ext >> m_resultType >> m_resultId >> nullptr >> nullptr >> m_x >> m_exp;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetX() const
   {
      return m_x;
   }

   const NodeConstPtr &GetExp() const
   {
      return m_exp;
   }

private:
   NodeConstPtr    m_x;
   NodeConstPtr    m_exp;
};

class NodeStdFrexpStruct : public NodeGLSL
{
public:
   NodeStdFrexpStruct(Extractor &ext)
      : NodeGLSL()
   {
      ext >> m_resultType >> m_resultId >> nullptr >> nullptr >> m_x;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetX() const
   {
      return m_x;
   }

private:
   NodeConstPtr    m_x;
};

class NodeStdLdexp : public NodeGLSL
{
public:
   NodeStdLdexp(Extractor &ext)
      : NodeGLSL()
   {
      ext >> m_resultType >> m_resultId >> nullptr >> nullptr >> m_x >> m_exp;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetX() const
   {
      return m_x;
   }

   const NodeConstPtr &GetExp() const
   {
      return m_exp;
   }

private:
   NodeConstPtr    m_x;
   NodeConstPtr    m_exp;
};

class NodeStdPackSnorm4x8 : public NodeGLSL
{
public:
   NodeStdPackSnorm4x8(Extractor &ext)
      : NodeGLSL()
   {
      ext >> m_resultType >> m_resultId >> nullptr >> nullptr >> m_v;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetV() const
   {
      return m_v;
   }

private:
   NodeConstPtr    m_v;
};

class NodeStdPackUnorm4x8 : public NodeGLSL
{
public:
   NodeStdPackUnorm4x8(Extractor &ext)
      : NodeGLSL()
   {
      ext >> m_resultType >> m_resultId >> nullptr >> nullptr >> m_v;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetV() const
   {
      return m_v;
   }

private:
   NodeConstPtr    m_v;
};

class NodeStdPackSnorm2x16 : public NodeGLSL
{
public:
   NodeStdPackSnorm2x16(Extractor &ext)
      : NodeGLSL()
   {
      ext >> m_resultType >> m_resultId >> nullptr >> nullptr >> m_v;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetV() const
   {
      return m_v;
   }

private:
   NodeConstPtr    m_v;
};

class NodeStdPackUnorm2x16 : public NodeGLSL
{
public:
   NodeStdPackUnorm2x16(Extractor &ext)
      : NodeGLSL()
   {
      ext >> m_resultType >> m_resultId >> nullptr >> nullptr >> m_v;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetV() const
   {
      return m_v;
   }

private:
   NodeConstPtr    m_v;
};

class NodeStdPackHalf2x16 : public NodeGLSL
{
public:
   NodeStdPackHalf2x16(Extractor &ext)
      : NodeGLSL()
   {
      ext >> m_resultType >> m_resultId >> nullptr >> nullptr >> m_v;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetV() const
   {
      return m_v;
   }

private:
   NodeConstPtr    m_v;
};

class NodeStdUnpackSnorm2x16 : public NodeGLSL
{
public:
   NodeStdUnpackSnorm2x16(Extractor &ext)
      : NodeGLSL()
   {
      ext >> m_resultType >> m_resultId >> nullptr >> nullptr >> m_p;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetP() const
   {
      return m_p;
   }

private:
   NodeConstPtr    m_p;
};

class NodeStdUnpackUnorm2x16 : public NodeGLSL
{
public:
   NodeStdUnpackUnorm2x16(Extractor &ext)
      : NodeGLSL()
   {
      ext >> m_resultType >> m_resultId >> nullptr >> nullptr >> m_p;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetP() const
   {
      return m_p;
   }

private:
   NodeConstPtr    m_p;
};

class NodeStdUnpackHalf2x16 : public NodeGLSL
{
public:
   NodeStdUnpackHalf2x16(Extractor &ext)
      : NodeGLSL()
   {
      ext >> m_resultType >> m_resultId >> nullptr >> nullptr >> m_v;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetV() const
   {
      return m_v;
   }

private:
   NodeConstPtr    m_v;
};

class NodeStdUnpackSnorm4x8 : public NodeGLSL
{
public:
   NodeStdUnpackSnorm4x8(Extractor &ext)
      : NodeGLSL()
   {
      ext >> m_resultType >> m_resultId >> nullptr >> nullptr >> m_p;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetP() const
   {
      return m_p;
   }

private:
   NodeConstPtr    m_p;
};

class NodeStdUnpackUnorm4x8 : public NodeGLSL
{
public:
   NodeStdUnpackUnorm4x8(Extractor &ext)
      : NodeGLSL()
   {
      ext >> m_resultType >> m_resultId >> nullptr >> nullptr >> m_p;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetP() const
   {
      return m_p;
   }

private:
   NodeConstPtr    m_p;
};

class NodeStdLength : public NodeGLSL
{
public:
   NodeStdLength(Extractor &ext)
      : NodeGLSL()
   {
      ext >> m_resultType >> m_resultId >> nullptr >> nullptr >> m_x;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetX() const
   {
      return m_x;
   }

private:
   NodeConstPtr    m_x;
};

class NodeStdDistance : public NodeGLSL
{
public:
   NodeStdDistance(Extractor &ext)
      : NodeGLSL()
   {
      ext >> m_resultType >> m_resultId >> nullptr >> nullptr >> m_p0 >> m_p1;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetP0() const
   {
      return m_p0;
   }

   const NodeConstPtr &GetP1() const
   {
      return m_p1;
   }

private:
   NodeConstPtr    m_p0;
   NodeConstPtr    m_p1;
};

class NodeStdCross : public NodeGLSL
{
public:
   NodeStdCross(Extractor &ext)
      : NodeGLSL()
   {
      ext >> m_resultType >> m_resultId >> nullptr >> nullptr >> m_x >> m_y;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetX() const
   {
      return m_x;
   }

   const NodeConstPtr &GetY() const
   {
      return m_y;
   }

private:
   NodeConstPtr    m_x;
   NodeConstPtr    m_y;
};

class NodeStdNormalize : public NodeGLSL
{
public:
   NodeStdNormalize(Extractor &ext)
      : NodeGLSL()
   {
      ext >> m_resultType >> m_resultId >> nullptr >> nullptr >> m_x;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetX() const
   {
      return m_x;
   }

private:
   NodeConstPtr    m_x;
};

class NodeStdFaceForward : public NodeGLSL
{
public:
   NodeStdFaceForward(Extractor &ext)
      : NodeGLSL()
   {
      ext >> m_resultType >> m_resultId >> nullptr >> nullptr >> m_n >> m_i >> m_nref;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetN() const
   {
      return m_n;
   }

   const NodeConstPtr &GetI() const
   {
      return m_i;
   }

   const NodeConstPtr &GetNref() const
   {
      return m_nref;
   }

private:
   NodeConstPtr    m_n;
   NodeConstPtr    m_i;
   NodeConstPtr    m_nref;
};

class NodeStdReflect : public NodeGLSL
{
public:
   NodeStdReflect(Extractor &ext)
      : NodeGLSL()
   {
      ext >> m_resultType >> m_resultId >> nullptr >> nullptr >> m_i >> m_n;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetI() const
   {
      return m_i;
   }

   const NodeConstPtr &GetN() const
   {
      return m_n;
   }

private:
   NodeConstPtr    m_i;
   NodeConstPtr    m_n;
};

class NodeStdRefract : public NodeGLSL
{
public:
   NodeStdRefract(Extractor &ext)
      : NodeGLSL()
   {
      ext >> m_resultType >> m_resultId >> nullptr >> nullptr >> m_i >> m_n >> m_eta;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetI() const
   {
      return m_i;
   }

   const NodeConstPtr &GetN() const
   {
      return m_n;
   }

   const NodeConstPtr &GetEta() const
   {
      return m_eta;
   }

private:
   NodeConstPtr    m_i;
   NodeConstPtr    m_n;
   NodeConstPtr    m_eta;
};

class NodeStdFindILsb : public NodeGLSL
{
public:
   NodeStdFindILsb(Extractor &ext)
      : NodeGLSL()
   {
      ext >> m_resultType >> m_resultId >> nullptr >> nullptr >> m_value;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetValue() const
   {
      return m_value;
   }

private:
   NodeConstPtr    m_value;
};

class NodeStdFindSMsb : public NodeGLSL
{
public:
   NodeStdFindSMsb(Extractor &ext)
      : NodeGLSL()
   {
      ext >> m_resultType >> m_resultId >> nullptr >> nullptr >> m_value;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetValue() const
   {
      return m_value;
   }

private:
   NodeConstPtr    m_value;
};

class NodeStdFindUMsb : public NodeGLSL
{
public:
   NodeStdFindUMsb(Extractor &ext)
      : NodeGLSL()
   {
      ext >> m_resultType >> m_resultId >> nullptr >> nullptr >> m_value;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetValue() const
   {
      return m_value;
   }

private:
   NodeConstPtr    m_value;
};

class NodeStdInterpolateAtCentroid : public NodeGLSL
{
public:
   NodeStdInterpolateAtCentroid(Extractor &ext)
      : NodeGLSL()
   {
      ext >> m_resultType >> m_resultId >> nullptr >> nullptr >> m_interpolant;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetInterpolant() const
   {
      return m_interpolant;
   }

private:
   NodeConstPtr    m_interpolant;
};

class NodeStdInterpolateAtSample : public NodeGLSL
{
public:
   NodeStdInterpolateAtSample(Extractor &ext)
      : NodeGLSL()
   {
      ext >> m_resultType >> m_resultId >> nullptr >> nullptr >> m_interpolant >> m_sample;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetInterpolant() const
   {
      return m_interpolant;
   }

   const NodeConstPtr &GetSample() const
   {
      return m_sample;
   }

private:
   NodeConstPtr    m_interpolant;
   NodeConstPtr    m_sample;
};

class NodeStdInterpolateAtOffset : public NodeGLSL
{
public:
   NodeStdInterpolateAtOffset(Extractor &ext)
      : NodeGLSL()
   {
      ext >> m_resultType >> m_resultId >> nullptr >> nullptr >> m_interpolant >> m_offset;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetInterpolant() const
   {
      return m_interpolant;
   }

   const NodeConstPtr &GetOffset() const
   {
      return m_offset;
   }

private:
   NodeConstPtr    m_interpolant;
   NodeConstPtr    m_offset;
};

class NodeStdNMin : public NodeGLSL
{
public:
   NodeStdNMin(Extractor &ext)
      : NodeGLSL()
   {
      ext >> m_resultType >> m_resultId >> nullptr >> nullptr >> m_x >> m_y;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetX() const
   {
      return m_x;
   }

   const NodeConstPtr &GetY() const
   {
      return m_y;
   }

private:
   NodeConstPtr    m_x;
   NodeConstPtr    m_y;
};

class NodeStdNMax : public NodeGLSL
{
public:
   NodeStdNMax(Extractor &ext)
      : NodeGLSL()
   {
      ext >> m_resultType >> m_resultId >> nullptr >> nullptr >> m_x >> m_y;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetX() const
   {
      return m_x;
   }

   const NodeConstPtr &GetY() const
   {
      return m_y;
   }

private:
   NodeConstPtr    m_x;
   NodeConstPtr    m_y;
};

class NodeStdNClamp : public NodeGLSL
{
public:
   NodeStdNClamp(Extractor &ext)
      : NodeGLSL()
   {
      ext >> m_resultType >> m_resultId >> nullptr >> nullptr >> m_x >> m_minVal >> m_maxVal;
   }

   void Accept(NodeVisitor &visitor) const override
   {
      visitor.Visit(this);
   }

   const NodeConstPtr &GetX() const
   {
      return m_x;
   }

   const NodeConstPtr &GetMinVal() const
   {
      return m_minVal;
   }

   const NodeConstPtr &GetMaxVal() const
   {
      return m_maxVal;
   }

private:
   NodeConstPtr    m_x;
   NodeConstPtr    m_minVal;
   NodeConstPtr    m_maxVal;
};
