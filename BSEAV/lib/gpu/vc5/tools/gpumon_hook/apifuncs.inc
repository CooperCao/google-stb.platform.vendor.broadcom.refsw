/******************************************************************************
 *  Copyright (C) 2017 Broadcom. The term "Broadcom" refers to Broadcom Limited and/or its subsidiaries.
 ******************************************************************************/
/* Auto-generated by running gen_hook_tables.py
 * DO NOT EDIT!
 */

#if EGL_VERSION_1_0
DLLEXPORT EGLBoolean DLLEXPORTENTRY eglChooseConfig(EGLDisplay dpy, const EGLint *attrib_list, EGLConfig *configs, EGLint config_size, EGLint *num_config){ return sAPIClassTable.map_eglChooseConfig(dpy, attrib_list, configs, config_size, num_config); }
DLLEXPORT EGLBoolean DLLEXPORTENTRY eglCopyBuffers(EGLDisplay dpy, EGLSurface surface, EGLNativePixmapType target){ return sAPIClassTable.map_eglCopyBuffers(dpy, surface, target); }
DLLEXPORT EGLContext DLLEXPORTENTRY eglCreateContext(EGLDisplay dpy, EGLConfig config, EGLContext share_context, const EGLint *attrib_list){ return sAPIClassTable.map_eglCreateContext(dpy, config, share_context, attrib_list); }
DLLEXPORT EGLSurface DLLEXPORTENTRY eglCreatePbufferSurface(EGLDisplay dpy, EGLConfig config, const EGLint *attrib_list){ return sAPIClassTable.map_eglCreatePbufferSurface(dpy, config, attrib_list); }
DLLEXPORT EGLSurface DLLEXPORTENTRY eglCreatePixmapSurface(EGLDisplay dpy, EGLConfig config, EGLNativePixmapType pixmap, const EGLint *attrib_list){ return sAPIClassTable.map_eglCreatePixmapSurface(dpy, config, pixmap, attrib_list); }
DLLEXPORT EGLSurface DLLEXPORTENTRY eglCreateWindowSurface(EGLDisplay dpy, EGLConfig config, EGLNativeWindowType win, const EGLint *attrib_list){ return sAPIClassTable.map_eglCreateWindowSurface(dpy, config, win, attrib_list); }
DLLEXPORT EGLBoolean DLLEXPORTENTRY eglDestroyContext(EGLDisplay dpy, EGLContext ctx){ return sAPIClassTable.map_eglDestroyContext(dpy, ctx); }
DLLEXPORT EGLBoolean DLLEXPORTENTRY eglDestroySurface(EGLDisplay dpy, EGLSurface surface){ return sAPIClassTable.map_eglDestroySurface(dpy, surface); }
DLLEXPORT EGLBoolean DLLEXPORTENTRY eglGetConfigAttrib(EGLDisplay dpy, EGLConfig config, EGLint attribute, EGLint *value){ return sAPIClassTable.map_eglGetConfigAttrib(dpy, config, attribute, value); }
DLLEXPORT EGLBoolean DLLEXPORTENTRY eglGetConfigs(EGLDisplay dpy, EGLConfig *configs, EGLint config_size, EGLint *num_config){ return sAPIClassTable.map_eglGetConfigs(dpy, configs, config_size, num_config); }
DLLEXPORT EGLDisplay DLLEXPORTENTRY eglGetCurrentDisplay(void){ return sAPIClassTable.map_eglGetCurrentDisplay(); }
DLLEXPORT EGLSurface DLLEXPORTENTRY eglGetCurrentSurface(EGLint readdraw){ return sAPIClassTable.map_eglGetCurrentSurface(readdraw); }
DLLEXPORT EGLDisplay DLLEXPORTENTRY eglGetDisplay(EGLNativeDisplayType display_id){ return sAPIClassTable.map_eglGetDisplay(display_id); }
DLLEXPORT EGLint DLLEXPORTENTRY eglGetError(void){ return sAPIClassTable.map_eglGetError(); }
DLLEXPORT __eglMustCastToProperFunctionPointerType DLLEXPORTENTRY eglGetProcAddress(const char *procname){ return sAPIClassTable.map_eglGetProcAddress(procname); }
DLLEXPORT EGLBoolean DLLEXPORTENTRY eglInitialize(EGLDisplay dpy, EGLint *major, EGLint *minor){ return sAPIClassTable.map_eglInitialize(dpy, major, minor); }
DLLEXPORT EGLBoolean DLLEXPORTENTRY eglMakeCurrent(EGLDisplay dpy, EGLSurface draw, EGLSurface read, EGLContext ctx){ return sAPIClassTable.map_eglMakeCurrent(dpy, draw, read, ctx); }
DLLEXPORT EGLBoolean DLLEXPORTENTRY eglQueryContext(EGLDisplay dpy, EGLContext ctx, EGLint attribute, EGLint *value){ return sAPIClassTable.map_eglQueryContext(dpy, ctx, attribute, value); }
DLLEXPORT const char * DLLEXPORTENTRY eglQueryString(EGLDisplay dpy, EGLint name){ return sAPIClassTable.map_eglQueryString(dpy, name); }
DLLEXPORT EGLBoolean DLLEXPORTENTRY eglQuerySurface(EGLDisplay dpy, EGLSurface surface, EGLint attribute, EGLint *value){ return sAPIClassTable.map_eglQuerySurface(dpy, surface, attribute, value); }
DLLEXPORT EGLBoolean DLLEXPORTENTRY eglSwapBuffers(EGLDisplay dpy, EGLSurface surface){ return sAPIClassTable.map_eglSwapBuffers(dpy, surface); }
DLLEXPORT EGLBoolean DLLEXPORTENTRY eglTerminate(EGLDisplay dpy){ return sAPIClassTable.map_eglTerminate(dpy); }
DLLEXPORT EGLBoolean DLLEXPORTENTRY eglWaitGL(void){ return sAPIClassTable.map_eglWaitGL(); }
DLLEXPORT EGLBoolean DLLEXPORTENTRY eglWaitNative(EGLint engine){ return sAPIClassTable.map_eglWaitNative(engine); }
#endif /* EGL_VERSION_1_0*/

#if GL_VERSION_ES_CM_1_0
DLLEXPORT void DLLEXPORTENTRY glAlphaFunc(GLenum func, GLfloat ref){ sAPIClassTable.map_glAlphaFunc(func, ref); }
DLLEXPORT void DLLEXPORTENTRY glClearColor(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha){ sAPIClassTable.map_glClearColor(red, green, blue, alpha); }
DLLEXPORT void DLLEXPORTENTRY glClearDepthf(GLfloat d){ sAPIClassTable.map_glClearDepthf(d); }
DLLEXPORT void DLLEXPORTENTRY glClipPlanef(GLenum p, const GLfloat *eqn){ sAPIClassTable.map_glClipPlanef(p, eqn); }
DLLEXPORT void DLLEXPORTENTRY glColor4f(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha){ sAPIClassTable.map_glColor4f(red, green, blue, alpha); }
DLLEXPORT void DLLEXPORTENTRY glDepthRangef(GLfloat n, GLfloat f){ sAPIClassTable.map_glDepthRangef(n, f); }
DLLEXPORT void DLLEXPORTENTRY glFogf(GLenum pname, GLfloat param){ sAPIClassTable.map_glFogf(pname, param); }
DLLEXPORT void DLLEXPORTENTRY glFogfv(GLenum pname, const GLfloat *params){ sAPIClassTable.map_glFogfv(pname, params); }
DLLEXPORT void DLLEXPORTENTRY glFrustumf(GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f){ sAPIClassTable.map_glFrustumf(l, r, b, t, n, f); }
DLLEXPORT void DLLEXPORTENTRY glGetClipPlanef(GLenum plane, GLfloat *equation){ sAPIClassTable.map_glGetClipPlanef(plane, equation); }
DLLEXPORT void DLLEXPORTENTRY glGetFloatv(GLenum pname, GLfloat *data){ sAPIClassTable.map_glGetFloatv(pname, data); }
DLLEXPORT void DLLEXPORTENTRY glGetLightfv(GLenum light, GLenum pname, GLfloat *params){ sAPIClassTable.map_glGetLightfv(light, pname, params); }
DLLEXPORT void DLLEXPORTENTRY glGetMaterialfv(GLenum face, GLenum pname, GLfloat *params){ sAPIClassTable.map_glGetMaterialfv(face, pname, params); }
DLLEXPORT void DLLEXPORTENTRY glGetTexEnvfv(GLenum target, GLenum pname, GLfloat *params){ sAPIClassTable.map_glGetTexEnvfv(target, pname, params); }
DLLEXPORT void DLLEXPORTENTRY glGetTexParameterfv(GLenum target, GLenum pname, GLfloat *params){ sAPIClassTable.map_glGetTexParameterfv(target, pname, params); }
DLLEXPORT void DLLEXPORTENTRY glLightModelf(GLenum pname, GLfloat param){ sAPIClassTable.map_glLightModelf(pname, param); }
DLLEXPORT void DLLEXPORTENTRY glLightModelfv(GLenum pname, const GLfloat *params){ sAPIClassTable.map_glLightModelfv(pname, params); }
DLLEXPORT void DLLEXPORTENTRY glLightf(GLenum light, GLenum pname, GLfloat param){ sAPIClassTable.map_glLightf(light, pname, param); }
DLLEXPORT void DLLEXPORTENTRY glLightfv(GLenum light, GLenum pname, const GLfloat *params){ sAPIClassTable.map_glLightfv(light, pname, params); }
DLLEXPORT void DLLEXPORTENTRY glLineWidth(GLfloat width){ sAPIClassTable.map_glLineWidth(width); }
DLLEXPORT void DLLEXPORTENTRY glLoadMatrixf(const GLfloat *m){ sAPIClassTable.map_glLoadMatrixf(m); }
DLLEXPORT void DLLEXPORTENTRY glMaterialf(GLenum face, GLenum pname, GLfloat param){ sAPIClassTable.map_glMaterialf(face, pname, param); }
DLLEXPORT void DLLEXPORTENTRY glMaterialfv(GLenum face, GLenum pname, const GLfloat *params){ sAPIClassTable.map_glMaterialfv(face, pname, params); }
DLLEXPORT void DLLEXPORTENTRY glMultMatrixf(const GLfloat *m){ sAPIClassTable.map_glMultMatrixf(m); }
DLLEXPORT void DLLEXPORTENTRY glMultiTexCoord4f(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q){ sAPIClassTable.map_glMultiTexCoord4f(target, s, t, r, q); }
DLLEXPORT void DLLEXPORTENTRY glNormal3f(GLfloat nx, GLfloat ny, GLfloat nz){ sAPIClassTable.map_glNormal3f(nx, ny, nz); }
DLLEXPORT void DLLEXPORTENTRY glOrthof(GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f){ sAPIClassTable.map_glOrthof(l, r, b, t, n, f); }
DLLEXPORT void DLLEXPORTENTRY glPointParameterf(GLenum pname, GLfloat param){ sAPIClassTable.map_glPointParameterf(pname, param); }
DLLEXPORT void DLLEXPORTENTRY glPointParameterfv(GLenum pname, const GLfloat *params){ sAPIClassTable.map_glPointParameterfv(pname, params); }
DLLEXPORT void DLLEXPORTENTRY glPointSize(GLfloat size){ sAPIClassTable.map_glPointSize(size); }
DLLEXPORT void DLLEXPORTENTRY glPolygonOffset(GLfloat factor, GLfloat units){ sAPIClassTable.map_glPolygonOffset(factor, units); }
DLLEXPORT void DLLEXPORTENTRY glRotatef(GLfloat angle, GLfloat x, GLfloat y, GLfloat z){ sAPIClassTable.map_glRotatef(angle, x, y, z); }
DLLEXPORT void DLLEXPORTENTRY glScalef(GLfloat x, GLfloat y, GLfloat z){ sAPIClassTable.map_glScalef(x, y, z); }
DLLEXPORT void DLLEXPORTENTRY glTexEnvf(GLenum target, GLenum pname, GLfloat param){ sAPIClassTable.map_glTexEnvf(target, pname, param); }
DLLEXPORT void DLLEXPORTENTRY glTexEnvfv(GLenum target, GLenum pname, const GLfloat *params){ sAPIClassTable.map_glTexEnvfv(target, pname, params); }
DLLEXPORT void DLLEXPORTENTRY glTexParameterf(GLenum target, GLenum pname, GLfloat param){ sAPIClassTable.map_glTexParameterf(target, pname, param); }
DLLEXPORT void DLLEXPORTENTRY glTexParameterfv(GLenum target, GLenum pname, const GLfloat *params){ sAPIClassTable.map_glTexParameterfv(target, pname, params); }
DLLEXPORT void DLLEXPORTENTRY glTranslatef(GLfloat x, GLfloat y, GLfloat z){ sAPIClassTable.map_glTranslatef(x, y, z); }
DLLEXPORT void DLLEXPORTENTRY glActiveTexture(GLenum texture){ sAPIClassTable.map_glActiveTexture(texture); }
DLLEXPORT void DLLEXPORTENTRY glAlphaFuncx(GLenum func, GLfixed ref){ sAPIClassTable.map_glAlphaFuncx(func, ref); }
DLLEXPORT void DLLEXPORTENTRY glBindBuffer(GLenum target, GLuint buffer){ sAPIClassTable.map_glBindBuffer(target, buffer); }
DLLEXPORT void DLLEXPORTENTRY glBindTexture(GLenum target, GLuint texture){ sAPIClassTable.map_glBindTexture(target, texture); }
DLLEXPORT void DLLEXPORTENTRY glBlendFunc(GLenum sfactor, GLenum dfactor){ sAPIClassTable.map_glBlendFunc(sfactor, dfactor); }
DLLEXPORT void DLLEXPORTENTRY glBufferData(GLenum target, GLsizeiptr size, const void *data, GLenum usage){ sAPIClassTable.map_glBufferData(target, size, data, usage); }
DLLEXPORT void DLLEXPORTENTRY glBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, const void *data){ sAPIClassTable.map_glBufferSubData(target, offset, size, data); }
DLLEXPORT void DLLEXPORTENTRY glClear(GLbitfield mask){ sAPIClassTable.map_glClear(mask); }
DLLEXPORT void DLLEXPORTENTRY glClearColorx(GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha){ sAPIClassTable.map_glClearColorx(red, green, blue, alpha); }
DLLEXPORT void DLLEXPORTENTRY glClearDepthx(GLfixed depth){ sAPIClassTable.map_glClearDepthx(depth); }
DLLEXPORT void DLLEXPORTENTRY glClearStencil(GLint s){ sAPIClassTable.map_glClearStencil(s); }
DLLEXPORT void DLLEXPORTENTRY glClientActiveTexture(GLenum texture){ sAPIClassTable.map_glClientActiveTexture(texture); }
DLLEXPORT void DLLEXPORTENTRY glClipPlanex(GLenum plane, const GLfixed *equation){ sAPIClassTable.map_glClipPlanex(plane, equation); }
DLLEXPORT void DLLEXPORTENTRY glColor4ub(GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha){ sAPIClassTable.map_glColor4ub(red, green, blue, alpha); }
DLLEXPORT void DLLEXPORTENTRY glColor4x(GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha){ sAPIClassTable.map_glColor4x(red, green, blue, alpha); }
DLLEXPORT void DLLEXPORTENTRY glColorMask(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha){ sAPIClassTable.map_glColorMask(red, green, blue, alpha); }
DLLEXPORT void DLLEXPORTENTRY glColorPointer(GLint size, GLenum type, GLsizei stride, const void *pointer){ sAPIClassTable.map_glColorPointer(size, type, stride, pointer); }
DLLEXPORT void DLLEXPORTENTRY glCompressedTexImage2D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *data){ sAPIClassTable.map_glCompressedTexImage2D(target, level, internalformat, width, height, border, imageSize, data); }
DLLEXPORT void DLLEXPORTENTRY glCompressedTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data){ sAPIClassTable.map_glCompressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, data); }
DLLEXPORT void DLLEXPORTENTRY glCopyTexImage2D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border){ sAPIClassTable.map_glCopyTexImage2D(target, level, internalformat, x, y, width, height, border); }
DLLEXPORT void DLLEXPORTENTRY glCopyTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height){ sAPIClassTable.map_glCopyTexSubImage2D(target, level, xoffset, yoffset, x, y, width, height); }
DLLEXPORT void DLLEXPORTENTRY glCullFace(GLenum mode){ sAPIClassTable.map_glCullFace(mode); }
DLLEXPORT void DLLEXPORTENTRY glDeleteBuffers(GLsizei n, const GLuint *buffers){ sAPIClassTable.map_glDeleteBuffers(n, buffers); }
DLLEXPORT void DLLEXPORTENTRY glDeleteTextures(GLsizei n, const GLuint *textures){ sAPIClassTable.map_glDeleteTextures(n, textures); }
DLLEXPORT void DLLEXPORTENTRY glDepthFunc(GLenum func){ sAPIClassTable.map_glDepthFunc(func); }
DLLEXPORT void DLLEXPORTENTRY glDepthMask(GLboolean flag){ sAPIClassTable.map_glDepthMask(flag); }
DLLEXPORT void DLLEXPORTENTRY glDepthRangex(GLfixed n, GLfixed f){ sAPIClassTable.map_glDepthRangex(n, f); }
DLLEXPORT void DLLEXPORTENTRY glDisable(GLenum cap){ sAPIClassTable.map_glDisable(cap); }
DLLEXPORT void DLLEXPORTENTRY glDisableClientState(GLenum array){ sAPIClassTable.map_glDisableClientState(array); }
DLLEXPORT void DLLEXPORTENTRY glDrawArrays(GLenum mode, GLint first, GLsizei count){ sAPIClassTable.map_glDrawArrays(mode, first, count); }
DLLEXPORT void DLLEXPORTENTRY glDrawElements(GLenum mode, GLsizei count, GLenum type, const void *indices){ sAPIClassTable.map_glDrawElements(mode, count, type, indices); }
DLLEXPORT void DLLEXPORTENTRY glEnable(GLenum cap){ sAPIClassTable.map_glEnable(cap); }
DLLEXPORT void DLLEXPORTENTRY glEnableClientState(GLenum array){ sAPIClassTable.map_glEnableClientState(array); }
DLLEXPORT void DLLEXPORTENTRY glFinish(void){ sAPIClassTable.map_glFinish(); }
DLLEXPORT void DLLEXPORTENTRY glFlush(void){ sAPIClassTable.map_glFlush(); }
DLLEXPORT void DLLEXPORTENTRY glFogx(GLenum pname, GLfixed param){ sAPIClassTable.map_glFogx(pname, param); }
DLLEXPORT void DLLEXPORTENTRY glFogxv(GLenum pname, const GLfixed *param){ sAPIClassTable.map_glFogxv(pname, param); }
DLLEXPORT void DLLEXPORTENTRY glFrontFace(GLenum mode){ sAPIClassTable.map_glFrontFace(mode); }
DLLEXPORT void DLLEXPORTENTRY glFrustumx(GLfixed l, GLfixed r, GLfixed b, GLfixed t, GLfixed n, GLfixed f){ sAPIClassTable.map_glFrustumx(l, r, b, t, n, f); }
DLLEXPORT void DLLEXPORTENTRY glGetBooleanv(GLenum pname, GLboolean *data){ sAPIClassTable.map_glGetBooleanv(pname, data); }
DLLEXPORT void DLLEXPORTENTRY glGetBufferParameteriv(GLenum target, GLenum pname, GLint *params){ sAPIClassTable.map_glGetBufferParameteriv(target, pname, params); }
DLLEXPORT void DLLEXPORTENTRY glGetClipPlanex(GLenum plane, GLfixed *equation){ sAPIClassTable.map_glGetClipPlanex(plane, equation); }
DLLEXPORT void DLLEXPORTENTRY glGenBuffers(GLsizei n, GLuint *buffers){ sAPIClassTable.map_glGenBuffers(n, buffers); }
DLLEXPORT void DLLEXPORTENTRY glGenTextures(GLsizei n, GLuint *textures){ sAPIClassTable.map_glGenTextures(n, textures); }
DLLEXPORT GLenum DLLEXPORTENTRY glGetError(void){ return sAPIClassTable.map_glGetError(); }
DLLEXPORT void DLLEXPORTENTRY glGetFixedv(GLenum pname, GLfixed *params){ sAPIClassTable.map_glGetFixedv(pname, params); }
DLLEXPORT void DLLEXPORTENTRY glGetIntegerv(GLenum pname, GLint *data){ sAPIClassTable.map_glGetIntegerv(pname, data); }
DLLEXPORT void DLLEXPORTENTRY glGetLightxv(GLenum light, GLenum pname, GLfixed *params){ sAPIClassTable.map_glGetLightxv(light, pname, params); }
DLLEXPORT void DLLEXPORTENTRY glGetMaterialxv(GLenum face, GLenum pname, GLfixed *params){ sAPIClassTable.map_glGetMaterialxv(face, pname, params); }
DLLEXPORT void DLLEXPORTENTRY glGetPointerv(GLenum pname, void **params){ sAPIClassTable.map_glGetPointerv(pname, params); }
DLLEXPORT const GLubyte * DLLEXPORTENTRY glGetString(GLenum name){ return sAPIClassTable.map_glGetString(name); }
DLLEXPORT void DLLEXPORTENTRY glGetTexEnviv(GLenum target, GLenum pname, GLint *params){ sAPIClassTable.map_glGetTexEnviv(target, pname, params); }
DLLEXPORT void DLLEXPORTENTRY glGetTexEnvxv(GLenum target, GLenum pname, GLfixed *params){ sAPIClassTable.map_glGetTexEnvxv(target, pname, params); }
DLLEXPORT void DLLEXPORTENTRY glGetTexParameteriv(GLenum target, GLenum pname, GLint *params){ sAPIClassTable.map_glGetTexParameteriv(target, pname, params); }
DLLEXPORT void DLLEXPORTENTRY glGetTexParameterxv(GLenum target, GLenum pname, GLfixed *params){ sAPIClassTable.map_glGetTexParameterxv(target, pname, params); }
DLLEXPORT void DLLEXPORTENTRY glHint(GLenum target, GLenum mode){ sAPIClassTable.map_glHint(target, mode); }
DLLEXPORT GLboolean DLLEXPORTENTRY glIsBuffer(GLuint buffer){ return sAPIClassTable.map_glIsBuffer(buffer); }
DLLEXPORT GLboolean DLLEXPORTENTRY glIsEnabled(GLenum cap){ return sAPIClassTable.map_glIsEnabled(cap); }
DLLEXPORT GLboolean DLLEXPORTENTRY glIsTexture(GLuint texture){ return sAPIClassTable.map_glIsTexture(texture); }
DLLEXPORT void DLLEXPORTENTRY glLightModelx(GLenum pname, GLfixed param){ sAPIClassTable.map_glLightModelx(pname, param); }
DLLEXPORT void DLLEXPORTENTRY glLightModelxv(GLenum pname, const GLfixed *param){ sAPIClassTable.map_glLightModelxv(pname, param); }
DLLEXPORT void DLLEXPORTENTRY glLightx(GLenum light, GLenum pname, GLfixed param){ sAPIClassTable.map_glLightx(light, pname, param); }
DLLEXPORT void DLLEXPORTENTRY glLightxv(GLenum light, GLenum pname, const GLfixed *params){ sAPIClassTable.map_glLightxv(light, pname, params); }
DLLEXPORT void DLLEXPORTENTRY glLineWidthx(GLfixed width){ sAPIClassTable.map_glLineWidthx(width); }
DLLEXPORT void DLLEXPORTENTRY glLoadIdentity(void){ sAPIClassTable.map_glLoadIdentity(); }
DLLEXPORT void DLLEXPORTENTRY glLoadMatrixx(const GLfixed *m){ sAPIClassTable.map_glLoadMatrixx(m); }
DLLEXPORT void DLLEXPORTENTRY glLogicOp(GLenum opcode){ sAPIClassTable.map_glLogicOp(opcode); }
DLLEXPORT void DLLEXPORTENTRY glMaterialx(GLenum face, GLenum pname, GLfixed param){ sAPIClassTable.map_glMaterialx(face, pname, param); }
DLLEXPORT void DLLEXPORTENTRY glMaterialxv(GLenum face, GLenum pname, const GLfixed *param){ sAPIClassTable.map_glMaterialxv(face, pname, param); }
DLLEXPORT void DLLEXPORTENTRY glMatrixMode(GLenum mode){ sAPIClassTable.map_glMatrixMode(mode); }
DLLEXPORT void DLLEXPORTENTRY glMultMatrixx(const GLfixed *m){ sAPIClassTable.map_glMultMatrixx(m); }
DLLEXPORT void DLLEXPORTENTRY glMultiTexCoord4x(GLenum texture, GLfixed s, GLfixed t, GLfixed r, GLfixed q){ sAPIClassTable.map_glMultiTexCoord4x(texture, s, t, r, q); }
DLLEXPORT void DLLEXPORTENTRY glNormal3x(GLfixed nx, GLfixed ny, GLfixed nz){ sAPIClassTable.map_glNormal3x(nx, ny, nz); }
DLLEXPORT void DLLEXPORTENTRY glNormalPointer(GLenum type, GLsizei stride, const void *pointer){ sAPIClassTable.map_glNormalPointer(type, stride, pointer); }
DLLEXPORT void DLLEXPORTENTRY glOrthox(GLfixed l, GLfixed r, GLfixed b, GLfixed t, GLfixed n, GLfixed f){ sAPIClassTable.map_glOrthox(l, r, b, t, n, f); }
DLLEXPORT void DLLEXPORTENTRY glPixelStorei(GLenum pname, GLint param){ sAPIClassTable.map_glPixelStorei(pname, param); }
DLLEXPORT void DLLEXPORTENTRY glPointParameterx(GLenum pname, GLfixed param){ sAPIClassTable.map_glPointParameterx(pname, param); }
DLLEXPORT void DLLEXPORTENTRY glPointParameterxv(GLenum pname, const GLfixed *params){ sAPIClassTable.map_glPointParameterxv(pname, params); }
DLLEXPORT void DLLEXPORTENTRY glPointSizex(GLfixed size){ sAPIClassTable.map_glPointSizex(size); }
DLLEXPORT void DLLEXPORTENTRY glPolygonOffsetx(GLfixed factor, GLfixed units){ sAPIClassTable.map_glPolygonOffsetx(factor, units); }
DLLEXPORT void DLLEXPORTENTRY glPopMatrix(void){ sAPIClassTable.map_glPopMatrix(); }
DLLEXPORT void DLLEXPORTENTRY glPushMatrix(void){ sAPIClassTable.map_glPushMatrix(); }
DLLEXPORT void DLLEXPORTENTRY glReadPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, void *pixels){ sAPIClassTable.map_glReadPixels(x, y, width, height, format, type, pixels); }
DLLEXPORT void DLLEXPORTENTRY glRotatex(GLfixed angle, GLfixed x, GLfixed y, GLfixed z){ sAPIClassTable.map_glRotatex(angle, x, y, z); }
DLLEXPORT void DLLEXPORTENTRY glSampleCoverage(GLfloat value, GLboolean invert){ sAPIClassTable.map_glSampleCoverage(value, invert); }
DLLEXPORT void DLLEXPORTENTRY glSampleCoveragex(GLclampx value, GLboolean invert){ sAPIClassTable.map_glSampleCoveragex(value, invert); }
DLLEXPORT void DLLEXPORTENTRY glScalex(GLfixed x, GLfixed y, GLfixed z){ sAPIClassTable.map_glScalex(x, y, z); }
DLLEXPORT void DLLEXPORTENTRY glScissor(GLint x, GLint y, GLsizei width, GLsizei height){ sAPIClassTable.map_glScissor(x, y, width, height); }
DLLEXPORT void DLLEXPORTENTRY glShadeModel(GLenum mode){ sAPIClassTable.map_glShadeModel(mode); }
DLLEXPORT void DLLEXPORTENTRY glStencilFunc(GLenum func, GLint ref, GLuint mask){ sAPIClassTable.map_glStencilFunc(func, ref, mask); }
DLLEXPORT void DLLEXPORTENTRY glStencilMask(GLuint mask){ sAPIClassTable.map_glStencilMask(mask); }
DLLEXPORT void DLLEXPORTENTRY glStencilOp(GLenum fail, GLenum zfail, GLenum zpass){ sAPIClassTable.map_glStencilOp(fail, zfail, zpass); }
DLLEXPORT void DLLEXPORTENTRY glTexCoordPointer(GLint size, GLenum type, GLsizei stride, const void *pointer){ sAPIClassTable.map_glTexCoordPointer(size, type, stride, pointer); }
DLLEXPORT void DLLEXPORTENTRY glTexEnvi(GLenum target, GLenum pname, GLint param){ sAPIClassTable.map_glTexEnvi(target, pname, param); }
DLLEXPORT void DLLEXPORTENTRY glTexEnvx(GLenum target, GLenum pname, GLfixed param){ sAPIClassTable.map_glTexEnvx(target, pname, param); }
DLLEXPORT void DLLEXPORTENTRY glTexEnviv(GLenum target, GLenum pname, const GLint *params){ sAPIClassTable.map_glTexEnviv(target, pname, params); }
DLLEXPORT void DLLEXPORTENTRY glTexEnvxv(GLenum target, GLenum pname, const GLfixed *params){ sAPIClassTable.map_glTexEnvxv(target, pname, params); }
DLLEXPORT void DLLEXPORTENTRY glTexImage2D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void *pixels){ sAPIClassTable.map_glTexImage2D(target, level, internalformat, width, height, border, format, type, pixels); }
DLLEXPORT void DLLEXPORTENTRY glTexParameteri(GLenum target, GLenum pname, GLint param){ sAPIClassTable.map_glTexParameteri(target, pname, param); }
DLLEXPORT void DLLEXPORTENTRY glTexParameterx(GLenum target, GLenum pname, GLfixed param){ sAPIClassTable.map_glTexParameterx(target, pname, param); }
DLLEXPORT void DLLEXPORTENTRY glTexParameteriv(GLenum target, GLenum pname, const GLint *params){ sAPIClassTable.map_glTexParameteriv(target, pname, params); }
DLLEXPORT void DLLEXPORTENTRY glTexParameterxv(GLenum target, GLenum pname, const GLfixed *params){ sAPIClassTable.map_glTexParameterxv(target, pname, params); }
DLLEXPORT void DLLEXPORTENTRY glTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels){ sAPIClassTable.map_glTexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels); }
DLLEXPORT void DLLEXPORTENTRY glTranslatex(GLfixed x, GLfixed y, GLfixed z){ sAPIClassTable.map_glTranslatex(x, y, z); }
DLLEXPORT void DLLEXPORTENTRY glVertexPointer(GLint size, GLenum type, GLsizei stride, const void *pointer){ sAPIClassTable.map_glVertexPointer(size, type, stride, pointer); }
DLLEXPORT void DLLEXPORTENTRY glViewport(GLint x, GLint y, GLsizei width, GLsizei height){ sAPIClassTable.map_glViewport(x, y, width, height); }
#endif /* GL_VERSION_ES_CM_1_0*/

#if EGL_VERSION_1_1
DLLEXPORT EGLBoolean DLLEXPORTENTRY eglBindTexImage(EGLDisplay dpy, EGLSurface surface, EGLint buffer){ return sAPIClassTable.map_eglBindTexImage(dpy, surface, buffer); }
DLLEXPORT EGLBoolean DLLEXPORTENTRY eglReleaseTexImage(EGLDisplay dpy, EGLSurface surface, EGLint buffer){ return sAPIClassTable.map_eglReleaseTexImage(dpy, surface, buffer); }
DLLEXPORT EGLBoolean DLLEXPORTENTRY eglSurfaceAttrib(EGLDisplay dpy, EGLSurface surface, EGLint attribute, EGLint value){ return sAPIClassTable.map_eglSurfaceAttrib(dpy, surface, attribute, value); }
DLLEXPORT EGLBoolean DLLEXPORTENTRY eglSwapInterval(EGLDisplay dpy, EGLint interval){ return sAPIClassTable.map_eglSwapInterval(dpy, interval); }
#endif /* EGL_VERSION_1_1*/

#if EGL_VERSION_1_2
DLLEXPORT EGLBoolean DLLEXPORTENTRY eglBindAPI(EGLenum api){ return sAPIClassTable.map_eglBindAPI(api); }
DLLEXPORT EGLenum DLLEXPORTENTRY eglQueryAPI(void){ return sAPIClassTable.map_eglQueryAPI(); }
DLLEXPORT EGLSurface DLLEXPORTENTRY eglCreatePbufferFromClientBuffer(EGLDisplay dpy, EGLenum buftype, EGLClientBuffer buffer, EGLConfig config, const EGLint *attrib_list){ return sAPIClassTable.map_eglCreatePbufferFromClientBuffer(dpy, buftype, buffer, config, attrib_list); }
DLLEXPORT EGLBoolean DLLEXPORTENTRY eglReleaseThread(void){ return sAPIClassTable.map_eglReleaseThread(); }
DLLEXPORT EGLBoolean DLLEXPORTENTRY eglWaitClient(void){ return sAPIClassTable.map_eglWaitClient(); }
#endif /* EGL_VERSION_1_2*/

#if EGL_VERSION_1_3
#endif /* EGL_VERSION_1_3*/

#if EGL_VERSION_1_4
DLLEXPORT EGLContext DLLEXPORTENTRY eglGetCurrentContext(void){ return sAPIClassTable.map_eglGetCurrentContext(); }
#endif /* EGL_VERSION_1_4*/

#if EGL_VERSION_1_5
DLLEXPORT EGLSync DLLEXPORTENTRY eglCreateSync(EGLDisplay dpy, EGLenum type, const EGLAttrib *attrib_list){ return sAPIClassTable.map_eglCreateSync(dpy, type, attrib_list); }
DLLEXPORT EGLBoolean DLLEXPORTENTRY eglDestroySync(EGLDisplay dpy, EGLSync sync){ return sAPIClassTable.map_eglDestroySync(dpy, sync); }
DLLEXPORT EGLint DLLEXPORTENTRY eglClientWaitSync(EGLDisplay dpy, EGLSync sync, EGLint flags, EGLTime timeout){ return sAPIClassTable.map_eglClientWaitSync(dpy, sync, flags, timeout); }
DLLEXPORT EGLBoolean DLLEXPORTENTRY eglGetSyncAttrib(EGLDisplay dpy, EGLSync sync, EGLint attribute, EGLAttrib *value){ return sAPIClassTable.map_eglGetSyncAttrib(dpy, sync, attribute, value); }
DLLEXPORT EGLImage DLLEXPORTENTRY eglCreateImage(EGLDisplay dpy, EGLContext ctx, EGLenum target, EGLClientBuffer buffer, const EGLAttrib *attrib_list){ return sAPIClassTable.map_eglCreateImage(dpy, ctx, target, buffer, attrib_list); }
DLLEXPORT EGLBoolean DLLEXPORTENTRY eglDestroyImage(EGLDisplay dpy, EGLImage image){ return sAPIClassTable.map_eglDestroyImage(dpy, image); }
DLLEXPORT EGLDisplay DLLEXPORTENTRY eglGetPlatformDisplay(EGLenum platform, void *native_display, const EGLAttrib *attrib_list){ return sAPIClassTable.map_eglGetPlatformDisplay(platform, native_display, attrib_list); }
DLLEXPORT EGLSurface DLLEXPORTENTRY eglCreatePlatformWindowSurface(EGLDisplay dpy, EGLConfig config, void *native_window, const EGLAttrib *attrib_list){ return sAPIClassTable.map_eglCreatePlatformWindowSurface(dpy, config, native_window, attrib_list); }
DLLEXPORT EGLSurface DLLEXPORTENTRY eglCreatePlatformPixmapSurface(EGLDisplay dpy, EGLConfig config, void *native_pixmap, const EGLAttrib *attrib_list){ return sAPIClassTable.map_eglCreatePlatformPixmapSurface(dpy, config, native_pixmap, attrib_list); }
DLLEXPORT EGLBoolean DLLEXPORTENTRY eglWaitSync(EGLDisplay dpy, EGLSync sync, EGLint flags){ return sAPIClassTable.map_eglWaitSync(dpy, sync, flags); }
#endif /* EGL_VERSION_1_5*/

#if GL_ES_VERSION_2_0
DLLEXPORT void DLLEXPORTENTRY glAttachShader(GLuint program, GLuint shader){ sAPIClassTable.map_glAttachShader(program, shader); }
DLLEXPORT void DLLEXPORTENTRY glBindAttribLocation(GLuint program, GLuint index, const GLchar *name){ sAPIClassTable.map_glBindAttribLocation(program, index, name); }
DLLEXPORT void DLLEXPORTENTRY glBindFramebuffer(GLenum target, GLuint framebuffer){ sAPIClassTable.map_glBindFramebuffer(target, framebuffer); }
DLLEXPORT void DLLEXPORTENTRY glBindRenderbuffer(GLenum target, GLuint renderbuffer){ sAPIClassTable.map_glBindRenderbuffer(target, renderbuffer); }
DLLEXPORT void DLLEXPORTENTRY glBlendColor(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha){ sAPIClassTable.map_glBlendColor(red, green, blue, alpha); }
DLLEXPORT void DLLEXPORTENTRY glBlendEquation(GLenum mode){ sAPIClassTable.map_glBlendEquation(mode); }
DLLEXPORT void DLLEXPORTENTRY glBlendEquationSeparate(GLenum modeRGB, GLenum modeAlpha){ sAPIClassTable.map_glBlendEquationSeparate(modeRGB, modeAlpha); }
DLLEXPORT void DLLEXPORTENTRY glBlendFuncSeparate(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha){ sAPIClassTable.map_glBlendFuncSeparate(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha); }
DLLEXPORT GLenum DLLEXPORTENTRY glCheckFramebufferStatus(GLenum target){ return sAPIClassTable.map_glCheckFramebufferStatus(target); }
DLLEXPORT void DLLEXPORTENTRY glCompileShader(GLuint shader){ sAPIClassTable.map_glCompileShader(shader); }
DLLEXPORT GLuint DLLEXPORTENTRY glCreateProgram(void){ return sAPIClassTable.map_glCreateProgram(); }
DLLEXPORT GLuint DLLEXPORTENTRY glCreateShader(GLenum type){ return sAPIClassTable.map_glCreateShader(type); }
DLLEXPORT void DLLEXPORTENTRY glDeleteFramebuffers(GLsizei n, const GLuint *framebuffers){ sAPIClassTable.map_glDeleteFramebuffers(n, framebuffers); }
DLLEXPORT void DLLEXPORTENTRY glDeleteProgram(GLuint program){ sAPIClassTable.map_glDeleteProgram(program); }
DLLEXPORT void DLLEXPORTENTRY glDeleteRenderbuffers(GLsizei n, const GLuint *renderbuffers){ sAPIClassTable.map_glDeleteRenderbuffers(n, renderbuffers); }
DLLEXPORT void DLLEXPORTENTRY glDeleteShader(GLuint shader){ sAPIClassTable.map_glDeleteShader(shader); }
DLLEXPORT void DLLEXPORTENTRY glDetachShader(GLuint program, GLuint shader){ sAPIClassTable.map_glDetachShader(program, shader); }
DLLEXPORT void DLLEXPORTENTRY glDisableVertexAttribArray(GLuint index){ sAPIClassTable.map_glDisableVertexAttribArray(index); }
DLLEXPORT void DLLEXPORTENTRY glEnableVertexAttribArray(GLuint index){ sAPIClassTable.map_glEnableVertexAttribArray(index); }
DLLEXPORT void DLLEXPORTENTRY glFramebufferRenderbuffer(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer){ sAPIClassTable.map_glFramebufferRenderbuffer(target, attachment, renderbuffertarget, renderbuffer); }
DLLEXPORT void DLLEXPORTENTRY glFramebufferTexture2D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level){ sAPIClassTable.map_glFramebufferTexture2D(target, attachment, textarget, texture, level); }
DLLEXPORT void DLLEXPORTENTRY glGenerateMipmap(GLenum target){ sAPIClassTable.map_glGenerateMipmap(target); }
DLLEXPORT void DLLEXPORTENTRY glGenFramebuffers(GLsizei n, GLuint *framebuffers){ sAPIClassTable.map_glGenFramebuffers(n, framebuffers); }
DLLEXPORT void DLLEXPORTENTRY glGenRenderbuffers(GLsizei n, GLuint *renderbuffers){ sAPIClassTable.map_glGenRenderbuffers(n, renderbuffers); }
DLLEXPORT void DLLEXPORTENTRY glGetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name){ sAPIClassTable.map_glGetActiveAttrib(program, index, bufSize, length, size, type, name); }
DLLEXPORT void DLLEXPORTENTRY glGetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name){ sAPIClassTable.map_glGetActiveUniform(program, index, bufSize, length, size, type, name); }
DLLEXPORT void DLLEXPORTENTRY glGetAttachedShaders(GLuint program, GLsizei maxCount, GLsizei *count, GLuint *shaders){ sAPIClassTable.map_glGetAttachedShaders(program, maxCount, count, shaders); }
DLLEXPORT GLint DLLEXPORTENTRY glGetAttribLocation(GLuint program, const GLchar *name){ return sAPIClassTable.map_glGetAttribLocation(program, name); }
DLLEXPORT void DLLEXPORTENTRY glGetFramebufferAttachmentParameteriv(GLenum target, GLenum attachment, GLenum pname, GLint *params){ sAPIClassTable.map_glGetFramebufferAttachmentParameteriv(target, attachment, pname, params); }
DLLEXPORT void DLLEXPORTENTRY glGetProgramiv(GLuint program, GLenum pname, GLint *params){ sAPIClassTable.map_glGetProgramiv(program, pname, params); }
DLLEXPORT void DLLEXPORTENTRY glGetProgramInfoLog(GLuint program, GLsizei bufSize, GLsizei *length, GLchar *infoLog){ sAPIClassTable.map_glGetProgramInfoLog(program, bufSize, length, infoLog); }
DLLEXPORT void DLLEXPORTENTRY glGetRenderbufferParameteriv(GLenum target, GLenum pname, GLint *params){ sAPIClassTable.map_glGetRenderbufferParameteriv(target, pname, params); }
DLLEXPORT void DLLEXPORTENTRY glGetShaderiv(GLuint shader, GLenum pname, GLint *params){ sAPIClassTable.map_glGetShaderiv(shader, pname, params); }
DLLEXPORT void DLLEXPORTENTRY glGetShaderInfoLog(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *infoLog){ sAPIClassTable.map_glGetShaderInfoLog(shader, bufSize, length, infoLog); }
DLLEXPORT void DLLEXPORTENTRY glGetShaderPrecisionFormat(GLenum shadertype, GLenum precisiontype, GLint *range, GLint *precision){ sAPIClassTable.map_glGetShaderPrecisionFormat(shadertype, precisiontype, range, precision); }
DLLEXPORT void DLLEXPORTENTRY glGetShaderSource(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *source){ sAPIClassTable.map_glGetShaderSource(shader, bufSize, length, source); }
DLLEXPORT void DLLEXPORTENTRY glGetUniformfv(GLuint program, GLint location, GLfloat *params){ sAPIClassTable.map_glGetUniformfv(program, location, params); }
DLLEXPORT void DLLEXPORTENTRY glGetUniformiv(GLuint program, GLint location, GLint *params){ sAPIClassTable.map_glGetUniformiv(program, location, params); }
DLLEXPORT GLint DLLEXPORTENTRY glGetUniformLocation(GLuint program, const GLchar *name){ return sAPIClassTable.map_glGetUniformLocation(program, name); }
DLLEXPORT void DLLEXPORTENTRY glGetVertexAttribfv(GLuint index, GLenum pname, GLfloat *params){ sAPIClassTable.map_glGetVertexAttribfv(index, pname, params); }
DLLEXPORT void DLLEXPORTENTRY glGetVertexAttribiv(GLuint index, GLenum pname, GLint *params){ sAPIClassTable.map_glGetVertexAttribiv(index, pname, params); }
DLLEXPORT void DLLEXPORTENTRY glGetVertexAttribPointerv(GLuint index, GLenum pname, void **pointer){ sAPIClassTable.map_glGetVertexAttribPointerv(index, pname, pointer); }
DLLEXPORT GLboolean DLLEXPORTENTRY glIsFramebuffer(GLuint framebuffer){ return sAPIClassTable.map_glIsFramebuffer(framebuffer); }
DLLEXPORT GLboolean DLLEXPORTENTRY glIsProgram(GLuint program){ return sAPIClassTable.map_glIsProgram(program); }
DLLEXPORT GLboolean DLLEXPORTENTRY glIsRenderbuffer(GLuint renderbuffer){ return sAPIClassTable.map_glIsRenderbuffer(renderbuffer); }
DLLEXPORT GLboolean DLLEXPORTENTRY glIsShader(GLuint shader){ return sAPIClassTable.map_glIsShader(shader); }
DLLEXPORT void DLLEXPORTENTRY glLinkProgram(GLuint program){ sAPIClassTable.map_glLinkProgram(program); }
DLLEXPORT void DLLEXPORTENTRY glReleaseShaderCompiler(void){ sAPIClassTable.map_glReleaseShaderCompiler(); }
DLLEXPORT void DLLEXPORTENTRY glRenderbufferStorage(GLenum target, GLenum internalformat, GLsizei width, GLsizei height){ sAPIClassTable.map_glRenderbufferStorage(target, internalformat, width, height); }
DLLEXPORT void DLLEXPORTENTRY glShaderBinary(GLsizei count, const GLuint *shaders, GLenum binaryformat, const void *binary, GLsizei length){ sAPIClassTable.map_glShaderBinary(count, shaders, binaryformat, binary, length); }
DLLEXPORT void DLLEXPORTENTRY glShaderSource(GLuint shader, GLsizei count, const GLchar *const*string, const GLint *length){ sAPIClassTable.map_glShaderSource(shader, count, string, length); }
DLLEXPORT void DLLEXPORTENTRY glStencilFuncSeparate(GLenum face, GLenum func, GLint ref, GLuint mask){ sAPIClassTable.map_glStencilFuncSeparate(face, func, ref, mask); }
DLLEXPORT void DLLEXPORTENTRY glStencilMaskSeparate(GLenum face, GLuint mask){ sAPIClassTable.map_glStencilMaskSeparate(face, mask); }
DLLEXPORT void DLLEXPORTENTRY glStencilOpSeparate(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass){ sAPIClassTable.map_glStencilOpSeparate(face, sfail, dpfail, dppass); }
DLLEXPORT void DLLEXPORTENTRY glUniform1f(GLint location, GLfloat v0){ sAPIClassTable.map_glUniform1f(location, v0); }
DLLEXPORT void DLLEXPORTENTRY glUniform1fv(GLint location, GLsizei count, const GLfloat *value){ sAPIClassTable.map_glUniform1fv(location, count, value); }
DLLEXPORT void DLLEXPORTENTRY glUniform1i(GLint location, GLint v0){ sAPIClassTable.map_glUniform1i(location, v0); }
DLLEXPORT void DLLEXPORTENTRY glUniform1iv(GLint location, GLsizei count, const GLint *value){ sAPIClassTable.map_glUniform1iv(location, count, value); }
DLLEXPORT void DLLEXPORTENTRY glUniform2f(GLint location, GLfloat v0, GLfloat v1){ sAPIClassTable.map_glUniform2f(location, v0, v1); }
DLLEXPORT void DLLEXPORTENTRY glUniform2fv(GLint location, GLsizei count, const GLfloat *value){ sAPIClassTable.map_glUniform2fv(location, count, value); }
DLLEXPORT void DLLEXPORTENTRY glUniform2i(GLint location, GLint v0, GLint v1){ sAPIClassTable.map_glUniform2i(location, v0, v1); }
DLLEXPORT void DLLEXPORTENTRY glUniform2iv(GLint location, GLsizei count, const GLint *value){ sAPIClassTable.map_glUniform2iv(location, count, value); }
DLLEXPORT void DLLEXPORTENTRY glUniform3f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2){ sAPIClassTable.map_glUniform3f(location, v0, v1, v2); }
DLLEXPORT void DLLEXPORTENTRY glUniform3fv(GLint location, GLsizei count, const GLfloat *value){ sAPIClassTable.map_glUniform3fv(location, count, value); }
DLLEXPORT void DLLEXPORTENTRY glUniform3i(GLint location, GLint v0, GLint v1, GLint v2){ sAPIClassTable.map_glUniform3i(location, v0, v1, v2); }
DLLEXPORT void DLLEXPORTENTRY glUniform3iv(GLint location, GLsizei count, const GLint *value){ sAPIClassTable.map_glUniform3iv(location, count, value); }
DLLEXPORT void DLLEXPORTENTRY glUniform4f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3){ sAPIClassTable.map_glUniform4f(location, v0, v1, v2, v3); }
DLLEXPORT void DLLEXPORTENTRY glUniform4fv(GLint location, GLsizei count, const GLfloat *value){ sAPIClassTable.map_glUniform4fv(location, count, value); }
DLLEXPORT void DLLEXPORTENTRY glUniform4i(GLint location, GLint v0, GLint v1, GLint v2, GLint v3){ sAPIClassTable.map_glUniform4i(location, v0, v1, v2, v3); }
DLLEXPORT void DLLEXPORTENTRY glUniform4iv(GLint location, GLsizei count, const GLint *value){ sAPIClassTable.map_glUniform4iv(location, count, value); }
DLLEXPORT void DLLEXPORTENTRY glUniformMatrix2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value){ sAPIClassTable.map_glUniformMatrix2fv(location, count, transpose, value); }
DLLEXPORT void DLLEXPORTENTRY glUniformMatrix3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value){ sAPIClassTable.map_glUniformMatrix3fv(location, count, transpose, value); }
DLLEXPORT void DLLEXPORTENTRY glUniformMatrix4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value){ sAPIClassTable.map_glUniformMatrix4fv(location, count, transpose, value); }
DLLEXPORT void DLLEXPORTENTRY glUseProgram(GLuint program){ sAPIClassTable.map_glUseProgram(program); }
DLLEXPORT void DLLEXPORTENTRY glValidateProgram(GLuint program){ sAPIClassTable.map_glValidateProgram(program); }
DLLEXPORT void DLLEXPORTENTRY glVertexAttrib1f(GLuint index, GLfloat x){ sAPIClassTable.map_glVertexAttrib1f(index, x); }
DLLEXPORT void DLLEXPORTENTRY glVertexAttrib1fv(GLuint index, const GLfloat *v){ sAPIClassTable.map_glVertexAttrib1fv(index, v); }
DLLEXPORT void DLLEXPORTENTRY glVertexAttrib2f(GLuint index, GLfloat x, GLfloat y){ sAPIClassTable.map_glVertexAttrib2f(index, x, y); }
DLLEXPORT void DLLEXPORTENTRY glVertexAttrib2fv(GLuint index, const GLfloat *v){ sAPIClassTable.map_glVertexAttrib2fv(index, v); }
DLLEXPORT void DLLEXPORTENTRY glVertexAttrib3f(GLuint index, GLfloat x, GLfloat y, GLfloat z){ sAPIClassTable.map_glVertexAttrib3f(index, x, y, z); }
DLLEXPORT void DLLEXPORTENTRY glVertexAttrib3fv(GLuint index, const GLfloat *v){ sAPIClassTable.map_glVertexAttrib3fv(index, v); }
DLLEXPORT void DLLEXPORTENTRY glVertexAttrib4f(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w){ sAPIClassTable.map_glVertexAttrib4f(index, x, y, z, w); }
DLLEXPORT void DLLEXPORTENTRY glVertexAttrib4fv(GLuint index, const GLfloat *v){ sAPIClassTable.map_glVertexAttrib4fv(index, v); }
DLLEXPORT void DLLEXPORTENTRY glVertexAttribPointer(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void *pointer){ sAPIClassTable.map_glVertexAttribPointer(index, size, type, normalized, stride, pointer); }
#endif /* GL_ES_VERSION_2_0*/

#if GL_ES_VERSION_3_0
DLLEXPORT void DLLEXPORTENTRY glReadBuffer(GLenum src){ sAPIClassTable.map_glReadBuffer(src); }
DLLEXPORT void DLLEXPORTENTRY glDrawRangeElements(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices){ sAPIClassTable.map_glDrawRangeElements(mode, start, end, count, type, indices); }
DLLEXPORT void DLLEXPORTENTRY glTexImage3D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels){ sAPIClassTable.map_glTexImage3D(target, level, internalformat, width, height, depth, border, format, type, pixels); }
DLLEXPORT void DLLEXPORTENTRY glTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels){ sAPIClassTable.map_glTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels); }
DLLEXPORT void DLLEXPORTENTRY glCopyTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height){ sAPIClassTable.map_glCopyTexSubImage3D(target, level, xoffset, yoffset, zoffset, x, y, width, height); }
DLLEXPORT void DLLEXPORTENTRY glCompressedTexImage3D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *data){ sAPIClassTable.map_glCompressedTexImage3D(target, level, internalformat, width, height, depth, border, imageSize, data); }
DLLEXPORT void DLLEXPORTENTRY glCompressedTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data){ sAPIClassTable.map_glCompressedTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data); }
DLLEXPORT void DLLEXPORTENTRY glGenQueries(GLsizei n, GLuint *ids){ sAPIClassTable.map_glGenQueries(n, ids); }
DLLEXPORT void DLLEXPORTENTRY glDeleteQueries(GLsizei n, const GLuint *ids){ sAPIClassTable.map_glDeleteQueries(n, ids); }
DLLEXPORT GLboolean DLLEXPORTENTRY glIsQuery(GLuint id){ return sAPIClassTable.map_glIsQuery(id); }
DLLEXPORT void DLLEXPORTENTRY glBeginQuery(GLenum target, GLuint id){ sAPIClassTable.map_glBeginQuery(target, id); }
DLLEXPORT void DLLEXPORTENTRY glEndQuery(GLenum target){ sAPIClassTable.map_glEndQuery(target); }
DLLEXPORT void DLLEXPORTENTRY glGetQueryiv(GLenum target, GLenum pname, GLint *params){ sAPIClassTable.map_glGetQueryiv(target, pname, params); }
DLLEXPORT void DLLEXPORTENTRY glGetQueryObjectuiv(GLuint id, GLenum pname, GLuint *params){ sAPIClassTable.map_glGetQueryObjectuiv(id, pname, params); }
DLLEXPORT GLboolean DLLEXPORTENTRY glUnmapBuffer(GLenum target){ return sAPIClassTable.map_glUnmapBuffer(target); }
DLLEXPORT void DLLEXPORTENTRY glGetBufferPointerv(GLenum target, GLenum pname, void **params){ sAPIClassTable.map_glGetBufferPointerv(target, pname, params); }
DLLEXPORT void DLLEXPORTENTRY glDrawBuffers(GLsizei n, const GLenum *bufs){ sAPIClassTable.map_glDrawBuffers(n, bufs); }
DLLEXPORT void DLLEXPORTENTRY glUniformMatrix2x3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value){ sAPIClassTable.map_glUniformMatrix2x3fv(location, count, transpose, value); }
DLLEXPORT void DLLEXPORTENTRY glUniformMatrix3x2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value){ sAPIClassTable.map_glUniformMatrix3x2fv(location, count, transpose, value); }
DLLEXPORT void DLLEXPORTENTRY glUniformMatrix2x4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value){ sAPIClassTable.map_glUniformMatrix2x4fv(location, count, transpose, value); }
DLLEXPORT void DLLEXPORTENTRY glUniformMatrix4x2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value){ sAPIClassTable.map_glUniformMatrix4x2fv(location, count, transpose, value); }
DLLEXPORT void DLLEXPORTENTRY glUniformMatrix3x4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value){ sAPIClassTable.map_glUniformMatrix3x4fv(location, count, transpose, value); }
DLLEXPORT void DLLEXPORTENTRY glUniformMatrix4x3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value){ sAPIClassTable.map_glUniformMatrix4x3fv(location, count, transpose, value); }
DLLEXPORT void DLLEXPORTENTRY glBlitFramebuffer(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter){ sAPIClassTable.map_glBlitFramebuffer(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter); }
DLLEXPORT void DLLEXPORTENTRY glRenderbufferStorageMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height){ sAPIClassTable.map_glRenderbufferStorageMultisample(target, samples, internalformat, width, height); }
DLLEXPORT void DLLEXPORTENTRY glFramebufferTextureLayer(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer){ sAPIClassTable.map_glFramebufferTextureLayer(target, attachment, texture, level, layer); }
DLLEXPORT void * DLLEXPORTENTRY glMapBufferRange(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access){ return sAPIClassTable.map_glMapBufferRange(target, offset, length, access); }
DLLEXPORT void DLLEXPORTENTRY glFlushMappedBufferRange(GLenum target, GLintptr offset, GLsizeiptr length){ sAPIClassTable.map_glFlushMappedBufferRange(target, offset, length); }
DLLEXPORT void DLLEXPORTENTRY glBindVertexArray(GLuint array){ sAPIClassTable.map_glBindVertexArray(array); }
DLLEXPORT void DLLEXPORTENTRY glDeleteVertexArrays(GLsizei n, const GLuint *arrays){ sAPIClassTable.map_glDeleteVertexArrays(n, arrays); }
DLLEXPORT void DLLEXPORTENTRY glGenVertexArrays(GLsizei n, GLuint *arrays){ sAPIClassTable.map_glGenVertexArrays(n, arrays); }
DLLEXPORT GLboolean DLLEXPORTENTRY glIsVertexArray(GLuint array){ return sAPIClassTable.map_glIsVertexArray(array); }
DLLEXPORT void DLLEXPORTENTRY glGetIntegeri_v(GLenum target, GLuint index, GLint *data){ sAPIClassTable.map_glGetIntegeri_v(target, index, data); }
DLLEXPORT void DLLEXPORTENTRY glBeginTransformFeedback(GLenum primitiveMode){ sAPIClassTable.map_glBeginTransformFeedback(primitiveMode); }
DLLEXPORT void DLLEXPORTENTRY glEndTransformFeedback(void){ sAPIClassTable.map_glEndTransformFeedback(); }
DLLEXPORT void DLLEXPORTENTRY glBindBufferRange(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size){ sAPIClassTable.map_glBindBufferRange(target, index, buffer, offset, size); }
DLLEXPORT void DLLEXPORTENTRY glBindBufferBase(GLenum target, GLuint index, GLuint buffer){ sAPIClassTable.map_glBindBufferBase(target, index, buffer); }
DLLEXPORT void DLLEXPORTENTRY glTransformFeedbackVaryings(GLuint program, GLsizei count, const GLchar *const*varyings, GLenum bufferMode){ sAPIClassTable.map_glTransformFeedbackVaryings(program, count, varyings, bufferMode); }
DLLEXPORT void DLLEXPORTENTRY glGetTransformFeedbackVarying(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name){ sAPIClassTable.map_glGetTransformFeedbackVarying(program, index, bufSize, length, size, type, name); }
DLLEXPORT void DLLEXPORTENTRY glVertexAttribIPointer(GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer){ sAPIClassTable.map_glVertexAttribIPointer(index, size, type, stride, pointer); }
DLLEXPORT void DLLEXPORTENTRY glGetVertexAttribIiv(GLuint index, GLenum pname, GLint *params){ sAPIClassTable.map_glGetVertexAttribIiv(index, pname, params); }
DLLEXPORT void DLLEXPORTENTRY glGetVertexAttribIuiv(GLuint index, GLenum pname, GLuint *params){ sAPIClassTable.map_glGetVertexAttribIuiv(index, pname, params); }
DLLEXPORT void DLLEXPORTENTRY glVertexAttribI4i(GLuint index, GLint x, GLint y, GLint z, GLint w){ sAPIClassTable.map_glVertexAttribI4i(index, x, y, z, w); }
DLLEXPORT void DLLEXPORTENTRY glVertexAttribI4ui(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w){ sAPIClassTable.map_glVertexAttribI4ui(index, x, y, z, w); }
DLLEXPORT void DLLEXPORTENTRY glVertexAttribI4iv(GLuint index, const GLint *v){ sAPIClassTable.map_glVertexAttribI4iv(index, v); }
DLLEXPORT void DLLEXPORTENTRY glVertexAttribI4uiv(GLuint index, const GLuint *v){ sAPIClassTable.map_glVertexAttribI4uiv(index, v); }
DLLEXPORT void DLLEXPORTENTRY glGetUniformuiv(GLuint program, GLint location, GLuint *params){ sAPIClassTable.map_glGetUniformuiv(program, location, params); }
DLLEXPORT GLint DLLEXPORTENTRY glGetFragDataLocation(GLuint program, const GLchar *name){ return sAPIClassTable.map_glGetFragDataLocation(program, name); }
DLLEXPORT void DLLEXPORTENTRY glUniform1ui(GLint location, GLuint v0){ sAPIClassTable.map_glUniform1ui(location, v0); }
DLLEXPORT void DLLEXPORTENTRY glUniform2ui(GLint location, GLuint v0, GLuint v1){ sAPIClassTable.map_glUniform2ui(location, v0, v1); }
DLLEXPORT void DLLEXPORTENTRY glUniform3ui(GLint location, GLuint v0, GLuint v1, GLuint v2){ sAPIClassTable.map_glUniform3ui(location, v0, v1, v2); }
DLLEXPORT void DLLEXPORTENTRY glUniform4ui(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3){ sAPIClassTable.map_glUniform4ui(location, v0, v1, v2, v3); }
DLLEXPORT void DLLEXPORTENTRY glUniform1uiv(GLint location, GLsizei count, const GLuint *value){ sAPIClassTable.map_glUniform1uiv(location, count, value); }
DLLEXPORT void DLLEXPORTENTRY glUniform2uiv(GLint location, GLsizei count, const GLuint *value){ sAPIClassTable.map_glUniform2uiv(location, count, value); }
DLLEXPORT void DLLEXPORTENTRY glUniform3uiv(GLint location, GLsizei count, const GLuint *value){ sAPIClassTable.map_glUniform3uiv(location, count, value); }
DLLEXPORT void DLLEXPORTENTRY glUniform4uiv(GLint location, GLsizei count, const GLuint *value){ sAPIClassTable.map_glUniform4uiv(location, count, value); }
DLLEXPORT void DLLEXPORTENTRY glClearBufferiv(GLenum buffer, GLint drawbuffer, const GLint *value){ sAPIClassTable.map_glClearBufferiv(buffer, drawbuffer, value); }
DLLEXPORT void DLLEXPORTENTRY glClearBufferuiv(GLenum buffer, GLint drawbuffer, const GLuint *value){ sAPIClassTable.map_glClearBufferuiv(buffer, drawbuffer, value); }
DLLEXPORT void DLLEXPORTENTRY glClearBufferfv(GLenum buffer, GLint drawbuffer, const GLfloat *value){ sAPIClassTable.map_glClearBufferfv(buffer, drawbuffer, value); }
DLLEXPORT void DLLEXPORTENTRY glClearBufferfi(GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil){ sAPIClassTable.map_glClearBufferfi(buffer, drawbuffer, depth, stencil); }
DLLEXPORT const GLubyte * DLLEXPORTENTRY glGetStringi(GLenum name, GLuint index){ return sAPIClassTable.map_glGetStringi(name, index); }
DLLEXPORT void DLLEXPORTENTRY glCopyBufferSubData(GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size){ sAPIClassTable.map_glCopyBufferSubData(readTarget, writeTarget, readOffset, writeOffset, size); }
DLLEXPORT void DLLEXPORTENTRY glGetUniformIndices(GLuint program, GLsizei uniformCount, const GLchar *const*uniformNames, GLuint *uniformIndices){ sAPIClassTable.map_glGetUniformIndices(program, uniformCount, uniformNames, uniformIndices); }
DLLEXPORT void DLLEXPORTENTRY glGetActiveUniformsiv(GLuint program, GLsizei uniformCount, const GLuint *uniformIndices, GLenum pname, GLint *params){ sAPIClassTable.map_glGetActiveUniformsiv(program, uniformCount, uniformIndices, pname, params); }
DLLEXPORT GLuint DLLEXPORTENTRY glGetUniformBlockIndex(GLuint program, const GLchar *uniformBlockName){ return sAPIClassTable.map_glGetUniformBlockIndex(program, uniformBlockName); }
DLLEXPORT void DLLEXPORTENTRY glGetActiveUniformBlockiv(GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint *params){ sAPIClassTable.map_glGetActiveUniformBlockiv(program, uniformBlockIndex, pname, params); }
DLLEXPORT void DLLEXPORTENTRY glGetActiveUniformBlockName(GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformBlockName){ sAPIClassTable.map_glGetActiveUniformBlockName(program, uniformBlockIndex, bufSize, length, uniformBlockName); }
DLLEXPORT void DLLEXPORTENTRY glUniformBlockBinding(GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding){ sAPIClassTable.map_glUniformBlockBinding(program, uniformBlockIndex, uniformBlockBinding); }
DLLEXPORT void DLLEXPORTENTRY glDrawArraysInstanced(GLenum mode, GLint first, GLsizei count, GLsizei instancecount){ sAPIClassTable.map_glDrawArraysInstanced(mode, first, count, instancecount); }
DLLEXPORT void DLLEXPORTENTRY glDrawElementsInstanced(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount){ sAPIClassTable.map_glDrawElementsInstanced(mode, count, type, indices, instancecount); }
DLLEXPORT GLsync DLLEXPORTENTRY glFenceSync(GLenum condition, GLbitfield flags){ return sAPIClassTable.map_glFenceSync(condition, flags); }
DLLEXPORT GLboolean DLLEXPORTENTRY glIsSync(GLsync sync){ return sAPIClassTable.map_glIsSync(sync); }
DLLEXPORT void DLLEXPORTENTRY glDeleteSync(GLsync sync){ sAPIClassTable.map_glDeleteSync(sync); }
DLLEXPORT GLenum DLLEXPORTENTRY glClientWaitSync(GLsync sync, GLbitfield flags, GLuint64 timeout){ return sAPIClassTable.map_glClientWaitSync(sync, flags, timeout); }
DLLEXPORT void DLLEXPORTENTRY glWaitSync(GLsync sync, GLbitfield flags, GLuint64 timeout){ sAPIClassTable.map_glWaitSync(sync, flags, timeout); }
DLLEXPORT void DLLEXPORTENTRY glGetInteger64v(GLenum pname, GLint64 *data){ sAPIClassTable.map_glGetInteger64v(pname, data); }
DLLEXPORT void DLLEXPORTENTRY glGetSynciv(GLsync sync, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values){ sAPIClassTable.map_glGetSynciv(sync, pname, bufSize, length, values); }
DLLEXPORT void DLLEXPORTENTRY glGetInteger64i_v(GLenum target, GLuint index, GLint64 *data){ sAPIClassTable.map_glGetInteger64i_v(target, index, data); }
DLLEXPORT void DLLEXPORTENTRY glGetBufferParameteri64v(GLenum target, GLenum pname, GLint64 *params){ sAPIClassTable.map_glGetBufferParameteri64v(target, pname, params); }
DLLEXPORT void DLLEXPORTENTRY glGenSamplers(GLsizei count, GLuint *samplers){ sAPIClassTable.map_glGenSamplers(count, samplers); }
DLLEXPORT void DLLEXPORTENTRY glDeleteSamplers(GLsizei count, const GLuint *samplers){ sAPIClassTable.map_glDeleteSamplers(count, samplers); }
DLLEXPORT GLboolean DLLEXPORTENTRY glIsSampler(GLuint sampler){ return sAPIClassTable.map_glIsSampler(sampler); }
DLLEXPORT void DLLEXPORTENTRY glBindSampler(GLuint unit, GLuint sampler){ sAPIClassTable.map_glBindSampler(unit, sampler); }
DLLEXPORT void DLLEXPORTENTRY glSamplerParameteri(GLuint sampler, GLenum pname, GLint param){ sAPIClassTable.map_glSamplerParameteri(sampler, pname, param); }
DLLEXPORT void DLLEXPORTENTRY glSamplerParameteriv(GLuint sampler, GLenum pname, const GLint *param){ sAPIClassTable.map_glSamplerParameteriv(sampler, pname, param); }
DLLEXPORT void DLLEXPORTENTRY glSamplerParameterf(GLuint sampler, GLenum pname, GLfloat param){ sAPIClassTable.map_glSamplerParameterf(sampler, pname, param); }
DLLEXPORT void DLLEXPORTENTRY glSamplerParameterfv(GLuint sampler, GLenum pname, const GLfloat *param){ sAPIClassTable.map_glSamplerParameterfv(sampler, pname, param); }
DLLEXPORT void DLLEXPORTENTRY glGetSamplerParameteriv(GLuint sampler, GLenum pname, GLint *params){ sAPIClassTable.map_glGetSamplerParameteriv(sampler, pname, params); }
DLLEXPORT void DLLEXPORTENTRY glGetSamplerParameterfv(GLuint sampler, GLenum pname, GLfloat *params){ sAPIClassTable.map_glGetSamplerParameterfv(sampler, pname, params); }
DLLEXPORT void DLLEXPORTENTRY glVertexAttribDivisor(GLuint index, GLuint divisor){ sAPIClassTable.map_glVertexAttribDivisor(index, divisor); }
DLLEXPORT void DLLEXPORTENTRY glBindTransformFeedback(GLenum target, GLuint id){ sAPIClassTable.map_glBindTransformFeedback(target, id); }
DLLEXPORT void DLLEXPORTENTRY glDeleteTransformFeedbacks(GLsizei n, const GLuint *ids){ sAPIClassTable.map_glDeleteTransformFeedbacks(n, ids); }
DLLEXPORT void DLLEXPORTENTRY glGenTransformFeedbacks(GLsizei n, GLuint *ids){ sAPIClassTable.map_glGenTransformFeedbacks(n, ids); }
DLLEXPORT GLboolean DLLEXPORTENTRY glIsTransformFeedback(GLuint id){ return sAPIClassTable.map_glIsTransformFeedback(id); }
DLLEXPORT void DLLEXPORTENTRY glPauseTransformFeedback(void){ sAPIClassTable.map_glPauseTransformFeedback(); }
DLLEXPORT void DLLEXPORTENTRY glResumeTransformFeedback(void){ sAPIClassTable.map_glResumeTransformFeedback(); }
DLLEXPORT void DLLEXPORTENTRY glGetProgramBinary(GLuint program, GLsizei bufSize, GLsizei *length, GLenum *binaryFormat, void *binary){ sAPIClassTable.map_glGetProgramBinary(program, bufSize, length, binaryFormat, binary); }
DLLEXPORT void DLLEXPORTENTRY glProgramBinary(GLuint program, GLenum binaryFormat, const void *binary, GLsizei length){ sAPIClassTable.map_glProgramBinary(program, binaryFormat, binary, length); }
DLLEXPORT void DLLEXPORTENTRY glProgramParameteri(GLuint program, GLenum pname, GLint value){ sAPIClassTable.map_glProgramParameteri(program, pname, value); }
DLLEXPORT void DLLEXPORTENTRY glInvalidateFramebuffer(GLenum target, GLsizei numAttachments, const GLenum *attachments){ sAPIClassTable.map_glInvalidateFramebuffer(target, numAttachments, attachments); }
DLLEXPORT void DLLEXPORTENTRY glInvalidateSubFramebuffer(GLenum target, GLsizei numAttachments, const GLenum *attachments, GLint x, GLint y, GLsizei width, GLsizei height){ sAPIClassTable.map_glInvalidateSubFramebuffer(target, numAttachments, attachments, x, y, width, height); }
DLLEXPORT void DLLEXPORTENTRY glTexStorage2D(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height){ sAPIClassTable.map_glTexStorage2D(target, levels, internalformat, width, height); }
DLLEXPORT void DLLEXPORTENTRY glTexStorage3D(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth){ sAPIClassTable.map_glTexStorage3D(target, levels, internalformat, width, height, depth); }
DLLEXPORT void DLLEXPORTENTRY glGetInternalformativ(GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint *params){ sAPIClassTable.map_glGetInternalformativ(target, internalformat, pname, bufSize, params); }
#endif /* GL_ES_VERSION_3_0*/

#if GL_ES_VERSION_3_1
DLLEXPORT void DLLEXPORTENTRY glDispatchCompute(GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z){ sAPIClassTable.map_glDispatchCompute(num_groups_x, num_groups_y, num_groups_z); }
DLLEXPORT void DLLEXPORTENTRY glDispatchComputeIndirect(GLintptr indirect){ sAPIClassTable.map_glDispatchComputeIndirect(indirect); }
DLLEXPORT void DLLEXPORTENTRY glDrawArraysIndirect(GLenum mode, const void *indirect){ sAPIClassTable.map_glDrawArraysIndirect(mode, indirect); }
DLLEXPORT void DLLEXPORTENTRY glDrawElementsIndirect(GLenum mode, GLenum type, const void *indirect){ sAPIClassTable.map_glDrawElementsIndirect(mode, type, indirect); }
DLLEXPORT void DLLEXPORTENTRY glFramebufferParameteri(GLenum target, GLenum pname, GLint param){ sAPIClassTable.map_glFramebufferParameteri(target, pname, param); }
DLLEXPORT void DLLEXPORTENTRY glGetFramebufferParameteriv(GLenum target, GLenum pname, GLint *params){ sAPIClassTable.map_glGetFramebufferParameteriv(target, pname, params); }
DLLEXPORT void DLLEXPORTENTRY glGetProgramInterfaceiv(GLuint program, GLenum programInterface, GLenum pname, GLint *params){ sAPIClassTable.map_glGetProgramInterfaceiv(program, programInterface, pname, params); }
DLLEXPORT GLuint DLLEXPORTENTRY glGetProgramResourceIndex(GLuint program, GLenum programInterface, const GLchar *name){ return sAPIClassTable.map_glGetProgramResourceIndex(program, programInterface, name); }
DLLEXPORT void DLLEXPORTENTRY glGetProgramResourceName(GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name){ sAPIClassTable.map_glGetProgramResourceName(program, programInterface, index, bufSize, length, name); }
DLLEXPORT void DLLEXPORTENTRY glGetProgramResourceiv(GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum *props, GLsizei bufSize, GLsizei *length, GLint *params){ sAPIClassTable.map_glGetProgramResourceiv(program, programInterface, index, propCount, props, bufSize, length, params); }
DLLEXPORT GLint DLLEXPORTENTRY glGetProgramResourceLocation(GLuint program, GLenum programInterface, const GLchar *name){ return sAPIClassTable.map_glGetProgramResourceLocation(program, programInterface, name); }
DLLEXPORT void DLLEXPORTENTRY glUseProgramStages(GLuint pipeline, GLbitfield stages, GLuint program){ sAPIClassTable.map_glUseProgramStages(pipeline, stages, program); }
DLLEXPORT void DLLEXPORTENTRY glActiveShaderProgram(GLuint pipeline, GLuint program){ sAPIClassTable.map_glActiveShaderProgram(pipeline, program); }
DLLEXPORT GLuint DLLEXPORTENTRY glCreateShaderProgramv(GLenum type, GLsizei count, const GLchar *const*strings){ return sAPIClassTable.map_glCreateShaderProgramv(type, count, strings); }
DLLEXPORT void DLLEXPORTENTRY glBindProgramPipeline(GLuint pipeline){ sAPIClassTable.map_glBindProgramPipeline(pipeline); }
DLLEXPORT void DLLEXPORTENTRY glDeleteProgramPipelines(GLsizei n, const GLuint *pipelines){ sAPIClassTable.map_glDeleteProgramPipelines(n, pipelines); }
DLLEXPORT void DLLEXPORTENTRY glGenProgramPipelines(GLsizei n, GLuint *pipelines){ sAPIClassTable.map_glGenProgramPipelines(n, pipelines); }
DLLEXPORT GLboolean DLLEXPORTENTRY glIsProgramPipeline(GLuint pipeline){ return sAPIClassTable.map_glIsProgramPipeline(pipeline); }
DLLEXPORT void DLLEXPORTENTRY glGetProgramPipelineiv(GLuint pipeline, GLenum pname, GLint *params){ sAPIClassTable.map_glGetProgramPipelineiv(pipeline, pname, params); }
DLLEXPORT void DLLEXPORTENTRY glProgramUniform1i(GLuint program, GLint location, GLint v0){ sAPIClassTable.map_glProgramUniform1i(program, location, v0); }
DLLEXPORT void DLLEXPORTENTRY glProgramUniform2i(GLuint program, GLint location, GLint v0, GLint v1){ sAPIClassTable.map_glProgramUniform2i(program, location, v0, v1); }
DLLEXPORT void DLLEXPORTENTRY glProgramUniform3i(GLuint program, GLint location, GLint v0, GLint v1, GLint v2){ sAPIClassTable.map_glProgramUniform3i(program, location, v0, v1, v2); }
DLLEXPORT void DLLEXPORTENTRY glProgramUniform4i(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3){ sAPIClassTable.map_glProgramUniform4i(program, location, v0, v1, v2, v3); }
DLLEXPORT void DLLEXPORTENTRY glProgramUniform1ui(GLuint program, GLint location, GLuint v0){ sAPIClassTable.map_glProgramUniform1ui(program, location, v0); }
DLLEXPORT void DLLEXPORTENTRY glProgramUniform2ui(GLuint program, GLint location, GLuint v0, GLuint v1){ sAPIClassTable.map_glProgramUniform2ui(program, location, v0, v1); }
DLLEXPORT void DLLEXPORTENTRY glProgramUniform3ui(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2){ sAPIClassTable.map_glProgramUniform3ui(program, location, v0, v1, v2); }
DLLEXPORT void DLLEXPORTENTRY glProgramUniform4ui(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3){ sAPIClassTable.map_glProgramUniform4ui(program, location, v0, v1, v2, v3); }
DLLEXPORT void DLLEXPORTENTRY glProgramUniform1f(GLuint program, GLint location, GLfloat v0){ sAPIClassTable.map_glProgramUniform1f(program, location, v0); }
DLLEXPORT void DLLEXPORTENTRY glProgramUniform2f(GLuint program, GLint location, GLfloat v0, GLfloat v1){ sAPIClassTable.map_glProgramUniform2f(program, location, v0, v1); }
DLLEXPORT void DLLEXPORTENTRY glProgramUniform3f(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2){ sAPIClassTable.map_glProgramUniform3f(program, location, v0, v1, v2); }
DLLEXPORT void DLLEXPORTENTRY glProgramUniform4f(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3){ sAPIClassTable.map_glProgramUniform4f(program, location, v0, v1, v2, v3); }
DLLEXPORT void DLLEXPORTENTRY glProgramUniform1iv(GLuint program, GLint location, GLsizei count, const GLint *value){ sAPIClassTable.map_glProgramUniform1iv(program, location, count, value); }
DLLEXPORT void DLLEXPORTENTRY glProgramUniform2iv(GLuint program, GLint location, GLsizei count, const GLint *value){ sAPIClassTable.map_glProgramUniform2iv(program, location, count, value); }
DLLEXPORT void DLLEXPORTENTRY glProgramUniform3iv(GLuint program, GLint location, GLsizei count, const GLint *value){ sAPIClassTable.map_glProgramUniform3iv(program, location, count, value); }
DLLEXPORT void DLLEXPORTENTRY glProgramUniform4iv(GLuint program, GLint location, GLsizei count, const GLint *value){ sAPIClassTable.map_glProgramUniform4iv(program, location, count, value); }
DLLEXPORT void DLLEXPORTENTRY glProgramUniform1uiv(GLuint program, GLint location, GLsizei count, const GLuint *value){ sAPIClassTable.map_glProgramUniform1uiv(program, location, count, value); }
DLLEXPORT void DLLEXPORTENTRY glProgramUniform2uiv(GLuint program, GLint location, GLsizei count, const GLuint *value){ sAPIClassTable.map_glProgramUniform2uiv(program, location, count, value); }
DLLEXPORT void DLLEXPORTENTRY glProgramUniform3uiv(GLuint program, GLint location, GLsizei count, const GLuint *value){ sAPIClassTable.map_glProgramUniform3uiv(program, location, count, value); }
DLLEXPORT void DLLEXPORTENTRY glProgramUniform4uiv(GLuint program, GLint location, GLsizei count, const GLuint *value){ sAPIClassTable.map_glProgramUniform4uiv(program, location, count, value); }
DLLEXPORT void DLLEXPORTENTRY glProgramUniform1fv(GLuint program, GLint location, GLsizei count, const GLfloat *value){ sAPIClassTable.map_glProgramUniform1fv(program, location, count, value); }
DLLEXPORT void DLLEXPORTENTRY glProgramUniform2fv(GLuint program, GLint location, GLsizei count, const GLfloat *value){ sAPIClassTable.map_glProgramUniform2fv(program, location, count, value); }
DLLEXPORT void DLLEXPORTENTRY glProgramUniform3fv(GLuint program, GLint location, GLsizei count, const GLfloat *value){ sAPIClassTable.map_glProgramUniform3fv(program, location, count, value); }
DLLEXPORT void DLLEXPORTENTRY glProgramUniform4fv(GLuint program, GLint location, GLsizei count, const GLfloat *value){ sAPIClassTable.map_glProgramUniform4fv(program, location, count, value); }
DLLEXPORT void DLLEXPORTENTRY glProgramUniformMatrix2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value){ sAPIClassTable.map_glProgramUniformMatrix2fv(program, location, count, transpose, value); }
DLLEXPORT void DLLEXPORTENTRY glProgramUniformMatrix3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value){ sAPIClassTable.map_glProgramUniformMatrix3fv(program, location, count, transpose, value); }
DLLEXPORT void DLLEXPORTENTRY glProgramUniformMatrix4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value){ sAPIClassTable.map_glProgramUniformMatrix4fv(program, location, count, transpose, value); }
DLLEXPORT void DLLEXPORTENTRY glProgramUniformMatrix2x3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value){ sAPIClassTable.map_glProgramUniformMatrix2x3fv(program, location, count, transpose, value); }
DLLEXPORT void DLLEXPORTENTRY glProgramUniformMatrix3x2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value){ sAPIClassTable.map_glProgramUniformMatrix3x2fv(program, location, count, transpose, value); }
DLLEXPORT void DLLEXPORTENTRY glProgramUniformMatrix2x4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value){ sAPIClassTable.map_glProgramUniformMatrix2x4fv(program, location, count, transpose, value); }
DLLEXPORT void DLLEXPORTENTRY glProgramUniformMatrix4x2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value){ sAPIClassTable.map_glProgramUniformMatrix4x2fv(program, location, count, transpose, value); }
DLLEXPORT void DLLEXPORTENTRY glProgramUniformMatrix3x4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value){ sAPIClassTable.map_glProgramUniformMatrix3x4fv(program, location, count, transpose, value); }
DLLEXPORT void DLLEXPORTENTRY glProgramUniformMatrix4x3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value){ sAPIClassTable.map_glProgramUniformMatrix4x3fv(program, location, count, transpose, value); }
DLLEXPORT void DLLEXPORTENTRY glValidateProgramPipeline(GLuint pipeline){ sAPIClassTable.map_glValidateProgramPipeline(pipeline); }
DLLEXPORT void DLLEXPORTENTRY glGetProgramPipelineInfoLog(GLuint pipeline, GLsizei bufSize, GLsizei *length, GLchar *infoLog){ sAPIClassTable.map_glGetProgramPipelineInfoLog(pipeline, bufSize, length, infoLog); }
DLLEXPORT void DLLEXPORTENTRY glBindImageTexture(GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format){ sAPIClassTable.map_glBindImageTexture(unit, texture, level, layered, layer, access, format); }
DLLEXPORT void DLLEXPORTENTRY glGetBooleani_v(GLenum target, GLuint index, GLboolean *data){ sAPIClassTable.map_glGetBooleani_v(target, index, data); }
DLLEXPORT void DLLEXPORTENTRY glMemoryBarrier(GLbitfield barriers){ sAPIClassTable.map_glMemoryBarrier(barriers); }
DLLEXPORT void DLLEXPORTENTRY glMemoryBarrierByRegion(GLbitfield barriers){ sAPIClassTable.map_glMemoryBarrierByRegion(barriers); }
DLLEXPORT void DLLEXPORTENTRY glTexStorage2DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations){ sAPIClassTable.map_glTexStorage2DMultisample(target, samples, internalformat, width, height, fixedsamplelocations); }
DLLEXPORT void DLLEXPORTENTRY glGetMultisamplefv(GLenum pname, GLuint index, GLfloat *val){ sAPIClassTable.map_glGetMultisamplefv(pname, index, val); }
DLLEXPORT void DLLEXPORTENTRY glSampleMaski(GLuint maskNumber, GLbitfield mask){ sAPIClassTable.map_glSampleMaski(maskNumber, mask); }
DLLEXPORT void DLLEXPORTENTRY glGetTexLevelParameteriv(GLenum target, GLint level, GLenum pname, GLint *params){ sAPIClassTable.map_glGetTexLevelParameteriv(target, level, pname, params); }
DLLEXPORT void DLLEXPORTENTRY glGetTexLevelParameterfv(GLenum target, GLint level, GLenum pname, GLfloat *params){ sAPIClassTable.map_glGetTexLevelParameterfv(target, level, pname, params); }
DLLEXPORT void DLLEXPORTENTRY glBindVertexBuffer(GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride){ sAPIClassTable.map_glBindVertexBuffer(bindingindex, buffer, offset, stride); }
DLLEXPORT void DLLEXPORTENTRY glVertexAttribFormat(GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset){ sAPIClassTable.map_glVertexAttribFormat(attribindex, size, type, normalized, relativeoffset); }
DLLEXPORT void DLLEXPORTENTRY glVertexAttribIFormat(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset){ sAPIClassTable.map_glVertexAttribIFormat(attribindex, size, type, relativeoffset); }
DLLEXPORT void DLLEXPORTENTRY glVertexAttribBinding(GLuint attribindex, GLuint bindingindex){ sAPIClassTable.map_glVertexAttribBinding(attribindex, bindingindex); }
DLLEXPORT void DLLEXPORTENTRY glVertexBindingDivisor(GLuint bindingindex, GLuint divisor){ sAPIClassTable.map_glVertexBindingDivisor(bindingindex, divisor); }
#endif /* GL_ES_VERSION_3_1*/

#if GL_ES_VERSION_3_2
DLLEXPORT void DLLEXPORTENTRY glBlendBarrier(void){ sAPIClassTable.map_glBlendBarrier(); }
DLLEXPORT void DLLEXPORTENTRY glCopyImageSubData(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth){ sAPIClassTable.map_glCopyImageSubData(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth); }
DLLEXPORT void DLLEXPORTENTRY glDebugMessageControl(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled){ sAPIClassTable.map_glDebugMessageControl(source, type, severity, count, ids, enabled); }
DLLEXPORT void DLLEXPORTENTRY glDebugMessageInsert(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf){ sAPIClassTable.map_glDebugMessageInsert(source, type, id, severity, length, buf); }
DLLEXPORT void DLLEXPORTENTRY glDebugMessageCallback(GLDEBUGPROC callback, const void *userParam){ sAPIClassTable.map_glDebugMessageCallback(callback, userParam); }
DLLEXPORT GLuint DLLEXPORTENTRY glGetDebugMessageLog(GLuint count, GLsizei bufSize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog){ return sAPIClassTable.map_glGetDebugMessageLog(count, bufSize, sources, types, ids, severities, lengths, messageLog); }
DLLEXPORT void DLLEXPORTENTRY glPushDebugGroup(GLenum source, GLuint id, GLsizei length, const GLchar *message){ sAPIClassTable.map_glPushDebugGroup(source, id, length, message); }
DLLEXPORT void DLLEXPORTENTRY glPopDebugGroup(void){ sAPIClassTable.map_glPopDebugGroup(); }
DLLEXPORT void DLLEXPORTENTRY glObjectLabel(GLenum identifier, GLuint name, GLsizei length, const GLchar *label){ sAPIClassTable.map_glObjectLabel(identifier, name, length, label); }
DLLEXPORT void DLLEXPORTENTRY glGetObjectLabel(GLenum identifier, GLuint name, GLsizei bufSize, GLsizei *length, GLchar *label){ sAPIClassTable.map_glGetObjectLabel(identifier, name, bufSize, length, label); }
DLLEXPORT void DLLEXPORTENTRY glObjectPtrLabel(const void *ptr, GLsizei length, const GLchar *label){ sAPIClassTable.map_glObjectPtrLabel(ptr, length, label); }
DLLEXPORT void DLLEXPORTENTRY glGetObjectPtrLabel(const void *ptr, GLsizei bufSize, GLsizei *length, GLchar *label){ sAPIClassTable.map_glGetObjectPtrLabel(ptr, bufSize, length, label); }
DLLEXPORT void DLLEXPORTENTRY glEnablei(GLenum target, GLuint index){ sAPIClassTable.map_glEnablei(target, index); }
DLLEXPORT void DLLEXPORTENTRY glDisablei(GLenum target, GLuint index){ sAPIClassTable.map_glDisablei(target, index); }
DLLEXPORT void DLLEXPORTENTRY glBlendEquationi(GLuint buf, GLenum mode){ sAPIClassTable.map_glBlendEquationi(buf, mode); }
DLLEXPORT void DLLEXPORTENTRY glBlendEquationSeparatei(GLuint buf, GLenum modeRGB, GLenum modeAlpha){ sAPIClassTable.map_glBlendEquationSeparatei(buf, modeRGB, modeAlpha); }
DLLEXPORT void DLLEXPORTENTRY glBlendFunci(GLuint buf, GLenum src, GLenum dst){ sAPIClassTable.map_glBlendFunci(buf, src, dst); }
DLLEXPORT void DLLEXPORTENTRY glBlendFuncSeparatei(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha){ sAPIClassTable.map_glBlendFuncSeparatei(buf, srcRGB, dstRGB, srcAlpha, dstAlpha); }
DLLEXPORT void DLLEXPORTENTRY glColorMaski(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a){ sAPIClassTable.map_glColorMaski(index, r, g, b, a); }
DLLEXPORT GLboolean DLLEXPORTENTRY glIsEnabledi(GLenum target, GLuint index){ return sAPIClassTable.map_glIsEnabledi(target, index); }
DLLEXPORT void DLLEXPORTENTRY glDrawElementsBaseVertex(GLenum mode, GLsizei count, GLenum type, const void *indices, GLint basevertex){ sAPIClassTable.map_glDrawElementsBaseVertex(mode, count, type, indices, basevertex); }
DLLEXPORT void DLLEXPORTENTRY glDrawRangeElementsBaseVertex(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices, GLint basevertex){ sAPIClassTable.map_glDrawRangeElementsBaseVertex(mode, start, end, count, type, indices, basevertex); }
DLLEXPORT void DLLEXPORTENTRY glDrawElementsInstancedBaseVertex(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex){ sAPIClassTable.map_glDrawElementsInstancedBaseVertex(mode, count, type, indices, instancecount, basevertex); }
DLLEXPORT void DLLEXPORTENTRY glFramebufferTexture(GLenum target, GLenum attachment, GLuint texture, GLint level){ sAPIClassTable.map_glFramebufferTexture(target, attachment, texture, level); }
DLLEXPORT void DLLEXPORTENTRY glPrimitiveBoundingBox(GLfloat minX, GLfloat minY, GLfloat minZ, GLfloat minW, GLfloat maxX, GLfloat maxY, GLfloat maxZ, GLfloat maxW){ sAPIClassTable.map_glPrimitiveBoundingBox(minX, minY, minZ, minW, maxX, maxY, maxZ, maxW); }
DLLEXPORT GLenum DLLEXPORTENTRY glGetGraphicsResetStatus(void){ return sAPIClassTable.map_glGetGraphicsResetStatus(); }
DLLEXPORT void DLLEXPORTENTRY glReadnPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void *data){ sAPIClassTable.map_glReadnPixels(x, y, width, height, format, type, bufSize, data); }
DLLEXPORT void DLLEXPORTENTRY glGetnUniformfv(GLuint program, GLint location, GLsizei bufSize, GLfloat *params){ sAPIClassTable.map_glGetnUniformfv(program, location, bufSize, params); }
DLLEXPORT void DLLEXPORTENTRY glGetnUniformiv(GLuint program, GLint location, GLsizei bufSize, GLint *params){ sAPIClassTable.map_glGetnUniformiv(program, location, bufSize, params); }
DLLEXPORT void DLLEXPORTENTRY glGetnUniformuiv(GLuint program, GLint location, GLsizei bufSize, GLuint *params){ sAPIClassTable.map_glGetnUniformuiv(program, location, bufSize, params); }
DLLEXPORT void DLLEXPORTENTRY glMinSampleShading(GLfloat value){ sAPIClassTable.map_glMinSampleShading(value); }
DLLEXPORT void DLLEXPORTENTRY glPatchParameteri(GLenum pname, GLint value){ sAPIClassTable.map_glPatchParameteri(pname, value); }
DLLEXPORT void DLLEXPORTENTRY glTexParameterIiv(GLenum target, GLenum pname, const GLint *params){ sAPIClassTable.map_glTexParameterIiv(target, pname, params); }
DLLEXPORT void DLLEXPORTENTRY glTexParameterIuiv(GLenum target, GLenum pname, const GLuint *params){ sAPIClassTable.map_glTexParameterIuiv(target, pname, params); }
DLLEXPORT void DLLEXPORTENTRY glGetTexParameterIiv(GLenum target, GLenum pname, GLint *params){ sAPIClassTable.map_glGetTexParameterIiv(target, pname, params); }
DLLEXPORT void DLLEXPORTENTRY glGetTexParameterIuiv(GLenum target, GLenum pname, GLuint *params){ sAPIClassTable.map_glGetTexParameterIuiv(target, pname, params); }
DLLEXPORT void DLLEXPORTENTRY glSamplerParameterIiv(GLuint sampler, GLenum pname, const GLint *param){ sAPIClassTable.map_glSamplerParameterIiv(sampler, pname, param); }
DLLEXPORT void DLLEXPORTENTRY glSamplerParameterIuiv(GLuint sampler, GLenum pname, const GLuint *param){ sAPIClassTable.map_glSamplerParameterIuiv(sampler, pname, param); }
DLLEXPORT void DLLEXPORTENTRY glGetSamplerParameterIiv(GLuint sampler, GLenum pname, GLint *params){ sAPIClassTable.map_glGetSamplerParameterIiv(sampler, pname, params); }
DLLEXPORT void DLLEXPORTENTRY glGetSamplerParameterIuiv(GLuint sampler, GLenum pname, GLuint *params){ sAPIClassTable.map_glGetSamplerParameterIuiv(sampler, pname, params); }
DLLEXPORT void DLLEXPORTENTRY glTexBuffer(GLenum target, GLenum internalformat, GLuint buffer){ sAPIClassTable.map_glTexBuffer(target, internalformat, buffer); }
DLLEXPORT void DLLEXPORTENTRY glTexBufferRange(GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size){ sAPIClassTable.map_glTexBufferRange(target, internalformat, buffer, offset, size); }
DLLEXPORT void DLLEXPORTENTRY glTexStorage3DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations){ sAPIClassTable.map_glTexStorage3DMultisample(target, samples, internalformat, width, height, depth, fixedsamplelocations); }
#endif /* GL_ES_VERSION_3_2*/

#if EGL_KHR_cl_event2
DLLEXPORT EGLSyncKHR DLLEXPORTENTRY eglCreateSync64KHR(EGLDisplay dpy, EGLenum type, const EGLAttribKHR *attrib_list){ return sAPIClassTable.map_eglCreateSync64KHR(dpy, type, attrib_list); }
#endif /* EGL_KHR_cl_event2*/

#if EGL_KHR_client_get_all_proc_addresses
#endif /* EGL_KHR_client_get_all_proc_addresses*/

#if EGL_KHR_create_context
#endif /* EGL_KHR_create_context*/

#if EGL_KHR_fence_sync
DLLEXPORT EGLSyncKHR DLLEXPORTENTRY eglCreateSyncKHR(EGLDisplay dpy, EGLenum type, const EGLint *attrib_list){ return sAPIClassTable.map_eglCreateSyncKHR(dpy, type, attrib_list); }
DLLEXPORT EGLBoolean DLLEXPORTENTRY eglDestroySyncKHR(EGLDisplay dpy, EGLSyncKHR sync){ return sAPIClassTable.map_eglDestroySyncKHR(dpy, sync); }
DLLEXPORT EGLint DLLEXPORTENTRY eglClientWaitSyncKHR(EGLDisplay dpy, EGLSyncKHR sync, EGLint flags, EGLTimeKHR timeout){ return sAPIClassTable.map_eglClientWaitSyncKHR(dpy, sync, flags, timeout); }
DLLEXPORT EGLBoolean DLLEXPORTENTRY eglGetSyncAttribKHR(EGLDisplay dpy, EGLSyncKHR sync, EGLint attribute, EGLint *value){ return sAPIClassTable.map_eglGetSyncAttribKHR(dpy, sync, attribute, value); }
#endif /* EGL_KHR_fence_sync*/

#if EGL_KHR_get_all_proc_addresses
#endif /* EGL_KHR_get_all_proc_addresses*/

#if EGL_KHR_gl_colorspace
#endif /* EGL_KHR_gl_colorspace*/

#if EGL_KHR_gl_renderbuffer_image
#endif /* EGL_KHR_gl_renderbuffer_image*/

#if EGL_KHR_gl_texture_2D_image
#endif /* EGL_KHR_gl_texture_2D_image*/

#if EGL_KHR_gl_texture_3D_image
#endif /* EGL_KHR_gl_texture_3D_image*/

#if EGL_KHR_gl_texture_cubemap_image
#endif /* EGL_KHR_gl_texture_cubemap_image*/

#if EGL_KHR_image
DLLEXPORT EGLImageKHR DLLEXPORTENTRY eglCreateImageKHR(EGLDisplay dpy, EGLContext ctx, EGLenum target, EGLClientBuffer buffer, const EGLint *attrib_list){ return sAPIClassTable.map_eglCreateImageKHR(dpy, ctx, target, buffer, attrib_list); }
DLLEXPORT EGLBoolean DLLEXPORTENTRY eglDestroyImageKHR(EGLDisplay dpy, EGLImageKHR image){ return sAPIClassTable.map_eglDestroyImageKHR(dpy, image); }
#endif /* EGL_KHR_image*/

#if EGL_KHR_image_base
#endif /* EGL_KHR_image_base*/

#if EGL_KHR_image_pixmap
#endif /* EGL_KHR_image_pixmap*/

#if EGL_KHR_platform_android
#endif /* EGL_KHR_platform_android*/

#if EGL_KHR_platform_wayland
#endif /* EGL_KHR_platform_wayland*/

#if EGL_KHR_platform_x11
#endif /* EGL_KHR_platform_x11*/

#if EGL_KHR_surfaceless_context
#endif /* EGL_KHR_surfaceless_context*/

#if EGL_KHR_wait_sync
DLLEXPORT EGLint DLLEXPORTENTRY eglWaitSyncKHR(EGLDisplay dpy, EGLSyncKHR sync, EGLint flags){ return sAPIClassTable.map_eglWaitSyncKHR(dpy, sync, flags); }
#endif /* EGL_KHR_wait_sync*/

#if GL_KHR_blend_equation_advanced
DLLEXPORT void DLLEXPORTENTRY glBlendBarrierKHR(void){ sAPIClassTable.map_glBlendBarrierKHR(); }
#endif /* GL_KHR_blend_equation_advanced*/

#if GL_KHR_blend_equation_advanced_coherent
#endif /* GL_KHR_blend_equation_advanced_coherent*/

#if GL_KHR_debug
DLLEXPORT void DLLEXPORTENTRY glDebugMessageControlKHR(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled){ sAPIClassTable.map_glDebugMessageControlKHR(source, type, severity, count, ids, enabled); }
DLLEXPORT void DLLEXPORTENTRY glDebugMessageInsertKHR(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf){ sAPIClassTable.map_glDebugMessageInsertKHR(source, type, id, severity, length, buf); }
DLLEXPORT void DLLEXPORTENTRY glDebugMessageCallbackKHR(GLDEBUGPROCKHR callback, const void *userParam){ sAPIClassTable.map_glDebugMessageCallbackKHR(callback, userParam); }
DLLEXPORT GLuint DLLEXPORTENTRY glGetDebugMessageLogKHR(GLuint count, GLsizei bufSize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog){ return sAPIClassTable.map_glGetDebugMessageLogKHR(count, bufSize, sources, types, ids, severities, lengths, messageLog); }
DLLEXPORT void DLLEXPORTENTRY glPushDebugGroupKHR(GLenum source, GLuint id, GLsizei length, const GLchar *message){ sAPIClassTable.map_glPushDebugGroupKHR(source, id, length, message); }
DLLEXPORT void DLLEXPORTENTRY glPopDebugGroupKHR(void){ sAPIClassTable.map_glPopDebugGroupKHR(); }
DLLEXPORT void DLLEXPORTENTRY glObjectLabelKHR(GLenum identifier, GLuint name, GLsizei length, const GLchar *label){ sAPIClassTable.map_glObjectLabelKHR(identifier, name, length, label); }
DLLEXPORT void DLLEXPORTENTRY glGetObjectLabelKHR(GLenum identifier, GLuint name, GLsizei bufSize, GLsizei *length, GLchar *label){ sAPIClassTable.map_glGetObjectLabelKHR(identifier, name, bufSize, length, label); }
DLLEXPORT void DLLEXPORTENTRY glObjectPtrLabelKHR(const void *ptr, GLsizei length, const GLchar *label){ sAPIClassTable.map_glObjectPtrLabelKHR(ptr, length, label); }
DLLEXPORT void DLLEXPORTENTRY glGetObjectPtrLabelKHR(const void *ptr, GLsizei bufSize, GLsizei *length, GLchar *label){ sAPIClassTable.map_glGetObjectPtrLabelKHR(ptr, bufSize, length, label); }
DLLEXPORT void DLLEXPORTENTRY glGetPointervKHR(GLenum pname, void **params){ sAPIClassTable.map_glGetPointervKHR(pname, params); }
#endif /* GL_KHR_debug*/

#if GL_KHR_robustness
DLLEXPORT GLenum DLLEXPORTENTRY glGetGraphicsResetStatusKHR(void){ return sAPIClassTable.map_glGetGraphicsResetStatusKHR(); }
DLLEXPORT void DLLEXPORTENTRY glReadnPixelsKHR(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void *data){ sAPIClassTable.map_glReadnPixelsKHR(x, y, width, height, format, type, bufSize, data); }
DLLEXPORT void DLLEXPORTENTRY glGetnUniformfvKHR(GLuint program, GLint location, GLsizei bufSize, GLfloat *params){ sAPIClassTable.map_glGetnUniformfvKHR(program, location, bufSize, params); }
DLLEXPORT void DLLEXPORTENTRY glGetnUniformivKHR(GLuint program, GLint location, GLsizei bufSize, GLint *params){ sAPIClassTable.map_glGetnUniformivKHR(program, location, bufSize, params); }
DLLEXPORT void DLLEXPORTENTRY glGetnUniformuivKHR(GLuint program, GLint location, GLsizei bufSize, GLuint *params){ sAPIClassTable.map_glGetnUniformuivKHR(program, location, bufSize, params); }
#endif /* GL_KHR_robustness*/

#if GL_KHR_texture_compression_astc_ldr
#endif /* GL_KHR_texture_compression_astc_ldr*/

#if GL_OES_EGL_image
DLLEXPORT void DLLEXPORTENTRY glEGLImageTargetTexture2DOES(GLenum target, GLeglImageOES image){ sAPIClassTable.map_glEGLImageTargetTexture2DOES(target, image); }
DLLEXPORT void DLLEXPORTENTRY glEGLImageTargetRenderbufferStorageOES(GLenum target, GLeglImageOES image){ sAPIClassTable.map_glEGLImageTargetRenderbufferStorageOES(target, image); }
#endif /* GL_OES_EGL_image*/

#if GL_OES_EGL_image_external
#endif /* GL_OES_EGL_image_external*/

#if GL_OES_EGL_sync
#endif /* GL_OES_EGL_sync*/

#if GL_OES_compressed_ETC1_RGB8_texture
#endif /* GL_OES_compressed_ETC1_RGB8_texture*/

#if GL_OES_compressed_paletted_texture
#endif /* GL_OES_compressed_paletted_texture*/

#if GL_OES_copy_image
DLLEXPORT void DLLEXPORTENTRY glCopyImageSubDataOES(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth){ sAPIClassTable.map_glCopyImageSubDataOES(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth); }
#endif /* GL_OES_copy_image*/

#if GL_OES_depth24
#endif /* GL_OES_depth24*/

#if GL_OES_draw_buffers_indexed
DLLEXPORT void DLLEXPORTENTRY glEnableiOES(GLenum target, GLuint index){ sAPIClassTable.map_glEnableiOES(target, index); }
DLLEXPORT void DLLEXPORTENTRY glDisableiOES(GLenum target, GLuint index){ sAPIClassTable.map_glDisableiOES(target, index); }
DLLEXPORT void DLLEXPORTENTRY glBlendEquationiOES(GLuint buf, GLenum mode){ sAPIClassTable.map_glBlendEquationiOES(buf, mode); }
DLLEXPORT void DLLEXPORTENTRY glBlendEquationSeparateiOES(GLuint buf, GLenum modeRGB, GLenum modeAlpha){ sAPIClassTable.map_glBlendEquationSeparateiOES(buf, modeRGB, modeAlpha); }
DLLEXPORT void DLLEXPORTENTRY glBlendFunciOES(GLuint buf, GLenum src, GLenum dst){ sAPIClassTable.map_glBlendFunciOES(buf, src, dst); }
DLLEXPORT void DLLEXPORTENTRY glBlendFuncSeparateiOES(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha){ sAPIClassTable.map_glBlendFuncSeparateiOES(buf, srcRGB, dstRGB, srcAlpha, dstAlpha); }
DLLEXPORT void DLLEXPORTENTRY glColorMaskiOES(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a){ sAPIClassTable.map_glColorMaskiOES(index, r, g, b, a); }
DLLEXPORT GLboolean DLLEXPORTENTRY glIsEnablediOES(GLenum target, GLuint index){ return sAPIClassTable.map_glIsEnablediOES(target, index); }
#endif /* GL_OES_draw_buffers_indexed*/

#if GL_OES_draw_elements_base_vertex
DLLEXPORT void DLLEXPORTENTRY glDrawElementsBaseVertexOES(GLenum mode, GLsizei count, GLenum type, const void *indices, GLint basevertex){ sAPIClassTable.map_glDrawElementsBaseVertexOES(mode, count, type, indices, basevertex); }
DLLEXPORT void DLLEXPORTENTRY glDrawRangeElementsBaseVertexOES(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices, GLint basevertex){ sAPIClassTable.map_glDrawRangeElementsBaseVertexOES(mode, start, end, count, type, indices, basevertex); }
DLLEXPORT void DLLEXPORTENTRY glDrawElementsInstancedBaseVertexOES(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex){ sAPIClassTable.map_glDrawElementsInstancedBaseVertexOES(mode, count, type, indices, instancecount, basevertex); }
DLLEXPORT void DLLEXPORTENTRY glMultiDrawElementsBaseVertexOES(GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei primcount, const GLint *basevertex){ sAPIClassTable.map_glMultiDrawElementsBaseVertexOES(mode, count, type, indices, primcount, basevertex); }
#endif /* GL_OES_draw_elements_base_vertex*/

#if GL_OES_draw_texture
DLLEXPORT void DLLEXPORTENTRY glDrawTexsOES(GLshort x, GLshort y, GLshort z, GLshort width, GLshort height){ sAPIClassTable.map_glDrawTexsOES(x, y, z, width, height); }
DLLEXPORT void DLLEXPORTENTRY glDrawTexiOES(GLint x, GLint y, GLint z, GLint width, GLint height){ sAPIClassTable.map_glDrawTexiOES(x, y, z, width, height); }
DLLEXPORT void DLLEXPORTENTRY glDrawTexxOES(GLfixed x, GLfixed y, GLfixed z, GLfixed width, GLfixed height){ sAPIClassTable.map_glDrawTexxOES(x, y, z, width, height); }
DLLEXPORT void DLLEXPORTENTRY glDrawTexsvOES(const GLshort *coords){ sAPIClassTable.map_glDrawTexsvOES(coords); }
DLLEXPORT void DLLEXPORTENTRY glDrawTexivOES(const GLint *coords){ sAPIClassTable.map_glDrawTexivOES(coords); }
DLLEXPORT void DLLEXPORTENTRY glDrawTexxvOES(const GLfixed *coords){ sAPIClassTable.map_glDrawTexxvOES(coords); }
DLLEXPORT void DLLEXPORTENTRY glDrawTexfOES(GLfloat x, GLfloat y, GLfloat z, GLfloat width, GLfloat height){ sAPIClassTable.map_glDrawTexfOES(x, y, z, width, height); }
DLLEXPORT void DLLEXPORTENTRY glDrawTexfvOES(const GLfloat *coords){ sAPIClassTable.map_glDrawTexfvOES(coords); }
#endif /* GL_OES_draw_texture*/

#if GL_OES_framebuffer_object
DLLEXPORT GLboolean DLLEXPORTENTRY glIsRenderbufferOES(GLuint renderbuffer){ return sAPIClassTable.map_glIsRenderbufferOES(renderbuffer); }
DLLEXPORT void DLLEXPORTENTRY glBindRenderbufferOES(GLenum target, GLuint renderbuffer){ sAPIClassTable.map_glBindRenderbufferOES(target, renderbuffer); }
DLLEXPORT void DLLEXPORTENTRY glDeleteRenderbuffersOES(GLsizei n, const GLuint *renderbuffers){ sAPIClassTable.map_glDeleteRenderbuffersOES(n, renderbuffers); }
DLLEXPORT void DLLEXPORTENTRY glGenRenderbuffersOES(GLsizei n, GLuint *renderbuffers){ sAPIClassTable.map_glGenRenderbuffersOES(n, renderbuffers); }
DLLEXPORT void DLLEXPORTENTRY glRenderbufferStorageOES(GLenum target, GLenum internalformat, GLsizei width, GLsizei height){ sAPIClassTable.map_glRenderbufferStorageOES(target, internalformat, width, height); }
DLLEXPORT void DLLEXPORTENTRY glGetRenderbufferParameterivOES(GLenum target, GLenum pname, GLint *params){ sAPIClassTable.map_glGetRenderbufferParameterivOES(target, pname, params); }
DLLEXPORT GLboolean DLLEXPORTENTRY glIsFramebufferOES(GLuint framebuffer){ return sAPIClassTable.map_glIsFramebufferOES(framebuffer); }
DLLEXPORT void DLLEXPORTENTRY glBindFramebufferOES(GLenum target, GLuint framebuffer){ sAPIClassTable.map_glBindFramebufferOES(target, framebuffer); }
DLLEXPORT void DLLEXPORTENTRY glDeleteFramebuffersOES(GLsizei n, const GLuint *framebuffers){ sAPIClassTable.map_glDeleteFramebuffersOES(n, framebuffers); }
DLLEXPORT void DLLEXPORTENTRY glGenFramebuffersOES(GLsizei n, GLuint *framebuffers){ sAPIClassTable.map_glGenFramebuffersOES(n, framebuffers); }
DLLEXPORT GLenum DLLEXPORTENTRY glCheckFramebufferStatusOES(GLenum target){ return sAPIClassTable.map_glCheckFramebufferStatusOES(target); }
DLLEXPORT void DLLEXPORTENTRY glFramebufferRenderbufferOES(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer){ sAPIClassTable.map_glFramebufferRenderbufferOES(target, attachment, renderbuffertarget, renderbuffer); }
DLLEXPORT void DLLEXPORTENTRY glFramebufferTexture2DOES(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level){ sAPIClassTable.map_glFramebufferTexture2DOES(target, attachment, textarget, texture, level); }
DLLEXPORT void DLLEXPORTENTRY glGetFramebufferAttachmentParameterivOES(GLenum target, GLenum attachment, GLenum pname, GLint *params){ sAPIClassTable.map_glGetFramebufferAttachmentParameterivOES(target, attachment, pname, params); }
DLLEXPORT void DLLEXPORTENTRY glGenerateMipmapOES(GLenum target){ sAPIClassTable.map_glGenerateMipmapOES(target); }
#endif /* GL_OES_framebuffer_object*/

#if GL_OES_geometry_point_size
#endif /* GL_OES_geometry_point_size*/

#if GL_OES_geometry_shader
DLLEXPORT void DLLEXPORTENTRY glFramebufferTextureOES(GLenum target, GLenum attachment, GLuint texture, GLint level){ sAPIClassTable.map_glFramebufferTextureOES(target, attachment, texture, level); }
#endif /* GL_OES_geometry_shader*/

#if GL_OES_gpu_shader5
#endif /* GL_OES_gpu_shader5*/

#if GL_OES_mapbuffer
DLLEXPORT void * DLLEXPORTENTRY glMapBufferOES(GLenum target, GLenum access){ return sAPIClassTable.map_glMapBufferOES(target, access); }
DLLEXPORT GLboolean DLLEXPORTENTRY glUnmapBufferOES(GLenum target){ return sAPIClassTable.map_glUnmapBufferOES(target); }
DLLEXPORT void DLLEXPORTENTRY glGetBufferPointervOES(GLenum target, GLenum pname, void **params){ sAPIClassTable.map_glGetBufferPointervOES(target, pname, params); }
#endif /* GL_OES_mapbuffer*/

#if GL_OES_matrix_palette
DLLEXPORT void DLLEXPORTENTRY glCurrentPaletteMatrixOES(GLuint matrixpaletteindex){ sAPIClassTable.map_glCurrentPaletteMatrixOES(matrixpaletteindex); }
DLLEXPORT void DLLEXPORTENTRY glLoadPaletteFromModelViewMatrixOES(void){ sAPIClassTable.map_glLoadPaletteFromModelViewMatrixOES(); }
DLLEXPORT void DLLEXPORTENTRY glMatrixIndexPointerOES(GLint size, GLenum type, GLsizei stride, const void *pointer){ sAPIClassTable.map_glMatrixIndexPointerOES(size, type, stride, pointer); }
DLLEXPORT void DLLEXPORTENTRY glWeightPointerOES(GLint size, GLenum type, GLsizei stride, const void *pointer){ sAPIClassTable.map_glWeightPointerOES(size, type, stride, pointer); }
#endif /* GL_OES_matrix_palette*/

#if GL_OES_packed_depth_stencil
#endif /* GL_OES_packed_depth_stencil*/

#if GL_OES_point_size_array
DLLEXPORT void DLLEXPORTENTRY glPointSizePointerOES(GLenum type, GLsizei stride, const void *pointer){ sAPIClassTable.map_glPointSizePointerOES(type, stride, pointer); }
#endif /* GL_OES_point_size_array*/

#if GL_OES_primitive_bounding_box
DLLEXPORT void DLLEXPORTENTRY glPrimitiveBoundingBoxOES(GLfloat minX, GLfloat minY, GLfloat minZ, GLfloat minW, GLfloat maxX, GLfloat maxY, GLfloat maxZ, GLfloat maxW){ sAPIClassTable.map_glPrimitiveBoundingBoxOES(minX, minY, minZ, minW, maxX, maxY, maxZ, maxW); }
#endif /* GL_OES_primitive_bounding_box*/

#if GL_OES_query_matrix
DLLEXPORT GLbitfield DLLEXPORTENTRY glQueryMatrixxOES(GLfixed *mantissa, GLint *exponent){ return sAPIClassTable.map_glQueryMatrixxOES(mantissa, exponent); }
#endif /* GL_OES_query_matrix*/

#if GL_OES_rgb8_rgba8
#endif /* GL_OES_rgb8_rgba8*/

#if GL_OES_sample_shading
DLLEXPORT void DLLEXPORTENTRY glMinSampleShadingOES(GLfloat value){ sAPIClassTable.map_glMinSampleShadingOES(value); }
#endif /* GL_OES_sample_shading*/

#if GL_OES_sample_variables
#endif /* GL_OES_sample_variables*/

#if GL_OES_shader_image_atomic
#endif /* GL_OES_shader_image_atomic*/

#if GL_OES_shader_io_blocks
#endif /* GL_OES_shader_io_blocks*/

#if GL_OES_shader_multisample_interpolation
#endif /* GL_OES_shader_multisample_interpolation*/

#if GL_OES_standard_derivatives
#endif /* GL_OES_standard_derivatives*/

#if GL_OES_stencil8
#endif /* GL_OES_stencil8*/

#if GL_OES_stencil_wrap
#endif /* GL_OES_stencil_wrap*/

#if GL_OES_surfaceless_context
#endif /* GL_OES_surfaceless_context*/

#if GL_OES_tessellation_point_size
#endif /* GL_OES_tessellation_point_size*/

#if GL_OES_tessellation_shader
DLLEXPORT void DLLEXPORTENTRY glPatchParameteriOES(GLenum pname, GLint value){ sAPIClassTable.map_glPatchParameteriOES(pname, value); }
#endif /* GL_OES_tessellation_shader*/

#if GL_OES_texture_border_clamp
DLLEXPORT void DLLEXPORTENTRY glTexParameterIivOES(GLenum target, GLenum pname, const GLint *params){ sAPIClassTable.map_glTexParameterIivOES(target, pname, params); }
DLLEXPORT void DLLEXPORTENTRY glTexParameterIuivOES(GLenum target, GLenum pname, const GLuint *params){ sAPIClassTable.map_glTexParameterIuivOES(target, pname, params); }
DLLEXPORT void DLLEXPORTENTRY glGetTexParameterIivOES(GLenum target, GLenum pname, GLint *params){ sAPIClassTable.map_glGetTexParameterIivOES(target, pname, params); }
DLLEXPORT void DLLEXPORTENTRY glGetTexParameterIuivOES(GLenum target, GLenum pname, GLuint *params){ sAPIClassTable.map_glGetTexParameterIuivOES(target, pname, params); }
DLLEXPORT void DLLEXPORTENTRY glSamplerParameterIivOES(GLuint sampler, GLenum pname, const GLint *param){ sAPIClassTable.map_glSamplerParameterIivOES(sampler, pname, param); }
DLLEXPORT void DLLEXPORTENTRY glSamplerParameterIuivOES(GLuint sampler, GLenum pname, const GLuint *param){ sAPIClassTable.map_glSamplerParameterIuivOES(sampler, pname, param); }
DLLEXPORT void DLLEXPORTENTRY glGetSamplerParameterIivOES(GLuint sampler, GLenum pname, GLint *params){ sAPIClassTable.map_glGetSamplerParameterIivOES(sampler, pname, params); }
DLLEXPORT void DLLEXPORTENTRY glGetSamplerParameterIuivOES(GLuint sampler, GLenum pname, GLuint *params){ sAPIClassTable.map_glGetSamplerParameterIuivOES(sampler, pname, params); }
#endif /* GL_OES_texture_border_clamp*/

#if GL_OES_texture_buffer
DLLEXPORT void DLLEXPORTENTRY glTexBufferOES(GLenum target, GLenum internalformat, GLuint buffer){ sAPIClassTable.map_glTexBufferOES(target, internalformat, buffer); }
DLLEXPORT void DLLEXPORTENTRY glTexBufferRangeOES(GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size){ sAPIClassTable.map_glTexBufferRangeOES(target, internalformat, buffer, offset, size); }
#endif /* GL_OES_texture_buffer*/

#if GL_OES_texture_cube_map_array
#endif /* GL_OES_texture_cube_map_array*/

#if GL_OES_texture_mirrored_repeat
#endif /* GL_OES_texture_mirrored_repeat*/

#if GL_OES_texture_npot
#endif /* GL_OES_texture_npot*/

#if GL_OES_texture_stencil8
#endif /* GL_OES_texture_stencil8*/

#if GL_OES_texture_storage_multisample_2d_array
DLLEXPORT void DLLEXPORTENTRY glTexStorage3DMultisampleOES(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations){ sAPIClassTable.map_glTexStorage3DMultisampleOES(target, samples, internalformat, width, height, depth, fixedsamplelocations); }
#endif /* GL_OES_texture_storage_multisample_2d_array*/

#if GL_OES_vertex_array_object
DLLEXPORT void DLLEXPORTENTRY glBindVertexArrayOES(GLuint array){ sAPIClassTable.map_glBindVertexArrayOES(array); }
DLLEXPORT void DLLEXPORTENTRY glDeleteVertexArraysOES(GLsizei n, const GLuint *arrays){ sAPIClassTable.map_glDeleteVertexArraysOES(n, arrays); }
DLLEXPORT void DLLEXPORTENTRY glGenVertexArraysOES(GLsizei n, GLuint *arrays){ sAPIClassTable.map_glGenVertexArraysOES(n, arrays); }
DLLEXPORT GLboolean DLLEXPORTENTRY glIsVertexArrayOES(GLuint array){ return sAPIClassTable.map_glIsVertexArrayOES(array); }
#endif /* GL_OES_vertex_array_object*/

#if GL_OES_vertex_half_float
#endif /* GL_OES_vertex_half_float*/

#if EGL_ANDROID_framebuffer_target
#endif /* EGL_ANDROID_framebuffer_target*/

#if EGL_ANDROID_image_native_buffer
#endif /* EGL_ANDROID_image_native_buffer*/

#if EGL_ANDROID_native_fence_sync
DLLEXPORT EGLint DLLEXPORTENTRY eglDupNativeFenceFDANDROID(EGLDisplay dpy, EGLSyncKHR sync){ return sAPIClassTable.map_eglDupNativeFenceFDANDROID(dpy, sync); }
#endif /* EGL_ANDROID_native_fence_sync*/

#if EGL_ANDROID_recordable
#endif /* EGL_ANDROID_recordable*/

#if EGL_BRCM_event_monitor
DLLEXPORT EGLint DLLEXPORTENTRY eglGetEventConstantBRCM(EGLenum pname){ return sAPIClassTable.map_eglGetEventConstantBRCM(pname); }
DLLEXPORT EGLBoolean DLLEXPORTENTRY eglGetEventTrackInfoBRCM(EGLint event, EGLint nameStrSize, char *trackNameStr){ return sAPIClassTable.map_eglGetEventTrackInfoBRCM(event, nameStrSize, trackNameStr); }
DLLEXPORT EGLBoolean DLLEXPORTENTRY eglGetEventInfoBRCM(EGLint event, EGLint nameStrSize, char *nameStr, EGLint *numDataFields){ return sAPIClassTable.map_eglGetEventInfoBRCM(event, nameStrSize, nameStr, numDataFields); }
DLLEXPORT EGLBoolean DLLEXPORTENTRY eglGetEventDataFieldInfoBRCM(EGLint event, EGLint field, EGLint nameStrSize, char *nameStr, EGLBoolean *isSigned, EGLint *numBytes){ return sAPIClassTable.map_eglGetEventDataFieldInfoBRCM(event, field, nameStrSize, nameStr, isSigned, numBytes); }
DLLEXPORT EGLBoolean DLLEXPORTENTRY eglSetEventCollectionBRCM(EGLenum pname){ return sAPIClassTable.map_eglSetEventCollectionBRCM(pname); }
DLLEXPORT EGLBoolean DLLEXPORTENTRY eglGetEventDataBRCM(EGLint dataBufferBytes, void *data, EGLint *bytesWritten, EGLBoolean *overflowed, EGLuint64BRCM *timebase){ return sAPIClassTable.map_eglGetEventDataBRCM(dataBufferBytes, data, bytesWritten, overflowed, timebase); }
#endif /* EGL_BRCM_event_monitor*/

#if EGL_BRCM_gl_framebuffer_image
#endif /* EGL_BRCM_gl_framebuffer_image*/

#if EGL_BRCM_image_update_control
DLLEXPORT EGLBoolean DLLEXPORTENTRY eglImageUpdateParameterivBRCM(EGLDisplay dpy, EGLImageKHR image, EGLenum pname, const EGLint *params){ return sAPIClassTable.map_eglImageUpdateParameterivBRCM(dpy, image, pname, params); }
DLLEXPORT EGLBoolean DLLEXPORTENTRY eglImageUpdateParameteriBRCM(EGLDisplay dpy, EGLImageKHR image, EGLenum pname, EGLint param){ return sAPIClassTable.map_eglImageUpdateParameteriBRCM(dpy, image, pname, param); }
#endif /* EGL_BRCM_image_update_control*/

#if EGL_BRCM_performance_counters
DLLEXPORT EGLint DLLEXPORTENTRY eglGetPerfCounterConstantBRCM(EGLenum pname){ return sAPIClassTable.map_eglGetPerfCounterConstantBRCM(pname); }
DLLEXPORT EGLBoolean DLLEXPORTENTRY eglGetPerfCounterGroupInfoBRCM(EGLint group, EGLint nameStrSize, GLchar *groupNameStr, EGLint *numCounters, EGLint *maxActiveCounters){ return sAPIClassTable.map_eglGetPerfCounterGroupInfoBRCM(group, nameStrSize, groupNameStr, numCounters, maxActiveCounters); }
DLLEXPORT EGLBoolean DLLEXPORTENTRY eglGetPerfCounterInfoBRCM(EGLint group, EGLint counter, EGLuint64BRCM *minValue, EGLuint64BRCM *maxValue, EGLuint64BRCM *denominator, EGLint nameStrSize, char *nameStr, EGLint unitStrSize, char *unitStr){ return sAPIClassTable.map_eglGetPerfCounterInfoBRCM(group, counter, minValue, maxValue, denominator, nameStrSize, nameStr, unitStrSize, unitStr); }
DLLEXPORT EGLBoolean DLLEXPORTENTRY eglSetPerfCountingBRCM(EGLenum pname){ return sAPIClassTable.map_eglSetPerfCountingBRCM(pname); }
DLLEXPORT EGLBoolean DLLEXPORTENTRY eglChoosePerfCountersBRCM(EGLBoolean enable, EGLint group, EGLint numCounters, EGLint *counterList){ return sAPIClassTable.map_eglChoosePerfCountersBRCM(enable, group, numCounters, counterList); }
DLLEXPORT EGLBoolean DLLEXPORTENTRY eglGetPerfCounterDataBRCM(EGLint dataBufferBytes, void *data, EGLint *bytesWritten, EGLBoolean resetCounters){ return sAPIClassTable.map_eglGetPerfCounterDataBRCM(dataBufferBytes, data, bytesWritten, resetCounters); }
#endif /* EGL_BRCM_performance_counters*/

#if EGL_BRCM_platform_nexus
#endif /* EGL_BRCM_platform_nexus*/

#if EGL_EXT_client_extensions
#endif /* EGL_EXT_client_extensions*/

#if EGL_EXT_create_context_robustness
#endif /* EGL_EXT_create_context_robustness*/

#if EGL_EXT_platform_base
DLLEXPORT EGLDisplay DLLEXPORTENTRY eglGetPlatformDisplayEXT(EGLenum platform, void *native_display, const EGLint *attrib_list){ return sAPIClassTable.map_eglGetPlatformDisplayEXT(platform, native_display, attrib_list); }
DLLEXPORT EGLSurface DLLEXPORTENTRY eglCreatePlatformWindowSurfaceEXT(EGLDisplay dpy, EGLConfig config, void *native_window, const EGLint *attrib_list){ return sAPIClassTable.map_eglCreatePlatformWindowSurfaceEXT(dpy, config, native_window, attrib_list); }
DLLEXPORT EGLSurface DLLEXPORTENTRY eglCreatePlatformPixmapSurfaceEXT(EGLDisplay dpy, EGLConfig config, void *native_pixmap, const EGLint *attrib_list){ return sAPIClassTable.map_eglCreatePlatformPixmapSurfaceEXT(dpy, config, native_pixmap, attrib_list); }
#endif /* EGL_EXT_platform_base*/

#if EGL_EXT_platform_wayland
#endif /* EGL_EXT_platform_wayland*/

#if EGL_EXT_platform_x11
#endif /* EGL_EXT_platform_x11*/

#if EGL_EXT_protected_content
#endif /* EGL_EXT_protected_content*/

#if EGL_EXT_protected_surface
#endif /* EGL_EXT_protected_surface*/

#if EGL_WL_bind_wayland_display
DLLEXPORT EGLBoolean DLLEXPORTENTRY eglBindWaylandDisplayWL(EGLDisplay dpy, struct wl_display *display){ return sAPIClassTable.map_eglBindWaylandDisplayWL(dpy, display); }
DLLEXPORT EGLBoolean DLLEXPORTENTRY eglUnbindWaylandDisplayWL(EGLDisplay dpy, struct wl_display *display){ return sAPIClassTable.map_eglUnbindWaylandDisplayWL(dpy, display); }
DLLEXPORT EGLBoolean DLLEXPORTENTRY eglQueryWaylandBufferWL(EGLDisplay dpy, struct wl_resource *buffer, EGLint name, EGLint *value){ return sAPIClassTable.map_eglQueryWaylandBufferWL(dpy, buffer, name, value); }
#endif /* EGL_WL_bind_wayland_display*/

#if GL_BRCM_image_formats
#endif /* GL_BRCM_image_formats*/

#if GL_BRCM_mirror_clamp_to_edge
#endif /* GL_BRCM_mirror_clamp_to_edge*/

#if GL_BRCM_polygon_mode
DLLEXPORT void DLLEXPORTENTRY glPolygonModeBRCM(GLenum mode){ sAPIClassTable.map_glPolygonModeBRCM(mode); }
#endif /* GL_BRCM_polygon_mode*/

#if GL_BRCM_provoking_vertex
DLLEXPORT void DLLEXPORTENTRY glProvokingVertexBRCM(GLenum mode){ sAPIClassTable.map_glProvokingVertexBRCM(mode); }
#endif /* GL_BRCM_provoking_vertex*/

#if GL_BRCM_texture_1D
DLLEXPORT void DLLEXPORTENTRY glTexImage1DBRCM(GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid *pixels){ sAPIClassTable.map_glTexImage1DBRCM(target, level, internalformat, width, border, format, type, pixels); }
DLLEXPORT void DLLEXPORTENTRY glTexSubImage1DBRCM(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels){ sAPIClassTable.map_glTexSubImage1DBRCM(target, level, xoffset, width, format, type, pixels); }
DLLEXPORT void DLLEXPORTENTRY glTexStorage1DBRCM(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width){ sAPIClassTable.map_glTexStorage1DBRCM(target, levels, internalformat, width); }
#endif /* GL_BRCM_texture_1D*/

#if GL_BRCM_texture_norm16
#endif /* GL_BRCM_texture_norm16*/

#if GL_BRCM_texture_unnormalised_coords
#endif /* GL_BRCM_texture_unnormalised_coords*/

#if GL_EXT_base_instance
DLLEXPORT void DLLEXPORTENTRY glDrawArraysInstancedBaseInstanceEXT(GLenum mode, GLint first, GLsizei count, GLsizei instancecount, GLuint baseinstance){ sAPIClassTable.map_glDrawArraysInstancedBaseInstanceEXT(mode, first, count, instancecount, baseinstance); }
DLLEXPORT void DLLEXPORTENTRY glDrawElementsInstancedBaseInstanceEXT(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLuint baseinstance){ sAPIClassTable.map_glDrawElementsInstancedBaseInstanceEXT(mode, count, type, indices, instancecount, baseinstance); }
DLLEXPORT void DLLEXPORTENTRY glDrawElementsInstancedBaseVertexBaseInstanceEXT(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex, GLuint baseinstance){ sAPIClassTable.map_glDrawElementsInstancedBaseVertexBaseInstanceEXT(mode, count, type, indices, instancecount, basevertex, baseinstance); }
#endif /* GL_EXT_base_instance*/

#if GL_EXT_color_buffer_float
#endif /* GL_EXT_color_buffer_float*/

#if GL_EXT_copy_image
DLLEXPORT void DLLEXPORTENTRY glCopyImageSubDataEXT(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth){ sAPIClassTable.map_glCopyImageSubDataEXT(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth); }
#endif /* GL_EXT_copy_image*/

#if GL_EXT_debug_marker
DLLEXPORT void DLLEXPORTENTRY glInsertEventMarkerEXT(GLsizei length, const GLchar *marker){ sAPIClassTable.map_glInsertEventMarkerEXT(length, marker); }
DLLEXPORT void DLLEXPORTENTRY glPushGroupMarkerEXT(GLsizei length, const GLchar *marker){ sAPIClassTable.map_glPushGroupMarkerEXT(length, marker); }
DLLEXPORT void DLLEXPORTENTRY glPopGroupMarkerEXT(void){ sAPIClassTable.map_glPopGroupMarkerEXT(); }
#endif /* GL_EXT_debug_marker*/

#if GL_EXT_discard_framebuffer
DLLEXPORT void DLLEXPORTENTRY glDiscardFramebufferEXT(GLenum target, GLsizei numAttachments, const GLenum *attachments){ sAPIClassTable.map_glDiscardFramebufferEXT(target, numAttachments, attachments); }
#endif /* GL_EXT_discard_framebuffer*/

#if GL_EXT_draw_buffers_indexed
DLLEXPORT void DLLEXPORTENTRY glEnableiEXT(GLenum target, GLuint index){ sAPIClassTable.map_glEnableiEXT(target, index); }
DLLEXPORT void DLLEXPORTENTRY glDisableiEXT(GLenum target, GLuint index){ sAPIClassTable.map_glDisableiEXT(target, index); }
DLLEXPORT void DLLEXPORTENTRY glBlendEquationiEXT(GLuint buf, GLenum mode){ sAPIClassTable.map_glBlendEquationiEXT(buf, mode); }
DLLEXPORT void DLLEXPORTENTRY glBlendEquationSeparateiEXT(GLuint buf, GLenum modeRGB, GLenum modeAlpha){ sAPIClassTable.map_glBlendEquationSeparateiEXT(buf, modeRGB, modeAlpha); }
DLLEXPORT void DLLEXPORTENTRY glBlendFunciEXT(GLuint buf, GLenum src, GLenum dst){ sAPIClassTable.map_glBlendFunciEXT(buf, src, dst); }
DLLEXPORT void DLLEXPORTENTRY glBlendFuncSeparateiEXT(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha){ sAPIClassTable.map_glBlendFuncSeparateiEXT(buf, srcRGB, dstRGB, srcAlpha, dstAlpha); }
DLLEXPORT void DLLEXPORTENTRY glColorMaskiEXT(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a){ sAPIClassTable.map_glColorMaskiEXT(index, r, g, b, a); }
DLLEXPORT GLboolean DLLEXPORTENTRY glIsEnablediEXT(GLenum target, GLuint index){ return sAPIClassTable.map_glIsEnablediEXT(target, index); }
#endif /* GL_EXT_draw_buffers_indexed*/

#if GL_EXT_draw_elements_base_vertex
DLLEXPORT void DLLEXPORTENTRY glDrawElementsBaseVertexEXT(GLenum mode, GLsizei count, GLenum type, const void *indices, GLint basevertex){ sAPIClassTable.map_glDrawElementsBaseVertexEXT(mode, count, type, indices, basevertex); }
DLLEXPORT void DLLEXPORTENTRY glDrawRangeElementsBaseVertexEXT(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices, GLint basevertex){ sAPIClassTable.map_glDrawRangeElementsBaseVertexEXT(mode, start, end, count, type, indices, basevertex); }
DLLEXPORT void DLLEXPORTENTRY glDrawElementsInstancedBaseVertexEXT(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex){ sAPIClassTable.map_glDrawElementsInstancedBaseVertexEXT(mode, count, type, indices, instancecount, basevertex); }
DLLEXPORT void DLLEXPORTENTRY glMultiDrawElementsBaseVertexEXT(GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei primcount, const GLint *basevertex){ sAPIClassTable.map_glMultiDrawElementsBaseVertexEXT(mode, count, type, indices, primcount, basevertex); }
#endif /* GL_EXT_draw_elements_base_vertex*/

#if GL_EXT_geometry_point_size
#endif /* GL_EXT_geometry_point_size*/

#if GL_EXT_geometry_shader
DLLEXPORT void DLLEXPORTENTRY glFramebufferTextureEXT(GLenum target, GLenum attachment, GLuint texture, GLint level){ sAPIClassTable.map_glFramebufferTextureEXT(target, attachment, texture, level); }
#endif /* GL_EXT_geometry_shader*/

#if GL_EXT_gpu_shader5
#endif /* GL_EXT_gpu_shader5*/

#if GL_EXT_multi_draw_indirect
DLLEXPORT void DLLEXPORTENTRY glMultiDrawArraysIndirectEXT(GLenum mode, const void *indirect, GLsizei drawcount, GLsizei stride){ sAPIClassTable.map_glMultiDrawArraysIndirectEXT(mode, indirect, drawcount, stride); }
DLLEXPORT void DLLEXPORTENTRY glMultiDrawElementsIndirectEXT(GLenum mode, GLenum type, const void *indirect, GLsizei drawcount, GLsizei stride){ sAPIClassTable.map_glMultiDrawElementsIndirectEXT(mode, type, indirect, drawcount, stride); }
#endif /* GL_EXT_multi_draw_indirect*/

#if GL_EXT_multisampled_render_to_texture
DLLEXPORT void DLLEXPORTENTRY glRenderbufferStorageMultisampleEXT(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height){ sAPIClassTable.map_glRenderbufferStorageMultisampleEXT(target, samples, internalformat, width, height); }
DLLEXPORT void DLLEXPORTENTRY glFramebufferTexture2DMultisampleEXT(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLsizei samples){ sAPIClassTable.map_glFramebufferTexture2DMultisampleEXT(target, attachment, textarget, texture, level, samples); }
#endif /* GL_EXT_multisampled_render_to_texture*/

#if GL_EXT_polygon_offset_clamp
DLLEXPORT void DLLEXPORTENTRY glPolygonOffsetClampEXT(GLfloat factor, GLfloat units, GLfloat clamp){ sAPIClassTable.map_glPolygonOffsetClampEXT(factor, units, clamp); }
#endif /* GL_EXT_polygon_offset_clamp*/

#if GL_EXT_primitive_bounding_box
DLLEXPORT void DLLEXPORTENTRY glPrimitiveBoundingBoxEXT(GLfloat minX, GLfloat minY, GLfloat minZ, GLfloat minW, GLfloat maxX, GLfloat maxY, GLfloat maxZ, GLfloat maxW){ sAPIClassTable.map_glPrimitiveBoundingBoxEXT(minX, minY, minZ, minW, maxX, maxY, maxZ, maxW); }
#endif /* GL_EXT_primitive_bounding_box*/

#if GL_EXT_protected_textures
#endif /* GL_EXT_protected_textures*/

#if GL_EXT_robustness
DLLEXPORT GLenum DLLEXPORTENTRY glGetGraphicsResetStatusEXT(void){ return sAPIClassTable.map_glGetGraphicsResetStatusEXT(); }
DLLEXPORT void DLLEXPORTENTRY glReadnPixelsEXT(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void *data){ sAPIClassTable.map_glReadnPixelsEXT(x, y, width, height, format, type, bufSize, data); }
DLLEXPORT void DLLEXPORTENTRY glGetnUniformfvEXT(GLuint program, GLint location, GLsizei bufSize, GLfloat *params){ sAPIClassTable.map_glGetnUniformfvEXT(program, location, bufSize, params); }
DLLEXPORT void DLLEXPORTENTRY glGetnUniformivEXT(GLuint program, GLint location, GLsizei bufSize, GLint *params){ sAPIClassTable.map_glGetnUniformivEXT(program, location, bufSize, params); }
#endif /* GL_EXT_robustness*/

#if GL_EXT_shader_integer_mix
#endif /* GL_EXT_shader_integer_mix*/

#if GL_EXT_shader_io_blocks
#endif /* GL_EXT_shader_io_blocks*/

#if GL_EXT_shader_texture_lod
#endif /* GL_EXT_shader_texture_lod*/

#if GL_EXT_tessellation_point_size
#endif /* GL_EXT_tessellation_point_size*/

#if GL_EXT_tessellation_shader
DLLEXPORT void DLLEXPORTENTRY glPatchParameteriEXT(GLenum pname, GLint value){ sAPIClassTable.map_glPatchParameteriEXT(pname, value); }
#endif /* GL_EXT_tessellation_shader*/

#if GL_EXT_texture_border_clamp
DLLEXPORT void DLLEXPORTENTRY glTexParameterIivEXT(GLenum target, GLenum pname, const GLint *params){ sAPIClassTable.map_glTexParameterIivEXT(target, pname, params); }
DLLEXPORT void DLLEXPORTENTRY glTexParameterIuivEXT(GLenum target, GLenum pname, const GLuint *params){ sAPIClassTable.map_glTexParameterIuivEXT(target, pname, params); }
DLLEXPORT void DLLEXPORTENTRY glGetTexParameterIivEXT(GLenum target, GLenum pname, GLint *params){ sAPIClassTable.map_glGetTexParameterIivEXT(target, pname, params); }
DLLEXPORT void DLLEXPORTENTRY glGetTexParameterIuivEXT(GLenum target, GLenum pname, GLuint *params){ sAPIClassTable.map_glGetTexParameterIuivEXT(target, pname, params); }
DLLEXPORT void DLLEXPORTENTRY glSamplerParameterIivEXT(GLuint sampler, GLenum pname, const GLint *param){ sAPIClassTable.map_glSamplerParameterIivEXT(sampler, pname, param); }
DLLEXPORT void DLLEXPORTENTRY glSamplerParameterIuivEXT(GLuint sampler, GLenum pname, const GLuint *param){ sAPIClassTable.map_glSamplerParameterIuivEXT(sampler, pname, param); }
DLLEXPORT void DLLEXPORTENTRY glGetSamplerParameterIivEXT(GLuint sampler, GLenum pname, GLint *params){ sAPIClassTable.map_glGetSamplerParameterIivEXT(sampler, pname, params); }
DLLEXPORT void DLLEXPORTENTRY glGetSamplerParameterIuivEXT(GLuint sampler, GLenum pname, GLuint *params){ sAPIClassTable.map_glGetSamplerParameterIuivEXT(sampler, pname, params); }
#endif /* GL_EXT_texture_border_clamp*/

#if GL_EXT_texture_buffer
DLLEXPORT void DLLEXPORTENTRY glTexBufferEXT(GLenum target, GLenum internalformat, GLuint buffer){ sAPIClassTable.map_glTexBufferEXT(target, internalformat, buffer); }
DLLEXPORT void DLLEXPORTENTRY glTexBufferRangeEXT(GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size){ sAPIClassTable.map_glTexBufferRangeEXT(target, internalformat, buffer, offset, size); }
#endif /* GL_EXT_texture_buffer*/

#if GL_EXT_texture_cube_map_array
#endif /* GL_EXT_texture_cube_map_array*/

#if GL_EXT_texture_filter_anisotropic
#endif /* GL_EXT_texture_filter_anisotropic*/

#if GL_EXT_texture_format_BGRA8888
#endif /* GL_EXT_texture_format_BGRA8888*/

#if GL_EXT_texture_sRGB_R8
#endif /* GL_EXT_texture_sRGB_R8*/

#if GL_EXT_texture_sRGB_RG8
#endif /* GL_EXT_texture_sRGB_RG8*/

#if GL_EXT_texture_sRGB_decode
#endif /* GL_EXT_texture_sRGB_decode*/
