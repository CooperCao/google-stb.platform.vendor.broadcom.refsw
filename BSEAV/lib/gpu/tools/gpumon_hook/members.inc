/******************************************************************************
 *  Copyright (C) 2017 Broadcom. The term "Broadcom" refers to Broadcom Limited and/or its subsidiaries.
 ******************************************************************************/
/* Auto-generated by running gen_hook_tables.py
 * DO NOT EDIT!
 */

#if EGL_VERSION_1_0
EGLBoolean (*map_eglChooseConfig)(EGLDisplay dpy, const EGLint *attrib_list, EGLConfig *configs, EGLint config_size, EGLint *num_config);
EGLBoolean (*map_eglCopyBuffers)(EGLDisplay dpy, EGLSurface surface, EGLNativePixmapType target);
EGLContext (*map_eglCreateContext)(EGLDisplay dpy, EGLConfig config, EGLContext share_context, const EGLint *attrib_list);
EGLSurface (*map_eglCreatePbufferSurface)(EGLDisplay dpy, EGLConfig config, const EGLint *attrib_list);
EGLSurface (*map_eglCreatePixmapSurface)(EGLDisplay dpy, EGLConfig config, EGLNativePixmapType pixmap, const EGLint *attrib_list);
EGLSurface (*map_eglCreateWindowSurface)(EGLDisplay dpy, EGLConfig config, EGLNativeWindowType win, const EGLint *attrib_list);
EGLBoolean (*map_eglDestroyContext)(EGLDisplay dpy, EGLContext ctx);
EGLBoolean (*map_eglDestroySurface)(EGLDisplay dpy, EGLSurface surface);
EGLBoolean (*map_eglGetConfigAttrib)(EGLDisplay dpy, EGLConfig config, EGLint attribute, EGLint *value);
EGLBoolean (*map_eglGetConfigs)(EGLDisplay dpy, EGLConfig *configs, EGLint config_size, EGLint *num_config);
EGLDisplay (*map_eglGetCurrentDisplay)(void);
EGLSurface (*map_eglGetCurrentSurface)(EGLint readdraw);
EGLDisplay (*map_eglGetDisplay)(EGLNativeDisplayType display_id);
EGLint (*map_eglGetError)(void);
__eglMustCastToProperFunctionPointerType (*map_eglGetProcAddress)(const char *procname);
EGLBoolean (*map_eglInitialize)(EGLDisplay dpy, EGLint *major, EGLint *minor);
EGLBoolean (*map_eglMakeCurrent)(EGLDisplay dpy, EGLSurface draw, EGLSurface read, EGLContext ctx);
EGLBoolean (*map_eglQueryContext)(EGLDisplay dpy, EGLContext ctx, EGLint attribute, EGLint *value);
const char * (*map_eglQueryString)(EGLDisplay dpy, EGLint name);
EGLBoolean (*map_eglQuerySurface)(EGLDisplay dpy, EGLSurface surface, EGLint attribute, EGLint *value);
EGLBoolean (*map_eglSwapBuffers)(EGLDisplay dpy, EGLSurface surface);
EGLBoolean (*map_eglTerminate)(EGLDisplay dpy);
EGLBoolean (*map_eglWaitGL)(void);
EGLBoolean (*map_eglWaitNative)(EGLint engine);
#endif /* EGL_VERSION_1_0*/

#if GL_VERSION_ES_CM_1_0
void (*map_glAlphaFunc)(GLenum func, GLfloat ref);
void (*map_glClearColor)(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
void (*map_glClearDepthf)(GLfloat d);
void (*map_glClipPlanef)(GLenum p, const GLfloat *eqn);
void (*map_glColor4f)(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
void (*map_glDepthRangef)(GLfloat n, GLfloat f);
void (*map_glFogf)(GLenum pname, GLfloat param);
void (*map_glFogfv)(GLenum pname, const GLfloat *params);
void (*map_glFrustumf)(GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f);
void (*map_glGetClipPlanef)(GLenum plane, GLfloat *equation);
void (*map_glGetFloatv)(GLenum pname, GLfloat *data);
void (*map_glGetLightfv)(GLenum light, GLenum pname, GLfloat *params);
void (*map_glGetMaterialfv)(GLenum face, GLenum pname, GLfloat *params);
void (*map_glGetTexEnvfv)(GLenum target, GLenum pname, GLfloat *params);
void (*map_glGetTexParameterfv)(GLenum target, GLenum pname, GLfloat *params);
void (*map_glLightModelf)(GLenum pname, GLfloat param);
void (*map_glLightModelfv)(GLenum pname, const GLfloat *params);
void (*map_glLightf)(GLenum light, GLenum pname, GLfloat param);
void (*map_glLightfv)(GLenum light, GLenum pname, const GLfloat *params);
void (*map_glLineWidth)(GLfloat width);
void (*map_glLoadMatrixf)(const GLfloat *m);
void (*map_glMaterialf)(GLenum face, GLenum pname, GLfloat param);
void (*map_glMaterialfv)(GLenum face, GLenum pname, const GLfloat *params);
void (*map_glMultMatrixf)(const GLfloat *m);
void (*map_glMultiTexCoord4f)(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q);
void (*map_glNormal3f)(GLfloat nx, GLfloat ny, GLfloat nz);
void (*map_glOrthof)(GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f);
void (*map_glPointParameterf)(GLenum pname, GLfloat param);
void (*map_glPointParameterfv)(GLenum pname, const GLfloat *params);
void (*map_glPointSize)(GLfloat size);
void (*map_glPolygonOffset)(GLfloat factor, GLfloat units);
void (*map_glRotatef)(GLfloat angle, GLfloat x, GLfloat y, GLfloat z);
void (*map_glScalef)(GLfloat x, GLfloat y, GLfloat z);
void (*map_glTexEnvf)(GLenum target, GLenum pname, GLfloat param);
void (*map_glTexEnvfv)(GLenum target, GLenum pname, const GLfloat *params);
void (*map_glTexParameterf)(GLenum target, GLenum pname, GLfloat param);
void (*map_glTexParameterfv)(GLenum target, GLenum pname, const GLfloat *params);
void (*map_glTranslatef)(GLfloat x, GLfloat y, GLfloat z);
void (*map_glActiveTexture)(GLenum texture);
void (*map_glAlphaFuncx)(GLenum func, GLfixed ref);
void (*map_glBindBuffer)(GLenum target, GLuint buffer);
void (*map_glBindTexture)(GLenum target, GLuint texture);
void (*map_glBlendFunc)(GLenum sfactor, GLenum dfactor);
void (*map_glBufferData)(GLenum target, GLsizeiptr size, const void *data, GLenum usage);
void (*map_glBufferSubData)(GLenum target, GLintptr offset, GLsizeiptr size, const void *data);
void (*map_glClear)(GLbitfield mask);
void (*map_glClearColorx)(GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha);
void (*map_glClearDepthx)(GLfixed depth);
void (*map_glClearStencil)(GLint s);
void (*map_glClientActiveTexture)(GLenum texture);
void (*map_glClipPlanex)(GLenum plane, const GLfixed *equation);
void (*map_glColor4ub)(GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha);
void (*map_glColor4x)(GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha);
void (*map_glColorMask)(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha);
void (*map_glColorPointer)(GLint size, GLenum type, GLsizei stride, const void *pointer);
void (*map_glCompressedTexImage2D)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *data);
void (*map_glCompressedTexSubImage2D)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data);
void (*map_glCopyTexImage2D)(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
void (*map_glCopyTexSubImage2D)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
void (*map_glCullFace)(GLenum mode);
void (*map_glDeleteBuffers)(GLsizei n, const GLuint *buffers);
void (*map_glDeleteTextures)(GLsizei n, const GLuint *textures);
void (*map_glDepthFunc)(GLenum func);
void (*map_glDepthMask)(GLboolean flag);
void (*map_glDepthRangex)(GLfixed n, GLfixed f);
void (*map_glDisable)(GLenum cap);
void (*map_glDisableClientState)(GLenum array);
void (*map_glDrawArrays)(GLenum mode, GLint first, GLsizei count);
void (*map_glDrawElements)(GLenum mode, GLsizei count, GLenum type, const void *indices);
void (*map_glEnable)(GLenum cap);
void (*map_glEnableClientState)(GLenum array);
void (*map_glFinish)(void);
void (*map_glFlush)(void);
void (*map_glFogx)(GLenum pname, GLfixed param);
void (*map_glFogxv)(GLenum pname, const GLfixed *param);
void (*map_glFrontFace)(GLenum mode);
void (*map_glFrustumx)(GLfixed l, GLfixed r, GLfixed b, GLfixed t, GLfixed n, GLfixed f);
void (*map_glGetBooleanv)(GLenum pname, GLboolean *data);
void (*map_glGetBufferParameteriv)(GLenum target, GLenum pname, GLint *params);
void (*map_glGetClipPlanex)(GLenum plane, GLfixed *equation);
void (*map_glGenBuffers)(GLsizei n, GLuint *buffers);
void (*map_glGenTextures)(GLsizei n, GLuint *textures);
GLenum (*map_glGetError)(void);
void (*map_glGetFixedv)(GLenum pname, GLfixed *params);
void (*map_glGetIntegerv)(GLenum pname, GLint *data);
void (*map_glGetLightxv)(GLenum light, GLenum pname, GLfixed *params);
void (*map_glGetMaterialxv)(GLenum face, GLenum pname, GLfixed *params);
void (*map_glGetPointerv)(GLenum pname, void **params);
const GLubyte * (*map_glGetString)(GLenum name);
void (*map_glGetTexEnviv)(GLenum target, GLenum pname, GLint *params);
void (*map_glGetTexEnvxv)(GLenum target, GLenum pname, GLfixed *params);
void (*map_glGetTexParameteriv)(GLenum target, GLenum pname, GLint *params);
void (*map_glGetTexParameterxv)(GLenum target, GLenum pname, GLfixed *params);
void (*map_glHint)(GLenum target, GLenum mode);
GLboolean (*map_glIsBuffer)(GLuint buffer);
GLboolean (*map_glIsEnabled)(GLenum cap);
GLboolean (*map_glIsTexture)(GLuint texture);
void (*map_glLightModelx)(GLenum pname, GLfixed param);
void (*map_glLightModelxv)(GLenum pname, const GLfixed *param);
void (*map_glLightx)(GLenum light, GLenum pname, GLfixed param);
void (*map_glLightxv)(GLenum light, GLenum pname, const GLfixed *params);
void (*map_glLineWidthx)(GLfixed width);
void (*map_glLoadIdentity)(void);
void (*map_glLoadMatrixx)(const GLfixed *m);
void (*map_glLogicOp)(GLenum opcode);
void (*map_glMaterialx)(GLenum face, GLenum pname, GLfixed param);
void (*map_glMaterialxv)(GLenum face, GLenum pname, const GLfixed *param);
void (*map_glMatrixMode)(GLenum mode);
void (*map_glMultMatrixx)(const GLfixed *m);
void (*map_glMultiTexCoord4x)(GLenum texture, GLfixed s, GLfixed t, GLfixed r, GLfixed q);
void (*map_glNormal3x)(GLfixed nx, GLfixed ny, GLfixed nz);
void (*map_glNormalPointer)(GLenum type, GLsizei stride, const void *pointer);
void (*map_glOrthox)(GLfixed l, GLfixed r, GLfixed b, GLfixed t, GLfixed n, GLfixed f);
void (*map_glPixelStorei)(GLenum pname, GLint param);
void (*map_glPointParameterx)(GLenum pname, GLfixed param);
void (*map_glPointParameterxv)(GLenum pname, const GLfixed *params);
void (*map_glPointSizex)(GLfixed size);
void (*map_glPolygonOffsetx)(GLfixed factor, GLfixed units);
void (*map_glPopMatrix)(void);
void (*map_glPushMatrix)(void);
void (*map_glReadPixels)(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, void *pixels);
void (*map_glRotatex)(GLfixed angle, GLfixed x, GLfixed y, GLfixed z);
void (*map_glSampleCoverage)(GLfloat value, GLboolean invert);
void (*map_glSampleCoveragex)(GLclampx value, GLboolean invert);
void (*map_glScalex)(GLfixed x, GLfixed y, GLfixed z);
void (*map_glScissor)(GLint x, GLint y, GLsizei width, GLsizei height);
void (*map_glShadeModel)(GLenum mode);
void (*map_glStencilFunc)(GLenum func, GLint ref, GLuint mask);
void (*map_glStencilMask)(GLuint mask);
void (*map_glStencilOp)(GLenum fail, GLenum zfail, GLenum zpass);
void (*map_glTexCoordPointer)(GLint size, GLenum type, GLsizei stride, const void *pointer);
void (*map_glTexEnvi)(GLenum target, GLenum pname, GLint param);
void (*map_glTexEnvx)(GLenum target, GLenum pname, GLfixed param);
void (*map_glTexEnviv)(GLenum target, GLenum pname, const GLint *params);
void (*map_glTexEnvxv)(GLenum target, GLenum pname, const GLfixed *params);
void (*map_glTexImage2D)(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void *pixels);
void (*map_glTexParameteri)(GLenum target, GLenum pname, GLint param);
void (*map_glTexParameterx)(GLenum target, GLenum pname, GLfixed param);
void (*map_glTexParameteriv)(GLenum target, GLenum pname, const GLint *params);
void (*map_glTexParameterxv)(GLenum target, GLenum pname, const GLfixed *params);
void (*map_glTexSubImage2D)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels);
void (*map_glTranslatex)(GLfixed x, GLfixed y, GLfixed z);
void (*map_glVertexPointer)(GLint size, GLenum type, GLsizei stride, const void *pointer);
void (*map_glViewport)(GLint x, GLint y, GLsizei width, GLsizei height);
#endif /* GL_VERSION_ES_CM_1_0*/

#if EGL_VERSION_1_1
EGLBoolean (*map_eglBindTexImage)(EGLDisplay dpy, EGLSurface surface, EGLint buffer);
EGLBoolean (*map_eglReleaseTexImage)(EGLDisplay dpy, EGLSurface surface, EGLint buffer);
EGLBoolean (*map_eglSurfaceAttrib)(EGLDisplay dpy, EGLSurface surface, EGLint attribute, EGLint value);
EGLBoolean (*map_eglSwapInterval)(EGLDisplay dpy, EGLint interval);
#endif /* EGL_VERSION_1_1*/

#if EGL_VERSION_1_2
EGLBoolean (*map_eglBindAPI)(EGLenum api);
EGLenum (*map_eglQueryAPI)(void);
EGLSurface (*map_eglCreatePbufferFromClientBuffer)(EGLDisplay dpy, EGLenum buftype, EGLClientBuffer buffer, EGLConfig config, const EGLint *attrib_list);
EGLBoolean (*map_eglReleaseThread)(void);
EGLBoolean (*map_eglWaitClient)(void);
#endif /* EGL_VERSION_1_2*/

#if EGL_VERSION_1_3
#endif /* EGL_VERSION_1_3*/

#if EGL_VERSION_1_4
EGLContext (*map_eglGetCurrentContext)(void);
#endif /* EGL_VERSION_1_4*/

#if EGL_VERSION_1_5
EGLSync (*map_eglCreateSync)(EGLDisplay dpy, EGLenum type, const EGLAttrib *attrib_list);
EGLBoolean (*map_eglDestroySync)(EGLDisplay dpy, EGLSync sync);
EGLint (*map_eglClientWaitSync)(EGLDisplay dpy, EGLSync sync, EGLint flags, EGLTime timeout);
EGLBoolean (*map_eglGetSyncAttrib)(EGLDisplay dpy, EGLSync sync, EGLint attribute, EGLAttrib *value);
EGLImage (*map_eglCreateImage)(EGLDisplay dpy, EGLContext ctx, EGLenum target, EGLClientBuffer buffer, const EGLAttrib *attrib_list);
EGLBoolean (*map_eglDestroyImage)(EGLDisplay dpy, EGLImage image);
EGLDisplay (*map_eglGetPlatformDisplay)(EGLenum platform, void *native_display, const EGLAttrib *attrib_list);
EGLSurface (*map_eglCreatePlatformWindowSurface)(EGLDisplay dpy, EGLConfig config, void *native_window, const EGLAttrib *attrib_list);
EGLSurface (*map_eglCreatePlatformPixmapSurface)(EGLDisplay dpy, EGLConfig config, void *native_pixmap, const EGLAttrib *attrib_list);
EGLBoolean (*map_eglWaitSync)(EGLDisplay dpy, EGLSync sync, EGLint flags);
#endif /* EGL_VERSION_1_5*/

#if GL_ES_VERSION_2_0
void (*map_glAttachShader)(GLuint program, GLuint shader);
void (*map_glBindAttribLocation)(GLuint program, GLuint index, const GLchar *name);
void (*map_glBindFramebuffer)(GLenum target, GLuint framebuffer);
void (*map_glBindRenderbuffer)(GLenum target, GLuint renderbuffer);
void (*map_glBlendColor)(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
void (*map_glBlendEquation)(GLenum mode);
void (*map_glBlendEquationSeparate)(GLenum modeRGB, GLenum modeAlpha);
void (*map_glBlendFuncSeparate)(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);
GLenum (*map_glCheckFramebufferStatus)(GLenum target);
void (*map_glCompileShader)(GLuint shader);
GLuint (*map_glCreateProgram)(void);
GLuint (*map_glCreateShader)(GLenum type);
void (*map_glDeleteFramebuffers)(GLsizei n, const GLuint *framebuffers);
void (*map_glDeleteProgram)(GLuint program);
void (*map_glDeleteRenderbuffers)(GLsizei n, const GLuint *renderbuffers);
void (*map_glDeleteShader)(GLuint shader);
void (*map_glDetachShader)(GLuint program, GLuint shader);
void (*map_glDisableVertexAttribArray)(GLuint index);
void (*map_glEnableVertexAttribArray)(GLuint index);
void (*map_glFramebufferRenderbuffer)(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
void (*map_glFramebufferTexture2D)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
void (*map_glGenerateMipmap)(GLenum target);
void (*map_glGenFramebuffers)(GLsizei n, GLuint *framebuffers);
void (*map_glGenRenderbuffers)(GLsizei n, GLuint *renderbuffers);
void (*map_glGetActiveAttrib)(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name);
void (*map_glGetActiveUniform)(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name);
void (*map_glGetAttachedShaders)(GLuint program, GLsizei maxCount, GLsizei *count, GLuint *shaders);
GLint (*map_glGetAttribLocation)(GLuint program, const GLchar *name);
void (*map_glGetFramebufferAttachmentParameteriv)(GLenum target, GLenum attachment, GLenum pname, GLint *params);
void (*map_glGetProgramiv)(GLuint program, GLenum pname, GLint *params);
void (*map_glGetProgramInfoLog)(GLuint program, GLsizei bufSize, GLsizei *length, GLchar *infoLog);
void (*map_glGetRenderbufferParameteriv)(GLenum target, GLenum pname, GLint *params);
void (*map_glGetShaderiv)(GLuint shader, GLenum pname, GLint *params);
void (*map_glGetShaderInfoLog)(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *infoLog);
void (*map_glGetShaderPrecisionFormat)(GLenum shadertype, GLenum precisiontype, GLint *range, GLint *precision);
void (*map_glGetShaderSource)(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *source);
void (*map_glGetUniformfv)(GLuint program, GLint location, GLfloat *params);
void (*map_glGetUniformiv)(GLuint program, GLint location, GLint *params);
GLint (*map_glGetUniformLocation)(GLuint program, const GLchar *name);
void (*map_glGetVertexAttribfv)(GLuint index, GLenum pname, GLfloat *params);
void (*map_glGetVertexAttribiv)(GLuint index, GLenum pname, GLint *params);
void (*map_glGetVertexAttribPointerv)(GLuint index, GLenum pname, void **pointer);
GLboolean (*map_glIsFramebuffer)(GLuint framebuffer);
GLboolean (*map_glIsProgram)(GLuint program);
GLboolean (*map_glIsRenderbuffer)(GLuint renderbuffer);
GLboolean (*map_glIsShader)(GLuint shader);
void (*map_glLinkProgram)(GLuint program);
void (*map_glReleaseShaderCompiler)(void);
void (*map_glRenderbufferStorage)(GLenum target, GLenum internalformat, GLsizei width, GLsizei height);
void (*map_glShaderBinary)(GLsizei count, const GLuint *shaders, GLenum binaryformat, const void *binary, GLsizei length);
void (*map_glShaderSource)(GLuint shader, GLsizei count, const GLchar *const*string, const GLint *length);
void (*map_glStencilFuncSeparate)(GLenum face, GLenum func, GLint ref, GLuint mask);
void (*map_glStencilMaskSeparate)(GLenum face, GLuint mask);
void (*map_glStencilOpSeparate)(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass);
void (*map_glUniform1f)(GLint location, GLfloat v0);
void (*map_glUniform1fv)(GLint location, GLsizei count, const GLfloat *value);
void (*map_glUniform1i)(GLint location, GLint v0);
void (*map_glUniform1iv)(GLint location, GLsizei count, const GLint *value);
void (*map_glUniform2f)(GLint location, GLfloat v0, GLfloat v1);
void (*map_glUniform2fv)(GLint location, GLsizei count, const GLfloat *value);
void (*map_glUniform2i)(GLint location, GLint v0, GLint v1);
void (*map_glUniform2iv)(GLint location, GLsizei count, const GLint *value);
void (*map_glUniform3f)(GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
void (*map_glUniform3fv)(GLint location, GLsizei count, const GLfloat *value);
void (*map_glUniform3i)(GLint location, GLint v0, GLint v1, GLint v2);
void (*map_glUniform3iv)(GLint location, GLsizei count, const GLint *value);
void (*map_glUniform4f)(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
void (*map_glUniform4fv)(GLint location, GLsizei count, const GLfloat *value);
void (*map_glUniform4i)(GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
void (*map_glUniform4iv)(GLint location, GLsizei count, const GLint *value);
void (*map_glUniformMatrix2fv)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
void (*map_glUniformMatrix3fv)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
void (*map_glUniformMatrix4fv)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
void (*map_glUseProgram)(GLuint program);
void (*map_glValidateProgram)(GLuint program);
void (*map_glVertexAttrib1f)(GLuint index, GLfloat x);
void (*map_glVertexAttrib1fv)(GLuint index, const GLfloat *v);
void (*map_glVertexAttrib2f)(GLuint index, GLfloat x, GLfloat y);
void (*map_glVertexAttrib2fv)(GLuint index, const GLfloat *v);
void (*map_glVertexAttrib3f)(GLuint index, GLfloat x, GLfloat y, GLfloat z);
void (*map_glVertexAttrib3fv)(GLuint index, const GLfloat *v);
void (*map_glVertexAttrib4f)(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
void (*map_glVertexAttrib4fv)(GLuint index, const GLfloat *v);
void (*map_glVertexAttribPointer)(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void *pointer);
#endif /* GL_ES_VERSION_2_0*/

#if GL_ES_VERSION_3_0
void (*map_glReadBuffer)(GLenum src);
void (*map_glDrawRangeElements)(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices);
void (*map_glTexImage3D)(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels);
void (*map_glTexSubImage3D)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels);
void (*map_glCopyTexSubImage3D)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
void (*map_glCompressedTexImage3D)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *data);
void (*map_glCompressedTexSubImage3D)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data);
void (*map_glGenQueries)(GLsizei n, GLuint *ids);
void (*map_glDeleteQueries)(GLsizei n, const GLuint *ids);
GLboolean (*map_glIsQuery)(GLuint id);
void (*map_glBeginQuery)(GLenum target, GLuint id);
void (*map_glEndQuery)(GLenum target);
void (*map_glGetQueryiv)(GLenum target, GLenum pname, GLint *params);
void (*map_glGetQueryObjectuiv)(GLuint id, GLenum pname, GLuint *params);
GLboolean (*map_glUnmapBuffer)(GLenum target);
void (*map_glGetBufferPointerv)(GLenum target, GLenum pname, void **params);
void (*map_glDrawBuffers)(GLsizei n, const GLenum *bufs);
void (*map_glUniformMatrix2x3fv)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
void (*map_glUniformMatrix3x2fv)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
void (*map_glUniformMatrix2x4fv)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
void (*map_glUniformMatrix4x2fv)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
void (*map_glUniformMatrix3x4fv)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
void (*map_glUniformMatrix4x3fv)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
void (*map_glBlitFramebuffer)(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
void (*map_glRenderbufferStorageMultisample)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
void (*map_glFramebufferTextureLayer)(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer);
void * (*map_glMapBufferRange)(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access);
void (*map_glFlushMappedBufferRange)(GLenum target, GLintptr offset, GLsizeiptr length);
void (*map_glBindVertexArray)(GLuint array);
void (*map_glDeleteVertexArrays)(GLsizei n, const GLuint *arrays);
void (*map_glGenVertexArrays)(GLsizei n, GLuint *arrays);
GLboolean (*map_glIsVertexArray)(GLuint array);
void (*map_glGetIntegeri_v)(GLenum target, GLuint index, GLint *data);
void (*map_glBeginTransformFeedback)(GLenum primitiveMode);
void (*map_glEndTransformFeedback)(void);
void (*map_glBindBufferRange)(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
void (*map_glBindBufferBase)(GLenum target, GLuint index, GLuint buffer);
void (*map_glTransformFeedbackVaryings)(GLuint program, GLsizei count, const GLchar *const*varyings, GLenum bufferMode);
void (*map_glGetTransformFeedbackVarying)(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name);
void (*map_glVertexAttribIPointer)(GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer);
void (*map_glGetVertexAttribIiv)(GLuint index, GLenum pname, GLint *params);
void (*map_glGetVertexAttribIuiv)(GLuint index, GLenum pname, GLuint *params);
void (*map_glVertexAttribI4i)(GLuint index, GLint x, GLint y, GLint z, GLint w);
void (*map_glVertexAttribI4ui)(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
void (*map_glVertexAttribI4iv)(GLuint index, const GLint *v);
void (*map_glVertexAttribI4uiv)(GLuint index, const GLuint *v);
void (*map_glGetUniformuiv)(GLuint program, GLint location, GLuint *params);
GLint (*map_glGetFragDataLocation)(GLuint program, const GLchar *name);
void (*map_glUniform1ui)(GLint location, GLuint v0);
void (*map_glUniform2ui)(GLint location, GLuint v0, GLuint v1);
void (*map_glUniform3ui)(GLint location, GLuint v0, GLuint v1, GLuint v2);
void (*map_glUniform4ui)(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
void (*map_glUniform1uiv)(GLint location, GLsizei count, const GLuint *value);
void (*map_glUniform2uiv)(GLint location, GLsizei count, const GLuint *value);
void (*map_glUniform3uiv)(GLint location, GLsizei count, const GLuint *value);
void (*map_glUniform4uiv)(GLint location, GLsizei count, const GLuint *value);
void (*map_glClearBufferiv)(GLenum buffer, GLint drawbuffer, const GLint *value);
void (*map_glClearBufferuiv)(GLenum buffer, GLint drawbuffer, const GLuint *value);
void (*map_glClearBufferfv)(GLenum buffer, GLint drawbuffer, const GLfloat *value);
void (*map_glClearBufferfi)(GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil);
const GLubyte * (*map_glGetStringi)(GLenum name, GLuint index);
void (*map_glCopyBufferSubData)(GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
void (*map_glGetUniformIndices)(GLuint program, GLsizei uniformCount, const GLchar *const*uniformNames, GLuint *uniformIndices);
void (*map_glGetActiveUniformsiv)(GLuint program, GLsizei uniformCount, const GLuint *uniformIndices, GLenum pname, GLint *params);
GLuint (*map_glGetUniformBlockIndex)(GLuint program, const GLchar *uniformBlockName);
void (*map_glGetActiveUniformBlockiv)(GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint *params);
void (*map_glGetActiveUniformBlockName)(GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformBlockName);
void (*map_glUniformBlockBinding)(GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding);
void (*map_glDrawArraysInstanced)(GLenum mode, GLint first, GLsizei count, GLsizei instancecount);
void (*map_glDrawElementsInstanced)(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount);
GLsync (*map_glFenceSync)(GLenum condition, GLbitfield flags);
GLboolean (*map_glIsSync)(GLsync sync);
void (*map_glDeleteSync)(GLsync sync);
GLenum (*map_glClientWaitSync)(GLsync sync, GLbitfield flags, GLuint64 timeout);
void (*map_glWaitSync)(GLsync sync, GLbitfield flags, GLuint64 timeout);
void (*map_glGetInteger64v)(GLenum pname, GLint64 *data);
void (*map_glGetSynciv)(GLsync sync, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values);
void (*map_glGetInteger64i_v)(GLenum target, GLuint index, GLint64 *data);
void (*map_glGetBufferParameteri64v)(GLenum target, GLenum pname, GLint64 *params);
void (*map_glGenSamplers)(GLsizei count, GLuint *samplers);
void (*map_glDeleteSamplers)(GLsizei count, const GLuint *samplers);
GLboolean (*map_glIsSampler)(GLuint sampler);
void (*map_glBindSampler)(GLuint unit, GLuint sampler);
void (*map_glSamplerParameteri)(GLuint sampler, GLenum pname, GLint param);
void (*map_glSamplerParameteriv)(GLuint sampler, GLenum pname, const GLint *param);
void (*map_glSamplerParameterf)(GLuint sampler, GLenum pname, GLfloat param);
void (*map_glSamplerParameterfv)(GLuint sampler, GLenum pname, const GLfloat *param);
void (*map_glGetSamplerParameteriv)(GLuint sampler, GLenum pname, GLint *params);
void (*map_glGetSamplerParameterfv)(GLuint sampler, GLenum pname, GLfloat *params);
void (*map_glVertexAttribDivisor)(GLuint index, GLuint divisor);
void (*map_glBindTransformFeedback)(GLenum target, GLuint id);
void (*map_glDeleteTransformFeedbacks)(GLsizei n, const GLuint *ids);
void (*map_glGenTransformFeedbacks)(GLsizei n, GLuint *ids);
GLboolean (*map_glIsTransformFeedback)(GLuint id);
void (*map_glPauseTransformFeedback)(void);
void (*map_glResumeTransformFeedback)(void);
void (*map_glGetProgramBinary)(GLuint program, GLsizei bufSize, GLsizei *length, GLenum *binaryFormat, void *binary);
void (*map_glProgramBinary)(GLuint program, GLenum binaryFormat, const void *binary, GLsizei length);
void (*map_glProgramParameteri)(GLuint program, GLenum pname, GLint value);
void (*map_glInvalidateFramebuffer)(GLenum target, GLsizei numAttachments, const GLenum *attachments);
void (*map_glInvalidateSubFramebuffer)(GLenum target, GLsizei numAttachments, const GLenum *attachments, GLint x, GLint y, GLsizei width, GLsizei height);
void (*map_glTexStorage2D)(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height);
void (*map_glTexStorage3D)(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth);
void (*map_glGetInternalformativ)(GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint *params);
#endif /* GL_ES_VERSION_3_0*/

#if GL_ES_VERSION_3_1
void (*map_glDispatchCompute)(GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z);
void (*map_glDispatchComputeIndirect)(GLintptr indirect);
void (*map_glDrawArraysIndirect)(GLenum mode, const void *indirect);
void (*map_glDrawElementsIndirect)(GLenum mode, GLenum type, const void *indirect);
void (*map_glFramebufferParameteri)(GLenum target, GLenum pname, GLint param);
void (*map_glGetFramebufferParameteriv)(GLenum target, GLenum pname, GLint *params);
void (*map_glGetProgramInterfaceiv)(GLuint program, GLenum programInterface, GLenum pname, GLint *params);
GLuint (*map_glGetProgramResourceIndex)(GLuint program, GLenum programInterface, const GLchar *name);
void (*map_glGetProgramResourceName)(GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name);
void (*map_glGetProgramResourceiv)(GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum *props, GLsizei bufSize, GLsizei *length, GLint *params);
GLint (*map_glGetProgramResourceLocation)(GLuint program, GLenum programInterface, const GLchar *name);
void (*map_glUseProgramStages)(GLuint pipeline, GLbitfield stages, GLuint program);
void (*map_glActiveShaderProgram)(GLuint pipeline, GLuint program);
GLuint (*map_glCreateShaderProgramv)(GLenum type, GLsizei count, const GLchar *const*strings);
void (*map_glBindProgramPipeline)(GLuint pipeline);
void (*map_glDeleteProgramPipelines)(GLsizei n, const GLuint *pipelines);
void (*map_glGenProgramPipelines)(GLsizei n, GLuint *pipelines);
GLboolean (*map_glIsProgramPipeline)(GLuint pipeline);
void (*map_glGetProgramPipelineiv)(GLuint pipeline, GLenum pname, GLint *params);
void (*map_glProgramUniform1i)(GLuint program, GLint location, GLint v0);
void (*map_glProgramUniform2i)(GLuint program, GLint location, GLint v0, GLint v1);
void (*map_glProgramUniform3i)(GLuint program, GLint location, GLint v0, GLint v1, GLint v2);
void (*map_glProgramUniform4i)(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
void (*map_glProgramUniform1ui)(GLuint program, GLint location, GLuint v0);
void (*map_glProgramUniform2ui)(GLuint program, GLint location, GLuint v0, GLuint v1);
void (*map_glProgramUniform3ui)(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2);
void (*map_glProgramUniform4ui)(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
void (*map_glProgramUniform1f)(GLuint program, GLint location, GLfloat v0);
void (*map_glProgramUniform2f)(GLuint program, GLint location, GLfloat v0, GLfloat v1);
void (*map_glProgramUniform3f)(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
void (*map_glProgramUniform4f)(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
void (*map_glProgramUniform1iv)(GLuint program, GLint location, GLsizei count, const GLint *value);
void (*map_glProgramUniform2iv)(GLuint program, GLint location, GLsizei count, const GLint *value);
void (*map_glProgramUniform3iv)(GLuint program, GLint location, GLsizei count, const GLint *value);
void (*map_glProgramUniform4iv)(GLuint program, GLint location, GLsizei count, const GLint *value);
void (*map_glProgramUniform1uiv)(GLuint program, GLint location, GLsizei count, const GLuint *value);
void (*map_glProgramUniform2uiv)(GLuint program, GLint location, GLsizei count, const GLuint *value);
void (*map_glProgramUniform3uiv)(GLuint program, GLint location, GLsizei count, const GLuint *value);
void (*map_glProgramUniform4uiv)(GLuint program, GLint location, GLsizei count, const GLuint *value);
void (*map_glProgramUniform1fv)(GLuint program, GLint location, GLsizei count, const GLfloat *value);
void (*map_glProgramUniform2fv)(GLuint program, GLint location, GLsizei count, const GLfloat *value);
void (*map_glProgramUniform3fv)(GLuint program, GLint location, GLsizei count, const GLfloat *value);
void (*map_glProgramUniform4fv)(GLuint program, GLint location, GLsizei count, const GLfloat *value);
void (*map_glProgramUniformMatrix2fv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
void (*map_glProgramUniformMatrix3fv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
void (*map_glProgramUniformMatrix4fv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
void (*map_glProgramUniformMatrix2x3fv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
void (*map_glProgramUniformMatrix3x2fv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
void (*map_glProgramUniformMatrix2x4fv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
void (*map_glProgramUniformMatrix4x2fv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
void (*map_glProgramUniformMatrix3x4fv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
void (*map_glProgramUniformMatrix4x3fv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
void (*map_glValidateProgramPipeline)(GLuint pipeline);
void (*map_glGetProgramPipelineInfoLog)(GLuint pipeline, GLsizei bufSize, GLsizei *length, GLchar *infoLog);
void (*map_glBindImageTexture)(GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format);
void (*map_glGetBooleani_v)(GLenum target, GLuint index, GLboolean *data);
void (*map_glMemoryBarrier)(GLbitfield barriers);
void (*map_glMemoryBarrierByRegion)(GLbitfield barriers);
void (*map_glTexStorage2DMultisample)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
void (*map_glGetMultisamplefv)(GLenum pname, GLuint index, GLfloat *val);
void (*map_glSampleMaski)(GLuint maskNumber, GLbitfield mask);
void (*map_glGetTexLevelParameteriv)(GLenum target, GLint level, GLenum pname, GLint *params);
void (*map_glGetTexLevelParameterfv)(GLenum target, GLint level, GLenum pname, GLfloat *params);
void (*map_glBindVertexBuffer)(GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride);
void (*map_glVertexAttribFormat)(GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset);
void (*map_glVertexAttribIFormat)(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
void (*map_glVertexAttribBinding)(GLuint attribindex, GLuint bindingindex);
void (*map_glVertexBindingDivisor)(GLuint bindingindex, GLuint divisor);
#endif /* GL_ES_VERSION_3_1*/

#if GL_ES_VERSION_3_2
void (*map_glBlendBarrier)(void);
void (*map_glCopyImageSubData)(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth);
void (*map_glDebugMessageControl)(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled);
void (*map_glDebugMessageInsert)(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf);
void (*map_glDebugMessageCallback)(GLDEBUGPROC callback, const void *userParam);
GLuint (*map_glGetDebugMessageLog)(GLuint count, GLsizei bufSize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog);
void (*map_glPushDebugGroup)(GLenum source, GLuint id, GLsizei length, const GLchar *message);
void (*map_glPopDebugGroup)(void);
void (*map_glObjectLabel)(GLenum identifier, GLuint name, GLsizei length, const GLchar *label);
void (*map_glGetObjectLabel)(GLenum identifier, GLuint name, GLsizei bufSize, GLsizei *length, GLchar *label);
void (*map_glObjectPtrLabel)(const void *ptr, GLsizei length, const GLchar *label);
void (*map_glGetObjectPtrLabel)(const void *ptr, GLsizei bufSize, GLsizei *length, GLchar *label);
void (*map_glEnablei)(GLenum target, GLuint index);
void (*map_glDisablei)(GLenum target, GLuint index);
void (*map_glBlendEquationi)(GLuint buf, GLenum mode);
void (*map_glBlendEquationSeparatei)(GLuint buf, GLenum modeRGB, GLenum modeAlpha);
void (*map_glBlendFunci)(GLuint buf, GLenum src, GLenum dst);
void (*map_glBlendFuncSeparatei)(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);
void (*map_glColorMaski)(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a);
GLboolean (*map_glIsEnabledi)(GLenum target, GLuint index);
void (*map_glDrawElementsBaseVertex)(GLenum mode, GLsizei count, GLenum type, const void *indices, GLint basevertex);
void (*map_glDrawRangeElementsBaseVertex)(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices, GLint basevertex);
void (*map_glDrawElementsInstancedBaseVertex)(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex);
void (*map_glFramebufferTexture)(GLenum target, GLenum attachment, GLuint texture, GLint level);
void (*map_glPrimitiveBoundingBox)(GLfloat minX, GLfloat minY, GLfloat minZ, GLfloat minW, GLfloat maxX, GLfloat maxY, GLfloat maxZ, GLfloat maxW);
GLenum (*map_glGetGraphicsResetStatus)(void);
void (*map_glReadnPixels)(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void *data);
void (*map_glGetnUniformfv)(GLuint program, GLint location, GLsizei bufSize, GLfloat *params);
void (*map_glGetnUniformiv)(GLuint program, GLint location, GLsizei bufSize, GLint *params);
void (*map_glGetnUniformuiv)(GLuint program, GLint location, GLsizei bufSize, GLuint *params);
void (*map_glMinSampleShading)(GLfloat value);
void (*map_glPatchParameteri)(GLenum pname, GLint value);
void (*map_glTexParameterIiv)(GLenum target, GLenum pname, const GLint *params);
void (*map_glTexParameterIuiv)(GLenum target, GLenum pname, const GLuint *params);
void (*map_glGetTexParameterIiv)(GLenum target, GLenum pname, GLint *params);
void (*map_glGetTexParameterIuiv)(GLenum target, GLenum pname, GLuint *params);
void (*map_glSamplerParameterIiv)(GLuint sampler, GLenum pname, const GLint *param);
void (*map_glSamplerParameterIuiv)(GLuint sampler, GLenum pname, const GLuint *param);
void (*map_glGetSamplerParameterIiv)(GLuint sampler, GLenum pname, GLint *params);
void (*map_glGetSamplerParameterIuiv)(GLuint sampler, GLenum pname, GLuint *params);
void (*map_glTexBuffer)(GLenum target, GLenum internalformat, GLuint buffer);
void (*map_glTexBufferRange)(GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size);
void (*map_glTexStorage3DMultisample)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
#endif /* GL_ES_VERSION_3_2*/

#if EGL_KHR_cl_event2
EGLSyncKHR (*map_eglCreateSync64KHR)(EGLDisplay dpy, EGLenum type, const EGLAttribKHR *attrib_list);
#endif /* EGL_KHR_cl_event2*/

#if EGL_KHR_client_get_all_proc_addresses
#endif /* EGL_KHR_client_get_all_proc_addresses*/

#if EGL_KHR_create_context
#endif /* EGL_KHR_create_context*/

#if EGL_KHR_fence_sync
EGLSyncKHR (*map_eglCreateSyncKHR)(EGLDisplay dpy, EGLenum type, const EGLint *attrib_list);
EGLBoolean (*map_eglDestroySyncKHR)(EGLDisplay dpy, EGLSyncKHR sync);
EGLint (*map_eglClientWaitSyncKHR)(EGLDisplay dpy, EGLSyncKHR sync, EGLint flags, EGLTimeKHR timeout);
EGLBoolean (*map_eglGetSyncAttribKHR)(EGLDisplay dpy, EGLSyncKHR sync, EGLint attribute, EGLint *value);
#endif /* EGL_KHR_fence_sync*/

#if EGL_KHR_get_all_proc_addresses
#endif /* EGL_KHR_get_all_proc_addresses*/

#if EGL_KHR_gl_colorspace
#endif /* EGL_KHR_gl_colorspace*/

#if EGL_KHR_gl_renderbuffer_image
#endif /* EGL_KHR_gl_renderbuffer_image*/

#if EGL_KHR_gl_texture_2D_image
#endif /* EGL_KHR_gl_texture_2D_image*/

#if EGL_KHR_gl_texture_3D_image
#endif /* EGL_KHR_gl_texture_3D_image*/

#if EGL_KHR_gl_texture_cubemap_image
#endif /* EGL_KHR_gl_texture_cubemap_image*/

#if EGL_KHR_image
EGLImageKHR (*map_eglCreateImageKHR)(EGLDisplay dpy, EGLContext ctx, EGLenum target, EGLClientBuffer buffer, const EGLint *attrib_list);
EGLBoolean (*map_eglDestroyImageKHR)(EGLDisplay dpy, EGLImageKHR image);
#endif /* EGL_KHR_image*/

#if EGL_KHR_image_base
#endif /* EGL_KHR_image_base*/

#if EGL_KHR_image_pixmap
#endif /* EGL_KHR_image_pixmap*/

#if EGL_KHR_partial_update
EGLBoolean (*map_eglSetDamageRegionKHR)(EGLDisplay dpy, EGLSurface surface, EGLint *rects, EGLint n_rects);
#endif /* EGL_KHR_partial_update*/

#if EGL_KHR_platform_android
#endif /* EGL_KHR_platform_android*/

#if EGL_KHR_platform_wayland
#endif /* EGL_KHR_platform_wayland*/

#if EGL_KHR_platform_x11
#endif /* EGL_KHR_platform_x11*/

#if EGL_KHR_surfaceless_context
#endif /* EGL_KHR_surfaceless_context*/

#if EGL_KHR_wait_sync
EGLint (*map_eglWaitSyncKHR)(EGLDisplay dpy, EGLSyncKHR sync, EGLint flags);
#endif /* EGL_KHR_wait_sync*/

#if GL_KHR_blend_equation_advanced
void (*map_glBlendBarrierKHR)(void);
#endif /* GL_KHR_blend_equation_advanced*/

#if GL_KHR_blend_equation_advanced_coherent
#endif /* GL_KHR_blend_equation_advanced_coherent*/

#if GL_KHR_debug
void (*map_glDebugMessageControlKHR)(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled);
void (*map_glDebugMessageInsertKHR)(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf);
void (*map_glDebugMessageCallbackKHR)(GLDEBUGPROCKHR callback, const void *userParam);
GLuint (*map_glGetDebugMessageLogKHR)(GLuint count, GLsizei bufSize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog);
void (*map_glPushDebugGroupKHR)(GLenum source, GLuint id, GLsizei length, const GLchar *message);
void (*map_glPopDebugGroupKHR)(void);
void (*map_glObjectLabelKHR)(GLenum identifier, GLuint name, GLsizei length, const GLchar *label);
void (*map_glGetObjectLabelKHR)(GLenum identifier, GLuint name, GLsizei bufSize, GLsizei *length, GLchar *label);
void (*map_glObjectPtrLabelKHR)(const void *ptr, GLsizei length, const GLchar *label);
void (*map_glGetObjectPtrLabelKHR)(const void *ptr, GLsizei bufSize, GLsizei *length, GLchar *label);
void (*map_glGetPointervKHR)(GLenum pname, void **params);
#endif /* GL_KHR_debug*/

#if GL_KHR_robustness
GLenum (*map_glGetGraphicsResetStatusKHR)(void);
void (*map_glReadnPixelsKHR)(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void *data);
void (*map_glGetnUniformfvKHR)(GLuint program, GLint location, GLsizei bufSize, GLfloat *params);
void (*map_glGetnUniformivKHR)(GLuint program, GLint location, GLsizei bufSize, GLint *params);
void (*map_glGetnUniformuivKHR)(GLuint program, GLint location, GLsizei bufSize, GLuint *params);
#endif /* GL_KHR_robustness*/

#if GL_KHR_texture_compression_astc_ldr
#endif /* GL_KHR_texture_compression_astc_ldr*/

#if GL_OES_EGL_image
void (*map_glEGLImageTargetTexture2DOES)(GLenum target, GLeglImageOES image);
void (*map_glEGLImageTargetRenderbufferStorageOES)(GLenum target, GLeglImageOES image);
#endif /* GL_OES_EGL_image*/

#if GL_OES_EGL_image_external
#endif /* GL_OES_EGL_image_external*/

#if GL_OES_EGL_sync
#endif /* GL_OES_EGL_sync*/

#if GL_OES_compressed_ETC1_RGB8_texture
#endif /* GL_OES_compressed_ETC1_RGB8_texture*/

#if GL_OES_compressed_paletted_texture
#endif /* GL_OES_compressed_paletted_texture*/

#if GL_OES_copy_image
void (*map_glCopyImageSubDataOES)(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth);
#endif /* GL_OES_copy_image*/

#if GL_OES_depth24
#endif /* GL_OES_depth24*/

#if GL_OES_draw_buffers_indexed
void (*map_glEnableiOES)(GLenum target, GLuint index);
void (*map_glDisableiOES)(GLenum target, GLuint index);
void (*map_glBlendEquationiOES)(GLuint buf, GLenum mode);
void (*map_glBlendEquationSeparateiOES)(GLuint buf, GLenum modeRGB, GLenum modeAlpha);
void (*map_glBlendFunciOES)(GLuint buf, GLenum src, GLenum dst);
void (*map_glBlendFuncSeparateiOES)(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);
void (*map_glColorMaskiOES)(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a);
GLboolean (*map_glIsEnablediOES)(GLenum target, GLuint index);
#endif /* GL_OES_draw_buffers_indexed*/

#if GL_OES_draw_elements_base_vertex
void (*map_glDrawElementsBaseVertexOES)(GLenum mode, GLsizei count, GLenum type, const void *indices, GLint basevertex);
void (*map_glDrawRangeElementsBaseVertexOES)(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices, GLint basevertex);
void (*map_glDrawElementsInstancedBaseVertexOES)(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex);
void (*map_glMultiDrawElementsBaseVertexEXT)(GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei primcount, const GLint *basevertex);
#endif /* GL_OES_draw_elements_base_vertex*/

#if GL_OES_draw_texture
void (*map_glDrawTexsOES)(GLshort x, GLshort y, GLshort z, GLshort width, GLshort height);
void (*map_glDrawTexiOES)(GLint x, GLint y, GLint z, GLint width, GLint height);
void (*map_glDrawTexxOES)(GLfixed x, GLfixed y, GLfixed z, GLfixed width, GLfixed height);
void (*map_glDrawTexsvOES)(const GLshort *coords);
void (*map_glDrawTexivOES)(const GLint *coords);
void (*map_glDrawTexxvOES)(const GLfixed *coords);
void (*map_glDrawTexfOES)(GLfloat x, GLfloat y, GLfloat z, GLfloat width, GLfloat height);
void (*map_glDrawTexfvOES)(const GLfloat *coords);
#endif /* GL_OES_draw_texture*/

#if GL_OES_framebuffer_object
GLboolean (*map_glIsRenderbufferOES)(GLuint renderbuffer);
void (*map_glBindRenderbufferOES)(GLenum target, GLuint renderbuffer);
void (*map_glDeleteRenderbuffersOES)(GLsizei n, const GLuint *renderbuffers);
void (*map_glGenRenderbuffersOES)(GLsizei n, GLuint *renderbuffers);
void (*map_glRenderbufferStorageOES)(GLenum target, GLenum internalformat, GLsizei width, GLsizei height);
void (*map_glGetRenderbufferParameterivOES)(GLenum target, GLenum pname, GLint *params);
GLboolean (*map_glIsFramebufferOES)(GLuint framebuffer);
void (*map_glBindFramebufferOES)(GLenum target, GLuint framebuffer);
void (*map_glDeleteFramebuffersOES)(GLsizei n, const GLuint *framebuffers);
void (*map_glGenFramebuffersOES)(GLsizei n, GLuint *framebuffers);
GLenum (*map_glCheckFramebufferStatusOES)(GLenum target);
void (*map_glFramebufferRenderbufferOES)(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
void (*map_glFramebufferTexture2DOES)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
void (*map_glGetFramebufferAttachmentParameterivOES)(GLenum target, GLenum attachment, GLenum pname, GLint *params);
void (*map_glGenerateMipmapOES)(GLenum target);
#endif /* GL_OES_framebuffer_object*/

#if GL_OES_geometry_point_size
#endif /* GL_OES_geometry_point_size*/

#if GL_OES_geometry_shader
void (*map_glFramebufferTextureOES)(GLenum target, GLenum attachment, GLuint texture, GLint level);
#endif /* GL_OES_geometry_shader*/

#if GL_OES_gpu_shader5
#endif /* GL_OES_gpu_shader5*/

#if GL_OES_mapbuffer
void * (*map_glMapBufferOES)(GLenum target, GLenum access);
GLboolean (*map_glUnmapBufferOES)(GLenum target);
void (*map_glGetBufferPointervOES)(GLenum target, GLenum pname, void **params);
#endif /* GL_OES_mapbuffer*/

#if GL_OES_matrix_palette
void (*map_glCurrentPaletteMatrixOES)(GLuint matrixpaletteindex);
void (*map_glLoadPaletteFromModelViewMatrixOES)(void);
void (*map_glMatrixIndexPointerOES)(GLint size, GLenum type, GLsizei stride, const void *pointer);
void (*map_glWeightPointerOES)(GLint size, GLenum type, GLsizei stride, const void *pointer);
#endif /* GL_OES_matrix_palette*/

#if GL_OES_packed_depth_stencil
#endif /* GL_OES_packed_depth_stencil*/

#if GL_OES_point_size_array
void (*map_glPointSizePointerOES)(GLenum type, GLsizei stride, const void *pointer);
#endif /* GL_OES_point_size_array*/

#if GL_OES_primitive_bounding_box
void (*map_glPrimitiveBoundingBoxOES)(GLfloat minX, GLfloat minY, GLfloat minZ, GLfloat minW, GLfloat maxX, GLfloat maxY, GLfloat maxZ, GLfloat maxW);
#endif /* GL_OES_primitive_bounding_box*/

#if GL_OES_query_matrix
GLbitfield (*map_glQueryMatrixxOES)(GLfixed *mantissa, GLint *exponent);
#endif /* GL_OES_query_matrix*/

#if GL_OES_rgb8_rgba8
#endif /* GL_OES_rgb8_rgba8*/

#if GL_OES_sample_shading
void (*map_glMinSampleShadingOES)(GLfloat value);
#endif /* GL_OES_sample_shading*/

#if GL_OES_sample_variables
#endif /* GL_OES_sample_variables*/

#if GL_OES_shader_image_atomic
#endif /* GL_OES_shader_image_atomic*/

#if GL_OES_shader_io_blocks
#endif /* GL_OES_shader_io_blocks*/

#if GL_OES_shader_multisample_interpolation
#endif /* GL_OES_shader_multisample_interpolation*/

#if GL_OES_standard_derivatives
#endif /* GL_OES_standard_derivatives*/

#if GL_OES_stencil8
#endif /* GL_OES_stencil8*/

#if GL_OES_stencil_wrap
#endif /* GL_OES_stencil_wrap*/

#if GL_OES_surfaceless_context
#endif /* GL_OES_surfaceless_context*/

#if GL_OES_tessellation_point_size
#endif /* GL_OES_tessellation_point_size*/

#if GL_OES_tessellation_shader
void (*map_glPatchParameteriOES)(GLenum pname, GLint value);
#endif /* GL_OES_tessellation_shader*/

#if GL_OES_texture_border_clamp
void (*map_glTexParameterIivOES)(GLenum target, GLenum pname, const GLint *params);
void (*map_glTexParameterIuivOES)(GLenum target, GLenum pname, const GLuint *params);
void (*map_glGetTexParameterIivOES)(GLenum target, GLenum pname, GLint *params);
void (*map_glGetTexParameterIuivOES)(GLenum target, GLenum pname, GLuint *params);
void (*map_glSamplerParameterIivOES)(GLuint sampler, GLenum pname, const GLint *param);
void (*map_glSamplerParameterIuivOES)(GLuint sampler, GLenum pname, const GLuint *param);
void (*map_glGetSamplerParameterIivOES)(GLuint sampler, GLenum pname, GLint *params);
void (*map_glGetSamplerParameterIuivOES)(GLuint sampler, GLenum pname, GLuint *params);
#endif /* GL_OES_texture_border_clamp*/

#if GL_OES_texture_buffer
void (*map_glTexBufferOES)(GLenum target, GLenum internalformat, GLuint buffer);
void (*map_glTexBufferRangeOES)(GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size);
#endif /* GL_OES_texture_buffer*/

#if GL_OES_texture_cube_map_array
#endif /* GL_OES_texture_cube_map_array*/

#if GL_OES_texture_mirrored_repeat
#endif /* GL_OES_texture_mirrored_repeat*/

#if GL_OES_texture_npot
#endif /* GL_OES_texture_npot*/

#if GL_OES_texture_stencil8
#endif /* GL_OES_texture_stencil8*/

#if GL_OES_texture_storage_multisample_2d_array
void (*map_glTexStorage3DMultisampleOES)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
#endif /* GL_OES_texture_storage_multisample_2d_array*/

#if GL_OES_vertex_array_object
void (*map_glBindVertexArrayOES)(GLuint array);
void (*map_glDeleteVertexArraysOES)(GLsizei n, const GLuint *arrays);
void (*map_glGenVertexArraysOES)(GLsizei n, GLuint *arrays);
GLboolean (*map_glIsVertexArrayOES)(GLuint array);
#endif /* GL_OES_vertex_array_object*/

#if GL_OES_vertex_half_float
#endif /* GL_OES_vertex_half_float*/

#if EGL_ANDROID_framebuffer_target
#endif /* EGL_ANDROID_framebuffer_target*/

#if EGL_ANDROID_image_native_buffer
#endif /* EGL_ANDROID_image_native_buffer*/

#if EGL_ANDROID_native_fence_sync
EGLint (*map_eglDupNativeFenceFDANDROID)(EGLDisplay dpy, EGLSyncKHR sync);
#endif /* EGL_ANDROID_native_fence_sync*/

#if EGL_ANDROID_recordable
#endif /* EGL_ANDROID_recordable*/

#if EGL_BRCM_event_monitor
EGLint (*map_eglGetEventConstantBRCM)(EGLenum pname);
EGLBoolean (*map_eglGetEventTrackInfoBRCM)(EGLint event, EGLint nameStrSize, char *trackNameStr);
EGLBoolean (*map_eglGetEventInfoBRCM)(EGLint event, EGLint nameStrSize, char *nameStr, EGLint *numDataFields);
EGLBoolean (*map_eglGetEventDataFieldInfoBRCM)(EGLint event, EGLint field, EGLint nameStrSize, char *nameStr, EGLBoolean *isSigned, EGLint *numBytes);
EGLBoolean (*map_eglSetEventCollectionBRCM)(EGLenum pname);
EGLBoolean (*map_eglGetEventDataBRCM)(EGLint dataBufferBytes, void *data, EGLint *bytesWritten, EGLBoolean *overflowed, EGLuint64BRCM *timebase);
#endif /* EGL_BRCM_event_monitor*/

#if EGL_BRCM_gl_framebuffer_image
#endif /* EGL_BRCM_gl_framebuffer_image*/

#if EGL_BRCM_image_update_control
EGLBoolean (*map_eglImageUpdateParameterivBRCM)(EGLDisplay dpy, EGLImageKHR image, EGLenum pname, const EGLint *params);
EGLBoolean (*map_eglImageUpdateParameteriBRCM)(EGLDisplay dpy, EGLImageKHR image, EGLenum pname, EGLint param);
#endif /* EGL_BRCM_image_update_control*/

#if EGL_BRCM_performance_counters
EGLint (*map_eglGetPerfCounterConstantBRCM)(EGLenum pname);
EGLBoolean (*map_eglGetPerfCounterGroupInfoBRCM)(EGLint group, EGLint nameStrSize, GLchar *groupNameStr, EGLint *numCounters, EGLint *maxActiveCounters);
EGLBoolean (*map_eglGetPerfCounterInfoBRCM)(EGLint group, EGLint counter, EGLuint64BRCM *minValue, EGLuint64BRCM *maxValue, EGLuint64BRCM *denominator, EGLint nameStrSize, char *nameStr, EGLint unitStrSize, char *unitStr);
EGLBoolean (*map_eglSetPerfCountingBRCM)(EGLenum pname);
EGLBoolean (*map_eglChoosePerfCountersBRCM)(EGLBoolean enable, EGLint group, EGLint numCounters, EGLint *counterList);
EGLBoolean (*map_eglGetPerfCounterDataBRCM)(EGLint dataBufferBytes, void *data, EGLint *bytesWritten, EGLBoolean resetCounters);
#endif /* EGL_BRCM_performance_counters*/

#if EGL_BRCM_platform_nexus
#endif /* EGL_BRCM_platform_nexus*/

#if EGL_EXT_buffer_age
#endif /* EGL_EXT_buffer_age*/

#if EGL_EXT_client_extensions
#endif /* EGL_EXT_client_extensions*/

#if EGL_EXT_create_context_robustness
#endif /* EGL_EXT_create_context_robustness*/

#if EGL_EXT_platform_base
EGLDisplay (*map_eglGetPlatformDisplayEXT)(EGLenum platform, void *native_display, const EGLint *attrib_list);
EGLSurface (*map_eglCreatePlatformWindowSurfaceEXT)(EGLDisplay dpy, EGLConfig config, void *native_window, const EGLint *attrib_list);
EGLSurface (*map_eglCreatePlatformPixmapSurfaceEXT)(EGLDisplay dpy, EGLConfig config, void *native_pixmap, const EGLint *attrib_list);
#endif /* EGL_EXT_platform_base*/

#if EGL_EXT_platform_wayland
#endif /* EGL_EXT_platform_wayland*/

#if EGL_EXT_platform_x11
#endif /* EGL_EXT_platform_x11*/

#if EGL_EXT_protected_content
#endif /* EGL_EXT_protected_content*/

#if EGL_EXT_protected_surface
#endif /* EGL_EXT_protected_surface*/

#if EGL_WL_bind_wayland_display
EGLBoolean (*map_eglBindWaylandDisplayWL)(EGLDisplay dpy, struct wl_display *display);
EGLBoolean (*map_eglUnbindWaylandDisplayWL)(EGLDisplay dpy, struct wl_display *display);
EGLBoolean (*map_eglQueryWaylandBufferWL)(EGLDisplay dpy, struct wl_resource *buffer, EGLint name, EGLint *value);
#endif /* EGL_WL_bind_wayland_display*/

#if GL_BRCM_image_formats
#endif /* GL_BRCM_image_formats*/

#if GL_BRCM_no_perspective
#endif /* GL_BRCM_no_perspective*/

#if GL_BRCM_polygon_mode
void (*map_glPolygonModeBRCM)(GLenum mode);
#endif /* GL_BRCM_polygon_mode*/

#if GL_BRCM_provoking_vertex
void (*map_glProvokingVertexBRCM)(GLenum mode);
#endif /* GL_BRCM_provoking_vertex*/

#if GL_BRCM_sampler_fetch
#endif /* GL_BRCM_sampler_fetch*/

#if GL_BRCM_shader_framebuffer_fetch_depth_stencil
#endif /* GL_BRCM_shader_framebuffer_fetch_depth_stencil*/

#if GL_BRCM_texture_1D
void (*map_glTexImage1DBRCM)(GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
void (*map_glTexSubImage1DBRCM)(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels);
void (*map_glTexStorage1DBRCM)(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width);
#endif /* GL_BRCM_texture_1D*/

#if GL_BRCM_texture_gather_lod
#endif /* GL_BRCM_texture_gather_lod*/

#if GL_BRCM_texture_norm16
#endif /* GL_BRCM_texture_norm16*/

#if GL_BRCM_texture_unnormalised_coords
#endif /* GL_BRCM_texture_unnormalised_coords*/

#if GL_EXT_base_instance
void (*map_glDrawArraysInstancedBaseInstanceEXT)(GLenum mode, GLint first, GLsizei count, GLsizei instancecount, GLuint baseinstance);
void (*map_glDrawElementsInstancedBaseInstanceEXT)(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLuint baseinstance);
void (*map_glDrawElementsInstancedBaseVertexBaseInstanceEXT)(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex, GLuint baseinstance);
#endif /* GL_EXT_base_instance*/

#if GL_EXT_color_buffer_float
#endif /* GL_EXT_color_buffer_float*/

#if GL_EXT_copy_image
void (*map_glCopyImageSubDataEXT)(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth);
#endif /* GL_EXT_copy_image*/

#if GL_EXT_debug_marker
void (*map_glInsertEventMarkerEXT)(GLsizei length, const GLchar *marker);
void (*map_glPushGroupMarkerEXT)(GLsizei length, const GLchar *marker);
void (*map_glPopGroupMarkerEXT)(void);
#endif /* GL_EXT_debug_marker*/

#if GL_EXT_discard_framebuffer
void (*map_glDiscardFramebufferEXT)(GLenum target, GLsizei numAttachments, const GLenum *attachments);
#endif /* GL_EXT_discard_framebuffer*/

#if GL_EXT_draw_buffers_indexed
void (*map_glEnableiEXT)(GLenum target, GLuint index);
void (*map_glDisableiEXT)(GLenum target, GLuint index);
void (*map_glBlendEquationiEXT)(GLuint buf, GLenum mode);
void (*map_glBlendEquationSeparateiEXT)(GLuint buf, GLenum modeRGB, GLenum modeAlpha);
void (*map_glBlendFunciEXT)(GLuint buf, GLenum src, GLenum dst);
void (*map_glBlendFuncSeparateiEXT)(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);
void (*map_glColorMaskiEXT)(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a);
GLboolean (*map_glIsEnablediEXT)(GLenum target, GLuint index);
#endif /* GL_EXT_draw_buffers_indexed*/

#if GL_EXT_draw_elements_base_vertex
void (*map_glDrawElementsBaseVertexEXT)(GLenum mode, GLsizei count, GLenum type, const void *indices, GLint basevertex);
void (*map_glDrawRangeElementsBaseVertexEXT)(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices, GLint basevertex);
void (*map_glDrawElementsInstancedBaseVertexEXT)(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex);
#endif /* GL_EXT_draw_elements_base_vertex*/

#if GL_EXT_geometry_point_size
#endif /* GL_EXT_geometry_point_size*/

#if GL_EXT_geometry_shader
void (*map_glFramebufferTextureEXT)(GLenum target, GLenum attachment, GLuint texture, GLint level);
#endif /* GL_EXT_geometry_shader*/

#if GL_EXT_gpu_shader5
#endif /* GL_EXT_gpu_shader5*/

#if GL_EXT_multi_draw_indirect
void (*map_glMultiDrawArraysIndirectEXT)(GLenum mode, const void *indirect, GLsizei drawcount, GLsizei stride);
void (*map_glMultiDrawElementsIndirectEXT)(GLenum mode, GLenum type, const void *indirect, GLsizei drawcount, GLsizei stride);
#endif /* GL_EXT_multi_draw_indirect*/

#if GL_EXT_multisampled_render_to_texture
void (*map_glRenderbufferStorageMultisampleEXT)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
void (*map_glFramebufferTexture2DMultisampleEXT)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLsizei samples);
#endif /* GL_EXT_multisampled_render_to_texture*/

#if GL_EXT_polygon_offset_clamp
void (*map_glPolygonOffsetClampEXT)(GLfloat factor, GLfloat units, GLfloat clamp);
#endif /* GL_EXT_polygon_offset_clamp*/

#if GL_EXT_primitive_bounding_box
void (*map_glPrimitiveBoundingBoxEXT)(GLfloat minX, GLfloat minY, GLfloat minZ, GLfloat minW, GLfloat maxX, GLfloat maxY, GLfloat maxZ, GLfloat maxW);
#endif /* GL_EXT_primitive_bounding_box*/

#if GL_EXT_protected_textures
#endif /* GL_EXT_protected_textures*/

#if GL_EXT_robustness
GLenum (*map_glGetGraphicsResetStatusEXT)(void);
void (*map_glReadnPixelsEXT)(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void *data);
void (*map_glGetnUniformfvEXT)(GLuint program, GLint location, GLsizei bufSize, GLfloat *params);
void (*map_glGetnUniformivEXT)(GLuint program, GLint location, GLsizei bufSize, GLint *params);
#endif /* GL_EXT_robustness*/

#if GL_EXT_shader_integer_mix
#endif /* GL_EXT_shader_integer_mix*/

#if GL_EXT_shader_io_blocks
#endif /* GL_EXT_shader_io_blocks*/

#if GL_EXT_shader_texture_lod
#endif /* GL_EXT_shader_texture_lod*/

#if GL_EXT_tessellation_point_size
#endif /* GL_EXT_tessellation_point_size*/

#if GL_EXT_tessellation_shader
void (*map_glPatchParameteriEXT)(GLenum pname, GLint value);
#endif /* GL_EXT_tessellation_shader*/

#if GL_EXT_texture_border_clamp
void (*map_glTexParameterIivEXT)(GLenum target, GLenum pname, const GLint *params);
void (*map_glTexParameterIuivEXT)(GLenum target, GLenum pname, const GLuint *params);
void (*map_glGetTexParameterIivEXT)(GLenum target, GLenum pname, GLint *params);
void (*map_glGetTexParameterIuivEXT)(GLenum target, GLenum pname, GLuint *params);
void (*map_glSamplerParameterIivEXT)(GLuint sampler, GLenum pname, const GLint *param);
void (*map_glSamplerParameterIuivEXT)(GLuint sampler, GLenum pname, const GLuint *param);
void (*map_glGetSamplerParameterIivEXT)(GLuint sampler, GLenum pname, GLint *params);
void (*map_glGetSamplerParameterIuivEXT)(GLuint sampler, GLenum pname, GLuint *params);
#endif /* GL_EXT_texture_border_clamp*/

#if GL_EXT_texture_buffer
void (*map_glTexBufferEXT)(GLenum target, GLenum internalformat, GLuint buffer);
void (*map_glTexBufferRangeEXT)(GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size);
#endif /* GL_EXT_texture_buffer*/

#if GL_EXT_texture_cube_map_array
#endif /* GL_EXT_texture_cube_map_array*/

#if GL_EXT_texture_filter_anisotropic
#endif /* GL_EXT_texture_filter_anisotropic*/

#if GL_EXT_texture_format_BGRA8888
#endif /* GL_EXT_texture_format_BGRA8888*/

#if GL_EXT_texture_mirror_clamp_to_edge
#endif /* GL_EXT_texture_mirror_clamp_to_edge*/

#if GL_EXT_texture_sRGB_R8
#endif /* GL_EXT_texture_sRGB_R8*/

#if GL_EXT_texture_sRGB_RG8
#endif /* GL_EXT_texture_sRGB_RG8*/

#if GL_EXT_texture_sRGB_decode
#endif /* GL_EXT_texture_sRGB_decode*/
