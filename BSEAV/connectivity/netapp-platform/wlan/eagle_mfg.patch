diff -BNru eagle_rel_10_10_21_mfg_org/main/src/p2p/p2plib/common/BcmP2PAPI.c eagle_rel_10_10_21_mfg/main/src/p2p/p2plib/common/BcmP2PAPI.c
--- eagle_rel_10_10_21_mfg_org/main/src/p2p/p2plib/common/BcmP2PAPI.c	2015-03-03 14:39:32.000000000 -0500
+++ eagle_rel_10_10_21_mfg/main/src/p2p/p2plib/common/BcmP2PAPI.c	2015-03-04 21:14:18.098578919 -0500
@@ -410,7 +410,7 @@
 /* Create a P2P Group and act as a Group Owner */
 BCMP2P_API BCMP2P_STATUS
 BCMP2PCreateGroup(BCMP2PHandle p2pHandle, unsigned char *name,
-	BCMP2P_BOOL bAutoRestartWPS)
+	BCMP2P_BOOL bAutoRestartWPS, BCMP2P_BOOL bSoftAp)
 {
	p2papi_instance_t* hdl = (p2papi_instance_t*) p2pHandle;

@@ -419,6 +419,8 @@

	p2papi_enable_p2p(hdl, TRUE);

+	hdl->bSoftAp= bSoftAp;
+
	if (createGroupOverrideFn) {
		return createGroupOverrideFn(p2pHandle, name,
			bAutoRestartWPS ? true : false);
@@ -1976,7 +1978,7 @@
			goto exit;
		}
		status = BCMP2PCreateGroup(p2pHandle,
-			persist->ssid, BCMP2P_TRUE);
+			persist->ssid, BCMP2P_TRUE, BCMP2P_FALSE);
		if (status != BCMP2P_SUCCESS) {
			BCMP2PLOG((BCMP2P_LOG_MED, TRUE,
				"BCMP2PCreateGroup failed %d\n", status));
diff -BNru eagle_rel_10_10_21_mfg_org/main/src/p2p/p2plib/common/p2plib_api.h eagle_rel_10_10_21_mfg/main/src/p2p/p2plib/common/p2plib_api.h
--- eagle_rel_10_10_21_mfg_org/main/src/p2p/p2plib/common/p2plib_api.h	2015-03-03 14:39:32.000000000 -0500
+++ eagle_rel_10_10_21_mfg/main/src/p2p/p2plib/common/p2plib_api.h	2015-03-04 21:14:18.122578919 -0500
@@ -836,6 +836,7 @@
	uint8  acBK;
	uint8  acVI;
	uint8  acVO;
+	bool bSoftAp;
 } p2papi_instance_t;


diff -BNru eagle_rel_10_10_21_mfg_org/main/src/p2p/p2plib/common/p2plib_generic_osl.c eagle_rel_10_10_21_mfg/main/src/p2p/p2plib/common/p2plib_generic_osl.c
--- eagle_rel_10_10_21_mfg_org/main/src/p2p/p2plib/common/p2plib_generic_osl.c	2015-03-03 14:39:32.000000000 -0500
+++ eagle_rel_10_10_21_mfg/main/src/p2p/p2plib/common/p2plib_generic_osl.c	2015-03-04 21:14:18.142578919 -0500
@@ -1142,12 +1142,121 @@
	return TRUE;
 }

+/* Steven: Adding API to set an IP Address without calling ifconfig.
+ * The following implementation is copied from NetAppPrivate_P_SetIPSettings()
+ * and NetAppPrivate_P_SetGateWay() in netapp_priv.c from STB */
+#if defined(linux)
+#include <linux/route.h>
+static int p2papi_osl_set_gateway(
+    int                 lPacketSocket,
+    const char          *pIFaceName,
+    int                 tGateway)
+{
+    struct  rtentry     rtent;
+    struct sockaddr_in  *pDest  = (struct sockaddr_in *)&rtent.rt_dst;
+    struct sockaddr_in  *pGW    = (struct sockaddr_in *)&rtent.rt_gateway;
+    struct sockaddr_in  *pMask  = (struct sockaddr_in *)&rtent.rt_genmask;
+
+    memset(&rtent,0,sizeof(struct rtentry));
+    rtent.rt_metric         = 1;
+    rtent.rt_window         = 0;
+    pDest->sin_family       = pGW->sin_family = pMask->sin_family = AF_INET;
+    pDest->sin_addr.s_addr  = tGateway;
+    pGW->sin_addr.s_addr    = 0;
+    pMask->sin_addr.s_addr  = 0xffffffff;
+    rtent.rt_flags          = RTF_UP | RTF_HOST;
+    rtent.rt_dev            = (char *)pIFaceName;
+
+    /* Add route for subnet */
+    if (ioctl(lPacketSocket, SIOCADDRT, &rtent) < 0)
+    {
+        P2PERR3("%s()[%d]: Failed error:%s", __FUNCTION__, __LINE__, strerror(errno));
+        return -1;
+    }
+
+    pDest->sin_addr.s_addr  = 0;
+    pGW->sin_addr.s_addr    = tGateway;
+    pMask->sin_addr.s_addr  = 0;
+    rtent.rt_flags          = RTF_UP | RTF_GATEWAY;
+
+    /* Add route for default gateway */
+    if (ioctl(lPacketSocket, SIOCADDRT, &rtent) < 0)
+    {
+        P2PERR3("%s()[%d]: Failed error:%s", __FUNCTION__, __LINE__, strerror(errno));
+        return -1;
+    }
+    return 0;
+}
+
+
+bool p2papi_osl_set_ap_ipaddr_linux(char *pIFaceName, uint32 ip, uint32 netmask)
+{
+    int                 lPacketSocket = 0;
+    int                 tRetCode = 0;
+    struct ifreq        ifr;
+    struct sockaddr_in  *p;
+
+    if ((lPacketSocket = socket(AF_INET, SOCK_DGRAM, 0)) < 0)
+    {
+        P2PERR2("%s socket(AF_PACKET) Error: %s", __FUNCTION__, strerror(errno));
+        return -1;
+    }
+
+    memset(&ifr, 0, sizeof(ifr));
+    strncpy(ifr.ifr_name, pIFaceName, sizeof(ifr.ifr_name)-1);
+
+    p = (struct sockaddr_in *)&(ifr.ifr_addr);
+
+    /* Set IP Address to 0 to kill all routes, this might fail
+     * if there are no routes so we ignore the error */
+    p->sin_family = AF_INET;
+    p->sin_addr.s_addr = 0;
+    if (ioctl(lPacketSocket, SIOCSIFADDR, &ifr) < 0)
+    {
+        BCMP2PLOG((BCMP2P_LOG_MED, TRUE,"%s(): Not routes in the table", __FUNCTION__));
+    }
+
+    /* IP ADDRESS */
+    p->sin_family = AF_INET;
+    p->sin_addr.s_addr = ip;
+    if ( (ioctl(lPacketSocket, SIOCSIFADDR, &ifr) < 0) && ip )
+    {
+        P2PERR3("%s()[%d]: Failed error:%s", __FUNCTION__, __LINE__, strerror(errno));
+        tRetCode = -1;
+        goto err_out;
+    }
+
+    if (ip)
+    {
+        /* NETMASK ADDRESS */
+        p = (struct sockaddr_in *)&(ifr.ifr_netmask);
+        p->sin_family = AF_INET;
+        p->sin_addr.s_addr = netmask;
+        if (ioctl(lPacketSocket, SIOCSIFNETMASK, &ifr) < 0)
+        {
+            BCMP2PLOG((BCMP2P_LOG_MED, TRUE,"%s(): Could not set netmask", __FUNCTION__));
+        }
+
+        /* GATEWAY ADDRESS */
+        tRetCode = p2papi_osl_set_gateway(lPacketSocket, pIFaceName, (ip & 0x000000ff) + 1);
+    }
+err_out:
+    if (lPacketSocket > 0)
+    {
+        close(lPacketSocket);
+    }
+    return tRetCode;
+}
+#endif
 /* Set a static IP addr/netmask for this AP peer device's P2P network
  * interface.
  */
 bool
 p2papi_osl_set_ap_ipaddr(p2papi_instance_t* hdl, uint32 ip, uint32 netmask)
 {
+#if 1
+	return (p2papi_osl_set_ap_ipaddr_linux(p2papi_osl_get_ap_mode_ifname(hdl), ip, netmask) >= 0);
+#else
 #ifdef TARGETOS_symbian
	extern uint32 osl_ext_set_ap_ipaddr(bool aDhcp, uint32 aIpAddr, uint32 aNetmask);
	extern void socketSetIapId(uint32 aIapId);
@@ -1206,6 +1315,7 @@
	BCMP2PLOG((BCMP2P_LOG_MED, TRUE, "p2papi_osl_set_ap_ipaddr: %s\n", cmd));
	system(cmd);
 #endif /* TARGETENV_android */
+#endif
	return TRUE;
 }

diff -BNru eagle_rel_10_10_21_mfg_org/main/src/p2p/p2plib/common/p2psig/p2plib_connect.c eagle_rel_10_10_21_mfg/main/src/p2p/p2plib/common/p2psig/p2plib_connect.c
--- eagle_rel_10_10_21_mfg_org/main/src/p2p/p2plib/common/p2psig/p2plib_connect.c	2015-03-03 14:39:32.000000000 -0500
+++ eagle_rel_10_10_21_mfg/main/src/p2p/p2plib/common/p2psig/p2plib_connect.c	2015-03-04 21:14:18.142578919 -0500
@@ -3125,7 +3125,7 @@
	 * the random "DIRECT-xy" ssid generated earlier.  This is for the case
	 * if reinvoking a persistent group.
	 */
-	if (hdl->enable_p2p) {
+    if (hdl->enable_p2p && !hdl->bSoftAp) {
		if (memcmp((char*)ssid, "DIRECT-", strlen("DIRECT-")) == 0) {
			strncpy(hdl->credentials.ssid, (char*)ssid,
				sizeof(hdl->credentials.ssid));
diff -BNru eagle_rel_10_10_21_mfg_org/main/src/p2p/p2plib/include/BcmP2PAPI.h eagle_rel_10_10_21_mfg/main/src/p2p/p2plib/include/BcmP2PAPI.h
--- eagle_rel_10_10_21_mfg_org/main/src/p2p/p2plib/include/BcmP2PAPI.h	2015-03-03 14:39:32.000000000 -0500
+++ eagle_rel_10_10_21_mfg/main/src/p2p/p2plib/include/BcmP2PAPI.h	2015-03-04 21:14:18.146578919 -0500
@@ -2464,7 +2464,8 @@
  */
 BCMP2P_API BCMP2P_STATUS  BCMP2PCreateGroup(BCMP2PHandle p2pHandle,
                                             BCMP2P_UINT8 *name,
-                                            BCMP2P_BOOL bWaitForever);
+                                            BCMP2P_BOOL bWaitForever,
+                                            BCMP2P_BOOL bSoftAp);


 /**
diff -BNru eagle_rel_10_10_21_mfg_org/main/src/p2p/p2plib/include/p2plib_osl.h eagle_rel_10_10_21_mfg/main/src/p2p/p2plib/include/p2plib_osl.h
--- eagle_rel_10_10_21_mfg_org/main/src/p2p/p2plib/include/p2plib_osl.h	2015-03-03 14:39:32.000000000 -0500
+++ eagle_rel_10_10_21_mfg/main/src/p2p/p2plib/include/p2plib_osl.h	2015-03-04 21:14:18.146578919 -0500
@@ -387,6 +387,14 @@
 bool p2papi_osl_dhcp_end_server(struct p2papi_instance_s* hdl, void *dhcpd_hdl);


+/* Steven: Adding API to set an IP Address without calling ifconfig.
+ * The following implementation is copied from NetAppPrivate_P_SetIPSettings()
+ * and NetAppPrivate_P_SetGateWay() in netapp_priv.c from STB */
+#if defined(linux)
+bool p2papi_osl_set_ap_ipaddr_linux(char *pIFaceName, uint32 ip, uint32 netmask);
+#endif
+
+
 /*
  * Logging definitions
  */
diff -BNru eagle_rel_10_10_21_mfg_org/main/src/p2p/p2plib/linux/sampleapp/p2p_app.c eagle_rel_10_10_21_mfg/main/src/p2p/p2plib/linux/sampleapp/p2p_app.c
--- eagle_rel_10_10_21_mfg_org/main/src/p2p/p2plib/linux/sampleapp/p2p_app.c	2015-03-03 14:39:32.000000000 -0500
+++ eagle_rel_10_10_21_mfg/main/src/p2p/p2plib/linux/sampleapp/p2p_app.c	2015-03-04 21:14:18.158578919 -0500
@@ -1692,7 +1692,7 @@
					(char *)persist.pmk,
					(char *)persist.passphrase);
				BCMP2PCreateGroup(p2papp_dev_hdl,
-					invite_req.groupSsid, TRUE);
+					invite_req.groupSsid, TRUE, FALSE);
			}
			else {
				p2papi_log(BCMP2P_LOG_MED, TRUE,
@@ -3446,7 +3446,7 @@
	}

	p2papi_log(BCMP2P_LOG_MED, TRUE, "p2papp_create_group:Create Group: %s\n", persist_go_ssid);
-	status = BCMP2PCreateGroup(p2papp_dev_hdl, (unsigned char*)persist_go_ssid, TRUE);
+	status = BCMP2PCreateGroup(p2papp_dev_hdl, (unsigned char*)persist_go_ssid, TRUE, FALSE);

	if (status == BCMP2P_SUCCESS)
	{
diff -BNru eagle_rel_10_10_21_mfg_org/main/src/shared/nvram_ro.c eagle_rel_10_10_21_mfg/main/src/shared/nvram_ro.c
--- eagle_rel_10_10_21_mfg_org/main/src/shared/nvram_ro.c	2015-03-03 14:39:33.000000000 -0500
+++ eagle_rel_10_10_21_mfg/main/src/shared/nvram_ro.c	2015-03-04 21:14:18.158578919 -0500
@@ -407,8 +407,11 @@
	char *nvram_buf = *nvramp;
	void	*nvram_fp = NULL;
	int nv_len = 0, ret = 0, i = 0, len = 0;
+	char cTmp[256];

-	nvram_fp = (void*)osl_os_open_image("nvram.txt");
+	snprintf(cTmp, sizeof(cTmp), "%s/nvram.txt", NVRAM_TARGET_DIR);
+
+	nvram_fp = (void*)osl_os_open_image(cTmp);
	if (nvram_fp != NULL) {
		while ((nv_len = osl_os_get_image_block(nvram_buf, MAXSZ_NVRAM_VARS, nvram_fp)))
			len = nv_len;
diff -BNru eagle_rel_10_10_21_mfg_org/main/src/wl/config/wl.mk eagle_rel_10_10_21_mfg/main/src/wl/config/wl.mk
--- eagle_rel_10_10_21_mfg_org/main/src/wl/config/wl.mk	2015-03-03 14:39:31.000000000 -0500
+++ eagle_rel_10_10_21_mfg/main/src/wl/config/wl.mk	2015-03-04 21:14:18.158578919 -0500
@@ -2779,8 +2779,7 @@
		WLFLAGS += -DSTBLINUX
		WLFLAGS += -DSTB
		WLFLAGS += -DBCM47XX
-		WLFLAGS += -DBCMEXTNVM
-		WLFILES_SRC += src/shared/bcmsromio.c
+		WLFLAGS += -DNVRAM_TARGET_DIR="\"$(NVRAM_TARGET_DIR)\""
	endif
 endif

diff -BNru eagle_rel_10_10_21_mfg_org/main/src/wl/sys/wlc_cfg.h eagle_rel_10_10_21_mfg/main/src/wl/sys/wlc_cfg.h
--- eagle_rel_10_10_21_mfg_org/main/src/wl/sys/wlc_cfg.h	2015-03-03 14:38:55.000000000 -0500
+++ eagle_rel_10_10_21_mfg/main/src/wl/sys/wlc_cfg.h	2015-03-04 21:14:52.034578646 -0500
@@ -132,12 +132,12 @@
 #endif /* WLRXEXTHDROOM */

 /* **** Core type/rev defaults **** */
-#define D11_DEFAULT	0xffffffb0	/* Supported  D11 revs: 4, 5, 7-31 */
+#define D11_DEFAULT	0x00000000	/* Supported  D11 revs: 4, 5, 7-31 */
 #ifdef UNRELEASEDCHIP
 #define D11_DEFAULT2	0x007fff87	/* Supported  D11 revs: 32-34, 39, 40-54 */
 #define D11_DEFAULT3	0x00000001	/* Supported  D11 revs: 64 */
 #else
-#define D11_DEFAULT2	0x000bff07	/* Supported  D11 revs: 32-34, 40-49, 51 */
+#define D11_DEFAULT2	0x00000000	/* Supported  D11 revs: 32-34, 40-49, 51 */
 #define D11_DEFAULT3	0x00000001	/* Supported  D11 revs: 64 */
 #endif  /* UNRELEASEDCHIP */

diff -BNru eagle_rel_10_10_21_mfg_org/main/src/wps/wpsapi/common/include/wps_api_osl.h eagle_rel_10_10_21_mfg/main/src/wps/wpsapi/common/include/wps_api_osl.h
--- eagle_rel_10_10_21_mfg_org/main/src/wps/wpsapi/common/include/wps_api_osl.h	2015-03-03 14:39:34.000000000 -0500
+++ eagle_rel_10_10_21_mfg/main/src/wps/wpsapi/common/include/wps_api_osl.h	2015-03-04 21:14:18.158578919 -0500
@@ -61,7 +61,7 @@
 extern char *wps_osl_get_short_adapter_name();
 extern int wps_osl_get_mac(uint8 *mac);
 extern char *wps_osl_get_ssid();
-extern uint32 wps_osl_init(void *cb_ctx, void *cb, const char *adapter_id);
+extern uint32 wps_osl_init(void *cb_ctx, void *cb, const char *adapter_id, const char* bridge_id);
 extern void wps_osl_deinit();
 extern void wps_osl_abort();
 extern uint32 wps_osl_setup_802_1x(uint8 *bssid);
diff -BNru eagle_rel_10_10_21_mfg_org/main/src/wps/wpsapi/common/include/wps_sdk.h eagle_rel_10_10_21_mfg/main/src/wps/wpsapi/common/include/wps_sdk.h
--- eagle_rel_10_10_21_mfg_org/main/src/wps/wpsapi/common/include/wps_sdk.h	2015-03-03 14:39:34.000000000 -0500
+++ eagle_rel_10_10_21_mfg/main/src/wps/wpsapi/common/include/wps_sdk.h	2015-03-04 21:14:18.178578919 -0500
@@ -303,11 +303,12 @@
  *			serial Number = "5678"
  */
 #ifdef WFA_WPS_20_TESTBED
-BCM_WPSAPI bool wps_api_open(const char *adapter_id, void *cb_ctx, fnWpsProcessCB callback,
-	wps_devinf *devinf, wps20_testbed_inf *wps20_tbinf, bool ap_pin, bool version2);
+BCM_WPSAPI bool wps_api_open(const char *adapter_id, const char* bridge_id, void *cb_ctx,
+	fnWpsProcessCB callback, wps_devinf *devinf,
+	wps20_testbed_inf *wps20_tbinf, bool ap_pin, bool version2);
 #else
-BCM_WPSAPI bool wps_api_open(const char *adapter_id, void *cb_ctx, fnWpsProcessCB callback,
-	wps_devinf *devinf, bool ap_pin, bool version2);
+BCM_WPSAPI bool wps_api_open(const char *adapter_id, const char* bridge_id, void *cb_ctx,
+	fnWpsProcessCB callback, wps_devinf *devinf, bool ap_pin, bool version2);
 #endif


diff -BNru eagle_rel_10_10_21_mfg_org/main/src/wps/wpsapi/common/wps_api.c eagle_rel_10_10_21_mfg/main/src/wps/wpsapi/common/wps_api.c
--- eagle_rel_10_10_21_mfg_org/main/src/wps/wpsapi/common/wps_api.c	2015-03-03 14:39:34.000000000 -0500
+++ eagle_rel_10_10_21_mfg/main/src/wps/wpsapi/common/wps_api.c	2015-03-04 21:14:18.182578919 -0500
@@ -734,11 +734,11 @@
 /* wps_api_open function must be called first, before any other wps api call */
 BCM_WPSAPI bool
 #ifdef WFA_WPS_20_TESTBED
-wps_api_open(const char *adapter_id, void *cb_ctx, fnWpsProcessCB callback, wps_devinf *devinf,
-	wps20_testbed_inf *wps20_tbinf, bool ap_pin, bool b_v2)
+wps_api_open(const char *adapter_id, const char* bridge_id, void *cb_ctx, fnWpsProcessCB callback,
+	wps_devinf *devinf, wps20_testbed_inf *wps20_tbinf, bool ap_pin, bool b_v2)
 #else
-wps_api_open(const char *adapter_id, void *cb_ctx, fnWpsProcessCB callback, wps_devinf *devinf,
-	bool ap_pin, bool b_v2)
+wps_api_open(const char *adapter_id, const char* bridge_id, void *cb_ctx,
+	fnWpsProcessCB callback, wps_devinf *devinf, bool ap_pin, bool b_v2)
 #endif /* WFA_WPS_20_TESTBED */
 {
	TUTRACE((TUTRACE_INFO, "Entered : wps_api_open\n"));
@@ -796,7 +796,7 @@
	wps_api_status_cb(&wps_api_wksp->cb, wps_api_wksp->cb_ctx, WPS_STATUS_INIT, NULL);

	/* WPS hook init for adapter and led (HW) */
-	if (wps_hook_init(cb_ctx, callback, adapter_id) == false) {
+	if (wps_hook_init(cb_ctx, callback, adapter_id, bridge_id) == false) {
		TUTRACE((TUTRACE_ERR, "wps_api_open : Failed to initial wireless adapter.\n"));
		return false;
	}
diff -BNru eagle_rel_10_10_21_mfg_org/main/src/wps/wpsapi/common/wps_api_priv.h eagle_rel_10_10_21_mfg/main/src/wps/wpsapi/common/wps_api_priv.h
--- eagle_rel_10_10_21_mfg_org/main/src/wps/wpsapi/common/wps_api_priv.h	2015-03-03 14:39:34.000000000 -0500
+++ eagle_rel_10_10_21_mfg/main/src/wps/wpsapi/common/wps_api_priv.h	2015-03-04 21:14:18.182578919 -0500
@@ -35,7 +35,7 @@

 extern bool wps_hook_create_profile(const struct _wps_credentials *credentials);
 extern int wps_hook_get_mac(uint8 *mac);
-extern bool wps_hook_init(void *cb_ctx, void *cb, const char *adapter_id);
+extern bool wps_hook_init(void *cb_ctx, void *cb, const char *adapter_id, const char* bridge_id);
 extern void wps_hook_deinit();
 extern void wps_hook_abort();
 extern uint32 wps_hook_setup_802_1x(char *bssid);
diff -BNru eagle_rel_10_10_21_mfg_org/main/src/wps/wpsapi/common/wps_hooks.c eagle_rel_10_10_21_mfg/main/src/wps/wpsapi/common/wps_hooks.c
--- eagle_rel_10_10_21_mfg_org/main/src/wps/wpsapi/common/wps_hooks.c	2015-03-03 14:39:34.000000000 -0500
+++ eagle_rel_10_10_21_mfg/main/src/wps/wpsapi/common/wps_hooks.c	2015-03-04 21:14:18.182578919 -0500
@@ -61,9 +61,9 @@

 /* Initial HW related */
 bool
-wps_hook_init(void *cb_ctx, void *cb, const char *adapter_id)
+wps_hook_init(void *cb_ctx, void *cb, const char *adapter_id, const char * bridge_id)
 {
-	uint32 retVal = wps_osl_init(cb_ctx, cb, adapter_id);
+	uint32 retVal = wps_osl_init(cb_ctx, cb, adapter_id, bridge_id);
	return ((retVal == WPS_OSL_SUCCESS) ? true : false);
 }

diff -BNru eagle_rel_10_10_21_mfg_org/main/src/wps/wpsapi/linux/wps_api_tester.c eagle_rel_10_10_21_mfg/main/src/wps/wpsapi/linux/wps_api_tester.c
--- eagle_rel_10_10_21_mfg_org/main/src/wps/wpsapi/linux/wps_api_tester.c	2015-03-03 14:39:34.000000000 -0500
+++ eagle_rel_10_10_21_mfg/main/src/wps/wpsapi/linux/wps_api_tester.c	2015-03-04 21:14:18.242578918 -0500
@@ -343,11 +343,11 @@

	/* 2. Open WPS */
 #ifdef WFA_WPS_20_TESTBED
-	bRet = wps_api_open(STRP(wps->ifname), NULL, _wps_join_callback,
+	bRet = wps_api_open(STRP(wps->ifname), STRP(wps->brname), NULL, _wps_join_callback,
		_wps_my_devinf(&my_devinf, wps->transport_uuid), &wps->wps20_tbinf, wps->b_appin,
		wps->b_v2);
 #else
-	bRet = wps_api_open(STRP(wps->ifname), NULL, _wps_join_callback,
+	bRet = wps_api_open(STRP(wps->ifname), STRP(wps->brname), NULL, _wps_join_callback,
		_wps_my_devinf(&my_devinf, wps->transport_uuid), wps->b_appin, wps->b_v2);
 #endif
	if (bRet == FALSE) {
diff -BNru eagle_rel_10_10_21_mfg_org/main/src/wps/wpsapi/linux/wps_api_tester.h eagle_rel_10_10_21_mfg/main/src/wps/wpsapi/linux/wps_api_tester.h
--- eagle_rel_10_10_21_mfg_org/main/src/wps/wpsapi/linux/wps_api_tester.h	2015-03-03 14:39:34.000000000 -0500
+++ eagle_rel_10_10_21_mfg/main/src/wps/wpsapi/linux/wps_api_tester.h	2015-03-04 21:14:18.242578918 -0500
@@ -30,6 +30,7 @@
	char bssid[6];
	char ssid[33];
	char ifname[16];
+	char brname[16];
	char def_dhclient_pf[256];
	char ip_addr[16];
	char dhcp_cmd[256];
diff -BNru eagle_rel_10_10_21_mfg_org/main/src/wps/wpsapi/linux/wps_api_ui.c eagle_rel_10_10_21_mfg/main/src/wps/wpsapi/linux/wps_api_ui.c
--- eagle_rel_10_10_21_mfg_org/main/src/wps/wpsapi/linux/wps_api_ui.c	2015-03-03 14:39:34.000000000 -0500
+++ eagle_rel_10_10_21_mfg/main/src/wps/wpsapi/linux/wps_api_ui.c	2015-03-04 21:14:18.242578918 -0500
@@ -975,6 +975,11 @@
			val = argv[index++]; argc--;
			wps_strncpy(wps->ifname, val, sizeof(wps->ifname));
		}
+		else if (!strcmp(cmd, "-br")) {
+			WPS_ARGC_CHECK();
+			val = argv[index++]; argc--;
+			wps_strncpy(wps->brname, val, sizeof(wps->brname));
+		}
		else if (!strcmp(cmd, "-bssid")) {
			WPS_ARGC_CHECK();
			/*
diff -BNru eagle_rel_10_10_21_mfg_org/main/src/wps/wpsapi/linux/wps_linux_osl.c eagle_rel_10_10_21_mfg/main/src/wps/wpsapi/linux/wps_linux_osl.c
--- eagle_rel_10_10_21_mfg_org/main/src/wps/wpsapi/linux/wps_linux_osl.c	2015-03-03 14:39:34.000000000 -0500
+++ eagle_rel_10_10_21_mfg/main/src/wps/wpsapi/linux/wps_linux_osl.c	2015-03-04 21:14:18.242578918 -0500
@@ -93,6 +93,7 @@
 WPS_OSL_T *wps_osl_wksp = NULL;

 static char ifname_lx[IFNAMSIZ] = "";
+static char ifname_br[IFNAMSIZ] = "";
 static uint8 peer_mac[6] = {0};
 static int eap_fd = -1; /* descriptor to raw socket  */
 static int ifindex = -1; /* interface index */
@@ -158,6 +159,12 @@

	ifr.ifr_name[0] = '\0';

+	if (ifname_br[0] != '\0')
+    {
+	    strncpy(ifname, ifname_br, ifname_len);
+	    return 0;
+    }
+
	if (!(fp = fopen(proc_net_dev, "r")))
		return ret;

@@ -630,7 +637,7 @@
		memcpy(peer_mac, bssid, 6);

	memset(&ifr, 0, sizeof(ifr));
-	wps_strncpy(ifr.ifr_name, ifname_lx, sizeof(ifr.ifr_name));
+	wps_strncpy(ifr.ifr_name, ifname_br[0] ? ifname_br : ifname_lx, sizeof(ifr.ifr_name));

	err = ioctl(eap_fd, SIOCGIFINDEX, &ifr);
	if (err < 0) {
@@ -653,6 +660,16 @@
		return WPS_OSL_ERROR;
	}

+	wps_strncpy(ifr.ifr_name, ifname_lx, sizeof(ifr.ifr_name));
+	err = ioctl(eap_fd, SIOCGIFINDEX, &ifr);
+	if (err < 0) {
+		WPS_DEBUG(("Get interface index failed\n"));
+		close(eap_fd);
+		eap_fd = -1;
+		return WPS_OSL_ERROR;
+	}
+	ifindex  = ifr.ifr_ifindex;
+
	return WPS_OSL_SUCCESS;
 }

@@ -786,7 +803,7 @@
	}

	memset(&ifr, 0, sizeof(ifr));
-	wps_strncpy(ifr.ifr_name, ifname_lx, sizeof(ifr.ifr_name));
+	wps_strncpy(ifr.ifr_name, ifname_br[0] ? ifname_br : ifname_lx, sizeof(ifr.ifr_name));

	/* open socket to kernel */
	if ((s = socket(AF_INET, SOCK_DGRAM, 0)) < 0)
@@ -840,7 +857,7 @@
 }

 uint32
-wps_osl_init(void *cb_ctx, void *cb, const char *adapter_id)
+wps_osl_init(void *cb_ctx, void *cb, const char *adapter_id, const char* bridge_id)
 {
	char *ifname = (char*) adapter_id;
	char dyn_name[IFNAMSIZ];
@@ -869,6 +886,15 @@
		ifname = dyn_name;
	}

+	if (bridge_id != NULL)	{
+	    wps_strncpy(ifname_br, bridge_id, sizeof(ifname_br));
+	}
+
+	if (bridge_id != NULL)
+	{
+	    wps_strncpy(ifname_br, bridge_id, sizeof(ifname_br));
+	}
+
	/* Save this specific interface for further use */
	wps_strncpy(ifname_lx, ifname, sizeof(ifname_lx));

@@ -925,6 +951,10 @@
		free(wps_osl_wksp);
		wps_osl_wksp = NULL;
	}
+
+	memset(ifname_br, 0, sizeof(ifname_br));
+	memset(ifname_lx, 0, sizeof(ifname_lx));
+
 }

 void
@@ -1446,4 +1476,6 @@
				"/sbin/dhclient -pf %s", wps_osl_wksp->def_dhclient_pf);
		}
	}
+    memset(ifname_br, 0, sizeof(ifname_br));
+    memset(ifname_lx, 0, sizeof(ifname_lx));
 }
