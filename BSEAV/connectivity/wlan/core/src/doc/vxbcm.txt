
vxWorks notes for Broadcom Internal Use                                9-16-02

Copyright 2008-2011, Broadcom Corporation


Notes on vxWorks that are for internal use only.


-----------------------------------------------------
WindRiver contacts

 David Cooper
 Sr. Technical Specialist - Alliance Group
 Voice: 440-248-4977, Fax: 440-248-3060,  email:
 david.cooper@windriver.com

   Previously:
   Support Engineer   Hubert Wong (408) 542-1776  hubert.wong@windriver.com

 Network Support Engineer   Prasanna Gopalsamy  (510) 749-2686
   pgopalsa@windriver.com

 THG Development Engineer   Aswath Mohan 408 542 1891. (work)
                                         408 623 3502 (cell)
   aswath.mohan@windriver.com

 Sales rep          rick.james@windriver.com

-----------------------------------------------------
Password for Windsurf, etc.:

 www.wrs.com/windsurf
  login:  bcmhnd
  passwd: april1
          47xx     (previously)

 z:\projects\hnd\archives\windriver\readme.txt

-----------------------------------------------------
PPPoE:

 pppoe on R4 vx is a client.  It is available on vx router, but not vx BSP.

 This section details out the setup and testing of pppoe.

 Current kludge for pppoe:
   Currently there is an incompatibility problem between our ethernet driver
 and PPPoE.  We found that when PPPoE running on our R4 configured
 as client receives the PADO (discovery offer) packet from the server,
 it reuses the packet to transmit the PADR (discovery request) packet.
 This transmit hangs our ethernet driver.
 The reason is that PPPoE, unlike other protocols (arp, tcp, etc.),
 uses "the same receive thread to transmit" the PADR packet.
 The transmit causes our ethernet driver to deadlock on the semaphore
 which was acquired by the previous receive.
   Before you start R4 to handshake PPPoE with PPPoE server, you need to compile
 with the following kludge in et_vx.c.  If you don't run PPPoE, there is no need
 to apply this kludge.  The kludge is to briefly unlock before sending up 
 packet to protocol:
   edit src\et\sys\et_vx.c; around line 725 in the et_sendup() function
    Surround
     END_RCV_RTN_CALL(&et->endobj, m);
    like
     ET_UNLOCK(et);
     END_RCV_RTN_CALL(&et->endobj, m);
     ET_LOCK(et);
                                                                      corporate
                                                                         net
                                                       t5, linux          |
    m5, linux         R4 (PPPoE client)                (PPPoE server)     |
 +---------------+  +------------------------+       +--------------------+---+
 |               |  | et0                et1 |       | eth1 (4413)       eth0 |
 | 192.168.1.100 +--+ 192.168.1.1 10.19.16.31+-------+10.19.16.32  10.19.13.53|
 | dhcp assigned |  |                        |       |           dhcp assigned|
 +---------------+  +------------------------+ pppoe +------------------------+
                                             .........
                                   10.19.13.187      10.19.13.188

     Note: 10.19.13.187 and .188 addresses chosen for ppp
           must be in the same 10.19.13.0 subnet (corporate net) for
           ppp proxyarp to work.

R4 setup:
 pmon
  set wan_proto pppoe    # temporary flag to turn pppoe on;
                         # "unset wan_proto" to erase
  set pppoe_username dk  # optional: pppoe username given you by your ISP
  set pppoe_passwd supersmash  # optional: pppoe password given you by your ISP
  set nvram                    # to save into nvram

t5 (PPPoE server on linux) setup:

 Performed the procedure of the "Setup kernel mode PPPoE on Linux" section.

 # pppd options file: as server, chap authentication, ip addr. at this end.
 /etc/ppp/options
  plugin pppoe.so

  # As server
  pppoe_server
  mru 1492
  mtu 1492
  +chap
  proxyarp
  10.19.13.188:

 # chap secrets file: client name, any server, secret, ip addr. at client end.
 /etc/ppp/chap-secrets
  "vxTarget"  *  "vxTarget"  10.19.13.187

 # boot init. of eth1 with static ip addr
 /etc/sysconfig/network-scripts/ifcfg-eth1
  DEVICE=eth1
  BOOTPROTO=static
  IPADDR=10.19.16.32
  NETMASK=255.255.255.0
  ONBOOT=yes

 # boot init. of eth0 with dhcp ip addr
 /etc/sysconfig/network-scripts/ifcfg-eth0
  DEVICE=eth0
  BOOTPROTO=dhcp
  ONBOOT=yes

 # ip forwarding
 echo 1 > /proc/sys/net/ipv4/ip_forward
   # adjust the line in /etc/sysctl.conf to read:
 net.ipv4.ip_forward = 1

m5 (linux) setup:

 Setup its eth0 with dhcp ip addr.
=> Unfortunately dhcp assignment for Linux host on R4 LAN side doesn't work.
   So manually set ip addr:
     ifconfig eth0 192.168.1.100 netmask 255.255.255.0 up
 Ensure default route to gateway 192.168.1.1, otherwise type:
   route add default gw 192.168.1.1


Establish ppp session:

 Start pppoe server on t5:
  modprobe pppoe  # module load pppoe; ignore /etc/modules.conf is more recent
                  # warning.
                  # => Unfortunately didn't work: boot init. of pppoe module 
                    on eth1
                    /etc/modules.conf
                     alias net-pf-24 pppoe

  lsmod           # list: shows pppoe, pppox and ppp_generic are loaded
  ifconfig eth1 promisc        # set promiscuous, if necessary
  pppd eth1 debug nodetach     # start pppd which will be server because of
                               # content of /etc/ppp/options

 Start pppoe client on R4:
  power R4 up, and as its vx comes up, pppoe client is automatically started.

 pppd with its debug option will print the ppp handshakings.
 On R4, "ifShow" will display:
 - the new "ppp1" entry showing 
    Internet address: 10.19.13.187            or local ip addr (its perspective)
    Destination Internet address: 10.19.13.188
          Note that the underlying et1 for ppp1 is not ipAttach'd and not 
          listed in ifShow.
 - mirror0

 A quick test of pinging through ppp path:
  R4:
   ping "10.19.13.188"
   ctrl-C            # to kill ping
   ifShow            # shows equal number of "packets received" and
                     # "packets sent" through ppp


ping through ppp path:

 t5:

[root@t5 /root]# route -n
Kernel IP routing table
Destination     Gateway         Genmask         Flags Metric Ref    Use Iface
10.19.13.187    0.0.0.0         255.255.255.255 UH    0      0        0 ppp0
10.19.13.0      0.0.0.0         255.255.255.0   U     0      0        0 eth0
10.19.16.0      0.0.0.0         255.255.255.0   U     0      0        0 eth1
127.0.0.0       0.0.0.0         255.0.0.0       U     0      0        0 lo
0.0.0.0         10.19.13.1      0.0.0.0         UG    0      0        0 eth0

      Note the host route to peer 10.19.13.187 through ppp0 interface.
      Also note the default route through gw 10.19.13.1

  ping 216.115.108.245               # able to ping yahoo.com

 R4:
-> routeShow

ROUTE NET TABLE
destination      gateway              flags  Refcnt  Use           Interface
----------------------------------------------------------------------------
0.0.0.0          10.19.13.188         3      0       6             ppp1
192.168.1.0      192.168.1.1          101    0       0             mirror0
----------------------------------------------------------------------------

ROUTE HOST TABLE
destination      gateway              flags  Refcnt  Use           Interface
----------------------------------------------------------------------------
10.19.13.187     127.0.0.1            5      0       0             lo0
10.19.13.188     10.19.13.187         5      1       2             ppp1
127.0.0.1        127.0.0.1            5      1       0             lo0
----------------------------------------------------------------------------
value = 77 = 0x4d = 'M'
->
      Note the default route through gw 10.19.13.188

  ping "216.115.108.245"      # success
  ifShow            # shows equal number of "packets received" and
                    # "packets sent" through ppp

 m5:
  ping 216.115.108.245        # success
   R4:
    ifShow            # shows equal number of "packets received" and
                      # "packets sent" through ppp
  Able to surf 216.115.108.245 (or www.yahoo.com); download file.
  If m5 was a NT/Win2k machine, run "ipconfig /all" to verify dns servers are
  received by m5.

 t5:
  ttcp -rsfm -n100

 m5:
  ttcp -tsfm -n100 10.19.13.188

 ifShow on R4 shows ppp1:
    16586 octets received
   850474 octets sent
   819200 tx'd by ttcp of m5.

For debug traces:
 edit target\config\bcm47xx\makevx
  change
   $(MAKE) -f pppoe.mk CPU=$(CPU) TOOL=$(TOOL) all
  to
   $(MAKE) -f pppoe.mk CPU=$(CPU) TOOL=$(TOOL) \
           "EXTRA_DEFINE=-g -DPPP_DEBUG -DPPPOE_DEBUG" all
  
-----------------------------------------------------
Setup kernel mode PPPoE on Linux

 We use the kernel mode PPPoE on Linux developed by Michal Ostrowski.
 His web page below describes it:

   http://www.shoshin.uwaterloo.ca/~mostrows/

 Ostrowski's PPPoE can easily be invoked either as a client or a server after
 changing the contents of /etc/ppp/options and /etc/ppp/pap-secrets files.

 The setup requires:

 - the build of the two loadable modules: pppoe.o and pppox.o, which are already
   available in 2.4.x kernel but not compiled in as default.

 - the build of pppd of ppp-2.4.1 which is pointed to by Ostrowski's web page as

     ppp-2.4.1-pppoe4.tgz
 

Procedure:

 RedHat 7.1 install
  kernel development package

 Get RH 7.1 Customization Guide from www.redhat.com
  Chapter 16 Building a Custom Kernel

 uname -r         # shows 2.4.2-2 kernel
 lsmod            # lists modules; no pppox nor pppoe

 rpm -q kernel-headers     # this package is present
 rpm -q kernel-source      # this package is present

 cd /usr/src/linux-2.4
 # Caution: if you have .config file that you want to save, save it before
 # running "make mrproper" which wipes out .config
 make mrproper           # run only once for a freshly installed RedHat
 make oldconfig          # get current kernel config
  # prompted with:
  CONFIG_E820_PROC  N
  3GB               3GB
  CONFIG_TUX        N
  CONFIG_SCSI_AIC7XXX_OLD  N
  CONFIG_SCSI_QLOGIC_QLA2100 N
  CONFIG_FUSION     N
  CONFIG_E100       N
  CONFIG_E1000      N
  CONFIG_NET_BROADCOM  N

 vi .config
  CONFIG_SCSI_AIC7XXX=y
  CONFIG_NET_VENDOR_3COM=y
  CONFIG_VORTEX=y
                # too bad: forgot to enable VFAT (floppy).

 make menuconfig
  # Under "Code maturity level options", you will find
  y Prompt for developmental and/or incomplete code/drivers

  # Under "Network device support", you will find
  < > Dummy net driver support
  Ethernet (10 or 100Mbit)
   [ ] EISA, VLB, PCI and on board controllers
  <M> PPP (point-to-point protocol) support
  <M> PPP over Ethernet (EXPERIMENTAL)

  # floppy
  <*> DOS_FAT fs support
  <*>   MSDOS fs support
  <*>   VFAT...

  Save and Exit          # generates .config

 make dep
 make clean
 vi Makefile
  # change
  EXTRAVERSION = -2
  # to
  EXTRAVERSION = -2-pppoe
 make bzImage
 make modules    # generates /usr/src/linux-2.4/drivers/net/pppoe.o
                                                            pppox.o
 make modules_install      
  # moves pppoe.o and pppox.o from the above path to
  # /lib/modules/linux-2.4.2-2-pppoe/kernel/drivers/net

 vi /etc/modules.conf
  # add ### to comment out
        alias scsi_hostadapter aic7xxx
  # because aic7xxx is configured as a module, but a compiled in driver.
 /sbin/mkinitrd /boot/initrd-2.4.2-2-pppoe.img 2.4.2-2-pppoe
                               # generates /boot/initrd-2.4.2-2-pppoe.img

 make install
                               # generates /boot/vmlinuz-2.4.2-2-pppoe
 vi /etc/lilo.conf
  # Add entry for vmlinuz-2.4.2-2-pppoe
  # and label it as linux-pppoe
 /sbin/lilo

 # Per instructions of
 # www.shoshin.uwaterloo.ca/~mostrows/
 
  add the line "alias net-pf-24 pppoe" to /etc/modules.conf

  ensure /dev/ppp    # otherwise
                       mknod /dev/ppp c 108 0

  # copy over ppp-2.4.1-pppoe4.tgz
   cd /tmp
   mount /mnt/floppy
   cp /mnt/floppy/ppp-2.4.1-pppoe4.tgz .
   tar xvzf ppp-2.4.1-pppoe4.tgz

  # Per instructions of ppp-2.4.1.pppoe4/README.linux
  cd ppp-2.4.1.pppoe4
  ./configure
  make 
  make install       # updated /usr/sbin/pppd 

 reboot
 # Then select linux-pppoe to boot.

 # Ready to let this machine to participate in PPPoE testing.

-----------------------------------------------------
CrossWind (gdb) debugger notes                           11/28/01

Somewhat successful with CrossWind on NIGHTLY\vx-router_011126_0\release\bcm47xx

- Target server printed lack of cache message, and I bumped up cache from the
  default 1MB to 8MB, and relaunching target server was then fine.

- Added wdbSystemSuspend() per "Running CrossWind... PART II" section of 
  vxNotes.txt because wanted to intercept before network initialization.

- Successfully did breakpoint at router_init, and then stepped.
  But the caveat is that gdb command "s" inside ipDetach() caused CrossWind to
  hang; clicking "Step Over" button to step over ipDetach was successful; 
  although gdb command "s" inside et_send and et_log was working fine.
  Anyway, the kludge seems to be that for vxWorks routines (e.g. ipDetach), you
  should not use gdb command "s"; use "Step Over" button or gdb command "c".

- Also, encountered dialog box asserting et_vx.c (as an example) is not found;
  just clicked the cancel button and was able to go on with debugging.
  Assembly code pops up instead of C source code.

When CrossWind went bad...
- Target server most often would fail to be terminated by its "shutdown" button.
  Use NT/Win2k's Task Manager to end the tgtsvr.exe process.
  Alternately, log off and target server would surely be terminated.

- When WindShell or CrossWind never want to terminate, close Tornado.

- If Tornado failed to close/quit, use Task Manager to end it.

- When Tornado crashes, target server would most likely linger.  Try the above
  methods to terminate target server.

-----------------------------------------------------
END.
