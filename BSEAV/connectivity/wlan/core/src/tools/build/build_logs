#!/bin/bash

usage() {
    echo >&2 "Usage: $0 [-r <tag>] [-b <brand>] [-e]"
    echo >&2 "   -r    Specify release tag (e.g. FALCON_BRANCH_5_90)"
    echo >&2 "   -b    Only check one brand (e.g. linux-internal-dongle)"
    echo >&2 "   -e    Only show brands with errors"
    echo >&2 "   -l    Long (show full build dir names)"
    exit 1
}

BUILDLOCS="\
	/projects/hnd_swbuild/build_linux \
	/projects/hnd_swbuild/build_window \
	/projects/hnd_swbuild/build_netbsd \
	/projects/hnd_swbuild/build_macos \
	/projects/hnd_swbuild/build_dslcpe"

TAG="NIGHTLY"
ERR=

while [ -n "$1" ]; do
    case "$1" in
    -r) shift; TAG="$1"; shift  ;;
    -b) shift; BRAND="$1"; shift ;;
    -e) shift; ERR=1;;
    -l) shift; LONG=1;;
    -*) usage ;;
    *) break ;;
    esac
done

BS_SUCCEEDED=1
BS_ERRORS=2
BS_INPROGRESS=3
BS_INVALID=4

# Input $1 = end time (e.g. 2011-03-16 00:33:39)
# Input $2 = start time (same format)
# Sets global "date_sub_rv" to time delta as "HH:MM:SS"
date_sub() {
    # Convert dates to seconds
    esec=`date "--date=$1" +%s`
    ssec=`date "--date=$2" +%s`

    # Total seconds
    ts=$((esec - ssec))

    # Convert to th:tm:ts

    th=$((ts / 3600))
    ts=$((ts - 3600 * th))

    tm=$((ts / 60))
    ts=$((ts - 60 * tm))

    date_sub_rv=`printf %02d:%02d:%02d $th $tm $ts`
}

# Input $1 = duration (e.g. 01:33:25)
# Sets global "date_hhmm_rv" to hour/min format (e.g. 1h33m)
date_hhmm() {
    set `echo $1 | awk -F : '{ print ($1+0)"h"$2"m"; }'`
    date_hhmm_rv=$1
}

# Input $1 = full path to ,release.log
# Calculates elapsed build time.
# Sets global "build_time_rv" to " (HH:MM:SS)", or empty string on error
build_time() {
    build_time_rv=

    if [ ! -f "$1" ]; then return; fi

    etime=`tail -10 "$1" | sed -e '/^BUILD_COMPLETE /s/.*= *//p' -e d`
    case $etime in
	20*) ;;
	*) etime=`stat --format %z "$1" | sed -e 's/\..*//'` ;;
    esac

    stime=`head -10 "$1" | sed -e '/^START_TIME /s/.*= *//p' -e d`
    case $stime in
	20*) ;;
	*) return ;;
    esac

    date_sub "$etime" "$stime"
    date_hhmm $date_sub_rv

    build_time_rv="($date_hhmm_rv) "
}

# file_date
# Input $1 = full path to file
# Returns file date like "ls -l" (e.g. Mar 23 21:10)
file_date() {
    file_date_rv=`ls -l "$1" | awk '{ printf "%3s %02d %s\n", $6, $7, $8; }'`
}

build_status() {
    branddir="$1"
    branddir_basename="`basename $branddir`"

    last="`ls -t1 $branddir | head -1`"
    if [ -n "$last" ]; then
	builddir="$branddir/$last"

	if [ -n "$LONG" ]; then
	    builddir_pfx="$branddir/$last: "
	else
	    builddir_pfx="`printf %-54s $branddir_basename/$last` "
	fi

	build_time "$builddir/,release.log"

	if [ -f "$builddir/,succeeded" ]; then
	    file_date "$builddir/,succeeded"
	    if [ -z "$ERR" ]; then
		echo "${builddir_pfx}${build_time_rv}$file_date_rv Ok"
	    fi
	    rv=$BS_SUCCEEDED
	else
	    errors=0

	    rellog="$builddir/,release.log"
	    errlog="$builddir/,build_errors.log"
	    dimlog="$builddir/,dongle_image_release.log"

	    logs=""
	    if [ -f "$rellog" ]; then
		logs="$logs $rellog"
	    fi
	    if [ -f "$errlog" ]; then
		logs="$logs $errlog"
		errors=1
	    fi
	    if [ -f "$dimlog" ]; then
		logs="$logs $dimlog"
	    fi

	    if [ -z "$logs" ]; then
		echo >&2 "${builddir_pfx}No log files"
		rv=$BS_INVALID
	    elif [ "$errors" = 0 ]; then
		if [ -z "$ERR" ]; then
		    echo "${builddir_pfx}${build_time_rv}In progress"
		fi
		rv=$BS_INPROGRESS
	    else
		file_date "$errlog"
		echo "${builddir_pfx}${build_time_rv}${file_date_rv} Errors"
		rv=$BS_ERRORS
		BS_LOGS="$logs"
	    fi
	fi
    else
	if [ -n "$LONG" ]; then
	    echo >&2 "$branddir: No builds"
	fi
	rv=$BS_INVALID
    fi

    return $rv;
}

if [ -z "$BRAND" ]; then
    found=0
    for i in $BUILDLOCS; do
	if [ -d "$i/$TAG" ]; then
	    for j in `ls "$i/$TAG"`; do
		if [ "$j" = _disabled ]; then
		    continue
		fi
		build_status "$i/$TAG/$j"
		found=1
	    done
	fi
    done

    if [ $found = 0 ]; then
	echo >&2 "$TAG: Tag not found"
	exit 1
    fi

    exit 0
fi

BRANDDIR=""

for i in $BUILDLOCS; do
    BRANDDIR_TEST="$i/$TAG";

    if [ -d "$BRANDDIR_TEST/$BRAND" ]; then
	BRANDDIR="$BRANDDIR_TEST/$BRAND"
    fi
done

if [ -z "$BRANDDIR" ]; then
    echo >&2 "Build directory for brand $BRAND not found"
    exit 1
fi

build_status "$BRANDDIR"

if [ $? = $BS_ERRORS ]; then
    if [ -n "$BUILD_LOGS_EDITOR" ]; then
	exec "$BUILD_LOGS_EDITOR" $BS_LOGS
    fi
    exec ${EDITOR:-vi} $BS_LOGS
fi
