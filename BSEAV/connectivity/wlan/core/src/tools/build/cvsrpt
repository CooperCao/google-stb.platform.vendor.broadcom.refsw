#!/usr/bin/perl -w

# $Copyright Broadcom Corporation$
# $Id: cvsrpt,v 12.31 2011-01-27 02:16:36 tima Exp $

use strict;
use Getopt::Long;
use Pod::Usage;


my %options = (histcmd=>'/home/hwnbuild/src/tools/build/cvshistory',
	       cmd=>'/home/hwnbuild/src/tools/build/cvsreport',
	       bomcmd=>'/home/hwnbuild/src/hndcvs/hndcvs_cvs_report.sh',
	       path=>'/projects/hnd/software/cvsreport',
	       timeout=>'360');
GetOptions(\%options,
	   'index', 'cmd=s', 'histcmd=s', 'debug', 'path=s', 'queue=s',
	   'help|?', 'man', 'dobom', 'bomcmd=s', 'notags', 'nobranch',
	   'timeout=s')
    or pod2usage(2);
pod2usage(1) if $options{help};
pod2usage(-exitstatus => 0, -verbose => 2) if $options{man};

my $CVSREPORT="$options{cmd} -a -d/projects/cvsroot";
$CVSREPORT.=" -H $options{histcmd}";
$CVSREPORT.=" -D" if $options{debug};

my $reportname = shift @ARGV || pod2usage(1);

my($includes, $excludes, $defago);
if ($reportname eq 'hardware') {
    $reportname='Hardware';
    $includes='sim802_11b|src/dsp';
    $excludes='';
    $defago='-2 months 00:00'; # ignored
} elsif ($reportname eq 'software') {
    $reportname='Software';
    $includes='src';
    $excludes='src/dsp|src/tools/wlan';
    # ignored: don't fix without checking for tag-to-tag truncation problems
    $defago='-1 month 00:00'; 
} else {
    pod2usage(1);
}

die "$options{path}: $!" unless -d $options{path};

my $DIRECTORY="$options{path}/$reportname";

mkdir $DIRECTORY unless -d $DIRECTORY;

my $INDEX="$DIRECTORY/index.html";
my $NEWINDEX="$DIRECTORY/newIndex.html";

my $cmd=qq(set myhtml {
format=html;
footer=;
encoding=UTF-8;
cgi_links=yes;
cgi_urlbase=http://home.sj.broadcom.com/cgi-bin/viewcvs/cgi/viewcvs.cgi;
} file myhtml $DIRECTORY/%Y_%m_%d_%b.html);

if (!$options{index}) {
    cvsrpt($ARGV[0] ||'-2 months 00:00');
}

if ($options{dobom}) {
    my $reportcmd = "$options{bomcmd} -o $DIRECTORY";
    $reportcmd = "/tools/bin/bsub -I -W 10 -q $options{queue} -R rhel \"$reportcmd\""
        if $options{queue};
    warn "# Generate BOM reports for today\n" if $options{debug};
    system($reportcmd);
}

mkindex();

exit(0);

sub cvsrpt {
    my($from) = @_;
    my $reportcmd = "$CVSREPORT -f '$from' -e '$cmd' ".
	"--include '$includes' --exclude '$excludes'";
    $reportcmd .= " --notags" if $options{notags};
    $reportcmd .= " --nobranch" if $options{nobranch};
    $reportcmd = "/tools/bin/bsub -I -W $options{timeout} -q $options{queue} -R rhel \"$reportcmd\""
	if $options{queue};
    warn "# Generate ALL reports from $from\n" if $options{debug};
    warn "$reportcmd\n";
    my $time=time();
    system($reportcmd);
    $time=time()-$time;
    $time=sprintf("%02d:%02d:%02d", $time/3600, ($time % 3600)/60, $time % 60);
    warn "cvsreport completed in $time\n";
}

sub mkindex {
    warn "# Create index\n" if $options{debug};
    open(N, ">$NEWINDEX") || die "Can't write new index: $!\n";
    print N q(<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en-us" lang="en-us"> 
<head>
  <title>CVSReport Daily Logs</title>
  <style type="text/css" media="all">
	      table { 
		border-collapse:collapse;
	      }
	      td,
	      th {
		border:thin solid black;
		margin:0px;
	      }
  </style>
</head>
<body>
	      );
    if ($options{path} =~ /archive/) {
	print N "<h1>Archived Daily $reportname CVS Reports...</h1>\n";
    } else {
	print N "<h1>Daily $reportname CVS Reports...</h1>\n";
    }

    print N q(
  <p>The following links contain summaries of all checkins over a 24
     hour period.  These links can be useful to help diagnose failures
     in nightly builds and tests.</p>

);
    $includes=~s/\|/ /;
    $excludes=~s/\|/ /;
    print N "<p>Searching $includes</p>\n" if $includes;
    print N "<p>Except $excludes</p>\n" if $excludes;
    print N "<p>Last updated: ".(localtime)."</p>\n" if $excludes;

    opendir(D, "$DIRECTORY") ||
	die "Can't read $DIRECTORY: $!\n";
    my $f;
    my $date;
    my %date;
    my $type;
    my $tag;
    my $stag;
    while($_ = readdir(D)) {
	next if /^\.\.?$/;
	next if /ndex.html/;
	unless(($date, $type, $tag) =
	       /^(\d{4}_\d{2}_\d{2})_(t|b)?(.*)\.html$/) {
	    warn "Bad filename: $_\n";
	    next;
	}
	if (!defined $type) {
	    $type="";
	}
	if ($type eq "b") {
	    # Check this first, since we may have bTOT
	    $stag = "b$tag";
	} elsif ($tag eq "ALL") {
	    $stag=0;
	} elsif ($tag eq "HEAD") { # CVS terminology
	    $stag=1;
	    $tag="TOT";
	} elsif ($tag eq "TOT") { # Local terminology
	    $stag=1;
	} else {
	    $stag = "$tag";
	}
	
	${$date{$date}}{$stag} = {tag=>$tag, type=>$type, file=>$_};
    }
    closedir(D);
    
    print N "<table cellspacing=\"1\" cellpadding=\"1\" border=\"0\" summary=\"CVS Report Table\">\n";
#    print N "<table border=\"1\" summary=\"CVS Report Table\">\n";
    print N "<tr><th>All</th><th>Branches</th><th>BOMS</th><th>Tags</th></tr>\n";
    my $c;
    foreach $date (sort {$b cmp $a} keys %date) {
	my $t = '';
	my $b = '';
	my $bom = '';
	foreach (sort keys %{$date{$date}}) {
	    my $entry = '&nbsp;<a href="'.
		${date{$date}}{$_}->{file}.'">'.
		${date{$date}}{$_}->{tag}.
		'</a>&nbsp; ';
	    next if $_ eq "0";
	    if (${date{$date}}{$_}->{type} eq "t") {
		$t .= $entry;
	    } elsif (${date{$date}}{$_}->{type} eq "b") {
		$bom .= $entry;
	    } else {
		$b .= $entry;
	    }
	}
	$t = "&nbsp;" if $t eq '';
	$b = "&nbsp;" if $b eq '';
	$bom = "&nbsp;" if $bom eq '';
	$c = $c ? '' : ' bgcolor="#eaeaea"';
	if (exists ${date{$date}}{0}) {
	    $date = "<a href=\"".${date{$date}}{0}->{file}."\">$date</a>";
	}
	print N ("<tr$c><td>$date</td>".
		 "<td>$b</td>".
		 "<td>$bom</td>".
		 "<td>$t</td>".
		 "</tr>\n");
    }
    print N "</table>\n";

    if ($options{path} !~ /archive/) {
	print N "<p>Archived Older Reports ";
	print N "<a href=\"../archive2010/$reportname\">2010</a> ";
	print N "<a href=\"../archive2009/$reportname\">2009</a> ";
	print N "<a href=\"../archive2008/$reportname\">2008</a> ";
	print N "<a href=\"../archive2007/$reportname\">2007</a> ";
	print N "<a href=\"../archive2006/$reportname\">2006</a> ";
	print N "<a href=\"../archive2005/$reportname\">2005</a> ";
	print N "</p>\n";
    }

    # Display validator stamp.  Make sure you validate the page after any
    # change to this script!
    print N "<p><a href=\"http://tidy.sourceforge.net\">
	      <img src=\"http://tidy.sourceforge.net/checked_by_tidy.gif\"
		   alt=\"Checked by Tidy!\" border=\"0\"
		   height=\"32\" width=\"32\" align=\"right\"/></a></p>\n";
    
    print N "</body>\n</html>\n";
    rename($NEWINDEX, $INDEX);
}


__END__

=head1 NAME

cvsrpt - run cvsreport

=head1 SYNOPSIS

cvsrpt [-index] [-help] [-man] [-cmd=<path>] [-path=<path>] [-queue=<queue>] [-dobom] [-bomcmd=<bomcmd>] [-timeout=<timeout>] class [date]

=head1 DESCRIPTION 

B<cvsrpt> runs cvsreport, then indexes the resulting web pages.

=head1 OPTIONS

=over 8

=item B<-index>

Don't run report generator, just re-index existing reports.

=item B<-dobom>

Do BOM reports.

=item B<-cmd>=F<path>

Specify alternate path to B<cvsreport>, default is
F</home/hwnbuild/src/tools/build/cvsreport>.

=item B<-histcmd>=F<path>

Specify alternate path to B<cvs history>, default is
F</home/hwnbuild/src/tools/build/cvshistory>.

=item B<-bomcmd>=F<path>

Specify alternate path to B<hndcvs_cvs_report.sh>, default is
F</home/hwnbuild/src/hndcvs/hndcvs_cvs_report.sh>.

=item B<-path>=F<path>

Specify alternate path to report repository, default is
F</projects/hnd/software/cvsreport>.

=item B<-queue>=B<queue>

Submit B<cvsreport> as an interactive job on the named LSF queue.
Default is to run locally.

=item B<-timeout>=B<timeout>

Specify LSF job timeout in minutes.  Defaults to 120.  Should be less
than the crontab run time intervals.

=item B<-debug>

Output additional debugging messages.

=item B<-help>

Print a brief help message and exits.

=item B<-man>
  
Prints the manual page and exits.

=back

=head1 ARGUMENTS

=over 8

=item B<class>

Class of report to generate: B<hardware> or B<software>.

=item B<date>

Earlest report to generate.  Defaults to '00:00 last week'

=back

=cut
