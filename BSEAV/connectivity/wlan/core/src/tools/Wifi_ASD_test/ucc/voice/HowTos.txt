
The UCC directory contains the scripts and command files that are used for 
helping excute CAPI commands on a text based console windows. This is an
on-going project. The scripts are written in Python and is portable across to 
multiple platforms. 

The existing scripts and commands just intend to show examples how to run 
CAPI commands in a form of semi-automation. 

1. Format of Init files
   To run a set of CAPI commands, you must have initialization file to instruct
   Python script to connect a Control Agent.
   There are two key words defined:
   a. wfa_control_agent
   The wfa_control_agent tells the Control Agent ipaddress and port. 
    
   b. wfa_test_commands
   It tells the command file path.

   The key words and information are separated by exclaimation mark (!). For
   the same group of information, they are seperated by (,).
   Here is the example.
   # two main components DUT Control Agent and Console Traffic Endpoint
   wfa_control_agent!ipaddr=10.10.1.100,port=9000


   # wfa_test_commands!"dut_setup.txt","console_tg_setup.txt","sta1_setup.txt"
   # file names
   wfa_test_commands!../../cmds/dut/dut_startsync.txt


2. Command Format
   
   <ip address of the command receiver>!<CAPI command!<action to the return result>

   Here is the example:

   10.10.1.100!traffic_agent_config,profile,Start_Sync,direction,send,destination,192.168.250.202,destinationport,5005,sourceport,5005,payloadsize,100,duration,1,numframes,10,frameRate,10!STREAMID,$3

   10.10.1.100!traffic_agent_send,streamID,$3!DEFAULT

   You need to pay attention on the streamID. For each of traffic commands, 
   they require a "streamID" that is always generated by DUT after performing 
   "traffic_agent_config" command. 

   Therefore, at the end of first command, "STREAMID,$3" tells the script to 
   store the streamID returned by DUT in the variable name called "$3"

   The second command will use "$3" to pass to the CAPI command and sends over
   to Control Agent/DUT.

3. Run
   Go to the directory "ucc/voice-hso/scripts/python, run
   > python wfa_vhso.py <a init file>

   The command and init files are in ucc/cmds/dut or console. The commands show the example of running an END2END sync 
   process.

If you have any questions, send me email: qhu@wi-fi.org. This is the beginning
of the project, it has limit error checking and reporting. Please report your 
thoughts and ideas, as well as issues. I will continue post updates and more 
command set.
