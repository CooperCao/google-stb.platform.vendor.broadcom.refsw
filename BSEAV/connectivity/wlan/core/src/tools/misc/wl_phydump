#!/usr/bin/perl -w
# 	$Id: wl_phydump,v 12.1 2005-06-03 18:45:06 tima Exp $	
#$ Copyright Broadcom Corporation $

use strict;

my $debug=0;

my %regs = 
    ('bphy' => [
		     [ 0,    9 ],            # /* 0 - 8 */
		     [ 0xa,  1 ],            # /* 0xa */
		     [ 0x10, 6 ],            # /* 0x10 - 0x15 */
		     [ 0x18, 2 ],            # /* 0x18 - 0x19 */
		     [ 0x20, 0x16 ],         # /* 0x20 - 0x35 */
		     [ 0x38, 6 ],            # /* 0x38 - 0x3d */
		     [ 0x40, 0xe ],          # /* 0x40 - 0x4d */
		     [ 0x50, 6 ],            # /* 0x50 - 0x55 */
		     [ 0x58, 3 ],            # /* 0x58 - 0x5a */
		     [ 0x80, 0x280 ],        # /* 0x80 - 0x2ff */
		     [ 0,    0 ]
		 ],
     
     'bphy5' => [
		      [ 0,    9 ],            # /* 0 - 8 */
		      [ 0xa,  1 ],            # /* 0xa */
		      [ 0x10, 6 ],            # /* 0x10 - 0x15 */
		      [ 0x18, 5 ],            # /* 0x18 - 0x1c */
		      [ 0x20, 0x16 ],         # /* 0x20 - 0x35 */
		      [ 0x38, 6 ],            # /* 0x38 - 0x3d */
		      [ 0x40, 0xe ],          # /* 0x40 - 0x4d */
		      [ 0x50, 6 ],            # /* 0x50 - 0x55 */
		      [ 0x58, 0xa ],          # /* 0x58 - 0x61 */
		      [ 0x80, 0x2a0 ],        # /* 0x80 - 0x31f */
		      [ 0,    0 ]
		  ],

     'bphy6' => [
		      [ 0,    9 ],            # /* 0 - 8 */
		      [ 0xa,  1 ],            # /* 0xa */
		      [ 0x10, 0x26 ],         # /* 0x10 - 0x35 */
		      [ 0x38, 2 ],            # /* 0x38 - 0x39 */
		      [ 0x3d, 0x11 ],         # /* 0x3d - 0x4d */
		      [ 0x50, 6 ],            # /* 0x50 - 0x55 */
		      [ 0x58, 0xa ],          # /* 0x58 - 0x61 */
		      [ 0x63, 1 ],            # /* 0x63 */
		      [ 0x80, 0x2a0 ],        # /* 0x80 - 0x31f */
		      [ 0,    0 ]
		  ],

     'bphy8' => [
		      [ 0,    9 ],            # /* 0 - 8 */
		      [ 0xa,  1 ],            # /* 0xa */
		      [ 0x10, 0x2a ],         # /* 0x10 - 0x39 */
		      [ 0x3d, 0x19 ],         # /* 0x3d - 0x55 */
		      [ 0x58, 0xa ],          # /* 0x58 - 0x61 */
		      [ 0x63, 5 ],            # /* 0x63 - 0x67 */
		      [ 0x80, 0x100 ],        # /* 0x80 - 0x17f */
		      [ 0x200, 0x120 ],       # /* 0x200 - 0x31f */
		      [ 0x380, 0x80 ],        # /* 0x380 - 0x3ff */
		      [ 0,    0 ]
		  ],

     'aphy2' => [
		      [ 0,    9 ],            # /* 0 - 8 */
		      [ 0xa,  1 ],            # /* 0xa */
		      [ 0x10, 5 ],            # /* 0x10 - 0x14 */
		      [ 0x18, 0xa ],          # /* 0x18 - 0x21 */
		      [ 0x24, 0xe ],          # /* 0x24 - 0x31 */
		      [ 0x33, 9 ],            # /* 0x33 - 0x3b */
		      [ 0x3d, 2 ],            # /* 0x3d - 0x3e */
		      [ 0x41, 0xa ],          # /* 0x41 - 0x4a */
		      [ 0x50, 0xd ],          # /* 0x50 - 0x5c */
		      [ 0x5f, 1 ],            # /* 0x5f */
		      [ 0x61, 3 ],            # /* 0x61 - 0x63 */
		      [ 0x68, 4 ],            # /* 0x68 - 0x6b */
		      [ 0x6e, 2 ],            # /* 0x6e - 0x6f */
		      [ 0x72, 0x25 ],         # /* 0x72 - 0x96 */
		      [ 0xa0, 0xd ],          # /* 0xa0 - 0xac */
		      [ 0,    0 ]
		  ],
     
     'aphy3' => [
		      [ 0,    6 ],            # /* 0 - 5 */
		      [ 7,    2 ],            # /* 7 - 8 */
		      [ 0xa,  1 ],            # /* 0xa */
		      [ 0x10, 5 ],            # /* 0x10 - 0x14 */
		      [ 0x18, 0xa ],          # /* 0x18 - 0x21 */
		      [ 0x24, 2 ],            # /* 0x24 - 0x25 */
		      [ 0x27, 0x15 ],         # /* 0x27 - 0x3b */
		      [ 0x3e, 1 ],            # /* 0x3e */
		      [ 0x41, 0xa ],          # /* 0x41 - 0x4a */
		      [ 0x50, 6 ],            # /* 0x50 - 0x55 */
		      [ 0x58, 6 ],            # /* 0x58 - 0x5d */
		      [ 0x5f, 5 ],            # /* 0x5f - 0x63 */
		      [ 0x68, 4 ],            # /* 0x68 - 0x6b */
		      [ 0x6e, 7 ],            # /* 0x6e - 0x74 */
		      [ 0x7a, 0x1d ],         # /* 0x7a - 0x96 */
		      [ 0xa0, 0xf ],          # /* 0xa0 - 0xae */
		      [ 0xb0, 0xc ],          # /* 0xb0 - 0xbb */
		      [ 0xc0, 9 ],            # /* 0xc0 - 0xc8 */
		      [ 0,    0 ]
		  ],

     'aphy4' => [
		      [ 0,    6 ],            # /* 0 - 5 */
		      [ 7,    2 ],            # /* 7 - 8 */
		      [ 0xa,  1 ],            # /* 0xa */
		      [ 0x10, 0x13 ],         # /* 0x10 - 0x22 */
		      [ 0x24, 0x18 ],         # /* 0x24 - 0x3b */
		      [ 0x3e, 1 ],            # /* 0x3e */
		      [ 0x41, 0xe ],          # /* 0x41 - 0x4e */
		      [ 0x50, 6 ],            # /* 0x50 - 0x55 */
		      [ 0x58, 6 ],            # /* 0x58 - 0x5d */
		      [ 0x5f, 5 ],            # /* 0x5f - 0x63 */
		      [ 0x68, 4 ],            # /* 0x68 - 0x6b */
		      [ 0x6e, 0x2f ],         # /* 0x6e - 0x9c */
		      [ 0xa0, 0xe ],          # /* 0xa0 - 0xad */
		      [ 0xb0, 0xd ],          # /* 0xb0 - 0xbc */
		      [ 0xc0, 0x1c ],         # /* 0xc0 - 0xdb */
		      [ 0,    0 ],
		  ],

     'aphy6' => [
		      [ 0,    6 ],            # /* 0 - 5 */
		      [ 7,    2 ],            # /* 7 - 8 */
		      [ 0xa,  1 ],            # /* 0xa */
		      [ 0x10, 0x13 ],         # /* 0x10 - 0x22 */
		      [ 0x24, 0x18 ],         # /* 0x24 - 0x3b */
		      [ 0x3e, 1 ],            # /* 0x3e */
		      [ 0x41, 0xe ],          # /* 0x41 - 0x4e */
		      [ 0x50, 6 ],            # /* 0x50 - 0x55 */
		      [ 0x58, 6 ],            # /* 0x58 - 0x5d */
		      [ 0x5f, 5 ],            # /* 0x5f - 0x63 */
		      [ 0x68, 4 ],            # /* 0x68 - 0x6b */
		      [ 0x6e, 0x2f ],         # /* 0x6e - 0x9c */
		      [ 0xa0, 0xe ],          # /* 0xa0 - 0xad */
		      [ 0xb0, 0xd ],          # /* 0xb0 - 0xbc */
		      [ 0xc0, 0x1f ],         # /* 0xc0 - 0xde */
		      [ 0,    0 ]
		  ],

     'gphy1' => [
		      [ 0x800,        0x14 ], # /* 0x800 - 0x813 */
		      [ 0,    0 ]
		  ],
     
     'gphy2' => [
		      [ 0x800,        5 ],    # /* 0x800 - 0x804 */
		      [ 0x80f,        7 ],    # /* 0x80f - 0x815 */
		      [ 0,    0 ]
		  ],
     );

my %table = (
	     'aphy2' => [
			 [ 0,    0,      0x20 ],
			 [ 1,    0,      0x20 ],
			 [ 2,    0,      0x10 ],
			 [ 3,    0,      0x10 ],
			 [ 4,    0,      0x10 ],
			 [ 5,    0,      0x1b ],
			 [ 6,    0,      8 ],
			 [ 8,    1,      0x35 ],
			 [ 9,    1,      0x35 ],
			 [ 0xa,  1,      0x35 ],
			 [ 0xb,  1,      0x35 ],
			 [ 0xc,  0,      7 ],
			 [ 0xe,  0,      0x10 ],
			 [ 0xf,  0,      0xd ],
			 [ 0x10, 0,      0x10 ],
			 [ 0x11, 0,      8 ],
			 [ 0x12, 0,      8 ],
			 [ 0x16, 0,      0x100 ],
			 [ 0xff, 0,      0 ]
			 ],
	     
	     'aphy3' => [
			 [ 0,    0,      0x20 ],
			 [ 1,    0,      0x20 ],
			 [ 2,    0,      0x10 ],
			 [ 4,    0,      0xc ],
			 [ 5,    0,      0x1b ],
			 [ 6,    0,      8 ],
			 [ 0xa,  1,      0x35 ],
			 [ 0xb,  1,      0x35 ],
			 [ 0xc,  0,      4 ],
			 [ 0xd,  0,      0x40 ],
			 [ 0xe,  0,      0x10 ],
			 [ 0xf,  0,      0xe ],
			 [ 0x10, 0,      0x40 ],
			 [ 0x11, 0,      8 ],
			 [ 0x13, 0,      2 ],
			 [ 0x14, 0,      0x35 ],
			 [ 0xff, 0,      0 ]
			 ],
	     
	     'aphy4' => [
			 [ 0,    0,      0x20 ],
			 [ 1,    0,      0x28 ],
			 [ 2,    0,      0x10 ],
			 [ 4,    0,      0x10 ],
			 [ 5,    0,      0x1b ],
			 [ 6,    0,      8 ],
			 [ 7,    0,      4 ],
			 [ 0xa,  1,      0x35 ],
			 [ 0xb,  1,      0x35 ],
			 [ 0xc,  0,      5 ],
			 [ 0xd,  0,      0x40 ],
			 [ 0xe,  0,      0x10 ],
			 [ 0xf,  0,      0xe ],
			 [ 0x10, 0,      0x40 ],
			 [ 0x11, 0,      8 ],
			 [ 0x13, 0,      2 ],
			 [ 0x14, 0,      0x35 ],
			 [ 0x15, 0,      0x40 ],
			 [ 0x16, 0,      0x40 ],
			 [ 0x17, 0,      0x10 ],
			 [ 0x18, 0,      0x40 ],
			 [ 0xff, 0,      0 ]
			 ],
	     
	     'gphy1' => [
			 [ 0,    0,      0x20 ],
			 [ 1,    0,      0x20 ],
			 [ 2,    0,      0x10 ],
			 [ 3,    0,      0x10 ],
			 [ 4,    0,      0x10 ],
			 [ 5,    0,      0x1b ],
			 [ 6,    0,      8 ],
			 [ 8,    1,      0x35 ],
			 [ 9,    1,      0x35 ],
			 [ 0xa,  1,      0x35 ],
			 [ 0xb,  1,      0x35 ],
			 [ 0xc,  0,      7 ],
			 [ 0xe,  0,      0x10 ],
			 [ 0xf,  0,      0xd ],
			 [ 0x10, 0,      0x10 ],
			 [ 0x11, 0,      8 ],
			 [ 0x12, 0,      8 ],
			 [ 0x13, 0,      0x20 ],
			 [ 0x14, 0,      0x20 ],
			 [ 0x15, 0,      0x14 ],
			 [ 0x16, 0,      0x100 ],
			 [ 0x80, 0,      0x40 ],
			 [ 0xff, 0,      0 ]
			 ],
	     
	     'gphy2' => [
			 [ 0,    0,      0x18 ],
			 [ 1,    0,      0x18 ],
			 [ 2,    0,      4 ],
			 [ 4,    0,      0xc ],
			 [ 5,    0,      0x1b ],
			 [ 6,    0,      8 ],
			 [ 0xa,  1,      0x35 ],
			 [ 0xb,  1,      0x35 ],
			 [ 0xc,  0,      4 ],
			 [ 0xd,  0,      0x40 ],
			 [ 0xe,  0,      0x10 ],
			 [ 0xf,  0,      0xd ],
			 [ 0x10, 0,      0x10 ],
			 [ 0x11, 0,      8 ],
			 [ 0x14, 0,      0x35 ],
			 [ 0xff, 0,      0 ]
			 ],
	     
	     'gphy3' => [
			 [ 0,    0,      0x18 ],
			 [ 1,    0,      0x18 ],
			 [ 2,    0,      4 ],
			 [ 4,    0,      0xc ],
			 [ 5,    0,      0x1b ],
			 [ 6,    0,      8 ],
			 [ 7,    0,      4 ],
			 [ 0xa,  1,      0x35 ],
			 [ 0xb,  1,      0x35 ],
			 [ 0xc,  0,      4 ],
			 [ 0xd,  0,      0x40 ],
			 [ 0xe,  0,      0x10 ],
			 [ 0xf,  0,      0xd ],
			 [ 0x10, 0,      0x40 ],
			 [ 0x11, 0,      8 ],
			 [ 0x13, 0,      0xa ],
			 [ 0x14, 0,      0x35 ],
			 [ 0x15, 0,      0x40 ],
			 [ 0x16, 0,      0x40 ],
			 [ 0x17, 0,      0x10 ],
			 [ 0x18, 0,      0x40 ],
			 [ 0xff, 0,      0 ]
			 ],
	     );

my($phytype, $phyrev);
open(DUMP, "wl dump|") or die "Can't run wl dump: $!\n";
while(<DUMP>) {
    if(($phytype, $phyrev)=/phy_type\s(\d+)\sphy_rev\s(\d+)/) {
	last;
    }
}
close DUMP;

die "phytype not found\n" unless defined $phytype;
die "phyrev not found\n" unless defined $phyrev;

my $rl;
my $ti;
my $name;

sub ISBPHY { $phytype & 1 }
sub ISGPHY { $phytype & 2 }

warn "phytype:$phytype, phyrev: $phyrev\n" if $debug;
warn "ISBPHY".ISBPHY."\n" if $debug;
warn "ISGPHY".ISGPHY."\n" if $debug;

if(ISBPHY || ISGPHY) {
    if(ISBPHY) {
	if($phyrev >= 8) {
	    $rl = $regs{'bphy8'};
	    warn "regs: bphy8\n" if $debug;
	} elsif($phyrev >= 6) {
	    $rl = $regs{'bphy6'};
	    warn "regs: bphy6\n" if $debug;
	} else {
	    $rl = $regs{'bphy'};
	    warn "regs: bphy\n" if $debug;
	}
    } else {
	if(ISGPHY) {
	    if($phyrev >= 6) {
		$rl = $regs{'bphy8'};
		warn "regs: bphy8\n" if $debug;
	    } elsif($phyrev == 2) {
		$rl = $regs{'bphy6'};
		warn "regs: bphy6\n" if $debug;
	    } elsif($phyrev == 1) {
		$rl = $regs{'bphy5'};
		warn "regs: bphy5\n" if $debug;
	    } else {
		$rl = $regs{'bphy'};
		warn "regs: bphy\n" if $debug;
	    }
	}
    }
}



dump_phyregs("bphy", 0);
if(ISBPHY) {
    exit;
}

if(ISGPHY) {
    if($phyrev >= 7) {
	$rl = $regs{'aphy6'};
	warn "regs: aphy6\n" if $debug;
    } elsif($phyrev >= 3) {
	$rl = $regs{'aphy4'};
	    warn "regs: aphy4\n" if $debug;
    } elsif($phyrev >= 2) {
	$rl = $regs{'aphy3'};
	warn "areg: phy3\n" if $debug;
    } else {
	$rl = $regs{'aphy2'};
	warn "regs: aphy2\n" if $debug;
    }
    dump_phyregs("aphy", 0x400);
    
    if($phyrev >= 3) {
	$rl = $regs{'gphy2'};
	$ti = $table{'gphy3'};
	warn "regs: gphy2, table gphy3\n" if $debug;
    } elsif($phyrev == 2) {
	$rl = $regs{'bphy6'};
	$ti = $table{'gphy2'};
	warn "regs: gphy2, table: gphy2\n" if $debug;
    } else {
	$rl = $regs{'gphy'};
	$ti = $table{'gphy1'};
	warn "regs: gphy1, table: gphy1\n" if $debug;
    }
    dump_phyregs("gphy", 0);
} else {
    # /* Must be phy A */
    if($phyrev >= 6) {
	$rl = $regs{'aphy6'};
	$ti = $table{'aphy4'};
	warn "regs: aphy6, table aphy4\n" if $debug;
    } elsif($phyrev >= 4) {
	$rl = $regs{'aphy4'};
	$ti = $table{'aphy4'};
	warn "regs: aphy4, table: aphy4\n" if $debug;
    } elsif($phyrev == 3) {
	$rl = $regs{'aphy3'};
	$ti = $table{'aphy3'};
	warn "regs: aphy3, table: aphy3\n" if $debug;
    } else {
	$rl = $regs{'aphy2'};
	$ti = $table{'aphy2'};
	warn "regs: aphy2, table: aphy2\n" if $debug;
    }
    dump_phyregs("aphy", 0);
}

# Table Data
#
# Not implemented Yet
#
# ...
#


sub dump_phyregs {
    my($name, $offset) = @_;
    foreach my $r (@$rl) {
	for(my $o=0; $o<$r->[1]; $o++) {
	    my $a = $r->[0] + $o + $offset;
	    my $v=`wl phyreg $a`;
	    chop $v;
	    printf("$name: 0x%03x 0x%04x\n", $a, oct($v));
	}
    }
}
exit;


=head1 NAME

wl_phydump - emulate wl phydump for external wl driver

=head1 SYNOPSIS

src/tools/misc/wl_phydump

=head1 DESCRIPTION

The B<wl phydump> command only works on I<internal> debugging versions
of the B<wl> driver since it relies on B<BCMINERNAL> code.  The
B<wl_phydump> script attempts to duplicate B<phydump> output using
B<phyreg> which is still available in I<external> debugging versions
of the driver.

B<This script should not be distributed outside of Broadcom.>

=head1 BUGS

The script only dumps the phy registers, it does not dump the phy
tables.

The script will need to be updated when B<wlc_dump_phyregs> and its
associated tables are updated.

=head1 WARNING

The dump is not atomic and should not be assumed to be a consistent
snapshot of the state of the device.

=head1 SEE ALSO

L<wl_radiodump(1)>

=head1 AUTHOR

Tim Auckland <tima@broadcom.com>

=cut
