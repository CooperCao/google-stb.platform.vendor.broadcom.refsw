#!/usr/bin/perl -w

# wme_counters - a wrapper for the wl wme_counters command, displaying
# counter updates and computing rates.

# $Id: wme_counters,v 12.1 2005-08-29 16:55:41 tima Exp $
# $Copyright Broadcom Corporation$

use strict;
use Term::Cap;

# These can be adjusted (or added as options)
my $period = 1; # seconds between updates
my $sample = 1; # seconds to average over for rates




# Find clear-screen codes for this terminal.
my $clear = Term::Cap->Tgetent({OSPEED=>9600})->Tputs('cl');

my %Count;

# Buffer size
my $size = int($sample/$period)+1;

sub record {
    my($cat, $counter, $data) = @_;
    
    $Count{$cat} = {} unless exists $Count{$cat};
    $Count{$cat}{$counter} = [($data) x $size]
	unless exists $Count{$cat}{$counter};
    unshift(@{$Count{$cat}{$counter}}, $data);
    splice(@{$Count{$cat}{$counter}}, $size);
}

sub averate {
    my($field) = @_;
    my $sum = 0;
    for(my $i=0; $i < $size-1; $i++) {
	$sum += $field->[$i] - $field->[$i+1];
    }
    return int($sum / $size);
}

my($cat, $lastcat, $torr, $f, $b, $ff, $fb);
while(1) {
    my $error;
    open(WL, "wl wme_counters 2>&1|") || die "Failed to run wl command: $!\n";
    while(<WL>) {
	if(($cat, $torr, $f, $b, $ff, $fb)=
	   /^(?:(AC_\w+):)?\s+([tr]x)\s
	   frames\:\s(\d+)\s
	   bytes\:\s(\d+)\s
	   failed\sframes:\s(\d+)\s
	   failed\sbytes:\s(\d+)/x) {
	    if(defined $cat) {
		$lastcat = $cat;
	    } else {
		$cat = $lastcat;
	    }
	    record($cat, "${torr}f", $f);
	    record($cat, "${torr}b", $b);
	    record($cat, "${torr}ff", $ff);
	    record($cat, "${torr}fb", $fb);
	} elsif (/^$/) {
	} elsif (/^\d+\s+\(\w+\)$/) {
	    die "Old style wme counters - please update your wl command: $_"
	} else {
	    $error .= $_;
	}
    }
    print $clear;
    print $error;

    printf("%5s %9s %10s %10s %9s %11s %10s\n", "tx", "frames",
	   'bytes', 'bytes/s', 'failed frames', 'failed bytes',
	   'failed bytes/s');

    foreach $cat (sort keys %Count) {
	my $s = $Count{$cat};
	my $txbr = averate($s->{txb}); 	
	my $txfbr = averate($s->{txfb});	
	printf("%5s %9d %11d %9d %10d %11d %10d\n",
	       $cat, $s->{txf}[0], $s->{txb}[0], $txbr,
	       $s->{txff}[0], $s->{txfb}[0], $txfbr);

    }
    print "\n";
    printf("%5s %9s %11s %10s %9s %11s %10s\n", "rx", "frames",
	   'bytes', 'bytes/s', 'failed frames', 'failed bytes',
	   'failed bytes/s');
	
    foreach $cat (sort keys %Count) {
	my $s = $Count{$cat};	
	my $rxbr = averate($s->{rxb});	
	my $rxfbr = averate($s->{rxfb});
	printf("%5s %9d %11d %9d %10d %11d %10d\n",
	       $cat, $s->{rxf}[0], $s->{rxb}[0], $rxbr,
	       $s->{rxff}[0], $s->{rxfb}[0], $rxfbr);	
   }
    sleep $period;    
}
