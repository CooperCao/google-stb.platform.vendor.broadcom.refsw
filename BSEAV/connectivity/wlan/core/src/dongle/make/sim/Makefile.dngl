# Makefile for standalone cheeseball library
#
# Broadcom Proprietary and Confidential. Copyright (C) 2017,
# All Rights Reserved.
# 
# This is UNPUBLISHED PROPRIETARY SOURCE CODE of Broadcom;
# the contents of this file may not be disclosed to third parties, copied
# or duplicated in any form, in whole or in part, without the prior
# written permission of Broadcom.
#
# $Id$
#

# default target
ifndef TARGET
TARGET = dngl
endif

ifndef DNGLBUS
DNGLBUS = usb
endif

BASE_DIR	= $(shell /bin/pwd)/../../..
WLCFG_DIR	= $(BASE_DIR)/wl/config
OBJ_DIR		= $(TARGET)

WLAN_ComponentsInUse := bcmwifi clm-api ppr olpc keymgmt iocv dump phy dongle msch
include ../../../makefiles/WLAN_Common.mk

ifndef ARM_DEVELOPER_SUITE_ROOT
ARM_DEVELOPER_SUITE_ROOT = /tools/arm/ADS_1.2.1
endif

ADS_LINUX = $(ARM_DEVELOPER_SUITE_ROOT)/linux/Source

# Armulator plug-in for chip
CHIP_MODEL = $(OBJ_DIR)/dngl.so

# xxx Fix this so we can build debug-dngl and nodebug-dngl targets
DEBUG   = debug
EXTRA_DFLAGS  += -DDEBUG -DBCMDBG -DBCMDBG_MEM -DBCMINTERNAL
#ifeq ($(findstring nodebug-,$(TARGET)),nodebug-)
#	DEBUG     = nodebug
#else
#	ifeq ($(findstring debug-,$(TARGET)),debug-)
#		DEBUG   = debug
#		EXTRA_DFLAGS  += -DDEBUG -DBCMDBG -DBCMDBG_MEM -DBCMINTERNAL
#	endif
#endif

ifeq ($(INSTR_DUMP),1)
	EXTRA_DFLAGS += -DINSTR_DUMP
endif

ifeq ($(BCMSIM_D11PHY),N)
	EXTRA_DFLAGS += -DBCMSIM_D11PHY_N
endif

ifeq ($(DNGLBUS),usb)
	EXTRA_DFLAGS += -DUSB_DNGL
endif

ifeq ($(DNGLBUS),sdio)
	EXTRA_DFLAGS += -DSDIO_DNGL
endif

# external cheeseball objects
SIM_C = 4320sim.c chipc.c crc.c d11_core.c usbdev.c sdpcm_core.c sbdma.c sbsim.c \
	sdram.c traffic.c utils.c venetc.c devbus.c dnglperiph.c
SIM_O = $(SIM_C:.c=.o)

SIM_OBJS = $(patsubst %,$(OBJ_DIR)/%,$(SIM_O))

# compiler configuration
CC		= $(HOST_COMPILE)gcc
LD		= $(HOST_COMPILE)gcc
AR		= $(HOST_COMPILE)ar

cc-option = $(shell if $(CC) $(1) -S -o /dev/null -xc /dev/null \
             > /dev/null 2>&1; then echo "$(1)"; else echo "$(2)"; fi ;)

CFLAGS		= -g -fshort-wchar -Wall -Werror
CFLAGS		+= $(call cc-option,-m32,)
DFLAGS		= $(WLFLAGS) -D_RTE_SIM_ -DEXT_CBALL -DRAMSZ=0x80000 -DDBG=1
# Redefine dprintf to avoid conflict with ARM Dev Suite function
DFLAGS		+= -Ddprintf=dngldprintf
IFLAGS		= -I$(BASE_DIR)/common/include -I$(BASE_DIR)/usbdev \
		  -I$(BASE_DIR)/tools/4710sim -I$(BASE_DIR)/tools/shared \
		  -I$(BASE_DIR)/toe/rserv/sim
IFLAGS		+= $(WLAN_ComponentIncPath)
IFLAGS		+= $(WLAN_IncPathA)

LFLAGS		= $(CFLAGS)
EXTRA_LFLAGS	= $(EXTRA_CFLAGS)

WLCONFFILE	= wlconfig_rte_sim_dev
include $(WLCFG_DIR)/wl.mk

SRCDIRS := $(addprefix $(BASE_DIR)/,tools/4710sim tools/shared \
	   usbdev/dongle wl/exe toe/rserv/sim dongle/hndrte/sim) \
	   $(WLAN_StdSrcDirsA) $(WLAN_ComponentSrcDirs)

vpath %.c $(SRCDIRS)

# build targets
all: $(OBJ_DIR)/NUL $(CHIP_MODEL)

$(OBJ_DIR)/%.o: %.c
	$(CC) -c $(DFLAGS) $(EXTRA_DFLAGS) \
		$(IFLAGS) $(EXTRA_IFLAGS) \
		$(CFLAGS) $(EXTRA_CFLAGS) -o $@ $<

# gcc options taken directly from ARM periph model sample; they may be overly restrictive
ARMU_FLAGS = -I$(ADS_LINUX)/armulext -I$(ADS_LINUX)/armulif -I$(ADS_LINUX)/rdi
ARMU_FLAGS += -I$(ADS_LINUX)/clx -O2 -W -Dunix -D__NO_MATH_INLINES -D__NO_CTYPE -DRDI_VERSION=151
ARMU_FLAGS += -DARM10MODEL -DDEBUG -DARM_RELEASE="\"ADS1.2\"" -DBUILD_NUMBER=848

$(OBJ_DIR)/dnglarmulator.o: dnglarmulator.c
	$(CC) -c $(DFLAGS) $(EXTRA_DFLAGS) \
		$(IFLAGS) $(EXTRA_IFLAGS) \
		$(CFLAGS) $(EXTRA_CFLAGS) $(ARMU_FLAGS) -o $@ $<

LFLAGS += -shared
LIBS = $(ADS_LINUX)/armulif/armulif.b/linux86/armulif.a $(ADS_LINUX)/clx/clx.b/linux86/clx.a

$(CHIP_MODEL): $(SIM_OBJS) $(OBJ_DIR)/dnglarmulator.o
	$(LD) $(LFLAGS) $(EXTRA_LFLAGS) -o $@ $(SIM_OBJS) $(OBJ_DIR)/dnglarmulator.o $(LIBS)

clean:
	rm -rf $(OBJ_DIR)

#
# Utility target to create target directories on demand.
#
%/NUL:
	@mkdir -p $(@D)
