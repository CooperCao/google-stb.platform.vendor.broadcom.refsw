#!/usr/bin/expect
# -*-tcl-*-
#
# $Copyright Broadcom Corporation$
# $Id$
#

# load [ip] file
proc load {file} {
    error "load not availble in RTE"
}

proc reboot {args} {
    error "reboot not available in RTE"
}

proc connect {} {
    global spawn_id
    exp_send "\r"
    interact {
	"\u0016\u0004" {
	    exp_send "\u0016\u0004"
	}
	"\u0004" {
	    return
	}
    }
    send_user "\r"
}

proc logger {} {
    global spawn_id
    # don't want timeouts to interrupt logging, but if a test is still
    # running after a day then something has gone wrong.
    set timeout 86400
    # May need to force reconnection, eg in synacess servers.
    exp_send "\r"

    expect {
	-re {..*} {
	    puts -nonewline "$expect_out(buffer)"
	    exp_continue
	}
    }
}

proc command {args} {
    set cmd [join $args " "]

    global spawn_id
    exp_send "\r"
    set deadcount 0
    expect {
	-timeout 1
	-re {\u00ff..} {
	    # pause if we see a telnet negotiation, otherwise
	    # expect may read an early EOF
	    sleep 0.1
	    exp_continue
	}
	">Make sure to set Telnet mode to Local Echo Off\n\r>" {
            # Skip Synaccess message
            exp_send "\r"
            exp_continue
        }
	-re "^-$" {
	    # dongle dead?
	    if {$deadcount < 1} {
		# Try again..
		incr deadcount
		exp_send "\r"
		exp_continue
	    } else {
		exp_send_user -- "Dongle off\n"
		exp_send "\b"
		exit 1
	    }
	}
	default {
	    puts stderr "connect failed"
	    #exp_send "\b"
	    #exit 1
	}
	-re {> $}
    }

    set p [pid]
    # Send command with minimal wrapper just to get return code
    # without messing up the log file
    #regexp {^\s*(.*?)[;\s]*$} $cmd - cmd
    set send_slow {1 .1}
    exp_send -s -- "$cmd\r"

    # Skip command echo.  If we don't spot the echo quickly, ignore it
    # and move on
    expect {
	-timeout 1 timeout {}
	-re "$cmd\r\n"
    }

    set ret_code ""
    expect {
	-re "(.*)> " {
	    exp_send_user -- $expect_out(1,string)
	    set ret_code 0
	}
	-re "logout\r" {
	    set ret_code 0
	}
	full_buffer {
	    exp_send_user -- $expect_out(buffer)
	    exp_continue
	}
    }
    if {$ret_code == ""} {
	set ret_code 255
    }
    # Send some data - workaround for 1-second close down bug on older
    # versions of expect
    exp_send "\b"
    exit $ret_code
}

proc usage {} {
    puts stderr "Usage: $::argv0 \[-\](dev|ip:port) \[cmd \[args ...\]\]"
    puts stderr "       $::argv0 \[-\](dev|ip:port) load file"
    puts stderr "       $::argv0 \[-\](dev|ip:port) reboot \[key=value ...\]"
    exit 1
}

set vru "/var/run/utf"

# Args
if {[llength $argv] > 0 && [set host [lindex $argv 0]] != "-man"} {

    if {[info exists env(EXP_INTERNAL)]} {
	exp_internal 1
    } else {
	exp_internal 0
    }
    log_user 0
    set logger [regexp {^-(.*)} $host - host]
    if {[catch {
	if {[catch {
	    # Redirect to consolelogger, if available
	    set port \
		[gets [open "$vru/[string map {/ _ : _} $host]"]]
	    spawn -noecho -open [socket localhost $port]
	} ret]} {
	    if {[string match "*/*" $host]} {
		# reject background (logging) processes if they try to
		# talk to the device directly.
		if {$logger} {
		    exit
		}
		set fd [open $host {RDWR NONBLOCK}]
		fconfigure $fd \
		    -mode {115200,n,8,1} -buffering none -blocking 0
		catch {fconfigure $fd -handshake xonxoff}
		spawn -noecho -open $fd
	    } else {
		# Telnet gets a new session so no reset needed
		if {![regexp {(.*):(.*)} $host - host port]} {
		    set port 23
		}
		spawn -noecho -open [socket $host $port]
	    }
	}

	# Make sure we're using the same encoding as consolelogger
	fconfigure $spawn_id -encoding binary

	set timeout 60

	if {[llength $argv] == 1} {
	    connect
	} else {
	    set cmd [lindex $argv 1]
	    if {[llength $argv] == 2} {
		# Whole commandline probably quoted as one string
		set argv [lreplace $cmd 0 0]
		set cmd  [lindex $cmd 0]
	    } else {
		set argv [lreplace $argv 0 1]
	    }
	    if {$cmd == "logger"} {
		logger
	    } elseif {$cmd == "load"} {
		eval load $argv
	    } else {
		eval command $cmd $argv
	    }
	}
    } ret]} {
	puts stderr $ret
	exit 1
    }
    exit 0
}

# Leave this 'til last to improve performance
lappend auto_path . /projects/hnd/tools/linux/share/unittest
package require UTF::doc

UTF::doc {
    # [manpage_begin apshell n 1.0]
    # [moddesc {HND Wireless Test Framework}]
    # [titledesc {tool for managing a Broadcom Dongle}]
    # [copyright {2005 Broadcom Corporation}]
    # [description]
    # [para]

    # [cmd rteshell] is a command for communicating with a Linux
    # Dongle via the serial or telnet console.  If the serial port or
    # telnet host:port are being managed by a [cmd consolelogger]
    # process, [cmd rteshell] will connect to the [cmd consolelogger]
    # process instead.

    # [list_begin arguments]

    # [arg_def "" connection]

    # Every [cmd rteshell] command requires a [arg connection]
    # argument which specifies the mechanism for communicating with
    # the Dongle.  Various alternative connection mechanisms are
    # available:

    # [list_begin arguments]

    # [arg_def "" /dev/ttyS*]

    # The name of the serial port device directly connected to the Dongle.

    # [arg_def "" address]

    # The hostname or IP address of the Dongle.  In this case [cmd
    # rteshell] will use the Dongle's [cmd telnet] interface.

    # [para]

    # NOTE: this will not work for [cmd load] since it does not allow
    # access to the CFE> prompt.

    # [arg_def "" address:port]

    # The hostname or IP address and TCP port of a terminal server or
    # [cmd consolelogger] session.

    # [list_end]

    # [para]

    # If [cmd consolelogger] is not running only one [cmd rteshell]
    # process can access a device at a time.  This can cause problems
    # when background logging processes compete with foreground
    # command processes.  [cmd consolelogger] avoids this problem by
    # allowing multiple [cmd rteshell] processes to access the same
    # device.

    # [para]

    # [arg connection] may be prefixed with [cmd -] to indicate this
    # is a background process and therefore requires [cmd
    # consolelogger].  If [cmd consolelogger] is not running then
    # attempts to connect to [arg -connection] will fail silently.

    # [list_end]

    # [list_begin definitions]

    # [call [cmd rteshell] [arg connection] [lb][cmd {cmd ...}][rb]]

    # Simulates [cmd {rsh host cmd ...}] on Dongle.  Requires serial
    # access to the Dongle.

    # [list_begin arguments]

    # [arg_def "" {cmd ...}]

    # Optional command and arguments to be run.  If a command line is
    # not specified, an interactive terminal session is started.  To
    # disconnect from the session use ^D (however, like a regular
    # tty. if you need to input a literal ^D to the session you can
    # escape it by using ^V^D).

    # [para]

    # If a command line is specified, it will be run on the Dongle and
    # the results returned.  The command line can contain arbitrary
    # quotes and embedded newlines.

    # [para]

    # NOTE: The shell on the Dongle is very limited.

    # [list_end]

    # [list_end]

    # [see_also [uri APdoc.cgi?consolelogger consolelogger]]
    # [see_also [uri APdoc.cgi?vxshell vxshell]]
    # [see_also [uri APdoc.cgi?ciscoshell ciscoshell]]
    # [see_also [uri APdoc.cgi?linuxsimshell linuxsimshell]]

    # [manpage_end]
}

UTF::man
exit

