#!/bin/env utf
# -*-tcl-*-
#

#
# UTF test script for to test rate selection in the presence of collissions
#
# Written by: Robert J. McMahon January 2012
#
# $Id$
# $Copyright Broadcom Corporation$
#
# The InterfereRateSelect.test measures traffic performance in
# the presence of RF packet collisions and where the signal strengths
# remain constant.  Hence the only thing causing traffic loss is an
# interfering device's transmissions.   InterferRateSelect.test achieves
# collisions and controls the collision rate by using a hidden node
# (so it can't hear the DUT's transmissions, i.e. no NAV), disabling
# RTS/CTS, disabling  AMPDU retries, and shortening its tx op value
# (via cwmin, cwmax.)
#
package require UTF
package require UTF::Streams
package require UTF::Test::APChanspec
package require UTF::Test::ConnectAPSTA

package provide UTF::Test::InterfereRateSelect 2.0

UTF::Test InterfereRateSelect {args} {
    UTF::Getopts {
	{title.arg "" "Title"}
	{branch.arg "" "Branch override"}
	{date.arg "" "Image date"}
	{stadate.arg "" "Sta image date"}
	{hnstadate.arg "" "Hidden Node image date"}
	{apdate.arg "" "Sta image date"}
	{tag.arg "" "Router release tag"}
	{sta.arg ""}
	{tag.arg "" "Router release tag"}
	{statag.arg "" "STA release tag"}
	{bin.arg "" "STA image"}
	{ap.arg ""}
	{hnsta.arg ""}
	{pktsize.arg "1460"}
	{ifpktsize.arg "1460"}
	{holdtime.arg "10"}
	{step.arg "1"}
	{email.arg "" "Email Address"}
	{rts ""}
	{rtsif ""}
	{ampdu ""}
	{noapload "Don't load images"}
	{nostaload "Don't reload STA drivers"}
	{nohnstaload "Don't reload hidden node STA driver"}
	{norestore "Don't reset to defaults"}
	{chanspec.arg "6"}
	{outputtype.arg "png"}
	{mcs.arg "auto"}
	{ifmcs.arg "15"}
	{udprate.arg "100"}
	{ifmax.arg "40"}
	{ifmin.arg "1"}
	{nosetup ""}
	{graphsize.arg "1024,768"}
	{tcp ""}
    }

    proc parse_noba {sta stream {sleeptime 10} {cycles 1}} {
	for {set ix 0} {$ix < $cycles} {incr ix} {
	    $sta wl -u ampdu_clear_dump
	    $stream stats -clear
	    UTF::Sleep $sleeptime
	    set output [$sta wl -u dump ampdu]
	    if {[regexp {noba\s+\d+\s+\((\d+)%\)} $output - noba]} {
		set y [$stream stats -pktcount -sum]
		lappend nobaval($noba) $y
		if {![info exist nobacnt($noba)]} {
		    set nobacnt($noba) 1
		} else {
		    incr nobacnt($noba)
		}
		UTF::Message INFO $stream "noba=$noba pkt=$y"
		UTF::Message INFO $stream "lost=[$stream stats -lost]"
	    }
	}
	return [list [array get nobacnt] [array get nobaval]]
    }

    proc all_join_ssid {stas ssid {timeout 10} {numjoinattempts 3}} {
	if {$ssid ==  "" } {
	    return
	}
	for {set ix 0} {$ix < $numjoinattempts} {incr ix} {
	    set stas2check {}
	    foreach sta $stas {
		set ::__wlwatch 0
		after [expr {$timeout * 1000}] {set ::__wlwatch 1}
		set wlcmd_done 0
		while {!$wlcmd_done && !$::__wlwatch} {
		    if {![catch {$sta wl join $ssid} err]} {
			set wlcmd_done 1
		    } else {
			UTF::Sleep 1.0
		    }
		}
		if {$::__wlwatch} {
		    UTF::Message WARN "" "Timeout on wl join for $sta"
		} else {
		    lappend stas2check $sta
		}
	    }
	    set ::_joinwatchdog 0
	    after [expr {$timeout * 1000}] {set ::_joinwatchdog 1}
	    while {[llength $stas2check] && !$::_joinwatchdog} {
		UTF::Sleep 1
		foreach sta $stas2check {
		    if {![catch {$sta wl ssid} currsid] && $currsid == $ssid} {
			set stas2check [lsearch -all -not -inline $stas2check $sta]
		    }
		}
	    }
	    if {[llength $stas2check]} {
		UTF::Message WARN "" "join timeout for $stas2check and ssid $ssid"
	    }
	    set stas $stas2check
	}
    }
    proc enable_rtscts {{stas ""} ssid {size 32}} {
	if {![llength $stas]} {
	    set stas [UTF::STA info instances]
	}
	foreach sta $stas {
	    set ssid [$sta wl ssid]
	    $sta wl down
	    $sta wl rtsthresh $size
	    $sta wl up
	}
	all_join_ssid $stas $ssid
    }
    proc disable_rtscts {{stas ""} ssid {size 2347}} {
	if {![llength $stas]} {
	    set stas [UTF::STA info instances]
	}
	foreach sta $stas {
	    set ssid [$sta wl ssid]
	    $sta wl down
	    $sta wl rtsthresh $size
	    $sta wl up
	}
	all_join_ssid $stas $ssid
    }
    proc enable_ampdu {{stas ""} ssid} {
	if {![llength $stas]} {
	    set stas [UTF::STA info instances]
	}
	foreach sta $stas {
	    set ssid [$sta wl ssid]
	    $sta wl down
	    $sta wl ampdu 1
	    $sta wl up
	}
	all_join_ssid $stas $ssid
    }
    proc disable_ampdu {{stas ""} ssid} {
	if {![llength $stas]} {
	    set stas [UTF::STA info instances]
	}
	foreach sta $stas {
	    set ssid [$sta wl ssid]
	    $sta wl down
	    $sta wl ampdu 0
	    $sta wl up
	}
	all_join_ssid $stas $ssid
    }

    foreach dut [concat $(sta) $(hnsta) $(ap)] {
	if {$(date) ne ""} {
	    $dut configure -date $(date)
	}
    }
    if {$(apdate) ne ""} {
	$(ap) configure -date $(apdate)
    }
    foreach STA [concat $(sta) $(hnsta)] {
	if {$(bin) ne ""} {
	    $STA configure -image $(bin) -date {}
	} elseif {$(statag) ne ""} {
	    $STA configure -tag $(statag)
	}
	if {$(stadate) ne ""} {
	    $STA configure -date $(stadate)
	}
    }
    if {$(hnstadate) ne ""} {
	$(hnsta) configure -date $(hnstadate)
    }

    # Compact build list for title
    # Include the WDS list, in case the AP list is empty.  Duplicates
    # will be removed automatically.
    set build [UTF::BuildTitle [concat $(sta) $(ap) $(hnsta)]]

    set TITLE "UTF Rate Selection w/interfere $(title) ($build)"
    UTF::Message INFO "" $TITLE
    unset build

    UTF::WrapSummary $UTF::SummaryDir $TITLE "" $(email) {
	if {[info exists ::UTF::SetupTestBed]} {
	    UTF::Try "Setup testbed" {
		eval $::UTF::SetupTestBed
	    }
	}
	if {!$(noapload)} {
	    foreach Router $(ap) {
		UTF::Try "[$Router cget -name]: Find Router Image" {
		    set date [$Router cget -date]
		    if {$date eq ""} {
			set date [clock format [clock seconds] -format "%Y.%-m.%-e"]
		    }
		    UTF::CheckImage $Router $date unknown
		}
		UTF::Try "[$Router cget -name]: Load Image" {
		    $Router load
		}
		UTF::Try "[$Router cget -name]: Restore Defaults" {
		    $Router restore_defaults
		    set what [$Router whatami]
		    # Pull out chip info and replace whitespace to
		    # make it easier for external parsers.
		    regsub -all {\s+} [lreplace $what 0 0] {_} w
		    if {[catch {$UTF::Summary header_update 1 $w} ret]} {
			UTF::Message WARN $Router $ret
		    }
		    set what
		}
	    }
	}
	set STAS ""
	if {!$(nostaload)} {
	    lappend STAS $(sta)
	}
	if {!$(nohnstaload)} {
	    lappend STAS $(hnsta)
	}
	foreach STA $STAS {
	    UTF::Try "[$STA cget -name]: Find STA Image" {
		set date [$STA cget -date]
		if {$date eq ""} {
		    set date [clock format [clock seconds] -format "%Y.%-m.%-e"]
		}
		UTF::CheckImage $STA $date unknown
	    }
	    UTF::Try "[$STA cget -name]: load" {
		$STA load
	    }
	    UTF::Try "[$STA cget -name]: defaults" {
		$STA services stop
		catch {$STA wl msglevel +error +assoc}
		if {![$STA cget -nomimo_bw_cap]} {
		    catch {$STA wl down}
		    # Enable 40 in 2.4, if available.
		    # Doesn't work for LMAC since LMAC is never "down"
		    $STA wl -u mimo_bw_cap 1
		    $STA wl up
		    UTF::Sleep 1
		}
		$STA wl ver
		set what [$STA whatami]
		# Pull out chip info and replace whitespace to
		# make it easier for external parsers.
		regsub -all {\s+} [lreplace $what 0 0] {_} w
		if {[catch {$UTF::Summary header_update 1 $w} ret]} {
		    UTF::Message WARN $STA $ret
		}
		set what
	    }
	}
	if {!$(nosetup)} {
	    UTF::Try "Associate $(ap) w/ $(sta) $(hnsta)" {
		UTF::Test::ConnectAPSTA $(ap) "$(sta) $(hnsta)"
	    }
	}
	UTF::Try "Stream setup $(sta)" {
	    $(sta) wl -u dump wme
	    if {$(tcp)} {
		set stream [UTF::stream %AUTO% -transmitsta $(sta) -receivesta [$(ap) cget -lanpeer] -protocol tcp -api_msgs 0]
	    } else {
		set stream [UTF::stream %AUTO% -transmitsta $(sta) -receivesta [$(ap) cget -lanpeer] -pktsize $(pktsize) -rate "$(udprate)M" -api_msgs 0]
	    }
	    $stream start
	    $stream linkcheck
	    $stream stop
	    if {$(tcp)} {
		set rc "TCP"
	    } else {
		set rc "pktsize=$(ifpktsize)"
	    }
	    return $rc
	}
	UTF::Try "Set Interferer($(hnsta)) MCS=$(ifmcs)" {
	    if {[info command ::hidden_node] eq "::hidden_node"} {
		eval {::hidden_node on}
	    }
	    if {$(rtsif)} {
		enable_rtscts "$(hnsta)" [$(ap) wl ssid]
		set ifrtsmsg "rts=1"
	    } else {
		disable_rtscts "$(hnsta)" [$(ap) wl ssid]
		set ifrtsmsg "rts=0"
	    }
	    enable_ampdu "$(hnsta)" [$(ap) wl ssid]
	    $(hnsta) wl nrate -m 15
	    # tids 0-7
	    for {set ix 0} {$ix < 1} {incr ix} {
		$(hnsta) wl -u ampdu_retry_limit_tid $ix 0
		$(hnsta) wl -u ampdu_rr_retry_limit_tid $ix 0
	    }
	    $(hnsta) wl -u wme_ac sta be txop 0 ecwmin 1 ecwmax 1
	    set cwmin "unk"
	    set cwmax "unk"
	    if {![catch {$(hnsta) wl dump wme} output]} {
		if {![regexp {AC_BE: txop [0-9x]+\s+cwmin\s+([0-9x]+)\s+cwmax\s+([0-9x]+)} $output - cwmin cwmax]} {
		    UTF::Message WARN $hnsta "Could not find cwmin/cwmax"
		}
	    }
	    set interfere [UTF::stream %AUTO% -transmitsta $(hnsta) -receivesta [$(ap) cget -lanpeer] -pktsize $(ifpktsize) -rate "1M" -tos 0x0 -api_msgs 0]
	    $interfere start
	    $interfere linkcheck
	    $interfere stop
	    return "pktsize=$(ifpktsize) cwmin=$cwmin cwmax=$cwmax $ifrtsmsg"
	}
	foreach mcs [concat $(mcs) $(ifmcs)] {
	    UTF::Try "Set DUT($(sta)) MCS=$mcs" {
		if {$(rts)} {
		    enable_rtscts "$(sta)" [$(ap) wl ssid]
		    set rtsmsg "rts=1"
		} else {
		    disable_rtscts "$(sta)" [$(ap) wl ssid]
		    set rtsmsg "rts=0"
		}
		enable_ampdu "$(sta)" [$(ap) wl ssid]
		if {$mcs eq "auto"} {
		    set chanspec [$(sta) wl chanspec]
		    # Figure out what band we're using so that we know how to set rate
		    # to "auto".  Can't just use "rate" since we may not be bandlocked.
		    if {[regexp {^\d+} $chanspec c] && $c > 15} {
			set lrate a_rate
		    } else {
			set lrate bg_rate
		    }
		    $(sta) wl $lrate auto
		} else {
		    $(sta) wl nrate -m $mcs
		}
		return "FB=[$(sta) wl frameburst] $rtsmsg"
	    }
	    array set mcshist {}
	    array set sgihist {}
	    set ifudprate 0
	    set cycles [expr {int(1 + ($(ifmax)-$(ifmin)) / $(step))}]
	    UTF::Try "Run (mcs=${mcs},cycles=$cycles)" {
		$stream start
		$stream samplers -enable
		set sumplot [UTF::StreamStatAggregate %AUTO% -stat "rate" -linetype 3]
		UTF::stream allstreams stats -clear
		UTF::Sleep $(holdtime)
		while {$cycles} {
		    if {$ifudprate < $(ifmin)} {
			set ifudprate $(ifmin)
			$interfere configure -rate "${(ifmin)}M"
			$interfere start
		    }
		    $(sta) wl -u ampdu_clear_dump
		    UTF::Sleep $(holdtime)
		    set lost [$stream stats -lost]
		    set pps [$stream stats -pps]
		    UTF::Message STATS $stream "pps=$pps"
		    UTF::Message STATS $stream "lost=$lost"
		    $(sta) wl -u dump ampdu
		    $(hnsta) wl -u dump ampdu
		    incr cycles -1
		    incr ifudprate +1
		    $interfere configure -rate "${ifudprate}M"
		}
		$interfere stop
		UTF::Sleep $(holdtime)
		$stream samplers -disable
		set totalbytes($mcs) [$stream stats -bytes -sum]
		catch {$(sta) wl -u ampdu_clear_dump}
		if {$(tcp)} {
		    set tmsg "TCP"
		} else {
		    set tmsg "Offered=$(udprate)M"
		}
		set sg [UTF::streamgraph %AUTO% -title "Thruput STA=$(sta) [$(sta) cget -date] $tmsg MCS=$mcs $rtsmsg\\nInterfere STA=$(hnsta) [$(hnsta) cget -date] MCS=$(ifmcs) pktsize$(ifpktsize) cwmin=$cwmin cwmax=$cwmax $ifrtsmsg Step=1M Steps=[expr {int($(ifmax) / $(step))}] holdtime=${(holdtime)}s" -stat rate -graphsize $(graphsize)]
		set rc [$sg plot]
		append rc [string range [$sumplot plot -title "Aggregate" -graphsize $(graphsize)] 5 end]
		$sumplot destroy
		if {!$(tcp)} {
		    set sglost [UTF::streamgraph %AUTO% -title "Lost STA=$(sta) $tmsg MCS=$mcs \\nInterfere STA=$(hnsta) MCS=$(ifmcs) pktsize$(ifpktsize) cwmin=$cwmin cwmax=$cwmax $ifrtsmsg Step=1M Steps=[expr {int($(ifmax) / $(step))}] holdtime=${(holdtime)}s" -stat lost -graphsize $(graphsize) -streams "$stream"]
		    append rc " [string range [$sglost plot] 5 end]"
		}
		set sglostif [UTF::streamgraph %AUTO% -title "Interferer Lost STA=$(sta) $tmsg MCS=$mcs \\nInterfere STA=$(hnsta) MCS=$(ifmcs) pktsize$(ifpktsize) cwmin=$cwmin cwmax=$cwmax $ifrtsmsg Step=1M Steps=[expr {int($(ifmax) / $(step))}] holdtime=${(holdtime)}s" -stat lost -graphsize $(graphsize) -streams "$interfere" -reporttext "if-lost" -linetype 2]
		append rc " [string range [$sglostif plot] 5 end]"
		#set sgpps [UTF::streamgraph %AUTO% -title "$tmsg MCS=$mcs Step=1M Steps=[expr {int($(ifmax) / $(step))}] holdtime=${(holdtime)}s\\nInterfere MCS=$(ifmcs) pktsize$(ifpktsize)" -stat pps]
		catch {$(sta) wl -u dump ampdu}
		return $rc
	    }
	}
	UTF::Try "Diff Ratio > 5%" {
	    UTF::Message INFO "" "bytes($(ifmcs))=$totalbytes($(ifmcs)) bytes($(mcs))=$totalbytes($(mcs))"
	    set ratio [expr {abs((100.0 * ($totalbytes($(ifmcs)) - $totalbytes($(mcs)))) / $totalbytes($(ifmcs)))}]
	    if {$ratio > 5} {
		error "[format %.0f $ratio]%"
	    } else {
		return "[format %.0f $ratio]%"
	    }
	}
    }
    UTF::stream exitstreams
}
