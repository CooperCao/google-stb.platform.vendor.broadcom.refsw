#!/bin/env utf
# -*-tcl-*-

# Simultaneous Dual Band max throughput test.  These numbers are often
# used by Marketing.

# $Id: 781b78dda3740b6c5e3436498a72a654fbb58437 $
# $Copyright Broadcom Corporation$
#

package require UTF
package require UTF::Test::ConnectAPSTA
package require UTF::Test::APChanspec
package require UTF::Test::controlchart

package provide UTF::Test::DualBand 2.0

namespace eval UTF::Test::DualBand {

    proc diagcc1 {APS path ccopts} {
	controlchart $path {*}$ccopts
    }

    proc diagcc {APS path ccopts} {
	foreach {SRC SNK} $path {
	    catch {$SRC wl ampdu_clear_dump}
	    catch {$SRC wl dump_clear ampdu}
	}
	try {
	    controlchart $path {*}$ccopts
	} finally {
	    foreach {SRC SNK} $path {
		catch {$SRC wl dump ampdu}
	    }
	}
    }

}

UTF::Test DualBand {DUT1 DUT2 REF1 REF2 args} {

    UTF::Getopts [subst {
	{i.arg "2" "Interval"}
	{s.arg "5" "samples"}
	{msg.arg "DualBand" "Message"}
	{branch.arg "[$DUT1 branchname]" "Branch"}
	{c1.arg "36l" "Primary chanspec"}
	{c2.arg "3l" "Secondary chanspec"}
	{sec1.arg "open" "Primary security"}
	{sec2.arg "open" "secondary security"}
	{PMcore0.arg "0" "Primary PowerManagement"}
	{PMcore1.arg "0" "Secoundary PowerManagement"}
	{lan1.arg "$DUT1" "lan endpoint"}
	{lan2.arg "$DUT2" "lan2 endpoint"}
	{b1.arg "[$DUT1 cget -udp]" "UDP data rate. (0 for TCP)"}
	{b2.arg "[$DUT2 cget -udp]" "UDP data rate. (0 for TCP)"}
	{ack_ratio.arg "" "Overthruster ack_ratio"}
	{loop.arg "" "deprecated"}
	{perfcache.parg "" "Performance Cache"}
	{perfloop.parg "1" "Performance loop"}
	{history.parg "30" "History"}
	{nocache "Don't update performance cache"}
	{ampdu_mpdu.arg "" "ampdu_mpdu"}
	{stamode "Test DUT as a STA instead of AP"}
	{rate1.arg "" "fix rate in Primary"}
	{rate2.arg "" "fix rate in secoundary"}
	{icargs.arg "" "Extra args to pass to interface_create"}
    }]
    if {$(loop) ne  ""} {
	set (perfloop) $(loop)
    }
    if {$DUT1 eq $DUT2} {
	set msg "$DUT1: $(msg)"
    } else {
	set msg "$DUT1 $DUT2: $(msg)"
    }

    if {$(nocache)} {
	set ::UTF::ControlChart::readonly 1
    }
    set k [concat $(branch) $DUT1]

    if {$(b1) ne "0"} {
	append msg ": UDP"
	lappend k udp
    }

    lappend k $(sec1) $(sec2) $(PMcore0) $(PMcore1)

    set oldk $k

    if {$(sec1) ne "open"} {
	set sec1m "($(sec1))"
    } else {
        set sec1m ""
    }

    if {$(sec2) ne "open"} {
	set sec2m "($(sec2))"
    } else {
        set sec2m ""
    }

    if {$(PMcore0) ne "0"} {
	set PMnull0 "($(PMcore0))"
    } else {
	set PMnull0 ""
    }

    if {$(PMcore1) ne "0"} {
	set PMnull1 "($(PMcore1))"
    } else {
	set PMnull1 ""
    }
    set setup 0

    UTF::Try "$msg: TX$sec1m$PMnull0/TX$sec2m$PMnull1" {

	if {$DUT1 eq $DUT2} {
	    set DUT2 [$DUT1 wl_interface_create sta #2 {*}$(icargs)]
	    UTF::Sleep 1
	    set dut2islocal 1
	    if {$DUT1 eq $(lan2)} {
		set (lan2) $DUT2
	    }
	}
	if {$(stamode)} {
	    set AP1 $REF1
	    set AP2 $REF2
	    set STA1 $DUT1
	    set STA2 $DUT2
	} else {
	    set AP1 $DUT1
	    set AP2 $DUT2
	    set STA1 $REF1
	    set STA2 $REF2
	}


	catch {$STA1 wl disassoc}
	catch {$STA2 wl disassoc}

	if {!([$STA2 wl bw_cap 2] & 0x2)} {
	    $STA2 wl down
	    $STA2 wl bw_cap 2 -1
	}

	APChanspec $AP1 $(c1)
	APChanspec $AP2 $(c2)
	APConfigureSecurity $AP1 -security $(sec1)
	APConfigureSecurity $AP2 -security $(sec2)

	if {[catch {$STA1 wl bssid} ret] ||
	    $ret eq "00:00:00:00:00:00" ||
	    $ret ne [$AP1 wl bssid]} {
	    ConnectAPSTA $AP1 $STA1
	}
	if {[catch {$STA2 wl bssid} ret] ||
	    $ret eq "00:00:00:00:00:00" ||
	    $ret ne [$AP2 wl bssid]} {
	    ConnectAPSTA $AP2 $STA2
	}

	$DUT1 wl frameburst 1
	$DUT2 wl frameburst 1
	$REF1 wl frameburst 1
	$REF2 wl frameburst 1

	if {$(ack_ratio) ne ""} {
	    $DUT1 wl ack_ratio $(ack_ratio)
	    $DUT2 wl ack_ratio $(ack_ratio)
	    $REF1 wl ack_ratio $(ack_ratio)
	    $REF2 wl ack_ratio $(ack_ratio)
	}
	if {$(ampdu_mpdu) ne ""} {
	    $DUT1 wl ampdu_mpdu $(ampdu_mpdu)
	    $DUT2 wl ampdu_mpdu $(ampdu_mpdu)
	}
	if {($(PMcore0) == "PM1")} {
	    $STA1 wl PM 1
	}
	if {($(PMcore0) == "PM2")} {
	    $STA1 wl PM 2
	}
	if {($(PMcore1) == "PM1")} {
	    $STA2 wl PM 1
	}
	if {($(PMcore1) == "PM2")} {
	    $STA2 wl PM 2
	}
	if {($(rate1) ne "")} {
		$DUT1 txrate [$DUT1 band $(c1)] $(rate1)
	}
	if {($(rate2) ne "")} {
		$DUT2 txrate [$DUT2 band $(c2)] $(rate2)
	}
	# Auto TCP window size setting based on phy rate
	set w [$STA1 tcpautowindow]

	set ccopts [list -key $k -i $(i) -s $(s) -window $w   \
			-loop $(perfloop) -perfcache $(perfcache) \
			-history $(history)]
	if {$k ne $oldk} {
	    lappend ccopts -oldkey $oldk
	}
	if {$(b1) ne "0"} {
	    lappend ccopts -b [list $(b1) $(b2)]
	}
	# Warm up
	UTF::Multiperf [list $(lan1) $REF1 $(lan2) $REF2] -t 1 -w $w \
	    -b [list $(b1) $(b2)]

	set setup 1
	diagcc [list $DUT1 $DUT2] [list $(lan1) $REF1 $(lan2) $REF2] $ccopts
    } finally {
	catch {$DUT1 wl dump rsdb}
    }

    # skip pretest after setup
    #lappend ccopts -nopretest

    if {$setup} {

	UTF::Try "$msg: RX$sec1m$PMnull0/RX$sec2m$PMnull1" {
	    diagcc [list $DUT1 $DUT2] [list $REF1 $(lan1) $REF2 $(lan2)] $ccopts
	}

	UTF::Try "$msg: TX$sec1m$PMnull0/RX$sec2m$PMnull1" {
	    diagcc [list $DUT1 $DUT2] [list $(lan1) $REF1 $REF2 $(lan2)] $ccopts
	}

	UTF::Try "$msg: RX$sec1m$PMnull0/TX$sec2m$PMnull1" {
	    diagcc [list $DUT1 $DUT2] [list $REF1 $(lan1) $(lan2) $REF2] $ccopts
	}

    }

    catch {$STA1 wl disassoc}
    catch {$STA2 wl disassoc}

    if {[info exists dut2islocal]} {
	$DUT2 wl_interface_remove
    } else {
	# If DUT1 and DUT2 are clones, deinit the second one to avoid
	# duplicate logging.  If they are the same host object, leave it
	# alone.
	if {[$DUT2 cget -host] ne [$DUT1 cget -host]} {
	    $DUT2 deinit
	}
    }
}
