#!/bin/env utf
# -*-tcl-*-
#

#
# UTF test script to do ConnectAPSTA for a first packet & first web page tests
#
# Written by: Attar Dadapeer July 2015
#
# $Copyright Broadcom Corporation$
#
package require UTF
package require UTF::Test::ConnectAPSTA
package provide UTF::Test::AutoJoinSetup 2.0


# This is for only MacOS
# Verify the AP STA connect
# Setup one element in the preferred network
# Clear scan cache
# Set the radio state

UTF::Test AutoJoinSetup {args} {
    UTF::Getopts {
	{ap.arg "4708ap" "APs under test"}
	{sta.arg "43602lx2" "STA under test"}
	{force "Require a full ConnectAPSTA"}
	{v "verbose logging"}
	{retry.arg "1" "Retry count"}
	{retrysleep.arg "3" "Sleep time before retry"}
	{radio.arg "off" "Set the final radio state"}
	{security.arg "" "802.11 security"}
	{chanspec.arg "" "802.11 chanspec"}
	{noblacklist "Do anti-blacklisting"}
    }
    if {![$(sta) hostis MacOS]} {
    	UTF::Message WARN "" "AutoJoin for $(sta) not supported"
	return
    }
    set ssid [$(ap) wl ssid]
    # Toggle the wi-fi radio to reset the blacklist deuth counter
    if {[$(sta) hostis MacOS] && $(noblacklist)} {
	UTF::Message INFO $(sta) "Wi-fi radio toggle to reset blacklist deauth counter"
	$(sta) networksetup -setairportpower [$(sta) cget -device] off
	$(sta) networksetup -setairportpower [$(sta) cget -device] on
    }
    if {$(force) || [catch {$(sta) wl bssid} stabssid] || ([$(ap) wl bssid] ne $stabssid)} {
	if {[$(sta) hostis DHD]} {
	    UTF::Test::ConnectAPSTA $(ap) $(sta) -security $(security)
	} else {
	    set prefnw_check 0
	    for {set setup_retry 0} {$setup_retry <= $(retry)} {incr setup_retry} {
		$(sta) wl disassoc
		if {$(v)} {
		    UTF::Message INFO $(sta) "Clearing preferred network list"
		}
		$(sta) networksetup -removeallpreferredwirelessnetworks [$(sta) cget -device]
		if {$(v)} {
		    UTF::Message INFO $(sta) "Listing preferred network list"
		}
		set prefnw_list [$(sta) networksetup -listpreferredwirelessnetworks [$(sta) cget -device]]
		if {![regexp {No preferred networks on interface} $prefnw_list]} {
		    UTF::Message ERROR $(sta) "Preferred network not cleared as expected"
		    continue
		}
		$(sta) networksetup -setairportpower [$(sta) cget -device] on
		set cmdargs "$(ap) $(sta)"
		if {$(security) ne "" } {
		    set cmdargs [concat $cmdargs -security $(security)]
		}
		if {$(chanspec) ne "" } {
		    set cmdargs [concat $cmdargs -chanspec $(chanspec)]
		}
		if {[catch {ConnectAPSTA {*}$cmdargs} res]} {
		    UTF::Message ERROR $(sta) "Setup failure (${setup_retry})"
		    if {$setup_retry < $(retry)} {
			UTF::Try "Fault recovery, $(sta) reload" {
			    UTF::Message WARN $(sta) "reload method requested due to failed ConnectAPSTA"
			    $(sta) reload
			}
		    } else {
			error "Setup failed because of ConnectAPSTA"
		    }
		} else {
		    set prefnw_check 1
		    break
		}
	    }
	    if {!$prefnw_check} {
		error "Setup failed because of clear preferred network error"
	    }
	}
    }
    set prefnw_list [$(sta) networksetup -listpreferredwirelessnetworks [$(sta) cget -device]]
    if {![regexp "Preferred networks on .+$ssid" $prefnw_list]} {
	UTF::Message ERROR $(sta) "Preferred network $ssid not found"
    }
    if {[$(sta) hostis MacOS]} {
	$(sta) apple80211 [$(sta) cget -device] -scancache_clear
    }
    $(sta) ipaddr_cache_invalidate
    if {[$(sta) hostis Linux DHD]} {
	set asyncid [$(sta) rexec -async wl radio $(radio)]
    }
    if {[$(sta) hostis MacOS]} {
	::UTF::KPI::enable_autojoin_osevents $(sta)
        set asyncid [$(sta) rexec -async networksetup -setairportpower [$(sta) cget -device] $(radio)]
    }
    return $asyncid
}
