#!/bin/env utf
# -*-tcl-*-
#
# UTF test script for changing channel of an AP interface
# $Id$
#

#
# CHAN is a chanspec identifier, with 0 for auto, eg:
# 11b
# 0b
# 36a
# 0a

package require UTF

package provide UTF::Test::APChanspec 2.0

namespace eval UTF::Test::APChanspec {

    proc chanspec {STA} {
	if {![catch {$STA wl chanspec} ret]} {
	    return $ret
	} elseif {[regexp "Unsupported" $ret]} {
	    set band [$STA wl band]
	    # Don't need to worry about sidebands since if sidebands
	    # are available then so is chanspec
	    regexp {Channel: (\d+)} [$STA wl status] - channel
	    return "$channel$band ()"
	} else {
	    error $ret
	}
    }

}

# Returns 1 if this is expected to cause roaming on an associated STA,
# 0 otherwise.

UTF::Test APChanspec {AP {CHAN 0b} args} {

    if {[catch {$AP cget -use11h} use11h]} {
	set use11h 0
    }

    UTF::Getopts [subst {
	{nobandlock "Don't band lock AP"}
	{loose "Don't force AP mode, only verify band not channel."}
	{usewl "Force use of wl commands, even if nvram is available"}
	{usecsa.arg 0 "Use Channel Switch Announcements"}
	{use11h.arg "$use11h" "Use 11h"}
    }]

    set isup [$AP wl isup]
    set ochan [lindex [$AP wl chanspec] 0]

    if {!$(loose) && $isup && $ochan eq $CHAN} {
	# Already there
	return 0
    }


    if {[$AP hostis Airport]} {
	# Apple
	set wlname [$AP wlname]

	if {![regexp {(\d+)([ab]?)([ul])?} $CHAN - channel band bw]} {
	    error "Bad chanspec: $CHAN"
	}

	set nv(${wlname}.raSt) 0; # radio "0" on,  "3" off.
	set nv(${wlname}.raCh) $channel
	if {$bw eq ""} {
	    # Wide Channel
	    set nv(${wlname}.raWC) "false"
	} else {
	    set nv(${wlname}.raWC) "true"
	}
	set updated 0
	foreach n [array names nv] {
	    if {[$AP acp -q getplistvalue WiFi $n] ne $nv($n)} {
		$AP acp setplistvalue WiFi $n $nv($n)
		set updated 1
	    }
	}
	if {$updated} {
	    $AP acp -r
	}
	return 1
    }

    if {$(use11h)} {

	set oband [$AP band $ochan]
	set obw [$AP bw $ochan]

	set band [$AP band $CHAN]
	set bw [$AP bw $CHAN]
	set isradar [regexp {RADAR} [$AP wl chan_info $CHAN]]

#	# Setting dfs_preism 0 lets us test RADAR channels, except it
#	# doesn't work with CSA on BISON05T
#	set SWWLAN76730 [expr {[regexp {BISON05T_} [$AP cget -tag]] &&
#			       [regexp {RADAR} [$AP wl chan_info $CHAN]]}]

	if {$(usecsa)} {
	    if {$isradar} {
		UTF::Message INFO $AP "Skip CSA on RADAR channel"
	    } elseif {$oband ne $band} {
		UTF::Message INFO $AP "Skip CSA on Band change"
	    } elseif {$obw ne $bw} {
		UTF::Message INFO $AP "Skip CSA on BW change"
	    } elseif {[$AP wl spect] eq "Off" } {
		UTF::Message INFO $AP "Skip CSA as spect is not enabled"
	    } elseif {!$isup} {
		UTF::Message INFO $AP "Skip CSA as AP is not up"
	    } else {

		# $AP wl dfs_preism 0
		$AP wl csa 0 3 $CHAN
		UTF::Sleep 0.4
		set c [lindex [$AP wl chanspec] 0]
		if {!$(loose) && $c ne $CHAN} {
		    # For IBSS don't verify
		    error "Chanspec $c != $CHAN"
		}
		return 0
	    }
	}
    }

    if {$(usewl) || ![$AP wlconf_by_nvram]} {
	# No nvram, just use wl
	# Make sure we're in AP mode.  Do this before setting
	# chanspec, else chanspec may change.
	if {[$AP cget -ssid] ne "" && [$AP wl ssid] ne [$AP cget -ssid]
	    && !$(loose)} {
	    # We lost our SSID and possibly other settings.  Renew
	    # SoftAP setup
	    package require UTF::Test::APConfigureSecurity
	    APConfigureSecurity $AP -security renew
	}
	$AP wl down

	# XXXX Settings here assume the AP is a REF and thus is
	# allowed to do whatever is necessary to make the channel
	# testable for the DUT STA.  If the AP is actually under test,
	# these need reconsidering.

	set band [$AP band $CHAN]
	if {[catch {$AP wl bw_cap $band -1}]} {
	    $AP wl -u mimo_bw_cap 1
	}

	# Turn off 2g40 blocker.
	$AP wl -u obss_coex 0

	if {$(use11h)} {
	    # Force channel and turn off radar monitoring
	    if {$band eq "a"} {
		if {$isradar} {
		    $AP wl -u spect 0
		} else {
		    $AP wl -u spect 1
#		    $AP wl -u dfs_preism 0
		    $AP wl -u dfs_channel_forced $CHAN
		}
	    }
	} else {
	    # Turn off spectrum management.  (WAR for some channel issues
	    # - needs review)
	    $AP wl -u spect 0
	}

	$AP wl chanspec $CHAN
	if {[regexp "Restricted" [$AP wl chan_info $CHAN]]} {
	    $AP worry "Attempting to use restricted channel $CHAN"
	}
	$AP wl up
	if {[$AP wl -u ap] eq 1} {
	    # bss may be unsupported for IBSS and may cause scans for STA
	    $AP wl bss up
	}
	set c [lindex [$AP wl chanspec] 0]
	if {!$(loose) && $c ne $CHAN} {
	    # For IBSS don't verify
	    error "Chanspec $c != $CHAN"
	}
	# Make sure we haven't lost our IP address
	if {[set IP [$AP cget -ipaddr]] ne "dhcp"} {
	    $AP ifconfig $IP
	    if {[$AP cget -hasdhcpd]} {
		$AP dhcpd_reset
	    }
	}
	if {$(usewl) && [$AP cget -wlinitcmds] ne ""} {
	    $AP rexec [$AP cget -wlinitcmds]
	}
	return 1
    }

    # Devices with nvram

    set wlname [$AP wlname]
    # Watch out for MBSS - use physical device for channel
    regsub {\.\d+} $wlname {} wlname

    if {[regexp {(\d+)([ab]?)([ul])?} $CHAN - channel band ul]} {
	set bw [$AP bw $CHAN]
	set nv(${wlname}_radio) 1

	if {!$(loose)} {
	    set nv(${wlname}_mode) "ap"
	}
	set band [$AP band $CHAN]
	set nv(${wlname}_nband) [expr {$band eq "a"?1:2}]

	# Record chanspec directly for newer routers
	set nv(${wlname}_chanspec) $CHAN
	if {[$AP hostis STBAP]} {
	    if {$bw eq 80} {
		set nv(${wlname}_bw_cap) "7"
	    } elseif {$bw eq 40} {
		set nv(${wlname}_bw_cap) "3"
	    } else {
		set nv(${wlname}_bw_cap) "1"
	    }
	} else {
	    set nv(${wlname}_bw_cap) "-1"
	}

	if {![$AP hostis DSL STBAP]} {
	    # Override DFS
	    set nv(${wlname}_dfs_preism) 0
	    set nv(${wlname}_dfs_channel_forced) $CHAN
	}

	# Set channel and nctrlsb for older routers
	set nv(${wlname}_channel) $channel
	if {[$AP hostis Router STBAP]} {
	    if {$ul eq "l"} {
		set nv(${wlname}_nctrlsb) lower
		set nv(${wlname}_nbw) 40
		set nv(${wlname}_nbw_cap) 1
		set nv(${wlname}_phytype) "n"
	    } elseif {$ul eq "u"} {
		set nv(${wlname}_nctrlsb) upper
		set nv(${wlname}_nbw) 40
		set nv(${wlname}_nbw_cap) 1
		set nv(${wlname}_phytype) "n"
	    } else {
		set nv(${wlname}_nctrlsb) none
		set nv(${wlname}_nbw) 20
		set nv(${wlname}_nbw_cap) 0
		set nv(${wlname}_phytype) [expr {$band eq "a"?"a":"g"}]
	    }
	}

	if {$(use11h)} {
	    # Turn off spectrum management if we're trying to use
	    # RADAR channels.
	    if {$isradar} {
		set nv(${wlname}_reg_mode) off
	    } else {
		set nv(${wlname}_reg_mode) h
	    }
	}
    } else {
	error "Bad chanspec: $CHAN"
    }

    set updated 0
    foreach n [array names nv] {
	set v [$AP nvram get $n]
	# If phytype is "n" then leave it alone
	if {[regexp {_phytype$} $n] && $v eq "n"} {
	    continue
	}
	if {$v ne $nv($n)} {
	    $AP nvram set "$n=$nv($n)"
	    set updated 1
	}
    }

    # If nvram is updated, or current channel does not match
    # expectations then restart the router.
    if {$updated || [lindex [set c [chanspec $AP]] 0] ne $CHAN} {
	if {[$AP cget -defer_restart]} {
	    UTF::Message LOG $AP "Deferred restart"
	    # Skip checks
	    return 0
	}
	$AP nvram commit
	$AP restart
	set c [chanspec $AP]
    }
    if {[regexp "Restricted" [$AP wl chan_info $CHAN]]} {
	$AP worry "Attempting to use restricted channel $CHAN"
    }
    if {$(loose) || [regexp {^0} $CHAN]} {
	# For auto or WET, just verify band
	set b [$AP wl band]
	if {![regexp $band $b]} {
	    error "Band $b != $band"
	}
    } elseif {[lindex $c 0] ne $CHAN} {
	# If we asked for 40MHz but got 20MHz, and obss_coex is
	# enabled, then do a scan to find out why
	if {$bw > 20 && [regexp "$channel\\s" $c] && [$AP wl obss_coex] ne 0} {
	    catch {
		$AP wl scan -t passive
		UTF::Sleep 6
		$AP wl scanresults
	    }
	}
	error "Chanspec $c != $CHAN"
    }
    return 1
}
