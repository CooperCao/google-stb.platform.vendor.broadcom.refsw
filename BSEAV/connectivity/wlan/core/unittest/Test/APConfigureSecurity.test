#!/bin/env utf
# -*-tcl-*-

# UTF test script for Configuring security on an AP interface
#
# Security settings are stored in the AP object for later retrieval by
# JoinSecurity.
#
# Usage:  APConfigureSecurity AP [-security type]
#
# where type is one of: open, wep, shared, tkippsk, tkippsk2,
#                       aespsk, aespsk2, tkip+aespsk, tkip+aespsk2
#
# $Id$
#
package require UTF

package provide UTF::Test::APConfigureSecurity 2.0

UTF::Test APConfigureSecurity {AP args} {
    UTF::Getopts {
	{security.arg "open" "security"}
    }
    set updated 0
    if {$(security) eq "renew"} {
	# Renew flag used to renew configuration without changing
	# security.  Useful for APs with no nvram
	set (security) [$AP cget -security]
	if {$(security) eq ""} {
	    set (security) open
	}
	set updated 1; # force restart
    } elseif {[$AP cget -security] eq $(security) &&
	      ![catch {$AP wl ap} ret] && $ret ne 0} {
	UTF::Message INFO [$AP cget -name] "Security already $(security)"
	return
    }
    set wlname [$AP wlname]

    # Fetch current data
    set SSID [$AP cget -ssid]
    set WEPKEY [$AP cget -wepkey]
    set WEPIDX [$AP cget -wepidx]
    set WPAKEY [$AP cget -wpakey]
    # Initialise, if necessary
    if {$SSID eq ""} {
	if {[$AP wlconf_by_nvram]} {
	    catch {$AP nvram get ${wlname}_ssid} SSID
	} elseif {[$AP wl ap]} {
	    catch {$AP wl ssid} SSID
	}
	if {$SSID eq "" || $SSID eq "Broadcom"} {
	    # If it's still empty, or default, use the object name
	    set SSID [namespace tail ${AP}]
	}
	$AP configure -ssid $SSID
    }
    if {[regsub {(wep|shared)64} $(security) {\1} (security)]} {
	set WEPLEN 10
    } else {
	regsub {(wep|shared)128} $(security) {\1} (security)
	set WEPLEN 26
    }

    if {[string length $WEPKEY] != $WEPLEN} {
	set WEPKEY [UTF::NewWepKey $WEPLEN]
	$AP configure -wepkey $WEPKEY
    }
    if {$WEPIDX eq ""} {
	set WEPIDX 0
	$AP configure -wepidx 0
    }
    if {$WPAKEY eq ""} {
	set WPAKEY [UTF::NewWPAPassphrase]
	$AP configure -wpakey $WPAKEY
    }
    $AP configure -security $(security)

    UTF::Message INFO $AP "Prepare AP with SSID $SSID and $(security)"

    if {[$AP hostis Airport]} {
	# Apple
	set wlname [$AP wlname]

	set nv(${wlname}.raSt) 0; # radio "0" on,  "3" off.

	switch $(security) {
	    open {
		set nv(${wlname}.raWM) 0
		set nv(${wlname}.raEA) "false"
		set nv(${wlname}.raWE) $WEPKEY
	    }
	    wep {
		set nv(${wlname}.raCr) ""
		set nv(${wlname}.raWM) 2
		set nv(${wlname}.raWE) $WEPKEY
		set nv(${wlname}.raSk) "false"
		set nv(${wlname}.raEA) "false"
	    }
	    shared {
		set nv(${wlname}.raCr) ""
		set nv(${wlname}.raWM) 2
		set nv(${wlname}.raWE) $WEPKEY
		set nv(${wlname}.raSk) "true"
		set nv(${wlname}.raEA) "false"
	    }
	    tkippsk {
		set nv(${wlname}.raWE) [$AP acp wpa_psk $WPAKEY $SSID]
		set nv(${wlname}.raWM) 3
		set nv(${wlname}.raCr) $WPAKEY
		set nv(${wlname}.raSk) "false"
		set nv(${wlname}.raEA) "false"
		set nv(${wlname}.rTSN) "false"
	    }
	    tkippsk2 {
		set nv(${wlname}.raWE) [$AP acp wpa_psk $WPAKEY $SSID]
		set nv(${wlname}.raWM) 4
		set nv(${wlname}.raCr) $WPAKEY
		set nv(${wlname}.raSk) "false"
		set nv(${wlname}.raEA) "false"
		set nv(${wlname}.rTSN) "false"
	    }
	    aespsk2 {
		set nv(${wlname}.raWE) [$AP acp wpa_psk $WPAKEY $SSID]
		set nv(${wlname}.raWM) 5
		set nv(${wlname}.raCr) $WPAKEY
		set nv(${wlname}.raSk) "false"
		set nv(${wlname}.raEA) "false"
		set nv(${wlname}.rTSN) "false"
	    }
	    aespsk2+tkippsk2 -
	    tkippsk2+aespsk2 {
		set nv(${wlname}.raWE) [$AP acp wpa_psk $WPAKEY $SSID]
		set nv(${wlname}.raWM) 4
		set nv(${wlname}.raCr) $WPAKEY
		set nv(${wlname}.raSk) "false"
		set nv(${wlname}.raEA) "false"
		set nv(${wlname}.rTSN) "false"
	    }
	    default {
		error "unknown -security type: $(security)"
	    }
	}

	foreach n [array names nv] {
	    if {[$AP acp -q getplistvalue WiFi $n] ne $nv($n)} {
		$AP acp setplistvalue WiFi $n \"$nv($n)\"
		set updated 1
	    }
	}
	if {$updated} {
	    $AP acp -r
	}
	return
    }

    # Defaults
    set auth 0
    set wsec 0

    # Used in nvram
    set wep disabled
    set crypto aes
    set akm ""

    # Used by SoftAP
    set amode open

    if {[regexp {^soft(.*)} $(security) - (security)]} {
	set soft 1
    } else {
	set soft 0
    }
    switch $(security) {
	open {
	}
	wep {
	    set wsec 1
	    set wep enabled
	}
	shared {
	    set wsec 1
	    set wep enabled
	    set auth 1
	    set amode shared
	}
	tkippsk {
	    set wsec 2
	    set crypto tkip+aes
	    set akm psk
	    set amode wpapsk
	}
	tkippsk2 {
	    set wsec 2
	    set crypto tkip+aes
	    set akm psk2
	    set amode wpa2psk
	}
	aespsk {
	    set wsec 4
	    set crypto aes
	    set akm psk
	    set amode wpapsk
	}
	aespsk2 {
	    set wsec 4
	    set crypto aes
	    set akm psk2
	    set amode wpa2psk
	}
	aespsk+tkippsk -
	tkippsk+aespsk {
	    set wsec 6
	    set crypto tkip+aes
	    set akm psk
	    set amode wpapsk
	}
	aespsk2+tkippsk2 -
	tkippsk2+aespsk2 {
	    set wsec 6
	    set crypto tkip+aes
	    set akm psk2
	    set amode wpa2psk
	}
	aespsk2+tkippsk -
	tkippsk+aespsk2 {
	    set wsec 6
	    set crypto tkip+aes
	    set akm "psk psk2"
	    set amode wpa2psk
	}
	tkippsk+wep -
	wep+tkippsk {
	    set wsec 3
	    set wep enabled
	    set WEPIDX 1
	    set akm "psk"
	    set amode wpapsk
	}
	tkippsk2+wep -
	wep+tkippsk2 {
	    set wsec 3
	    set wep enabled
	    set WEPIDX 1
	    set akm "psk2"
	    set amode wpa2psk
	}

	aespsk+wep -
	wep+aespsk {
	    set wsec 5
	    set wep enabled
	    set crypto aes
	    set WEPIDX 1
	    set akm "psk"
	    set amode wpapsk
	}

	aespsk2+wep -
	wep+aespsk2 {
	    set wsec 5
	    set wep enabled
	    set crypto aes
	    set WEPIDX 1
	    set akm "psk2"
	    set amode wpa2psk
	}

	tkippsk+aespsk+wep -
	aespsk+tkippsk+wep -
	wep+aespsk+tkippsk -
	wep+tkippsk+aespsk {
	    set wsec 7
	    set wep enabled
	    set crypto tkip+aes
	    set WEPIDX 1
	    set akm "psk"
	    set amode wpapsk
	}

	tkippsk2+aespsk2+wep -
	aespsk2+tkippsk2+wep -
	wep+aespsk2+tkippsk2 -
	wep+tkippsk2+aespsk2 {
	    set wsec 7
	    set wep enabled
	    set crypto tkip+aes
	    set WEPIDX 1
	    set akm "psk2"
	    set amode wpa2psk
	}

	default {
	    error "unknown -security type: $(security)"
	}
    }

    if {[$AP wlconf_by_nvram]} {
	set nv(${wlname}_ssid) $SSID
	set nv(${wlname}_wep) $wep
	set nv(${wlname}_key) [expr {$WEPIDX+1}]
	set nv(${wlname}_key1) ""
	set nv(${wlname}_key2) ""
	set nv(${wlname}_key3) ""
	set nv(${wlname}_key4) ""
	set nv(${wlname}_akm) $akm
	set nv(${wlname}_crypto) $crypto
	set nv(${wlname}_auth) $auth
	set nv(${wlname}_auth_mode) none
	set nv(${wlname}_radio) 1

	# Only modify keys if we're using them - saves an
	# unnecessary restart.
	if {$(security) eq "open"} {
	    unset nv(${wlname}_key1)
	    unset nv(${wlname}_key2)
	    unset nv(${wlname}_key3)
	    unset nv(${wlname}_key4)
	} else {
	    if {[$AP hostis DSL]} {
		# WAR: DSL fails on zero-length nvram
		set nv(${wlname}_key1) "0123456789"
		set nv(${wlname}_key2) "0123456789"
		set nv(${wlname}_key3) "0123456789"
		set nv(${wlname}_key4) "0123456789"
	    }
	    set nv(${wlname}_wpa_psk) $WPAKEY
	    set nv(${wlname}_key$nv(${wlname}_key)) $WEPKEY
	}

	foreach n [array names nv] {
	    if {[$AP nvram get $n] ne $nv($n)} {
		$AP nvram set "$n='$nv($n)'"
		set updated 1
	    }
	}
	if {[$AP cget -defer_restart]} {
	    UTF::Message LOG $AP "Deferred restart"
	    # Skip checks
	    return
	}
	if {$updated} {
	    $AP nvram commit
	    $AP restart
	} else {
	    $AP wl up
	}

	if {$soft} {
	    # Set soft encryption bit
	    $AP wl wsec [expr {[$AP wl wsec] | 8}]
	}

	$AP configure -wepidx $WEPIDX

	set mode [$AP nvram get ${wlname}_mode]
	if {$mode ne "wet" && $mode ne "sta" && $mode ne "psta" && $mode ne "psr"} {
	    if {[$AP wl ssid] ne $SSID} {
		error "SSID mismatch - expected $SSID"
	    }
# 	    if {$mode ne "wds" &&
# 		[$AP wl bssid] eq "00:00:00:00:00:00"} {
# 		error "Null BSSID"
#  	    }
	    if {$mode ne "wds"} {
		if {[$AP wl bssid] eq "00:00:00:00:00:00"} {
		    set down 1
		    if {!$updated} {
			$AP restart
		    }
		    for {set i 1} {$i < 31} {incr i} {
			UTF::Sleep 1
			if {[$AP wl bssid] ne "00:00:00:00:00:00"} {
			    set down 0
			    if {$i < 3} {
				$AP warn "BSSID recovered in $i sec"
			    } else {
				$AP worry "BSSID recovered in $i sec"
			    }
			    break
			}
		    }
		    if {$down} {
			error "BSSID still NULL after $i sec!"
		    }
		}
	    }
	}
    } else {
	# SoftAP

	$AP services stop
	$AP wl radio on
	$AP wl up

	# wpa_auth and AP-mode join both expect bss to be down
	$AP wl bss down
	$AP wl ap 1
	$AP wl wsec $wsec
	# Need to explicitly disable WPA, otherwise power save may not work
	# It will be re-enabled by join if needed.
	catch {$AP wl wpa_auth 0}

	if {[regexp {psk} $amode]} {
	    # Enable the indriver authenticator.  Not needed on older
	    # branches.  Dongles require the idauth feature.
	    catch {$AP wl auth_wpa 1}

	    $AP wl set_pmk "\"$WPAKEY\""
	} else {
	    # We're turning the authenticator off, so non-supported is
	    # ok
	    catch {$AP wl auth_wpa 0}
	}

	UTF::Message INFO $AP "Create SoftAP $SSID"
	$AP wl join $SSID imode bss amode $amode
	if {($wsec & 0xf) == 1} {
	    $AP wl addwep $WEPIDX $WEPKEY
	}

	$AP configure -wepidx $WEPIDX

	if {[$AP wl ssid] ne $SSID} {
	    error "SSID mismatch - expected $SSID"
	}
	if {[$AP wl bssid] eq "00:00:00:00:00:00"} {
	    error "Null BSSID"
	}

	# Make sure we haven't lost our IP address
	if {[set IP [$AP cget -ipaddr]] ne "dhcp"} {
	    $AP ifconfig $IP
	    if {[$AP cget -hasdhcpd]} {
		$AP dhcpd_reset
	    }
	}
    }

    return
}
