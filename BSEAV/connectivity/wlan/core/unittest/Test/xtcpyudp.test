#!/bin/env utf
# -*-tcl-*-
#

#
# UTF test script to demo streams on henhouse rig
#
#
# $Copyright Broadcom Corporation$
#
package require UTF
package require UTF::Streams
package require UTF::ControlChart
package require UTF::MemChart
package require UTF::wlstats
package require md5

UTF::Test xTCP_yUDP {args} {
    UTF::Getopts {
	{ap.arg "4360mch5" "AP under test"}
	{sta.arg "psta3mch5" "STAs for test"}
	{x.arg "2" "number tcp streams"}
	{y.arg "1" "number udp streams"}
	{holdtime.arg "120" "time to hold traffic in seconds"}
	{pollfrequency.arg "1" "interval to poll stats"}
	{udprate.arg "10M" "UDP offered load per stream"}
	{tcprate.arg "20M" "TCP shaped rate"}
	{tcptrace "enable tcptrace and pcap capture"}
	{history.arg "30" "number of points for control chart history"}
	{tcpstats.arg "rate" "parameter(s) of interest"}
	{email.arg "" "Email to send summary report"}
	{title.arg "" "Title"}
	{graphtype.arg "png" "optionally set to 'canvas' for mouseable plot"}
    }
    if {$(tcptrace)} {
	set tcptrace 1
    } else {
	set tcptrace 0
    }
    if {$(title) eq {}} {
	if {[info exists env(UTFCONFIG)]}  {
	    set (title) [concat [file rootname [file tail $env(UTFCONFIG)]] $(ap) $(sta)]
	} else {
	    set (title) [concat $(ap) $(sta)]
	}
    }
    set TITLE "UTF xTCP_yUDP $(title) $(holdtime)"
    UTF::WrapSummary $UTF::SummaryDir $TITLE "" $(email) {
	UTF::Try "Create Streams tcp=$(x) udp=$(y)" {
	    for {set ix 0} {$ix < $(x)} {incr ix} {
		set tcp($ix) [UTF::stream %AUTO% -tx $(ap) -rx $(sta) -protocol tcp -name "tcp$ix" -shaperrate $(tcprate) -trace $tcptrace]
	    }
	    for {set ix 0} {$ix < $(y)} {incr ix} {
		set udp($ix) [UTF::stream %AUTO% -tx $(ap) -rx $(sta) -protocol udp -name "udp$ix" -rate $(udprate)]
	    }
	    # Log stream information
	    foreach index [array names tcp] {
		$tcp($index) id
	    }
	    foreach index [array names udp] {
		$udp($index) id
	    }
	    # generate a unique key for the stats file
	    # concatenate stream ids for traffic uniqueness.
	    set key {}
	    foreach stream [UTF::stream info instances] {
		lappend key [$stream id]
	    }
	    # Append key to include
	    #  clock for run uniqness
	    #  poll frequency for sampling uniqueness
	    #  holdtime for duration uniqueness
	    set key [concat $key [clock seconds] $(pollfrequency) $(holdtime)]
	    # Make a smaller key using MD5 hash
	    set hash [::md5::md5 -hex $key]
	    # Instantiate the pktqstats object
	    set pktqstats [UTF::wlstats::pktqstat %AUTO% -key $hash -wlcmd "$(ap) wl pktq_stats a:[[$(sta) lan] macaddr]"]
	    return
	}
	UTF::Try "Run all streams" {
	    UTF::stream allstreams start
	    UTF::stream allstreams stats -clear
	    set start [clock clicks -milliseconds]
	    while {[expr {[clock clicks -milliseconds] - $start}] <= [expr {int($(holdtime) * 1000)}]} {
		set wlcmdstart [clock clicks -milliseconds]
		$pktqstats sample
		set adj [expr {([clock clicks -milliseconds] - $wlcmdstart) / 1000.0}]
		UTF::Sleep [expr {$(pollfrequency) - $adj}]
	    }
	    UTF::stream allstreams stop
	    UTF::streamgraph graph -stat rate -title $(title) -outputtype $(graphtype)
	    return [graph plot]
	}
	foreach stat $(tcpstats) {
	    UTF::Try "TCP $stat check" {
		set key {}
		foreach stream [UTF::stream info instances] {
		    lappend key [$stream id]
		}
		set cckey_common [concat $key $(holdtime)]
		set results {}
		set failtry 0
		foreach index [array names tcp] {
		    set cckey [concat [$tcp($index) id] $stat $cckey_common]
		    set cc [UTF::MemChart %AUTO% -key $cckey -history $(history) -perfcache "" -title "BytesXfer" -units "Bytes"]
		    set boundsresults [$cc addsample [$tcp($index) stats -$stat -sum]]
		    if {[regexp {(LOW|HIGH|WIDE|ZERO)} $boundsresults]} {
			set failtry 1
		    }
		    if {$results eq ""} {
			set results [$cc plotcontrolchart tcp($index)]
		    } else {
			append results " [string range [$cc plotcontrolchart tcp($index)] 5 end]"
		    }
		}
		if {$failtry} {
		    error $results
		} else {
		    return $results
		}
	    }
	}
	UTF::Try "ptkqstats($hash)" {
	    $pktqstats write -format csv
	    return [$pktqstats myhtmllink -text "csv"]
	}
	UTF::Try "TCPTraces/Exit" {
	    if {$(tcptrace)} {
		foreach index [array names tcp] {
		    set pcapfile [$tcp($index) trace xfer -unzip]
		    UTF::Try "PCAP [file tail $pcapfile]" {
			return "html:<a href=\"$pcapfile\">tcp$index</a>"
		    }
		}
	    }
	    UTF::stream exitstreams
	}
    }
}