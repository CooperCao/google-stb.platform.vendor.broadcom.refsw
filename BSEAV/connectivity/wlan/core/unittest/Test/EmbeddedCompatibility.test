#!/bin/env utf

#
# Embedded Compatibility script 
#
# To get online help, type: Test/Embedded Compatibility.test -help
#

# $Id$
# $Copyright Broadcom Corporation$
#

# Load help package before any other UTF packages.
package require UTF::help

# Script help string
set EmbeddedCompatibility_help "\n\nUsage: Test/Embedded Compatibility.test\
    \nTests specific combinations of legacy & 11N modes, per Apple\'s request.\
    \nBy default, all AP (& clones) and all WinDHD & DHD STA (& clones) will be tested.\
    \n\nValid options:\
    \n -utfconf path        Config file to use, default is ~/.utfconf.tcl"

# Command line options string
set EmbeddedCompatibility_getopts {
    {20chan.arg "3"  "Channel to use for 20MHz bandwidth tests"}
    {40chan.arg "3l" "Channel to use for 40MHz bandwidth tests"}
    {aps.arg ""      "AP names to use in tests, defaults to all AP in the testrig"}
    {email.arg ""    "Email address list, format: userid1 userid2 ... default is your userid"}
    {noapload        "Dont load new AP drivers, reload the existing drivers"}
    {nobtreset       "Don't reset BlueTooth devices. WARNING: can lead to low WLAN thruput!"}
    {noiperf         "Dont run iperf controlchart tests"}
    {nosetup         "Use the testbed as is, no loading / reloading of drivers"}
    {nosniffer       "Do not use sniffer"}
    {nostaload       "Dont load new STA drivers, reload the existing drivers"}
    {rtrdate.arg ""  "Desired Router build date, format: yyyy.mm.dd"}
    {rtrtag.arg ""   "Router release tag, default is NIGHTLY"}
    {sniffer.arg ""  "Sniffer to use, if any, in the tests"}
    {stadate.arg ""  "Desired STA build date, format: yyyy.mm.dd"}
    {statag.arg ""   "STA release tag, default is NIGHTLY"}
    {stas.arg ""     "Embedded STA names to use in test, defaults to all WinDHD & DHD sta in the testrig"}
    {title.arg ""    "Title for web report & email"}
}

# Setup online help info.
UTF::setup_help $EmbeddedCompatibility_help $EmbeddedCompatibility_getopts

# Keep pkg_mkIndex happy
if {[info command __package_orig] != ""} {
    set ::argv ""
}

# Load packages
package require UTF
package require UTF::Sniffer
package require UTF::utils
package require UTF::Test::APChanspec
package require UTF::Test::ConnectAPSTA
package require UTF::Test::controlchart


package provide UTF::Test::EmbeddedCompatibility 2.0

# Common test proc.
proc compatibility {title ap ap_nmode chan lan sta sta_nmode i noiperf sniffer \
    {setup_only 0}} {
    # NB: $i keeps perfcache test data separated!

    # Setup for compatibility test.
    UTF::Try "$title setup: $ap $sta" {
        UTF::Message LOG "$::localhost" "compatibility title=$title ap=$ap\
            ap_nmode=$ap_nmode chan=$chan lan=$lan sta=$sta sta_nmode=$sta_nmode\
            i=$i noiperf=$noiperf setup_only=$setup_only"

        # Setup AP nmode. Restart AP only when we are actually changing
        # the nmode setting in nvram.
        set wlname [$ap wlname]
        set nvram_nmode_name "${wlname}_nmode"
        # puts "wlname=$wlname nvram_nmode_name=$nvram_nmode_name"
        set nvram_nmode_value [$ap nvram get $nvram_nmode_name]
        UTF::Message LOG "$::localhost" "compatibility $nvram_nmode_name=$nvram_nmode_value\
            ap_nmode=$ap_nmode"
        if {$nvram_nmode_value != $ap_nmode} {
            # Change the AP NVRAM and restart the AP.
            $ap nvram set $nvram_nmode_name=$ap_nmode
            $ap nvram commit
            $ap restart
            UTF::Sleep 5
        }

        # Setup AP channel
        UTF::Test::APChanspec $ap $chan

        # Setup STA nmode
        catch {$sta wl disassoc}
        catch {$sta wl down}
        catch {$sta wl nmode $sta_nmode} ;# continue on regardless!
        catch {$sta wl up}
        return
    }
    # We may need to do only the setup items above
    if {$setup_only} {
        return
    }

    # Setup optional sniffer.
    UTF::setup_sniffer $sniffer $chan

    # Make connection for compatibility test.
    UTF::Try "$title open connection: $ap $sta" {
        UTF::open_connection_retry $ap $sta
    }

    # Run control chart for compatibility test.
    if {$noiperf} {
        return
    }
    UTF::Try "$title performance: $lan <-> $sta" {
        # NB: test$i keeps perfcache test data separated!
        set keys "$::ec_stream $ap $::ec_self test$i"
        UTF::start_sniffer $sniffer
        UTF::Test::controlchart [list $lan $sta $sta $lan] -key $keys -i 2 -s 5
    }

    # Show sniffer .pcap link on main summary web page.
    set result 1 ;# always save .pcap file when sniffer is used
    UTF::stop_sniffer $sniffer $result $::SummaryLoc
}

# Start of EmbeddedCompatibility routine.
UTF::Test EmbeddedCompatibility {args} {
    UTF::Getopts "$::EmbeddedCompatibility_getopts" "$::EmbeddedCompatibility_help"

    # Get testbed info.
    set ::UTF::trailer_info [UTF::setup_testbed_info $(email) ""]

    # In case of conflicting options, make nosniffer override sniffer.
    if {$(nosniffer)} {
        set (sniffer) ""
    }

    # Validate sniffer name.
    if {$(sniffer) != ""} {
        UTF::Message LOG "$::localhost" "Checking sniffer: $(sniffer)"
        set resp [UTF::check_host_type $(sniffer) Sniffer]
        if {$resp == 0} {
            error "ERROR: $(sniffer) not type Sniffer"
        }
    }

    # Setup email subject & report title.
    if {![info exists ::branch_list]} {
        set ::branch_list unknown
    }
    set email_subject [UTF::setup_email_subject $(title)]
    set summaryinfo ""

    # Start web summary page
    UTF::WrapSummary $UTF::SummaryDir "$email_subject" "$summaryinfo" "$(email)" {

        # Add a web link to the test.log file
        UTF::Try "Link to test.log" {
            return "html: <a href=\"./test.log\">test.log</a>"
        }

        # If no STAs specified, find all the WinDHD & DHD sta in the testrig.
        # This includes clones, if any. User is allowed to specify specific
        # STA that may not be the default types.
        set loose 1
        set STAs [UTF::find_stas $(stas) "WinDHD DHD" $loose]

        # If no APs specified, find all the Router, Vx & BSDAP in the testrig.
        # This includes clones, if any.
        set APs [UTF::find_stas $(aps) "Router Vx BSDAP"]

        # Setup stream & script name needed for control chart keys
        set ::ec_stream [UTF::get_stream_name end]
        set ::ec_self EmbeddedCompatibility.test ;# hardcode as argv0 depends on loading order

        # Log the testbed info.
        UTF::Message INFO "" "APs=$APs STAs=$STAs"
        UTF::Message INFO "" "$::UTF::trailer_info"
        set ::SummaryLoc [file dirname "$UTF::Logfile"]

        # Some testrigs have Aeroflex attenuator initialization strings
        # defined, usually to set all channels to 0 attenuation. If found,
        # setup the attenuator.
        if {[info exists ::UTF::SetupTestBed] && !$(nosetup)} {
            UTF::Try "Setup testbed" {
                eval $::UTF::SetupTestBed
                return
            }
        }

        # Reset all BT devices in testrig, if any. If you dont do this, your
        # Coex WLAN device throughput can be only 50% of what you expect.
        if {!$(nobtreset) && !$(nosetup)} {
            UTF::Try "Reset all BT devices" {
                UTF::reset_all_bt_devices
            }
        }

        # Test all APs against all STAs, which may include clones.
        foreach ap $APs {

            # We must have a lanpeer or wanpeer traffic generator for this AP.
            set lan "[$ap cget -lanpeer] [$ap cget -wanpeer]"
            set lan [lindex $lan 0];# need only 1 traffic generator
            set lan [string trim $lan]
            if {$lan == ""} {
                # There is no traffic generator, so complain loudly and
                # move on to the next AP in the testrig, if any.
                UTF::Try "$ap find lanpeer/wanpeer traffic generator" {
                    error "None defined"
                }
                continue
            }

            # We load/reload the AP one at a time in case of clones that have different
            # builds specified for each clone.
            if {!$(nosetup)} {
                if {$(noapload)} {
                    UTF::Try "Reload AP $ap" {
                        set resp [UTF::reload_rtr $ap]
                        $ap restore_defaults
                        return $resp
                    }
    
                } else {
                    UTF::Try "Load AP $ap" {
                        if {$(rtrdate) != ""} {
                            $ap configure -date $(rtrdate)
                        }
                        if {$(rtrtag) != ""} {
                            $ap configure -tag $(rtrtag)
                        }
                        set resp [UTF::load_rtr_retry $ap]
                        set ap_def_chan [lindex [$ap wl chanspec] 0]
                        return $resp
                    }
                }
            }

            # Save the AP default channel
            set ap_def_chan [lindex [$ap wl chanspec] 0]
            
            foreach sta $STAs {
                if {!$(nosetup)} {
                    # We load/reload the STA one at a time in case of clones that
                    # have different builds specified for each clone.
                    if {$(nostaload)} {
                        UTF::Try "Reload STA $sta" {
                            UTF::reload_sta $sta
                        }

                    } else {
                        UTF::Try "Load STA $sta" {
                            if {$(stadate) != ""} {
                                $sta configure -date $(stadate)
                            }
                            if {$(statag) != ""} {
                                $sta configure -tag $(statag)
                            }
                            UTF::load_sta_retry $sta
                        }
                    }
                }

                # Does this STA support the nmode command?
                # Keep going regardless of the answer.
                UTF::Try "$sta nmode support" {
                    $sta wl nmode
                    return
                }

                # Command will set STA bw to 40. Currently supported
                # on NICs, but not on embedded devices.
                # catch {$sta wl mimo_bw_cap 1}

                # NB: The test counter i is needed to keep perfcache
                # history results separated for each test!

                # Test 1 
                set title "11n/40MHz/AP 11n/STA"
                set ap_nmode 1
                set sta_nmode 1
                set i 1
                compatibility $title $ap $ap_nmode $(40chan) $lan $sta $sta_nmode $i $(noiperf) $(sniffer)

                # Test 2
                set title "11n/40MHz/AP legacy/STA"
                set ap_nmode 1
                set sta_nmode 0
                set i 2
                compatibility $title $ap $ap_nmode $(40chan) $lan $sta $sta_nmode $i $(noiperf) $(sniffer)

                # Test 3
                set title "11n/20MHz/AP 11n/STA"
                set ap_nmode 1
                set sta_nmode 1
                set i 3
                compatibility $title $ap $ap_nmode $(20chan) $lan $sta $sta_nmode $i $(noiperf) $(sniffer)

                # Test 4
                set title "11n/20MHz/AP legacy/STA"
                set ap_nmode 1
                set sta_nmode 0
                set i 4
                compatibility $title $ap $ap_nmode $(20chan) $lan $sta $sta_nmode $i $(noiperf) $(sniffer)
 
                # Test 5
                set title "legacy/AP 11n/STA"
                set ap_nmode 0
                set sta_nmode 1
                set i 5
                compatibility $title $ap $ap_nmode $(20chan) $lan $sta $sta_nmode $i $(noiperf) $(sniffer)

                # Test 6
                set title "legacy/AP legacy/STA"
                set ap_nmode 0
                set sta_nmode 0
                set i 6
                compatibility $title $ap $ap_nmode $(20chan) $lan $sta $sta_nmode $i $(noiperf) $(sniffer)
            }

            # Put AP back to 11n on default channel so subsequent tests
            # run properly.
            set title "restore 11n"
            set setup_only 1
            compatibility $title $ap 1 $ap_def_chan $lan $sta 1 $i $(noiperf) $(sniffer) $setup_only
        }
    }
}
