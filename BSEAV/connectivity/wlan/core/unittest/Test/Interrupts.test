#!/bin/env utf
# -*-tcl-*-
#
# Test to measure interrupt rates
#
# $Id: b9bf32742229e70c5386537ac4003f560468876f $
# $Copyright Broadcom Corporation$
#

package provide UTF::Test::Interrupts 2.0

package require UTF
package require UTF::Test::ConnectAPSTA
package require UTF::ControlChart

UTF::Test Interrupts {AP STA args} {
    UTF::Getopts {
	{noping "Skip ping test"}
	{notx "Skip tx test"}
	{norx "Skip rx test"}
	{PM.arg 2 "PM mode"}
	{t.arg 1 "Sample time"}
	{s.arg 3 "Number of samples"}
	{b.arg 10M "UDP offer rate"}
	{key.arg "" "Controlchart key"}
	{loop.arg "1" "loops"}
	{perfcache.arg "" "Performance Cache"}
	{history.arg 30 "Performance History"}
	{nocache "Don't update performance cache"}
    }

    set PARSER {isr\s+:\s+(\d+)(?:.*bcn isr\s+:\s+(\d+))?.*beacons\s+:\s+(\d+)}

    if {$(nocache)} {
	set ::UTF::ControlChart::readonly 1
    }

    # If we're testing in AP mode, PM should be run on the WET device
    if {[$STA cget -apmode]} {
	set PMSTA $AP
	set PMAP  $STA
    } else {
	set PMSTA $STA
	set PMAP  $AP
    }

    set branch [$STA branchname]

    set est_datagrams [expr {int($(t) * [UTF::kexpand $(b)] / 1470.0)}]

    set setup 0

    UTF::Try "$STA: Interrupts/s idle" {

	set oldPM [$PMSTA wl -u PM]
	if {[regexp {Unsupported} $oldPM]} {
	    # minioctl can set, but not get PM
	    set oldPM 0
	}

	if {[catch {$STA ping $AP -c 1}]} {
	    package require UTF::Test::ConnectAPSTA
	    ConnectAPSTA $AP $STA -security open
	}

	$PMSTA wl PM $(PM)

	$PMSTA idlewait $PMAP -warn

	set key [concat $branch Interrupts Idle $(key) $STA $AP]
	UTF::ControlChart CC -s $(s) -key $key -norangecheck 1 \
	    -perfcache $(perfcache) -history $(history) \
	    -title "Idle ISR" -ylabel "Interrupts" -units "/sec"

	if {![regexp $PARSER [$STA wl dump perf_stats] - before]} {
	    error "Unable to parse dump perf_stats"
	}

	set setup 1

	for {set i 0} {$i < $(loop)} {incr i} {
	    set samples {}
	    for {set s 0} {$s < $(s)} {incr s} {
		UTF::Sleep $(t)
		regexp $PARSER [$STA wl dump perf_stats] - after
		set diff [expr {$after - $before}]
		UTF::Message LOG $STA "isr: $diff"
		lappend samples [expr {($diff+0.0) / $(t)}]
		set before $after
	    }
	    UTF::Message LOG $STA "isr: $samples"
	    set ret [CC addsample [UTF::MeanMinMax $samples]]
	}
	if {[regexp {HIGH|WIDE} $ret]} {
	    set code 1
	} else {
	    set code 0
	}
	if {[info exists ::UTF::Summary]} {
	    set ret [CC plotcontrolchart $ret]
	}
	if {$code} {
	    throw FAIL $ret
	} else {
	    return $ret
	}
    }

    if {$setup && !$(noping)} {
	UTF::Try "$STA: Interrupts/Ping" {

	    set key [concat $branch Interrupts Ping $(key) $STA $AP]
	    UTF::ControlChart CC -s $(s) -key $key -norangecheck 1 \
		-perfcache $(perfcache) -history $(history) \
		-title "Idle ISR" -ylabel "Interrupts" -units "/ping"

	    for {set i 0} {$i < $(loop)} {incr i} {
		set samples {}
		set ip [$AP ipaddr]
		for {set s 0} {$s < $(s)} {incr s} {
		    regexp $PARSER [$STA wl dump perf_stats] - \
			ibefore ibbefore bbefore
		    $STA ping $ip -c 5
		    regexp $PARSER [$STA wl dump perf_stats] - \
			iafter ibafter bafter
		    set idiff [expr {$iafter - $ibefore}]
		    if {$ibbefore ne ""} {
			# Beacon interrupts
			set bdiff [expr {$ibafter - $ibbefore}]
		    } else {
			# Beacons
			set bdiff [expr {$bafter - $bbefore}]
		    }
		    set diff [expr {$idiff - $bdiff}]
		    UTF::Message LOG $STA "isr: $diff (+$bdiff bcns)"
		    UTF::Sleep 0.5
		    lappend samples [expr {($diff+0.0) / $(t)}]
		}
		UTF::Message LOG $STA "isr: $samples"
		set ret [CC addsample [UTF::MeanMinMax $samples]]
	    }
	    if {[regexp {HIGH|WIDE|ZERO} $ret]} {
		set code 1
	    } else {
		set code 0
	    }
	    if {[info exists ::UTF::Summary]} {
		set ret [CC plotcontrolchart $ret]
	    }
	    if {$code} {
		throw FAIL $ret
	    } else {
		return $ret
	    }
	}
    }

    if {$setup && !$(notx)} {
	UTF::Try "$STA: TX pkts/int" {

	    set key [concat $branch TXppi $(key) $(b) $STA $AP]
	    UTF::ControlChart CC -s $(s) -key $key -norangecheck 1 \
		-perfcache $(perfcache) -history $(history) \
		-title "TX ISR" -ylabel "Pkts" -units "/int"

	    regexp $PARSER [$STA wl dump perf_stats] - ibefore ibbefore bbefore

	    for {set i 0} {$i < $(loop)} {incr i} {
		set samples {}
		for {set s 0} {$s < $(s)} {incr s} {
		    UTF::Multiperf [list $STA $AP] -t $(t) -b $(b) \
			-datagrams datagrams -noping
		    regexp $PARSER [$STA wl dump perf_stats] - \
			iafter ibafter bafter
		    set idiff [expr {$iafter - $ibefore}]
		    if {$ibbefore ne ""} {
			# Beacon interrupts
			set bdiff [expr {$ibafter - $ibbefore}]
		    } else {
			# Beacons
			set bdiff [expr {$bafter - $bbefore}]
		    }
		    set diff [expr {$idiff - $bdiff}]
		    if {$datagrams} {
			UTF::Message LOG $STA \
			    "isr: $diff (+$bdiff bcns), datagrams: $datagrams"
		    } else {
			set datagrams $est_datagrams
			UTF::Message LOG $STA \
			    "isr: $diff (+$bdiff bcns), datagrams: $datagrams (est)"
		    }
		    lappend samples [expr {(0.0 +  $datagrams) / $diff}]
		    set ibefore $iafter
		    set ibbefore $ibafter
		    set bbefore $bafter
		}
		UTF::Message LOG $STA "isr: $samples"
		set ret [CC addsample [UTF::MeanMinMax $samples]]
	    }
	    if {[regexp {LOW|WIDE|ZERO} $ret]} {
		set code 1
	    } else {
		set code 0
	    }
	    if {[info exists ::UTF::Summary]} {
		set ret [CC plotcontrolchart $ret]
	    }
	    if {$code} {
		throw FAIL $ret
	    } else {
		return $ret
	    }
	}
    }

    if {$setup && !$(norx)} {
	UTF::Try "$STA: RX pkts/int" {

	    set key [concat $branch RXppi $(key) $(b) $STA $AP]
	    UTF::ControlChart CC -s $(s) -key $key -norangecheck 1 \
		-perfcache $(perfcache) -history $(history) \
		-title "RX ISR" -ylabel "Pkts" -units "/int"

	    regexp $PARSER [$STA wl dump perf_stats] - ibefore ibbefore bbefore

	    for {set i 0} {$i < $(loop)} {incr i} {
		set samples {}
		for {set s 0} {$s < $(s)} {incr s} {
		    UTF::Multiperf [list $AP $STA] -t $(t) -b $(b) \
			-datagrams datagrams -noping
		    regexp $PARSER [$STA wl dump perf_stats] - \
			iafter ibafter bafter
		    set idiff [expr {$iafter - $ibefore}]
		    if {$ibbefore ne ""} {
			# Beacon interrupts
			set bdiff [expr {$ibafter - $ibbefore}]
		    } else {
			# Beacons
			set bdiff [expr {$bafter - $bbefore}]
		    }
		    set diff [expr {$idiff - $bdiff}]
		    if {$datagrams} {
			UTF::Message LOG $STA \
			    "isr: $diff (+$bdiff bcns), datagrams: $datagrams"
		    } else {
			set datagrams $est_datagrams
			UTF::Message LOG $STA \
			    "isr: $diff (+$bdiff bcns), datagrams: $datagrams (est)"
		    }
		    lappend samples [expr {(0.0 +  $datagrams) / $diff}]
		    set ibefore $iafter
		    set ibbefore $ibafter
		    set bbefore $bafter
		}
		UTF::Message LOG $STA "isr: $samples"
		set ret [CC addsample [UTF::MeanMinMax $samples]]
	    }

	    if {[regexp {LOW|WIDE|ZERO} $ret]} {
		set code 1
	    } else {
		set code 0
	    }
	    if {[info exists ::UTF::Summary]} {
		set ret [CC plotcontrolchart $ret]
	    }
	    if {$code} {
		throw FAIL $ret
	    } else {
		return $ret
	    }
	}

    }
    catch {$PMSTA wl PM $oldPM}
}
