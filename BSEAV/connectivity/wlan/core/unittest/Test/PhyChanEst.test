#!/bin/env utf
# -*-tcl-*-
#

#
# UTF test script to take and plot the phychanest
#
# Written by: Robert J. McMahon March 2015
#
# $Copyright Broadcom Corporation$
#
package require UTF
package require UTF::PhyChanEst
package require UTF::Test::APChanspec
package require UTF::Test::ConnectAPSTA
package require UTF::Test::APConfigureSecurity
package require UTF::Streams

package provide UTF::Test::PhyChanEst 2.0

UTF::Test PhyChanEst {args} {
    UTF::Getopts {
	{email.arg "" "Email Address"}
	{title.arg "" "Title"}
	{ap.arg "ap_rel" "APs under test"}
	{sta.arg "43602lx2" "STA under test"}
	{date.arg "" "Image date"}
	{loop.arg "2" "Number of samples"}
	{chanspec.arg "all" "chanspecs to test, accepts 'all'"}
	{nrate.arg "auto" "nrates to test, accepts 'all"}
	{maxtemp.arg "0" "Run the device at max operarting temperature"}
	{noload "don't load the images"}
	{noapload "don't load the ap image"}
	{nosetup "don't run testbed setup routine"}
	{suiteid.arg "meta" "Metacript ID used for data store"}
	{security.arg "open" "Security"}
	{mode.arg "sta" "Use STA or AP for measurement"}
    }
    set STAS $(sta)

    # Compact build list for title
    # Include the WDS list, in case the AP list is empty.  Duplicates
    # will be removed automatically.
    set build [UTF::BuildTitle [concat $(sta) $(ap)]]
    set TITLE "PhyChanEst $(title) ($build) (ch=$(chanspec)) (nrate=$(nrate))"
    UTF::Message INFO "" $TITLE
    unset build
    UTF::WrapSummary $UTF::SummaryDir $TITLE "" $(email) {
	if {!$(nosetup) && [info exists ::UTF::SetupTestBed]} {
	    UTF::Try "Setup testbed" {
		eval $::UTF::SetupTestBed
	    }
	}
	if {!$(noload)} {
	    if {[$(ap) hostis Router Vx BSDAP DSL Airport]} {
		$(ap) restore_defaults
	    } else {
		$(ap) services stop
		if {[info exists ::UTF::Use11h]} {
		    catch {$(ap) wl msglevel +error +assoc +regulatory}
		} else {
		    catch {$(ap) wl msglevel +error +assoc}
		}
		if {![$(ap) cget -nomimo_bw_cap]} {
		    catch {$(ap) wl down}
		    # Enable 40 in 2.4, if available.
		    $(ap) wl -u mimo_bw_cap 1
		    $(ap) wl up
		    UTF::Sleep 1
		}
	    }
	    set what [$(ap) whatami]
	    # Pull out chip info and replace whitespace to make it
	    # easier for external parsers.
	    regsub -all {\s+} [lreplace $what 0 0] {_} w
	    if {$(noapload)} {
		$UTF::Summary header $(ap) $w
	    } else {
		$UTF::Summary header_update 1 $w
	    }
	    $(ap) dbrecord REF
	    set what
	    foreach STA $(sta) {
		UTF::Try "$STA Find STA Image" {
		    UTF::CheckImage $STA $(date) unknown
		}
		UTF::Try "$STA load" {
		    $STA load
		}
		UTF::ReportDriver $STA $(date)
		UTF::Try "[$STA cget -name]: defaults" {
		    $STA services stop
		    catch {$STA wl msglevel +error +assoc +regulatory}
		    $STA wl ver
		    set what [$STA whatami]
		    # Pull out chip info and replace whitespace to
		    # make it easier for external parsers.
		    regsub -all {\s+} [lreplace $what 0 0] {_} w
		    if {[catch {$UTF::Summary header_update 1 $w} ret]} {
			UTF::Message WARN $STA $ret
		    }
		    $STA dbrecord DUT
		    set what
		}
	    }
	}
	foreach STA $STAS {
	    if {$(chanspec) eq "all"} {
		set CHANSPECS [UTF::Common [$(ap) allchanspecs] [$STA allchanspecs]]
	    } else {
		set CHANSPECS $(chanspec)
	    }
	    foreach chanspec $CHANSPECS {
		UTF::Try "$STA Ch=$chanspec" {
		    APChanspec $(ap) $chanspec
		    APConfigureSecurity $(ap) -security open
		    # connect all the STAS
		    ConnectAPSTA $(ap) $(sta)
		    if {$(nrate) eq "all"} {
			set NRATES [$STA allrates]
		    } else {
			set NRATES $(nrate)
		    }
		    foreach nrate $NRATES {
			$STA txrate [$STA band $chanspec] $nrate
			set phyestimator [UTF::PhyChanEst %AUTO% -ap $(ap) -sta $STA -maxtemp $(maxtemp) -mode $(mode)]
			for {set ix 0} {$ix < $(loop)} {incr ix} {
			    UTF::Try "Phy estimate $ix (nrate=$nrate)" {
				$phyestimator sample
				$phyestimator mylink
			    }
			}
		    }
		    if {$(mode) eq "sta"} {
			set RX $STA
			set TX $(ap)
		    } else {
			set TX $STA
			set RX $(ap)
		    }
		    set traffic [UTF::stream %AUTO% -tx $TX -rx $RX -protocol tcp -w 4M -reportinterval 0.1]
		    $traffic start
		    $RX wl ampdu_clear_dump
		    UTF::Sleep 0.5
		    $traffic linkcheck -now
		    $traffic stats -clear
		    UTF::Sleep 2
		    $traffic stop
		    set output [$RX wl dump ampdu]
		    if {[regexp {rxampdu\s+([0-9]+)\s+rxmpdu\s+([0-9]+)} $output - ampdu mpdu]} {
			set mpduampdu [expr {(round(10.0 * $mpdu / $ampdu))/10}]
		    } else {
			UTF::Message INFO $utfmsgtag "Did not find RX mpdu and ampdu in ampdu dump"
		    }
		    set text "[$phyestimator bestrate] [$traffic stats -rate -meanminmax -h] $mpduampdu"
		    return [$phyestimator condition $text]
		}
		catch {$traffic destroy}
		foreach s [UTF::PhyChanEst info instances] {
		    $s destroy
		}
	    }
	}
    }
}