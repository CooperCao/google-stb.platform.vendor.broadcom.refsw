#!/bin/env utf
# -*-tcl-*-

# UTF test script for running packet error rate tests between a 4321
# AP and STA for all channel and rates.
# $Id: c187ea630740e883a6ef01136a567f019a045b4f $
#
package require UTF
package require UTF::Test::ConnectAPSTA
package require UTF::Test::APChanspec

UTF::Test Performance-Channels {AP STA args} {

    UTF::Getopts {
	{blocks.arg "6000" "epi_ttcp Blocks"}
	{note.arg "" "Note"}
	{chanspec.arg "" "Chanspec list"}
	{band.arg "" "Band"}
	{skip.arg "" "Chanspec skip list"}
	{bw.arg "20" "BandWidth"}
	{frameburst.arg "1" "Frameburst"}
	{loop.arg "1" "loops"}
	{title.arg "" "Title"}
	{window.arg "524288" "TCP window"}
	{dir.arg "tx rx" "Directions"}
	{pwr_percent.arg "" "pwr_percent (sta or ap:sta)"}
	{security.arg "" "Security"}
	{samples.arg "1" "samples"}
	{ap_phy_spuravoid.arg "" "AP phy_spuravoid"}
	{sta_phy_spuravoid.arg "" "STA phy_spuravoid"}
	{forcejoin "Force join for each channel, instead of roaming"}
	{b.arg "0" "UDP bandwidth, or 0 for TCP"}
    }

    set tx [expr {[lsearch $(dir) tx] >= 0}]
    set rx [expr {[lsearch $(dir) rx] >= 0}]
    set bx [expr {[lsearch $(dir) bx] >= 0}]

    UTF::decomment (chanspec)

    if {$(chanspec) eq ""} {
	# default to finding chanspecs AP and STA have in common
	set (chanspec) [UTF::Common [$AP allchanspecs] [$STA allchanspecs]]
    }

    foreach chanspec $(chanspec) {
	if {[lsearch -exact $(skip) $chanspec] >= 0} {
	    UTF::Message INFO  $AP "Skipping $chanspec"
	    continue
	}
	if {[regexp {^(\d+)(/?\w*)} $chanspec - c sb]} {
	    if {$c > 15} {
		if {[lsearch {"" "5" "a"} $(band)] < 0} {
		    continue
		}
	    } else {
		if {[lsearch {"" "2.4" "b" "g"} $(band)] < 0} {
		    continue
		}
	    }
	    if {[regexp {/80} $sb]} {
		if {[lsearch {"" "80"} $(bw)] < 0} {
		    continue
		}
	    } elseif {$sb eq ""} {
		if {[lsearch {"" "20"} $(bw)] < 0} {
		    continue
		}
	    } else {
		if {[lsearch {"" "40"} $(bw)] < 0} {
		    continue
		}
	    }
	    lappend clist $chanspec
	} else {
	    error "bad chanspec $chanspec"
	}
    }
    if {![info exists clist]} {
	error "No acceptable channels"
    }
    UTF::Message INFO  $AP "testing: $clist"

    UTF::Logfile "test_c.log"

    catch {$STA wl msglevel +assoc}
    $STA wl radio on
    regexp -line {version (\S+)} [$STA wl ver] - parm(wlver)
    set parm(note) $(note)
    set parm(title) $(title)

    if {![catch {$STA wl spect} ret] && $ret ne "Off"} {
	catch {$STA wl down}
	catch {$STA wl spect 0}
	catch {$STA wl mimo_bw_cap 1}
	$STA wl up
    }
    if {$(pwr_percent) ne {}} {
	if {[regexp {(\d+):(\d+)} $(pwr_percent) - a s]} {
	    $STA wl pwr_percent $s
	    $AP wl pwr_percent $a
	} else {
	    $STA wl pwr_percent $(pwr_percent)
	}
    }
    if {$(security) ne ""} {
	$STA wl disassoc
	APConfigureSecurity $AP -security $(security)
    }

    if {$(sta_phy_spuravoid) ne ""} {
	$STA wl down
	$STA wl phy_spuravoid $(sta_phy_spuravoid)
	$STA wl up
	set parm(phy_spuravoid) $(sta_phy_spuravoid)
    }

    if {$(security) ne "" ||
	[catch {$AP wl bssid} ab] || [catch {$STA wl bssid} sb] ||
	$ab ne $sb || $ab eq "00:00:00:00:00:00"} {
	APChanspec $AP [lindex $(chanspec) 0]
 	ConnectAPSTA $AP $STA
    }

    if {[catch {$STA wl nrate} ret]} {
	if {[$STA wl band] eq "b"} {
	    set parm(rate) "([$STA wl bg_rate])"
	} else {
	    set rate "([$STA wl a_rate])"
	}
    } elseif {[regexp {(legacy rate|mcs index)\s(\d+).*(auto|fixed)} $ret \
		   - t r a]} {
	if {$a eq "auto"} {
	    set parm(rate) auto
	} else {
	    set parm(rate) $r
	}
	if {$t eq "legacy"} {
	    set parm(rate) "($parm(rate))"
	}
    } else {
	#error "Can't get rate"
    }

    set time [expr {$(blocks)/1000.0}]
    set inc [expr {$time/3.0}]
    set LAN [$AP lan]

    set cmdrx [list UTF::Multiperf [list $LAN $STA] -b $(b) \
		   -i $inc -t $time -w $(window) -noping]
    set cmdtx [list UTF::Multiperf [list $STA $LAN] -b $(b) \
		   -i $inc -t $time -w $(window) -noping]

    set cmdbx [list UTF::Multiperf [list $STA $LAN $LAN $STA] -b $(b) \
		   -i $inc -t $time -w $(window) -noping]

    $AP wl frameburst $(frameburst)
    catch {$AP wl band auto}
    catch {
	if {[$AP wl mimo_bw_cap] ne 1} {
	    $AP wl down
	    $AP wl mimo_bw_cap 1
	    $AP wl up
	}
    }
    $STA wl frameburst $(frameburst)
    set parm(frameburst) $(frameburst)
    set parm(pwr_percent) $(pwr_percent)

    if {$(ap_phy_spuravoid) ne ""} {
	$AP wl down
	$AP wl phy_spuravoid $(ap_phy_spuravoid)
	$AP wl up
	set parm(phy_spuravoid) $(ap_phy_spuravoid)
    }

    for {set i $(loop)} {$i > 0 } {incr i -1} {
	foreach parm(chanspec) $clist {
	    if {$(forcejoin)} {
		catch {$STA wl disassoc}
		ConnectAPSTA $AP $STA -chanspec $parm(chanspec)
	    } else {
		$AP wl down
		$AP wl chanspec $parm(chanspec)
		$AP wl up
		UTF::Sleep 5
		if {[catch {$STA ping $AP}]} {
		    catch {$STA wl disassoc}
		    ConnectAPSTA $AP $STA
		}
	    }

	    # Short test of all pairs to make sure rate has settled.  Results
	    # are discarded.
	    if {$bx || ($tx && $rx)} {
		set pretest [list $LAN $STA $STA $LAN]
	    } elseif {$tx} {
		set pretest [list $STA $LAN]
	    } else {
		set pretest [list $LAN $STA]
	    }

	    UTF::Multiperf $pretest -w $(window) -t 1 -noping -b $(b)

	    if {$tx} {
		set parm(dir) tx
		for {set j $(samples)} {$j > 0 } {incr j -1} {
		    $STA wl ampdu_clear_dump
		    foreach ret [eval $cmdtx] {
			UTF::XPASS $STA $ret [UTF::ParmStrip parm]
		    }
		    set max [UTF::ParseAMPDUmaxPER [$STA wl -silent dump ampdu]]
		    UTF::XPASS $STA $max \
			[concat [UTF::ParmStrip parm] data txPER]
		}
	    }
	    if {$rx} {
		set parm(dir) rx
		for {set j $(samples)} {$j > 0 } {incr j -1} {
		    $AP wl ampdu_clear_dump
		    foreach ret [eval $cmdrx] {
			UTF::XPASS $STA $ret [UTF::ParmStrip parm]
		    }
		    set max [UTF::ParseAMPDUmaxPER [$AP wl -silent dump ampdu]]
		    UTF::XPASS $STA $max \
			[concat [UTF::ParmStrip parm] data rxPER]
		}
	    }
	    if {$bx} {
		set parm(dir) bx
		for {set j $(samples)} {$j > 0 } {incr j -1} {
		    foreach ret [eval $cmdbx] {
			UTF::XPASS $STA $ret [UTF::ParmStrip parm]
		    }
		}
	    }
	}
    }
}
