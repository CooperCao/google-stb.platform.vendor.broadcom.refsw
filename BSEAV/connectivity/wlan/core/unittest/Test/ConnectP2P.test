#!/bin/env utf
# -*-tcl-*-

#
# P2P Connection script
#

# $Id: e2a19fef73ee00ef1077e31a86d7c435e80857c4 $
# $Copyright Broadcom Corporation$
#

package require UTF

package provide UTF::Test::ConnectP2P 2.0

#################################################################################
#################################################################################

namespace eval UTF::Test::ConnectP2P {

    #####################################################
    ##############        Setup GC       ################
    #####################################################
    proc setup_gc {GC} {

	UTF::Message INFO $GC "Setup GC"

	$GC wl up
	#UTF::Sleep 1

	set mac [string replace [$GC macaddr] 0 1 12]

	UTF::Message INFO $GC "Clean up any pre-existing interface"
	if {![catch {$GC wl p2p_if $mac}]} {
	    $GC wl p2p_ifdel $mac
	}

	UTF::Message INFO $GC "setup P2P gc"
	$GC wl p2p_ifadd $mac client

	# get the new P2P GC interface name
	set ifname [lindex [$GC wl p2p_if $mac] 1]

	set GCI "[namespace tail $GC]#1"
	UTF::STA ::$GCI -host [$GC cget -host] -device $ifname

	$GCI ifconfig local

	regsub -all {:} $mac "" mac_strip

	# constants
	set OUI "50:6F:9A"; # WFA
	set magic2 "000400010050F204000600101100045032502D0E010000"

	$GCI wl add_ie 0x10 14 $OUI 090202000400060200000B
	$GCI wl add_ie 0x02 41 $OUI 0902020004000D1900${mac_strip}$magic2
	$GCI wl add_ie 0x20 41 $OUI 0902020004000D1900${mac_strip}$magic2

	UTF::Message INFO "" "Dump GC interfaces for debugging"
	$GC rexec ip addr

	UTF::Message PASS $GC "P2P GC interface '$ifname' created"

	set GCI
    }
}

UTF::Test ConnectP2P {GOI GC args} {
    UTF::Getopts {
	{tries.arg 1 "Number of join attempts"}
    }

    # Fetch current data
    set SSID [$GOI cget -ssid]
    if {![regexp {^DIRECT-} $SSID]} {
	$GOI warn "Invalid P2P SSID: $SSID"
    }
    set WPAKEY [$GOI cget -wpakey]
    set security [$GOI cget -security]
    set amode open
    set wsec 0
    switch $security {
	open {
	}
	aespsk2 {
	    set wsec 4
	    set amode wpa2psk
	}
	default {
	    error "unsupported -security type: $security"
	}
    }


    #####################################################
    ##############        Setup GC       ################
    #####################################################
    set GCI [setup_gc $GC]

    #####################################################
    ##############       GC Join GO      ################
    #####################################################

    UTF::Message INFO "" "************************Func:gc_join_go***************************"

    UTF::Message INFO "" "GC joins GO"

    $GCI wl wsec $wsec
    # Need to explicitly disable WPA, otherwise power save may not work
    # It will be re-enabled by join if needed.
    $GCI wl -u wpa_auth 0
    if {[regexp {psk} $amode]} {
	# enable internal supplicant before we set any keys
	$GCI wl sup_wpa 1
    } else {
	# We're turning the supplicant off, so non-supported is ok
	if {[catch {$GCI wl -u sup_wpa 0} ret] &&
	    ![regexp {Not STA} $ret]} {
	    error $ret $::errorInfo
	}
    }
    if {[regexp {psk} $amode]} {
	# Either internal or os-provided supplicant should be
	# available at this point.
	$GCI wl set_pmk "\"$WPAKEY\""
    }


    set joinscript [list $GCI wl join $SSID imode bss amode $amode -p]

    for {set tries 1} {1} {incr tries} {
	if {$tries > 1} {
	    UTF::Message INFO $S "Join try #$tries"
	}
	eval $joinscript

	UTF::Sleep 8

	if {[catch {$GCI wl -u bssid} bssid]} {
	    if {![regexp {Not Associated} $bssid] ||
		$tries >= $(tries)} {
		throw FAIL $bssid
	    }
	} else {
	    break
	}
    }

    for {set tries 1} {$tries < 4} {incr tries} {
	if {$tries > 1} {
	    UTF::Message INFO $GCI "Roam Wait #$tries"
	}
	if {$bssid ne "00:00:00:00:00:00"} {
	    break
	}
	UTF::Sleep 3
	set bssid [$GCI wl bssid]
    }
    if {$bssid eq "00:00:00:00:00:00"} {
	throw FAIL "Roaming"
    }

    $GCI wl status

    UTF::Message INFO "" "PASS. P2P GC joined GO SSID $SSID successfully."

    #####################################################
    ##############        Ping P2P       ################
    #####################################################

    try {
	$GC ping $GOI
    } finally {
	#UTF#::Message INFO "" "Disassociate the P2P connection"
	#catch {$GCI wl disassoc}
    }
    return $GCI

}
