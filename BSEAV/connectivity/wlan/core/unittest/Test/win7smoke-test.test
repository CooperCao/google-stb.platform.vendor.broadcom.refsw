#!/bin/env utf
# -*-tcl-*-

#
# UTF test script for a smoke test on win7 platforms.
# $Id: sta-smoke.test,v 1.1 2008/02/21 01:28:16 jkoenig Exp
# $Copyright Broadcom Corporation$
#

package require UTF
package require UTF::utils
package require UTF::Test::controlchart
package require UTF::Test::ChannelSweep
package require UTF::Test::Join
package require UTF::Test::APChanspec

proc FriendlyNames {str} {
    switch -exact -- $str {
        wep {return "WEP"}
        tkippsk {return "WPA-PSK/TKIP"}
        aespsk2 {return "WPA2-PSK/AES"}
        7l {return "Ch. 7, 40 MHz, LSB"}
        149l {return "Ch. 149, 40 MHz, LSB"}
    }
}

# Path should be a path to 'src/' on a local private build, e.g.
# '/projects/hnd/software/work/jkoenig/tot'

UTF::Test StaSmoke {Router 22Sta 224Sta vwifi Path args} {

    UTF::Getopts {
        {email.arg "" "Email address, defaults to you"}
        {i.arg 2      "Time duration, in seconds, of each iperf sample"}
        {nosetup      "Use testrig as is, no driver signing, loading, etc"}
        {w.arg 512k   "TCP window size, has huge impact on throughput"}
    }

    # Constants fixed PCI ID string
    set pidvid224 "\"PCI\\VEN_14E4&DEV_4353&SUBSYS_000E1028&REV_01\""
    set pidvid22  "\"PCI\\VEN_14E4&DEV_432B&SUBSYS_000D1028&REV_01\""
    # End constants

    # Basic initialization
    set sta [list $22Sta $224Sta]
    set pidvid($22Sta) $pidvid22
    set pidvid($224Sta) $pidvid224

    set LAN [$Router lan]
    set developer $::tcl_platform(user)
    if {$(email) == ""} {
        set (email) $developer
    }
    set date [clock format [clock seconds] -format "%Y.%-m.%-e"]
    set summaryinfo ""
    set tries 3 ;# number of times to try/retry opening a connection
    set TITLE "Win7 NIC (4322/43224) Smoke Test Results ($date) by $developer ($Path)"
    UTF::Message INFO "" $TITLE

    # Some Windows7 specific parameters
    set extAPssid "Win7ExtAP"
    set extAPpassphrase "abcdefgh"

    # For control chart tests, we have a more tolerant pass criteria.
    # ZERO througput, ping & iperf issues still show as FAIL.
    set ::cc_pass_criteria "OK|LOW|WIDE|HIGH|NARROW" 

    UTF::WrapSummary $UTF::SummaryDir $TITLE $summaryinfo $(email) {
        set ::UTF::Perfcache [file join $UTF::SummaryDir perfcache]
        set result_file "[file dirname "$UTF::Logfile"]/summary.html"
        UTF::Message LOG "" "results: $result_file"

        # Doing a ping test from the STA at this point is not reliable.
        # There is no guarantee that the STA is still loaded or functional.
        # Best heartbeat check is an SSH command to the host PC.
        set heartbeats 0
        foreach STA $sta {
            UTF::Try "$STA Heartbeat test" {
                $STA uname -a
                UTF::Message PASS $STA "SSH command succeeded"
                incr heartbeats
                return
            }
        }

        # If the heartbeat tests failed, there is no point continuing
        # onwards with the tests. Throwing an error outside UTF::Try block will
        # cause a UTF framework error and stop the tests right here.
        if {$heartbeats < 2} {
            error "ERROR: Only $heartbeats heartbeat test(s) passed. Please reboot the PC(s) that failed."
        }

        UTF::Try "Finding Drivers" {
            set found_builds 0
            set cvstag ""
            set tmppath ""
            set type ""
            if {$(nosetup)} {
                return "skipped"
            }

            # $path may be a tag or a path to a local tree. If it's a cvs tag, find the nightly
            # build of that tag and copy the binaries and execute the smoke test that way
            if {[file isdirectory [file join $::UTF::SummaryDir "$developer-$date-files"]]} {
                UTF::Message LOG $22Sta "Deleting existing smoke test files in $developer-$date-files...."
                file delete -force [file join $::UTF::SummaryDir "$developer-$date-files"]
            }
            set tmppath [file join $::UTF::SummaryDir "$developer-$date-files"]
            file mkdir $tmppath/win7
            if {[string match "*/*" $Path]} {
                # Activities to generate and install the necessary files on 22sta/224sta
                set bcmwl6path [file join $Path src wl sys wdm buildwin7 objchk_win7_x86 i386]
                UTF::Message LOG $224Sta "Using bcmwl6.sys from $bcmwl6path"
                set bcmwl6 [file join $bcmwl6path bcmwl6.sys]
                set cvstag [UTF::private_build_tag $Path/src/wl/sys/wlc.c]
                UTF::Message LOG "" "Using $cvstag private build"
                if {![file exists $bcmwl6]} {
                    error "Could not find bcmwl6 in path, please verify your build environment"
                }
                UTF::Message LOG "" "Using $tmppath as temporary file repository"
                file copy -force $bcmwl6 $tmppath/win7
                incr found_builds
                set type "PATH"

            } else {
                # We got passed a tag
                UTF::Message LOG $22Sta "Attempting to use most recent driver from tag $Path"
                # Does said tag exist? We don't differentiate between tags built nightly (i.e. branch, TOT)
                # and a specific release tag....both should work!
                set cvstag $Path
                set type "TAG"
                incr found_builds ;# heres hoping...

            }
            return
        }

        # If there were errors finding the build, there is no point continuing
        # onwards with the tests. Throwing an error outside UTF::Try block will
        # cause a UTF framework error and stop the tests right here.
        if {$found_builds < 1 && $(nosetup) == 0} {
            error "ERROR: found_builds=$found_builds, could not find bcmwl6.sys in path, please verify your build environment"
        }

        UTF::Try "Finding Files on Build Server" {
            set copied_files 0
            if {$(nosetup)} {
                return "skipped"
            }

            # Look through directories to find *.inf files (XP and Vista) and co-installer/IHV DLLs (Vista only)
            # Are we a branch or a twig? If we are a twig, we need to find the coinstallers from the branch
            # because we don't build twigs nightly
            set parsedtag [split $cvstag _]
            set releasetype [lindex $parsedtag 1]
            if {$releasetype == "TWIG"} {
                # Convert the twig name into a branch name here
                set cvstag "[lindex $parsedtag 0]_BRANCH_[lindex $parsedtag 2]_[lindex $parsedtag 3]"
                UTF::Message LOG $22Sta "Testing twig build, so pulling coinstallers and INF files from branch nightly ($cvstag)"
            }
            set dircontents [exec ls -m --sort=time /projects/hnd_swbuild/build_window/$cvstag/win_internal_wl]
            set dircontents [regsub -all " " $dircontents ""]
            set dircontents [split $dircontents ,]
            # First, look for the .inf file, including the driver, if passed a tag
            foreach builddate $dircontents {
                set infpath \
                    [file join /projects hnd_swbuild build_window $cvstag win_internal_wl \
                         $builddate release Win7 checked DriverOnly]
                if {$type == "TAG"} {
                    if {[file exists [file join $infpath bcmwl6.sys]]} {
                        UTF::Message LOG $22Sta "Using bcmwl6.sys from $infpath"
                            file copy -force $infpath/bcmwl6.sys  $tmppath/win7/bcmwl6.sys
                            incr copied_files
                    }
                }
                if {[file exists [file join $infpath bcmwl6.inf]] && \
                        [file exists [file join $infpath bcmihvsrv.dll]] && \
                        [file exists [file join $infpath bcmihvui.dll]] && \
                        [file exists [file join $infpath bcmwlcoi.dll]]} {
                        UTF::Message LOG $224Sta "Using bcmwl6.inf, IHV DLLs and co-installer from $infpath"
                    file copy -force $infpath/bcmwl6.inf  $tmppath/win7/bcmwl6.inf
                    file copy -force $infpath/bcmihvsrv.dll  $tmppath/win7/bcmihvsrv.dll
                    file copy -force $infpath/bcmihvui.dll  $tmppath/win7/bcmihvui.dll
                    file copy -force $infpath/bcmwlcoi.dll  $tmppath/win7/bcmwlcoi.dll
                        incr copied_files
                        break
                }
            }
            # Because UTF machines are not on the domain, we can't require the Z:\ drive to be mapped,
            # because it is mapped after a user manually enters their credentials. So, push all ncessary
            # files to the machine that can sign the files, sign them locally, and then install
            $22Sta mkdir -p $developer-$date-files/win7
            $22Sta copyto $tmppath/win7/bcmwl6.inf $developer-$date-files/win7/
            $22Sta copyto $tmppath/win7/bcmwl6.sys $developer-$date-files/win7/
            $22Sta copyto $tmppath/win7/bcmwlcoi.dll $developer-$date-files/win7/
            $22Sta copyto $tmppath/win7/bcmihvsrv.dll $developer-$date-files/win7/
            $22Sta copyto $tmppath/win7/bcmihvui.dll $developer-$date-files/win7/
            incr copied_files
            return
        }

        # If there were errors copying files, there is no point continuing
        # onwards with the tests. Throwing an error outside UTF::Try block will
        # cause a UTF framework error and stop the tests right here.
        if {$copied_files < 2 && $(nosetup) == 0} {
            error "ERROR: copied_files=$copied_files, could not get required files from build server."
        }

        UTF::Try "Signing All Kernel Modules" {
            if {$(nosetup)} {
                return "skipped"
            }

            # Make cat file
            $22Sta /bin/SelfSign/inf2cat.exe /driver:$developer-$date-files/win7/ /os:Vista_X86
            # Sign cat file
            $22Sta rexec -timeout 180 /bin/SelfSign/signtool.exe sign /ac MSCV-VSClass3.cer /s my /n \"Broadcom Corporation\" \
                /t \"http://timestamp.verisign.com/scripts/timestamp.dll\" $developer-$date-files/win7/bcm43xx.cat
            # Verify both
            $22Sta rexec -timeout 180 /bin/SelfSign/signtool.exe verify /kp /c $developer-$date-files/win7/bcm43xx.cat \
                $developer-$date-files/win7/bcmwl6.sys

            $22Sta copyfrom $developer-$date-files/win7/bcm43xx.cat $tmppath/win7/bcm43xx.cat
            $224Sta rm -rf $developer-$date-files/win7
            $224Sta mkdir -p $developer-$date-files/win7
            $224Sta copyto $tmppath/win7/bcmwl6.inf $developer-$date-files/win7/
            $224Sta copyto $tmppath/win7/bcmwl6.sys $developer-$date-files/win7/
            $224Sta copyto $tmppath/win7/bcmwlcoi.dll $developer-$date-files/win7/
            $224Sta copyto $tmppath/win7/bcmihvsrv.dll $developer-$date-files/win7/
            $224Sta copyto $tmppath/win7/bcmihvui.dll $developer-$date-files/win7/
            $224Sta copyto $tmppath/win7/bcm43xx.cat $developer-$date-files/win7/
            return
        }

        # Install drivers.
        foreach STA $sta {
            UTF::Try "Installing Driver on $STA" {
                if {$(nosetup)} {
                    return "skipped"
                }
                $STA rexec devcon rescan
                UTF::Sleep 10
                # XXX these are hard-coded VIDs/PIDs. Not valid if the hardware/chiprev is changed in the system!
                UTF::Message LOG $STA "Installing new Win7 device driver..."
                $STA rexec -timeout 180  devcon update $developer-$date-files/win7/bcmwl6.inf $pidvid($STA)
                UTF::Sleep 5
                $STA reg BandwidthCap 1
                $STA rexec devcon enable $pidvid($STA)
                UTF::Sleep 5
                set ver [$STA wl ver]
                regsub -all {\n} $ver " " ver
                UTF::Message LOG $STA "New Win7 driver installed successfully!(Version string is:\n $ver)"
                return $ver
            }
        }

        # Files are now installed, begin actual script execution
        UTF::Try "$Router restore defaults" {
            if {$(nosetup)} {
                return "skipped"
            }

            UTF::Message LOG "$Router" "\n\nRouter restore defaults\n\n"
            $Router restore_defaults
            set ap_ver [$Router nvram get os_version]
            return $ap_ver
        }

        # STA drivers are disabled at the end of these tests, so we always
        # need to set them back up again.
        set drivers_ok 0
        foreach STA $sta {
            UTF::Try "$STA setup" {
                UTF::Message LOG $STA "Initial Configuration"
                $STA rexec devcon enable $pidvid($STA)
                UTF::Sleep 5
                $STA wl down
                $STA wl PM 0
                $STA wl nmode 1
                $STA wl ampdu 1
                $STA wl frameburst 1
                $STA wl radio on
                $STA wl up
                $STA wl disassoc
                $STA services stop
                $STA wl msglevel error assoc
                incr drivers_ok
                return
            }
        }

        # If there were errors setting up the STA, there is no point continuing
        # onwards with the tests. Throwing an error outside UTF::Try block will
        # cause a UTF framework error and stop the tests right here.
        if {$drivers_ok < 2 && $sta != ""} {
            error "ERROR: drivers_ok=$drivers_ok, please fix the STA that failed to initialize."
        }

        # Cleanup the files on file server & testrig PC
        UTF::Try "Cleanup temp files" {
            if {$(nosetup)} {
                return "skipped"
            }
            UTF::cleanup_temp_files "$tmppath" "$sta" "$developer-$date-files"
        }

        # [send/receive connectivity tests]
        # (XP+Vista) MIMO: LAN->WLAN, 5GHz, open
        # (XP+Vista) MIMO: WLAN->LAN, 5GHz, open
        # (XP+Vista) MIMO: LAN->WLAN, 2.4 GHz, open
        # (XP+Vista) MIMO: WLAN->LAN, 2.4 GHz, open 
        UTF::Message LOG ""  "$Router: Open Security Connectivity and Performance"
        set taglist [split $cvstag _]
        set keytag [lindex $taglist 0]
        set sec open
        foreach ch {7l 149l} {
            UTF::Message LOG ""  "Performance on channel [FriendlyNames $ch]"
            foreach STA $sta {
                set k [concat $keytag $ch open BSS]
                UTF::Try "$STA Connectivity Test Ch$ch $sec" {
                    UTF::Message LOG "$Router" "\n\nRouter set Ch$ch\n\n"
                    APChanspec $Router $ch

                    UTF::Message LOG "$Router" "\n\nOpen connection security $sec\n\n"
                    set resp [UTF::open_connection_retry $Router $STA $tries $sec]

                    UTF::Message LOG "$Router" "\n\nCollect misc info\n\n"
                    $STA wl nrate
                    set status [$STA wl status]
                    return "$resp status: $status"
                }
                UTF::Try "$STA Performance: WLAN->LAN" {
                    # $STA wl disassoc ;# test code
                    set catch_resp [catch "controlchart \[list $STA $LAN\] -key \"$k\" -i $(i) -window $(w)" catch_msg]
                    UTF::update_control_chart_result $catch_resp $catch_msg
                }
                UTF::Try "$STA Performance: WLAN<-LAN" {
                    set catch_resp [catch "controlchart \[list $LAN $STA\] -key \"$k\" -i $(i) -window $(w)" catch_msg]
                    UTF::update_control_chart_result $catch_resp $catch_msg
                }
                UTF::Try "$STA disassoc" {
                    $STA wl disassoc
                    return
                }
            }
        }

        # Extensible AP testing
        # Filed PR87853 for the assert we get here. 
        # For time being, Manoj wants these tests turned off. 
        UTF::Try "Associating STA to Extensible AP, vwifi=$vwifi" {
            return "skipped - PR87853"


            $224Sta netsh wlan set hostednetwork mode=allow
            $224Sta netsh wlan set hostednetwork ssid=$extAPssid
            $224Sta netsh wlan set hostednetwork key=$extAPpassphrase
            $224Sta netsh wlan start hostednetwork
            UTF::Sleep 10
            $22Sta wl wsec 7
            $22Sta wl join $extAPssid amode wpa2psk psk $extAPpassphrase 
            UTF::Sleep 10
            $22Sta ping $vwifi
            $22Sta wl disassoc
            return
        }

        UTF::Try "Testing simultaneous AP and STA functionality" {
            return "skipped - PR87853"


            APChanspec $Router 7l
            UTF::open_connection_retry $Router $STA $tries $sec
            $22Sta wl join $extAPssid amode wpa2psk psk $extAPpassphrase
            UTF::Sleep 10
        }

        UTF::Try "Extensible AP performance WLAN->LAN" {
            return "skipped - PR87853"


            set k [concat $keytag "EXT_AP"]
            $22Sta ping $vwifi
            set catch_resp [catch "controlchart \[list $224Sta $LAN\] -key \"$k\" -i $(i) -window $(w)" catch_msg]
            UTF::update_control_chart_result $catch_resp $catch_msg
        }

        UTF::Try "Extensible AP performance WLAN<-LAN" {
            return "skipped - PR87853"


            $22Sta ping $vwifi
            set catch_resp [catch "controlchart \[list $LAN $224Sta\] -key \"$k\" -i $(i) -window $(w)" catch_msg]
            UTF::update_control_chart_result $catch_resp $catch_msg
        }

        UTF::Try "Extensible AP Roaming Test" {
            return "skipped - PR87853"


            ChannelSweep $Router $224Sta -chanspec [list 7l 11l 149l] -msg $224Sta
            $22Sta ping $vwifi
        }

        UTF::Try "Extensible AP Cleanup" {
            return "skipped - PR87853"


            $224Sta netsh wlan stop hostednetwork
        }

        # [cipher tests]
        # (XP+Vista) MIMO: WLAN->LAN, 2.4 GHz, WEP
        # (XP+Vista) MIMO: WLAN->LAN, 2.4 GHz, WPA-PSK TKIP
        # (XP+Vista) MIMO: WLAN->LAN, 2.4 GHz, WPA2-PSK AES

        # Set router channel
        set ch 7l
        UTF::Try "$Router set to Ch$ch" {
            APChanspec $Router $ch
        }

        foreach sec {wep tkippsk aespsk2} {
            UTF::Message LOG ""  "$Router: [FriendlyNames $sec] Security Connectivity and Performance"
            foreach STA $sta {
                if {$sec == "tkippsk"} {
                    UTF::Try "$STA TKIP setup" {
                        $STA wl down
                        $STA wl nmode 0
                        $STA wl up
                    }
                }
                set k [concat $keytag $ch $sec BSS]
                UTF::Try "$STA Connectivity Test Ch$ch [FriendlyNames $sec]" {
                    UTF::Message LOG "$Router" "\n\nOpen connection security $sec\n\n"
                    UTF::open_connection_retry $Router $STA $tries $sec
                }
                UTF::Try "$STA Performance: WLAN->LAN" {
                    set catch_resp [catch "controlchart \[list $STA $LAN\] -key \"$k\" -i $(i) -window $(w)" catch_msg]
                    UTF::update_control_chart_result $catch_resp $catch_msg
                }
                UTF::Try "$STA Performance: WLAN<-LAN" {
                    set catch_resp [catch "controlchart \[list $LAN $STA\] -key \"$k\" -i $(i) -window $(w)" catch_msg]
                    UTF::update_control_chart_result $catch_resp $catch_msg
                }
                if {$sec == "tkippsk"} {
                    UTF::Try "$STA TKIP teardown" {
                        $STA wl down
                        $STA wl nmode 1
                        $STA wl up
                    }
                }
            }
        }

        # [roaming]
        # (XP+Vista) Change AP channels (2.4 GHz band -> 5 GHz band), verify STA reassociates promptly
        foreach STA $sta {
            # 0x2d09 = 40 MHz, lower sideband control, channel 9
            # 0x1d9f = 40 Mhz, lower sideband, channel 159
            UTF::Try "$STA: Roam Test (2.4G -> 5G) (Open Security)" {
                ChannelSweep $Router $STA -chanspec [list 7l 149l] -msg $STA
            }
        }

        # [Disable/Enable test - make sure that we don't have unfreed allocations]
        UTF::Try "Disable Test" {
            foreach STA $sta {
                UTF::Message LOG $STA "Disabling adapter..."
                $STA rexec devcon disable $pidvid($STA)
                UTF::Sleep 5
            }
        }

        # Dont remove drivers from host PC. This allows tests to be
        # run again with the -nosetup option.
    }
}
