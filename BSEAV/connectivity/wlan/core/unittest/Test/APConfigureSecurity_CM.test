#!/bin/env utf
# -*-tcl-*-

# UTF test script for Configuring security on an AP interface
#
# Security settings are stored in the AP object for later retrieval by
# JoinSecurity.
#
# Usage:  APConfigureSecurity AP [-auth open|shared] \
#		[-akm 8021x|wpa|wpapsk|wpa2|wpa2psk] \
#		[-crypto tkip|aes] \
#		[-radius IPAddress] \
#		[-radiusport RadiusPort] \
#		[-radiuskey RadiusKey]
#
# Sample: Test/APConfigureSecurity_CM.test Router1 -auth open \
#   -akm "wpa wpapsk wpa2" -crypto "tkip aes" \
#   -radius 10.19.13.37 -radiusport 1812 -radiuskey broadcom
#
# $Id$
#
package require -exact UTF 1.262

package provide UTF::Test::APConfigureSecurity_CM 2.0

# Concatenates strings using the specified str
proc concatenate {elements str} {
    set result ""
    if {[llength $elements] > 0} {
	for {set index 0} {$index < [llength $elements]} {incr index} {
	    if { $index > 0} {
		set result $result$str[lindex $elements $index]
	    } else {
		set result [lindex $elements $index]
	    }
	}
    }
    return $result
}

UTF::Test APConfigureSecurity_CM {AP args} {
    UTF::Getopts {
	{auth.arg	"open"	"Authentication"}
	{akm.arg	""	"Authentication Key Managemenet"}
	{crypto.arg	""	"Cipher Suite"}
	{radius.arg	""	"Radius Server"}
	{radiusport.arg	"1812"	"Radius Server Port"}
	{radiuskey.arg	""	"Radius Server Key"}
    }

    # Fetch current data
    set SSID [$AP cget -ssid]
    set WEPKEY [$AP cget -wepkey]
    set WEPIDX [$AP cget -wepidx]
    set WPAKEY [$AP cget -wpakey]
    # Initialise, if necessary
    if {$SSID eq ""} {
	if {[catch {$AP wl ssid} SSID] || $SSID eq "Broadcom"} {
	    # Avoid default SSID
	    set SSID "[namespace tail ${AP}]_[$AP wl bssid]"
	}
	$AP configure -ssid $SSID
    }
    if {$WEPKEY eq ""} {
	set WEPKEY [UTF::NewWepKey]
	$AP configure -wepkey $WEPKEY
    }
    if {$WEPIDX eq ""} {
	set WEPIDX 0
	$AP configure -wepidx 0
    }
    if {$WPAKEY eq ""} {
	set WPAKEY [UTF::NewWPAPassphrase]
	$AP configure -wpakey $WPAKEY
    }

    UTF::Message INFO $AP "Prepare AP with SSID $SSID and $(auth) \{$(akm)\} \{$(crypto)\} $(radius) $(radiusport) $(radiuskey)"

    # Defaults
    set v_auth 0
    set v_auth_mode none
    set v_akm ""
    set v_crypto ""
    set v_wep disabled

    switch $(auth) {
	open {

	    # Process authentication key management (akm) options
	    for {set akm_i 0} {$akm_i < [llength $(akm)]} {incr akm_i} {
		set akm_option [lindex $(akm) $akm_i]
		switch $akm_option {

		    8021x {
			set v_auth_mode radius
			set v_wep enabled
			set WEPIDX 1
		    }
		    wpa -
		    wpapsk -
		    wpa2 -
		    wpa2psk {
			if {[lsearch -exact $v_akm $akm_option] == -1} {
			    lappend v_akm $akm_option
			}
		    }
		    default {
			error "unknown -akm type: $akm_option"
		    }
		}
	    }

	    # Process crypto options
	    for {set crypto_i 0} {$crypto_i < [llength $(crypto)]} {incr crypto_i} {
		set crypto_option [lindex $(crypto) $crypto_i]
		switch $crypto_option {
		    tkip -
		    aes {
			if {[lsearch -exact $v_crypto $crypto_option] == -1} {
			    lappend v_crypto $crypto_option
			}
		    }
		    wep {
			set v_wep enabled
			set WEPIDX 1
		    }
		    default {
			error "unknown -crypto type: $crypto_option"
		    }
		}
	    }

	    # If WPA/WPA2/WPAPSK/WPA2PSK enabled, crypto must contain tkip or aes
	    if {[lsearch -exact $v_akm wpa] >= 0 ||
		[lsearch -exact $v_akm wpa2] >= 0 ||
		[lsearch -exact $v_akm wpapsk] >= 0 ||
		[lsearch -exact $v_akm wpa2psk] >= 0 } {

		if {[lsearch -exact $v_crypto tkip] == -1 &&
		    [lsearch -exact $v_crypto aes] == -1} {
		    error "-crypto option must be specified"
		}
	    }
	}
	shared {
	    set v_auth 1
	    set v_wep enabled
	    set v_crypto ""
	    set WEPIDX 1
	}
	default {
	    error "unknown -auth type: $(auth)"
    	}
    }

    # Validate radius server options in case of 8021X|wpa|wpa2
    if { [lsearch -exact $v_akm wpa] >= 0 ||
         [lsearch -exact $v_akm wpa2] >= 0 ||
	 [lsearch -exact $v_akm 8021x] >= 0 } {

	if {$(radius) eq ""} {
	    error "Radius server IP option must be specified -radius \[IP address\]"
	}
	if {$(radiuskey) eq ""} {
	    error "Radius key must be specified -radiuskey \[Key\]"
	}
    }

    set ifname [$AP cget -device]
    set wlname [$AP wlname]

    set nv(${wlname}_ssid) $SSID
    set nv(${wlname}_wep) $v_wep
    set nv(${wlname}_key) [expr {$WEPIDX+1}]
    set nv(${wlname}_key1) $WEPKEY
    set nv(${wlname}_key2) $WEPKEY
    set nv(${wlname}_key3) $WEPKEY
    set nv(${wlname}_key4) $WEPKEY
    set nv(${wlname}_akm) "$v_akm"
    set nv(${wlname}_crypto) [concatenate $v_crypto +]
    set nv(${wlname}_wpa_psk) $WPAKEY
    set nv(${wlname}_auth) $v_auth
    set nv(${wlname}_auth_mode) $v_auth_mode
    set nv(${wlname}_mode) ap
    set nv(${wlname}_radio) 1

    set nv(${wlname}_radius_ipaddr) $(radius)
    set nv(${wlname}_radius_port) $(radiusport)
    set nv(${wlname}_radius_key) $(radiuskey)

    set updated 0
    foreach n [array names nv] {
	if {[$AP nvram get $n] ne $nv($n)} {
	    $AP nvram set "$n=$nv($n)"
	    set updated 1
	}
    }

    $AP configure -auth $v_auth
    $AP configure -auth_mode $v_auth_mode
    $AP configure -wep $v_wep
    $AP configure -akm "$v_akm"
    $AP configure -crypto [concatenate $v_crypto +]
    $AP configure -wepidx $WEPIDX
    $AP configure -radius $(radius)
    $AP configure -radiusport $(radiusport)
    $AP configure -radiuskey $(radiuskey)

    if {$updated} {
	$AP nvram commit
	$AP rc restart
	UTF::Sleep 5
    }

    UTF::Assert [$AP wl ssid] $SSID $AP "SSID"
    if {[$AP nvram get ${wlname}_mode] ne "wds"} {
	UTF::Assert -i [$AP wl bssid] "00:00:00:00:00:00" $AP "Non zero BSSID"
    }

    return
}
