#!/bin/env utf
# -*-tcl-*-
#

#
# UTF test script to verify association as a device moves toward an AP
#
# Written by: Robert J. McMahon March 2014
#
# $Copyright Broadcom Corporation$
#
package require UTF
package require UTF::Streams
package require UTF::FTTR
package require UTF::Test::APChanspec
package require UTF::Test::ConnectAPSTA
package require UTF::Test::APConfigureSecurity
package require UTF::Test::ConfigBridge

package provide UTF::Test::FTTRAssoc 2.0

UTF::Test FTTRAssoc {args} {
    UTF::Getopts {
	{ap.arg "4708ap" "AP under test"}
	{sta.arg "4360lx2" "STA under test"}
	{attngrp.arg "" "attenuator to use"}
	{steps.arg "-1" "number of attenuator steps"}
	{protocol.arg "tcp udp" "Protocols to test"}
	{dwell.arg "1" "dwell to measure traffic"}
	{count.arg "5" "number of tests runs"}
	{direction.arg "down up" "direction(s) to test"}
	{stepsize.arg "1" "Attenuator step size in dB"}
	{title.arg "" "Titles"}
	{email.arg "" ""}
	{tos.arg "0x0"}
	{w.arg "4M"}
	{rcrestart ""}
	{tracelevel.arg "external"}
	{noload "don't load the image"}
	{date.arg "" "Image date"}
	{apdate.arg "" "AP Image date"}
	{security.arg "open" "Default security"}
	{chanspec.arg "36/80" "Chanspec list to test"}
	{scansuppress "Enable scan suppress during test run"}
	{notestdefaults "Don't apply test defaults"}
	{amsdu.arg "-1" "AMSDU setting"}
	{amsdu_aggblock.arg "-1" "AMSDU aggblock setting"}
	{atf.arg "-1" "Airtime Fairness setting"}
	{frameburst.arg "-1" "Airtime Fairness setting"}
	{nosetuptestbed "Don't run Setup Testbed hooks"}
	{trx.arg "" "Router trx"}
	{multicast "Include multicast testing"}
	{udprate.arg "500M" "UDP offerred rate"}
	{roamtrigger.arg "-100" "roamtrigger value"}
	{nopktqstats "disable pktqstat polling"}
	{tcptrace "enable tcptrace and pcap capture"}
	{graphsize.arg "640,480" "Graph size"}
	{graphtype.arg "canvas" "set the type of graph"}
	{country.arg "-1" "Country code override"}
	{reportinterval.arg "0.05" "iperf sampling rate"}
	{scansuppress "enable scan suppress"}
    }

    if {$(date) ne ""} {
	set date $(date)
	$(ap) configure -date $(date)
	foreach S $(sta) {
	    $S configure -date $(date)
	}
	unset S
    }
    if {$(apdate) ne ""} {
	$(ap) configure -date $(apdate)
    }
    if {$(scansuppress)} {
	set scansuppress 1
    } else {
	set scansuppress 0
    }
    if {$(nopktqstats)} {
	set pktqstats 0
    } else {
	set pktqstats 1
    }
    # Compact build list for title
    set build [UTF::BuildTitle [concat $(ap) $(sta)]]
    set TITLE "UTF FTTR-ASSOC $(title) ($build) (dwell $(dwell) s) (debug=$(tracelevel))"
    UTF::WrapSummary $UTF::SummaryDir $TITLE "" $(email) {
	UTF::Try "Init endpoints" {
	    set ends [list [$(ap) lan] [$(sta) lan]]
	    ::UTF::Streamslib::force_cleanup $ends
	    foreach endpoint $ends {
		$endpoint tcptune [expr {4 * 1024 * 1024}]
	    }
	}
	if {!$(nosetuptestbed) && [info exists ::UTF::SetupTestBed]} {
	    UTF::Try "Setup testbed" {
		eval $::UTF::SetupTestBed
	    }
	}
	set BRIDGES {}
	set STAS {}
	foreach STA $(sta) {
	    if {[$STA hostis Router] && [lsearch $BRIDGES $STA] == -1} {
		lappend BRIDGES $STA
	    } else {
		lappend STAS $STA
	    }
	}
	if {!$(noload)} {
	    foreach Router [concat $(ap) $BRIDGES] {
		UTF::Try "[$Router cget -name]: Find Router Image" {
		    if {$(trx) ne ""} {
			$Router configure -image $(trx) -date {}
			set date {}
		    } else {
			set date [$Router cget -date]
			if {$date eq ""} {
			    set date [clock format [clock seconds] -format "%Y.%-m.%-e"]
			}
		    }
		    UTF::CheckImage $Router $date unknown
		}
		UTF::Try "[$Router cget -name]: Load Image" {
		    $Router load
		}
		UTF::Try "[$Router cget -name]: Restore Defaults" {
		    $Router restore_defaults
		    set what [$Router whatami]
		    $Router dbrecord DUT
		    # Pull out chip info and replace whitespace to
		    # make it easier for external parsers.
		    regsub -all {\s+} [lreplace $what 0 0] {_} w
		    if {[catch {$UTF::Summary header_update 1 $w} ret]} {
			UTF::Message WARN $Router $ret
		    }
		    set what
		}
	    }
	    UTF::Try "[$STA cget -name]: Find STA Image" {
		set date [$STA cget -date]
		if {$date eq ""} {
		    set date [clock format [clock seconds] -format "%Y.%-m.%-e"]
		}
		UTF::CheckImage $STA $date unknown
	    }
	    UTF::Try "[$STA cget -name]: load" {
		$STA load
	    }
	    UTF::Try "[$STA cget -name]: defaults" {
		$STA services stop
		catch {$STA wl msglevel +error +assoc}
		catch {$STA wl msglevel -scan}
		if {![$STA cget -nomimo_bw_cap]} {
		    catch {$STA wl down}
		    # Enable 40 in 2.4, if available.
		    # Doesn't work for LMAC since LMAC is never "down"
		    $STA wl -u mimo_bw_cap 1
		    $STA wl up
		    UTF::Sleep 1
		}
		$STA wl ver
		set what [$STA whatami]
		$STA dbrecord DUT
		# Pull out chip info and replace whitespace to
		# make it easier for external parsers.
		regsub -all {\s+} [lreplace $what 0 0] {_} w
		if {[catch {$UTF::Summary header_update 1 $w} ret]} {
		    UTF::Message WARN $STA $ret
		}
		set what
	    }
	}
	set norcrestart 1
	set FBTXT "FB=$(frameburst)"
	set ATFTXT "ATF=$(atf)"
	if {!$(notestdefaults)} {
	    UTF::Try "CHAN=$(chanspec) security=$(security) amsdu=$(amsdu) RT=$(roamtrigger)" {
		UTF::Test::APChanspec $(ap) $(chanspec)
		UTF::Test::APConfigureSecurity $(ap) -security $(security)
		if {[llength $BRIDGES]} {
		    UTF::Test::ConfigBridge -ap $(ap) -br $BRIDGES -security $(security) -chanspec $CHAN -linkcheck
		}
		foreach STA $(sta) {
		    set curattn($STA) [lindex [[$STA cget -attngrp] attn?] 0]
		}
		foreach STA $(sta) {
		    $STA wl roam_trigger $(roamtrigger) all
		}
		foreach STA $(sta) {
		    $STA tcptune $(w)
		}
		if {$(amsdu) ne "-1"} {
		    UTF::Try "$(ap) AMSDU $(amsdu)" {
			set wlname [$(ap) wlname]
			if {$(amsdu) eq "1"} {
			    eval [concat $(ap) restart ${wlname}_amsdu=on]
			} elseif {$(amsdu) eq "0"} {
			    eval [concat $(ap) restart ${wlname}_amsdu=off]
			} else {
			    error "amsdu $(amsdu)"
			}
			UTF::Test::ConnectAPSTA $(ap) $STAS
			if {$(amsdu) ne "-1"} {
			    UTF::Try "AMSDU $(amsdu)" {
				$STA wl down
				$STA wl amsdu $(amsdu)
				$STA wl up
				$STA wl join [$(ap) wl ssid]
			    }
			}
		    }
		}
		if {$(amsdu_aggblock) ne "-1"} {
		    UTF::Try "amsdu_aggblock=$(amsdu_aggblock)" {
			$(ap) wl amsdu_aggblock $(amsdu_aggblock)
			foreach STA $STAS {
			    $STA wl amsdu_aggblock $(amsdu_aggblock)
			}
		    }
		}
		if {$(atf) ne "-1"} {
		    foreach dut [concat $(ap) $(sta)] {
			$dut wl atf $(atf)
		    }
		}
		if {$(frameburst) ne "-1"} {
		    switch -exact $(frameburst) {
			"1" -
			"11" {
			    foreach dut [concat $(ap) $(sta)] {
				$dut wl frameburst 1
			    }
			}
			"0" -
			"00" {
			    foreach dut [concat $(ap) $(sta)] {
				$dut wl frameburst 0
			    }
			}
			"10" {
			    $(ap) wl frameburst 1
			    foreach dut $(sta) {
				$dut wl frameburst 0
			    }
			}
			"01" {
			    $(ap) wl frameburst 0
			    foreach dut $(sta) {
				$dut wl frameburst 1
			    }
			}
		    }
		}
		return "AMSDU $STA/$(ap) ([$STA wl amsdu]/[$(ap) wl amsdu])"
	    }
	}
	foreach STA $(sta) {
	    set ATTNGRP $(attngrp)
	    if {$ATTNGRP eq {}} {
		set ATTNGRP [$STA cget -attngrp]
	    }
	    if {$ATTNGRP eq {}} {
		set ATTNGRP [$STA cget -attngrp]
	    }
	    if {$(steps) eq "-1"} {
		UTF::Try "Discover beacon range" {
		    set rxb [UTF::FTTR %AUTO% -ap $(ap) -sta $STA -holdtime 1 -settle 0.5 -protocol udp -tcptune 0 -attngrp $ATTNGRP -stepsize $(stepsize) -country $(country)]
		    set beaconrange [$rxb discover_norxbeacon -rssi]
		    set attnsteps [lindex  $beaconrange 0]
		    $rxb destroy
		    return "Attn/cRSSI/fRSSI [join $beaconrange /] dB"
		}
	    } else {
		set attnsteps $(steps)
	    }
	    set assocfunc [list "0 10" "50 $(dwell)"]
	    for {set ix 0} {$ix < 25} {incr ix} {
		lappend assocfunc [list -1 $(dwell)]
	    }
	    set disassocfunc [list "0 $(dwell)"]
	    # Speed up the first 15 dB
	    for {set ix 0} {$ix < 15} {incr ix} {
		if {$(dwell) > 1} {
		    lappend disassocfunc [list 1 1]
		} else {
		    lappend disassocfunc [list 1 $(dwell)]
		}
	    }
	    # overshoot by 5 dB
	    for {set jx $ix} {$jx < [expr {$attnsteps + 5}]} {incr jx} {
		lappend disassocfunc [list 1 $(dwell)]
	    }
	    for {set jx 0} {$jx < $(count)} {incr jx} {
		UTF::Try "RvR" {
		    set TITLETXT "RvR UDP AP->STA ($(ap)/$STA) (Dwell=$(dwell) s)"
		    set rvr [UTF::FTTR %AUTO% -ap $(ap) -sta $STA -holdtime $(dwell) -protocol udp -attngrp $ATTNGRP -steps $attnsteps -direction down -title "[string map {\" {}} $(title)] $TITLETXT" -stepsize $(stepsize) -reportinterval $(reportinterval) -tracelevel $(tracelevel) -udprate $(udprate) -pktqstats 0  -country $(country) -graphsize $(graphsize)]
		    set res [$rvr run]
		    set plot [$rvr plot -continuous]
		    if {$(graphtype) eq "canvas"} {
			set plot [$rvr plot -continuous -canvas]
		    }
		    $rvr destroy
		    return $plot
		}
		UTF::Try "Walk to:  Reassoc" {
		    set TITLETXT "Reassoc UDP AP->STA ($(ap)/$STA) (DWELL=$(dwell) s)"
		    catch {$STA wl msglevel +assoc}
		    if {$(scansuppress)} {
			foreach STA $(sta) {
			    $STA wl scansuppress 0
			    $STA wl_escanresults
			}
		    }
		    set test [UTF::FTTR %AUTO% -ap $(ap) -sta $STA -holdtime $(dwell) -protocol udp -tcptune 0 -direction down -attnfunc $assocfunc  -title "$(title) $TITLETXT" -tracelevel $(tracelevel)  -udprate $(udprate) -pktqstats $pktqstats -settle 0 -reportinterval $(reportinterval) -country $(country) -graphsize $(graphsize) -scansuppress $scansuppress]
		    set res [$test run]
		    set plot [$test plot -continuous]
		    if {$(graphtype) eq "canvas"} {
			set plot [$test plot -continuous -canvas]
		    }
		    $test destroy
		    return $plot
		}
		UTF::Try "Walk fro: Disassoc" {
		    set TITLETXT "Disassoc UDP AP->STA ($(ap)/$STA) (DWELL=$(dwell) s)"
		    if {$(scansuppress)} {
			foreach STA $(sta) {
			    $STA wl scansuppress 0
			    $STA wl_escanresults
			}
		    }
		    UTF::Test::ConnectAPSTA $(ap) $STA
		    catch {$STA wl msglevel +assoc}
		    set test [UTF::FTTR %AUTO% -ap $(ap) -sta $STA -holdtime $(dwell) -protocol udp -tcptune 0 -direction down -attnfunc $disassocfunc  -title "$(title) $TITLETXT" -tracelevel $(tracelevel)  -udprate $(udprate) -pktqstats $pktqstats -settle 0 -reportinterval $(reportinterval) -country $(country) -graphsize $(graphsize)]
		    set res [$test run]
		    set plot [$test plot -continuous]
		    if {$(graphtype) eq "canvas"} {
			set plot [$test plot -continuous -canvas]
		    }
		    $test destroy
		    return $plot
		}
		UTF:::Sleep 15
	    }
	}
    }
}

