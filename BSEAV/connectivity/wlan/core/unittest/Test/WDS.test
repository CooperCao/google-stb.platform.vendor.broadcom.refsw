#!/bin/env utf
# -*-tcl-*-
#
# UTF test script for Pure WDS
# $Id: 6b8368f9a599a0e1a52ad5eb5acfb623dbb3359f $
#

package require UTF
package require UTF::Test::APChanspec
package require UTF::Test::APConfigureSecurity
package require UTF::Test::Mbss::Connectivity
package require UTF::Test::controlchart

package provide UTF::Test::WDS 2.0

UTF::Test WDS {DOWN UP args} {

    UTF::Getopts {
	{chanspec.arg "3" "Chanspec"}
	{security.arg "aespsk2" "Security"}
	{lazy.arg "none" "Use lazywds (up|down|none)"}
	{recovery "Test WDS recovery"}
	{loop.arg "1" "Perf loop"}
	{history.arg "30" "History"}
	{nocache "Don't update performance cache"}
    }

    if {[set WAN [$UP wan]] eq ""} {
	set WAN [$UP lan]
    }

    if {$(nocache)} {
	set ::UTF::ControlChart::readonly 1
    }

    set uwl [$UP wlname]
    set dwl [$DOWN wlname]

    set uphwaddr [$UP nvram get ${uwl}_hwaddr]
    set dnhwaddr [$DOWN nvram get ${dwl}_hwaddr]
    set lazyap 0
    set lazyup 0
    switch $(lazy) {
	none {}
	up {
	    set lazyup 1
	    set dnhwaddr ""
	}
	down {
	    set lazyap 1
	    set uphwaddr ""
	}
	default {error "bad -lazy $(lazy), should be up or down"}
    }


    UTF::Record "Configure Upstream" {
	APChanspec $UP $(chanspec)
	APConfigureSecurity $UP -security $(security)
    }

    UTF::Record "Configure DownStream" {
	$DOWN configure -security {} \
	    -wepkey [$UP cget -wepkey] -wpakey [$UP cget -wpakey]
	APChanspec $DOWN $(chanspec)
	APConfigureSecurity $DOWN -security $(security)
    }

    try {
	UTF::Record "Configure reciprocal WDS HW addresses" {
	    # Must disable router functions, otherwise we'll have
	    # competing DHCP servers and incorrect WAN routing
	    $DOWN reboot \
		router_disable=1 \
		${dwl}_wds=$uphwaddr \
		${dwl}_lazywds=$lazyap \
		${dwl}_mode=wds \
		${dwl}_frameburst=on \
		${dwl}_ssid=[$UP cget -ssid]

	    $UP restart \
		${uwl}_wds=$dnhwaddr \
		${uwl}_lazywds=$lazyup \
		${uwl}_mode=wds \
		${uwl}_frameburst=on

	    UTF::Sleep 60 $DOWN "Allow WDS to connect Upstream"
	}


	UTF::Record "Verify Connectivity" {
	    catch {$UP wl keys}
	    catch {$DOWN wl keys}
	    catch {$DOWN wl wds}

	    # Mark DOWN as uninitialized so that if the LAN fails DHCP
	    # UTF will safely fall back to apshell to recover for the
	    # next test.
	    $DOWN configure -initialized 0
	    $DOWN lan ifconfig dhcp

	    # update LANs routing table to include both routers
	    $DOWN lan add_networks $DOWN $UP

	    $DOWN lan ping $WAN -c 70
	}

	if {$(recovery)} {
	    package require UTF::Test::WDS-Recovery
	    UTF::Try "WDS Recovery (aespsk2)" {
		WDS-Recovery $DOWN $UP
	    }
	}
	controlchart [list $DOWN $WAN] \
	    -key [list [$DOWN branchname] WDS $(security)] -i 2 \
	    -window [$DOWN tcpautowindow] -loop $(loop) \
	    -history $(history)

    } finally {
	# Put Up back into AP mode
	$UP restart \
	    ${uwl}_wds= \
	    ${uwl}_lazywds= \
	    ${uwl}_mode=ap
	# Put Down back into AP mode
	$DOWN reboot \
	    router_disable=0 \
	    ${dwl}_wds= \
	    ${dwl}_lazywds= \
	    ${dwl}_mode=ap \
	    ${dwl}_ssid=[$DOWN cget -ssid]

	$DOWN configure -initialized 0
	$DOWN lanwanreset
    }
}

