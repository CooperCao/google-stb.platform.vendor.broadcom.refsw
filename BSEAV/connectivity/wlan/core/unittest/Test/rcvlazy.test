#!/bin/env utf
# -*-tcl-*-

# Streams based rcvlazy testing
#
# Written by: Robert J. McMahon Dec 2013
#
# $Id: 84f118c02ac3432cb120bba18566784af273491e $
#

package require UTF
package require UTF::Streams
package require UTF::ControlChart
package require UTF::MemChart

package provide UTF::Test::rcvlazy 2.0

UTF::Test rcvlazy {args} {
    UTF::Getopts {
	{ap.arg "" "AP"}
        {sta.arg "" "Bridges"}
	{rcvlazy_p.arg "1 2 4 10 32 64" "rcvlazy packets"}
	{rcvlazy_u.arg "1 32 64 128 256" "rcvlazy usec"}
	{dwell.arg "2.5" "set dwell time"}
	{key.arg "" ""}
	{pktsize.arg "20" "UDP payload size"}
	{perfcache.arg "" "Performance Cache"}
	{history.arg 30 "Performance History"}
	{graphtype.arg "canvas" ""}
	{graphsize.arg "1024,768" "Graph size"}
	{pps.arg "1600" "Packets per second"}
	{loop.arg "1" "iterations"}
    }
    set t [$(sta) wl rcvlazy]
    regexp {\((0x[0-9A-F]{1,8})\)} $t - def
    set def "0x1000000"
    set gtitle "[$(sta) whatami] [$(sta) uname -r]"
    UTF::stream udp -tx $(ap) -rx $(sta) -pktsize $(pktsize) -pps $(pps) -reportinterval 0.025 -protocol udp
    set packet_watermark 0
    set rate [UTF::stream hexpand [udp cget -rate]]
    set ltitle "p=0 t=[join $(rcvlazy_u) ,]us dwell=$(dwell)s  PPS=$(pps) SZ=$(pktsize) IPG=[expr {int($(pktsize) * 8 * 1000000.0 / $rate)}]us"
    for {set ix 0} {$ix < $(loop)} {incr ix} {
	UTF::Try "TIME rcvlazy $ltitle" {
	    set events {}
	    catch {$(sta) wl ampdu_clear_dump}
	    udp start; udp linkcheck -now; UTF::Sleep 2.0; udp stats -clear;
	    set starttime [UTF::stream clock]
	    foreach time_watermark $(rcvlazy_u) {
		set rcvlazy  [format "0x%08x" [expr {$packet_watermark<<24|$time_watermark}]]
		udp user_event "RCVLAZY";
		$(sta) wl rcvlazy $rcvlazy
		set t1($rcvlazy) [UTF::stream clock]
		lappend events [list "r" [expr {$t1($rcvlazy) - $starttime}]]
		udp user_event "RCVLAZY"
		UTF::Sleep $(dwell)
		set t2($rcvlazy) [UTF::stream clock]
	    }
	    udp samplers -disable
	    catch {$(sta) wl dump ampdu}
	    foreach segment $(rcvlazy_u) {
		set rcvlazy  [format "0x%08x" [expr {$packet_watermark<<24|$segment}]]
		set mmm [udp stats -pktlatency -include $t1($rcvlazy) $t2($rcvlazy) -meanminmax]
		UTF::Message INFO "" "$segment = $mmm"
	    }
	    UTF::streamgraph latency -stat pktlatency -title "$gtitle\\n$ltitle" -streams udp -graphsize $(graphsize) -outputtype $(graphtype) -cutoff 1 -xtics $events
	    set g "[latency plot] [string range [latency plot -smoothing] 5 end]"
	    latency destroy
	    return "$g"
	}
	udp stop
	$(sta) wl rcvlazy $def
	UTF::Sleep 2
    }
    set time_watermark 0
    catch {udp destroy}
    UTF::stream udp -tx $(ap) -rx $(sta) -pktsize $(pktsize) -pps 5000 -reportinterval 0.025 -protocol udp
    set rate [UTF::stream hexpand [udp cget -rate]]
    set ltitle "p=[join $(rcvlazy_p) ,] t=0 dwell=$(dwell)s PPS=5000 SZ=$(pktsize) IPG=[expr {int($(pktsize) * 8 * 1000000.0 / $rate)}]us"
    for {set ix 0} {$ix < $(loop)} {incr ix} {
	UTF::Try "PKT  rcvlazy $ltitle" {
	    set events {}
	    catch {$(sta) wl ampdu_clear_dump}
	    udp start; udp linkcheck -now; UTF::Sleep 2.0; udp stats -clear;
	    set starttime [UTF::stream clock]
	    foreach packet_watermark $(rcvlazy_p) {
		set rcvlazy  [format "0x%08x" [expr {$packet_watermark<<24|$time_watermark}]]
		udp user_event "RCVLAZY";
		$(sta) wl rcvlazy $rcvlazy
		set t1($rcvlazy) [UTF::stream clock]
		lappend events [list "r" [expr {$t1($rcvlazy) - $starttime}]]
		udp user_event "RCVLAZY"
		UTF::Sleep $(dwell)
		set t2($rcvlazy) [UTF::stream clock]
	    }
	    udp samplers -disable
	    catch {$(sta) wl dump ampdu}
	    foreach segment $(rcvlazy_p) {
		set rcvlazy  [format "0x%08x" [expr {$segment<<24|$time_watermark}]]
		set mmm [udp stats -pktlatency -include $t1($rcvlazy) $t2($rcvlazy) -meanminmax]
		UTF::Message INFO "" "$segment = $mmm"
	    }
	    UTF::streamgraph latency -stat pktlatency -title "$gtitle\\n$ltitle" -streams udp -graphsize $(graphsize) -outputtype $(graphtype) -cutoff 1 -xtics $events
	    set g "[latency plot] [string range [latency plot -smoothing] 5 end]"
	    latency destroy
	    return "$g"
	}
	if {$ix < $(loop)} {
	    udp stop
	    $(sta) wl rcvlazy $def
	    UTF::Sleep 2
	}
    }
    catch {udp destroy}
    $(sta) wl rcvlazy $def
}
