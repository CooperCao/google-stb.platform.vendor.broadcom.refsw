#!/bin/env utf
# -*-tcl-*-

#
# UTF test script for APSTA in both SCC and RSDB modes.
# $Id: f5a69f5a67793f95203171a33a38e422672642a8 $
# $Copyright Broadcom Corporation$
#

package require UTF
package require UTF::Test::ConnectAPSTA
package require UTF::Test::APChanspec
package require UTF::Test::APConfigureSecurity
package require UTF::Test::controlchart

package provide UTF::Test::APSTA 2.0

UTF::Test APSTA {REF1 REF2 DUT args} {
    UTF::Getopts {
	{chan1.arg "" "Primary chanspec <auto>"}
	{chan2.arg "161 11" "Secondary chanspecs"}
	{sec1.arg "open" "Primary Security"}
	{core2.arg "" "Core to attach secondary interface"}
	{i.arg 1 "Interval"}
	{s.arg 5 "Samples"}
	{sec2.arg "open" "Secondary Security"}
	{nosta "Skip STA mode tests"}
	{noap "Skip AP mode tests"}
	{nocache "Don't update performance cache"}
	{reassocwar "Reassoc STA interface after creating AP interface"}
	{loop.arg "" "Deprecated"}
	{perfcache.parg "" "Performance Cache"}
	{perfloop.parg 1 "Perf loops"}
	{history.parg 30 "History"}
	{key.arg "" "Key"}
    }

    if {$(loop) ne  ""} {
	set (perfloop) $(loop)
    }
    if {$(nocache)} {
	set ::UTF::ControlChart::readonly 1
    }

    set branch [$DUT branchname]
    set key [concat $branch APSTA $(key)]
    set skey [concat $branch STASTA $(key)]

    set icargs ""
    if {$(core2) ne ""} {
	lappend icargs -c $(core2)
    }

    UTF::Try "$DUT Primary STA" {
	set rsdbmode [$DUT wl -u rsdb_mode]
	$DUT wl msglevel +apsta +assoc
	$REF1 wl msglevel +assoc
	$REF2 wl msglevel +assoc
	$DUT wl down
	$DUT wl apsta 1
	if {[set c $(chan1)] eq ""} {
	    set c [lindex [UTF::PerfChans $REF1 $REF2 $DUT] 0]
	}
	APConfigureSecurity $REF1 -security $(sec1)
	APConfigureSecurity $REF2 -security $(sec2)
	ConnectAPSTA $REF1 $DUT -chanspec $c
	# make sure FB is consistent
	foreach s [list $REF1 $DUT] {
	    if {[info exists UTF::FBDefault] && ![$s cget -noframeburst]} {
		$s wl frameburst 1
	    } else {
		$s wl -u frameburst 0
	    }
	}

	set csta [lindex [$DUT wl chanspec] 0]
    } finally {
	catch {$DUT wl dump rsdb}
    }

    if {[info exists csta]} {
	foreach c $(chan2) {
	    if {[regexp {rsdb} $rsdbmode] &&
		(![regexp {auto} $rsdbmode] ||
		 [$DUT band $c] ne [$DUT band $csta])} {
		set target $c
		set msg "$target"
	    } else {
		set target $csta
		set msg "$c->$target"
	    }
	    if {!$(nosta)} {
		UTF::Try "$DUT Secondary STA $target" {
		    set STA2 [$DUT wl_interface_create sta #2 {*}$icargs]
		    if {[$REF2 cget -ipaddr] eq "local"} {
			$STA2 configure -ipaddr "local"
		    }
		    if {$(reassocwar)} {
			$DUT wl reassoc [$DUT wl bssid]
			UTF::Sleep 3
		    }
		    ConnectAPSTA $REF2 $STA2 -chanspec $target
		    # make sure FB is consistent
		    foreach s [list $REF2 $STA2] {
			if {[info exists UTF::FBDefault] &&
			    ![$s cget -noframeburst]} {
			    $s wl frameburst 1
			} else {
			    $s wl -u frameburst 0
			}
		    }

		    # Auto TCP window size setting based on phy rate
		    set w [$DUT tcpautowindow]

		    set oldk [concat $skey $c]
		    set k [concat $skey $target]
		    controlchart \
			[list $DUT $REF1 $STA2 $REF2] \
			-key $k -oldkey $oldk -i $(i) -s $(s) -window $w \
			-loop $(perfloop) -history $(history) -perfcache $(perfcache)
		} finally {
		    catch {$DUT wl dump rsdb}
		    catch {
			$STA2 wl disassoc
			# Must give disassoc time to work before removing the
			# interface.
			UTF::Sleep 2
		    }
		    catch {$STA2 wl_interface_remove}
		    UTF::Sleep 1
		}
	    }
	    if {!$(noap)} {
		UTF::Try "$DUT Secondary AP $msg" {
		    if {[$DUT hostis Android]} {
			set ssid [UTF::NewSSID]
			$DUT rexec [subst {{ echo 'ctrl_interface=/data/misc/wifi/sockets' ; echo 'update_config=1' ; echo 'p2p_disabled=1'\
						 ; echo 'network={' ;  echo 'ssid=\"$ssid\"'; echo 'mode=2'; echo 'key_mgmt=NONE'; echo '}' ; } \
					       >  /data/misc/wifi/wpa_supplicant_ap.conf}]
		    }
		    set STA2 [$DUT wl_interface_create ap #2 {*}$icargs]
		    if {$(reassocwar)} {
			$DUT wl reassoc [$DUT wl bssid]
			UTF::Sleep 3
		    }
		    if {[$DUT hostis Android]} {
			$STA2 wl down
			$STA2 wl chanspec $c
			$STA2 wl up 
			UTF::Sleep 1
		    } else {
		    $STA2 wl chanspec $c
		    }
		    if {![$STA2 hostis Android]} {
			$STA2 wl ssid [UTF::NewSSID]
		    }
		    UTF::Sleep 1
		    $DUT wl status
		    $STA2 wl status
		    set c [lindex [$STA2 wl chanspec] 0]
		    if {$c ne $target} {
			$STA2 worry "Chanspec mismatch: $c should be $target"
		    }
		    if {[$REF2 cget -ipaddr] eq "local"} {
			$STA2 configure -ipaddr "local"
		    }
		    ConnectAPSTA $STA2 $REF2
		    # make sure FB is consistent
		    foreach s [list $REF2 $STA2] {
			if {[info exists UTF::FBDefault] &&
			    ![$s cget -noframeburst]} {
			    $s wl frameburst 1
			} else {
			    $s wl -u frameburst 0
			}
		    }

		    # Auto TCP window size setting based on phy rate
		    set w [$DUT tcpautowindow]

		    set oldk [concat $key $c]
		    set k [concat $key $target]
		    controlchart \
			[list $DUT $REF1 $STA2 $REF2] \
			-key $k -i $(i) -s $(s) -window $w \
			-loop $(perfloop) -history $(history) -perfcache $(perfcache)
		} finally {
		    catch {$DUT wl dump rsdb}
		    catch {
			$REF2 wl disassoc
			# Must give disassoc time to work before removing the
			# interface.
			UTF::Sleep 2
		    }
		    catch {$STA2 wl_interface_remove}
		    UTF::Sleep 1
		}
	    }
	}
	catch {$DUT wl msglevel -apsta}
    }
}
