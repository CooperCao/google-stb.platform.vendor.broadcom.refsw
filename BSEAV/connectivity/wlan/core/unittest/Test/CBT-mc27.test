#!/bin/env utf
# -*-tcl-*-

# UTF CBT emulation
#
# Usage: CBT <args>
#
# $Id: eb9a7e022013efd03b178d6b715b72028d307295 $
#

package require UTF
package require UTF::Test::ConnectAPSTA
package require UTF::Test::controlchart


UTF::Test CBT {args} {

    UTF::Getopts {
	{email.arg "" "Email Address"}
	{aptag.arg "NIGHTLY" "Tag for AP builds"}
	{statag.arg "NIGHTLY" "Tag for STA builds"}
	{date.arg "" "Date for builds"}
	{noapload "Don't load APs"}
	{norestore "Don't restore to defaults"}
	{nostaload "Don't load STAs"}
	{noassoc "Don't perform association test"}
	{noperf "Don't perform throughput test"}
	{stas.arg "" "Include STA list"}
	{xstas.arg "" "Exclude STA list"}
	{aps.arg "" "Include AP list"}
	{xaps.arg "" "Exclude AP list"}
	{nointernal "No internal STA testing"}
	{doexternal "Do external STA testing"}
	{noreload "Don't reload driver at end"}
	{nocrashcheck "Don't check for crash reports at end"}
        {InstallShield "Run InstallShield Test"}
	{n "Don't do anything"}
	{title.arg "" "Title"}
    }

    if {$(n)} {
	set (email) "none"
	set (noapload) 1
	set (nostaload) 1
	set (norestore) 1
	set (noassoc) 1
	set (noperf) 1
	set (noreload) 1
	set (nocrashcheck) 1
    }

    set TITLE $(aptag)
    if {$(aptag) ne $(statag)} {
	append TITLE "/$(statag)"
    }

    regsub "NIGHTLY" $TITLE "TOT" TITLE

    if {$(title) ne ""} {
	set TITLE "UTF CBT $(title) ($TITLE)"
    } else {
	set TITLE "UTF CBT ($TITLE)"
    }

    if {$(InstallShield)} {
        set (noapload) 1
        set (norestore) 1
        set (noassoc) 1
        set (noperf) 1
        set (noreload) 1
        regsub "UTF CBT" $TITLE "UTF CBT InstallShield" TITLE
    }

    set cases {}
    array set loadaps {}
    array set loadstas {}

    proc cbttest {AP STA args} {

	# Access test options
	upvar {} {}
	upvar cases cases
	upvar loadaps loadaps
	upvar loadstas loadstas

	# Filter tests
	if {($(aps) ne "" && [lsearch $(aps) $AP] < 0) ||
	    [lsearch $(xaps) $AP] >= 0 ||
	    ($(stas) ne "" && [lsearch $(stas) $STA] < 0) ||
	    [lsearch $(xstas) $STA] >= 0} {
	    return
	}

	regsub {^::} [$AP cget -host] {} host
	if {![info exists loadaps($host)]} {
	    set loadaps($host) 1
	}
	if {!$(InstallShield) || [$STA hostis Cygwin]} {
	    # For InstallShield tests, ignore anything that isn't Windows.
	    set loadstas($STA) 1
	}
	lappend cases $AP $STA $args
    }

    proc cbtdotests {} {
	upvar {} {}
	upvar cases cases
	upvar loadaps loadaps
	upvar loadstas loadstas

	UTF::Message INFO "APS" [lsort [array names loadaps]]
	UTF::Message INFO "STAS" [lsort [array names loadstas]]

	set date [clock format [clock seconds] -format "%Y.%-m.%-e"]

        ## Do not show the skipped AP tests on InstallShield report. OK to remove.
        if {!$(InstallShield)} {
	    # loadaps array: 1 means load needed, 0 means load done.
	    # This allows for APs that are only needed during second
	    # phase.
	    foreach AP [lsort [array names loadaps]] {
		if {$loadaps($AP)} {
		    if {[$AP cget -tag] eq "NIGHTLY"} {
			if {$(date) ne ""} {
			    $AP configure -date $(date)
			} else {
			    $AP configure -tag $(aptag)
			}
		    }
		    UTF::Try "$AP find image" {
			UTF::CheckImage $AP
		    }
		}
	    }
	    foreach AP [lsort [array names loadaps]] {
		if {$loadaps($AP)} {
		    if {[catch {
			UTF::Record "$AP web load" {
			    if {$(noapload)} {
				return "skipped"
			    }
			    $AP load -web 1
			}
		    }]} {
			if {[$AP info type] ne "::UTF::DSL"} {
			    UTF::Try "$AP CFE load" {
				$AP load
			    }
			}
		    }
		    set loadaps($AP) 0
		    $AP deinit
		}
	    }
	    foreach AP [lsort [array names loadaps]] {
		UTF::Try "$AP restore" {
		    if {$(norestore)} {
			return "skipped"
		    }
		    try {
			$AP restore_defaults
		    } finally {
			$AP deinit
		    }
		}
	    }
        }

	foreach STA [lsort [array names loadstas]] {
	    if {[$STA cget -tag] eq "NIGHTLY"} {
		if {$(date) ne ""} {
		    $STA configure -date $(date)
		} else {
		    $STA configure -tag $(statag)
		}
	    }

	    ## Do not show the skipped AP tests on InstallShield
	    ## report. OK to remove.
	    if {!$(InstallShield)} {
		$AP configure -date $(date)
	    }
	    UTF::Try "$STA find image" {
		UTF::CheckImage $STA
	    }
	    if {$(InstallShield)} {
		UTF::Try "$STA load InstallShield" {
		    if {$(nostaload) || ![$STA hostis Cygwin]} {
			return "skipped"
		    } else {
			UTF::Message INFO "" "$STA load InstallShield"
			$STA load InstallShield
		    }
		}
	    } else {
		UTF::Try "$STA load" {
		    if {$(nostaload)} {
			return "skipped"
		    } else {
			$STA load
                    }
		}
	    }
	}

        ## Do not show the skipped AP tests on InstallShield
        ## report. OK to remove.
        if {!$(InstallShield)} {
	    foreach {AP STA args} $cases {
		if {$(noassoc)} {
		    UTF::Message INFO "" "$AP $STA $args"
		} else {
		    eval [list cbtdotest $AP $STA] $args
		}
	    }
        }

	if {!$(noreload)} {
	    UTF::Message INFO "" "reload to check for memory leaks"
	    foreach STA [lsort [array names loadstas]] {
		UTF::Try "$STA reload" {
		    try {
			$STA reload
		    } finally {
			#$STA deinit
		    }
		    array unset loadstas $STA
		}
	    }
	}
	if {!$(nocrashcheck)} {
	    # If there are any Windows STAs left, try to mop up any
	    # crash reports
	    foreach STA [lsort [array names loadstas]] {
		if {[$STA hostis Cygwin WinDHD MacOS]} {
		    UTF::Try "$STA crashcheck" {
			try {
			    $STA crashcheck
			    $STA :
			} finally {
			    #$STA deinit
			}
		    }
		}
	    }
	}

	# Clear case list
	set cases {}
	# Clear STA list
	array unset loadstas
	# Don't clear AP list since they don't need to be reinstalled
    }

    proc cbtdotest {AP STA args} {
	UTF::Getopts {
	    {security.arg "open" "Security"}
	    {piomode "Use PIO mode"}
	}

	catch {$AP whatami} ret
	set APis "$ret ($AP)"
	catch {$STA whatami} ret
	set STAis "($STA) $ret"
	if {$(piomode)} {
	    append STAis "(pio)"
	}
	set key [list $AP $(security)]
	if {$(piomode)} {
	    lappend key "pio"
	    UTF::Try "$STA enable PIOMODE" {
		$STA wl down
		$STA wl piomode 1
		$STA wl up
	    }
	}
	
	# Rodney Added this to get window size to TP test from UTFCONFIG file
    # temporarily fixed this to auto due to lack of tcpwindow setting in cbt utfconfig file
	#set w [$STA cget -tcpwindow]
	set w 16384
		
	
	UTF::Try "$APis -> $STAis $(security)" {
	    catch {$STA wl msglevel 0x101}

            ConnectAPSTA $AP $STA -security $(security)
	    UTF::Message INFO $STA "$AP -> $STA RSSI: [$STA wl rssi]"
	    controlchart [list [$AP lan] $STA] -key $key -i 1 -window $w
	    
	}
	UTF::Try "$APis <- $STAis $(security)" {
	    if {[catch {$AP wl bssid} apbssid] ||
		[catch {$STA wl bssid} stabssid] ||
		$apbssid ne $stabssid} {
		ConnectAPSTA $AP $STA
	    }
	    UTF::Message INFO $STA "$AP <- $STA RSSI: [$STA wl rssi]"
	    controlchart [list $STA [$AP lan]] -key $key -i 1 -window $w
	}
	if {$(piomode)} {
	    UTF::Try "$STA disable piomode" {
		$STA reload
	    }
	}
	catch {$STA wl disassoc}
	#$STA deinit
	$AP deinit
    }

    # Declare WEB page summary block.  Everything inside this block
    # will be recorded as a web page and an email will be sent out at
    # the end.  If the test fails unexpectedly within this block, the
    # failure will be recorded and the email will still be sent out.
    UTF::WrapSummary $UTF::SummaryDir $TITLE "" $(email) {

	# Set up cache for performance resaults
	set ::UTF::Perfcache [file join $UTF::SummaryDir perfcache]

	if {!$(nointernal)} {
	    UTF::Message INFO "CBT" "Internal"

            cbttest 47171      4312Vista-Int
            cbttest 47171      4322Vista-Int
            cbttest 47171      4312XP-Int
            cbttest 47171      4313WIN7-Int
            cbttest 47171      4313XP-Int

	    if {[llength $cases]} {
		# Execute tests
		cbtdotests
	    } else {
		UTF::Message WARN "CBT" "No Internal test cases selected"
	    }
	}

	if {$(doexternal)} {
	    UTF::Message INFO "CBT" "External"

            cbttest 47171      4312Vista-Ext
            cbttest 47171      4322Vista-Ext
            cbttest 47171      4312XP-Ext
            cbttest 47171      4313WIN7-Ext
            cbttest 47171      4313XP-Ext
            
	    
	    if {[llength $cases]} {
		# Execute tests
		cbtdotests
	    } else {
		UTF::Message WARN "CBT" "No test External cases selected"
	    }
	}
    }
}
