#!/bin/env utf
#-*-tcl-*-

package require UTF

proc find_uptime {AP} {
	set time [regexp -inline {^[0-9]+.[0-9][0-9]} [$AP cat /proc/uptime]]
	return $time
}

proc find_macs {AP INTERFACE} {
	set STAS [regexp -inline -all {[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]} [$AP wl -i $INTERFACE assoclist]]
	return $STAS
}

proc convert_uptime {seconds} {
	set time [expr int($seconds)]
	set hr [expr int($time/3600)]
	set min [expr int($time/60-$hr*60)]
	set sec [expr $time-$hr*3600-$min*60]
	set hr [format "%02u" $hr]
	set min [format "%02u" $min]
	set sec [format "%02u" $sec]
	UTF::Message INFO "" "Uptime is $hr:$min:$sec"
}

UTF::Test DFMonitor {interval length args} {
	UTF::WrapSummary $UTF::SummaryDir "DogFood" "" "hnd-dogfood-list@broadcom.com" {
	if {$UTF::Logfile eq ""} {
        UTF::Logfile "test.log"
    }
	
	set WL_INTS {eth1 wl0.1 eth2 wl1.1 wl1.2}	
	set directory $::UTF::Logdir
	file mkdir $directory/uploaded
	foreach AP $args {
		catch {eval "set OLD_UPTIME_$AP [find_uptime $AP]"}
	}
	
	for {set i 0} {$length > [expr $i*$interval/60]} {incr i} {
		UTF::Try "Run \#$i" {	
			if {$i != 0} {
				UTF::Sleep [expr $interval*60]
			}
			UTF::Try "catch wait time errors" {
        			set j [expr $i+1]

	        		UTF::Message NOTE "" "Will FAIL if an error occured over the wait period."
        			UTF::Message INFO "" "Date: [clock format [clock seconds] -format %D]"
      			}	

        	set full_path [glob -directory $directory -- $j.1.log]
	     	puts $full_path
			exec python /projects/DogFood/scripts/postdf.py "$full_path"

			foreach AP $args {
				UTF::Try "Room $AP AP Information" {
			  		foreach WL_INT $WL_INTS {
						UTF::Try "Wireless Interface $WL_INT" {
							UTF::Message INFO "" "Room $AP"
							UTF::Message INFO "" "Date: [clock format [clock seconds] -format %D]"
							$AP init
							$AP nvram get os_version
							$AP wl -i $WL_INT ver
							$AP wl -i $WL_INT status
				  			set STAS [find_macs $AP $WL_INT]
				  			foreach STA $STAS {
								$AP wl -i $WL_INT sta_info $STA
								set rssi_val [$AP wl -i $WL_INT rssi $STA]
								UTF::Message NOTE "" "RSSI is $rssi_val"
							}	
							$AP wl -i $WL_INT dump ampdu
					  	$AP wl -i $WL_INT pktcnt
							set uptime [find_uptime $AP]
							convert_uptime $uptime
							eval "set old \$OLD_UPTIME_$AP"
							if {$old  > $uptime} {
								UTF::Message INFO "" "Room $AP AP reset $uptime seconds ago"
							}
			  		}
						set file_name [glob -tails -directory $directory -- $j.*.*.log]
						set full_path [glob -directory $directory -- $j.*.*.log]
						exec python /projects/DogFood/scripts/postdf.py "$full_path" 
						file rename $full_path $directory/uploaded/$file_name
					}
				eval "set OLD_UPTIME_$AP $uptime"
				}
			}
		}
		catch {
			set file_names [glob -tails -directory $directory/uploaded/ -- {*.*.*.log}]
			foreach log $file_names {
				file rename $directory/uploaded/$log $directory/$log
			}
		}
	}
	catch {exec rmdir $directory/uploaded}
	}
}


