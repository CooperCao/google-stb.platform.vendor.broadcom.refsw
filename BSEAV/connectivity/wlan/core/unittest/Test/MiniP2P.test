#!/bin/env utf
# -*-tcl-*-

#
# P2P Smoke test GO Setup script
#

# $Id$
# $Copyright Broadcom Corporation$
#

# Test description:
#	Create a Direct P2P connection between GO & GC and ping the P2P IP addresses
#

package require UTF
package require UTF::Test::P2PGOConfigure
package require UTF::Test::ConnectP2P
package require UTF::Test::ConnectAPSTA
package require UTF::Test::controlchart

package provide UTF::Test::MiniP2P 2.0

#################################################################################
#################################################################################

namespace eval UTF::Test::MiniP2P {

    proc cleanup {} {
	UTF::Message INFO "MiniP2P" "Cleanup"
	uplevel {
	    catch {$GC wl disassoc}
	    catch {$GCI wl disassoc}
	    catch {$GC wl p2p_ifdel [$GCI macaddr]}
	    catch {$GO wl p2p_ifdel [$GOI macaddr]}
	    catch {$GO wl down}
	    catch {$GC wl apsta $gcapsta}
	    catch {$GO wl apsta $goapsta}
	}
    }
}

UTF::Test MiniP2P {GO GC args} {
    # If FBDefault is set, and devices support it, enable fb
    if {[info exists ::UTF::FBDefault] &&
	![$GO cget -noframeburst] && ![$GC cget -noframeburst]} {
	set fbdefault 1
    } else {
	set fbdefault 0
    }

    UTF::Getopts [subst {
	{chanspec.arg "36/80" "P2P Chanspec"}
	{security.arg "aespsk2" "P2P security"}
	{perfcache.parg "" "Performance Cache"}
	{perfloop.parg 1 "Perf loops"}
	{history.parg 30 "History"}
	{nocache "Don't update performance cache"}
	{frameburst.arg "$fbdefault" "Use frameburst"}
 	{b.arg "[$GC cget -udp]"
	    "UDP data rate (0 for TCP) defaults to -udp option of GC"}
	{ap.arg "" "AP for AP STA association"}
	{apchanspec.arg "" "AP Chanspec"}
	{apsecurity.arg "" "security"}
    }]

    if {$(nocache)} {
	set ::UTF::ControlChart::readonly 1
    }

    if {$(apchanspec) eq ""} {
	set (apchanspec) $(chanspec)
    }
    if {$(apsecurity) eq ""} {
	set (apsecurity) $(security)
    }
    set setup 0
    UTF::Try "$GC: GO->GC($(chanspec))" {
	if {$(ap) ne ""} {
	    ConnectAPSTA $(ap) $GC -security $(apsecurity) -chanspec $(apchanspec)
	}
	set goapsta [$GO wl apsta]
	set gcapsta [$GC wl apsta]
	set GOI [P2PGOConfigure $GO -security $(security) -chanspec $(chanspec)]
	set GCI [ConnectP2P $GOI $GC]

	catch {$GC wl dump rsdb}

	if {$(frameburst)} {
	    $GOI wl frameburst 1
	    $GCI wl frameburst 1
	    $(ap) wl frameburst 1
	    $GC wl frameburst 1
	} else {
	    $GOI wl -u frameburst 0
	    $GCI wl -u frameburst 0
	    $(ap) wl -u frameburst 0
	    $GC wl -u frameburst 0
	}

	set key [list p2p $(chanspec) $(security) $(apchanspec) $(apsecurity)]
	set ccopts [list -key $key -i 1 -b $(b) -window [$GCI tcpautowindow] \
			-loop $(perfloop) -perfcache $(perfcache) \
			-history $(history)]
	set setup 1

	controlchart [list $GOI $GCI] {*}$ccopts
    } finally {
	if {!$setup} {
	    cleanup
	}
    }
    if {$setup} {
	UTF::Try "$GC: GO<-GC($(chanspec))" {
	    controlchart [list $GCI $GOI] {*}$ccopts
	} finally {
	    if {$(ap) eq ""} {
		cleanup
	    }
	}
	if {$(ap) ne ""} {
	    UTF::Try "$GC: GO->GC($(chanspec))+AP->STA($(apchanspec))" {
		controlchart [list $GOI $GCI $(ap) $GC] {*}$ccopts
	    }
	    UTF::Try "$GC: GO<-GC($(chanspec))+AP<-STA($(apchanspec))" {
		controlchart [list $GCI $GOI $GC $(ap) ] {*}$ccopts
	    } finally {
		cleanup
	    }
	}
    }
}

