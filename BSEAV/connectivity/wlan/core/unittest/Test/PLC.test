#!/bin/env utf
# -*-tcl-*-

#
# UTF test script for nightly run
# $Id$
# $Copyright Broadcom Corporation$
#

#
#  Test topology for 5358 URE mode:
# 
#  [AP]-Ether----[PLC Adapter]----PLC network----[5358]--Ether---[Endpoint]
#   |                                              .
#  Ether                                          WiFi
#   |                                              .
# [IperfHost]                                      .
#                                                [STA]
#
# URE sample test string:
# Test/PLC.test -utfconf utfconf/mc66.tcl -ap "5358 AP" -sta "STA IperfHost"
#

package require UTF
package require UTF::Test::ConnectAPSTA
package require UTF::Test::APChanspec
package require UTF::Test::APConfigureSecurity
package require UTF::Test::PingTimes
package require UTF::Test::DataRate
package require UTF::Test::Fragmentation
package require UTF::Test::RTS
package require UTF::Test::Scan
package require UTF::Test::controlchart
package require UTF::Test::memchart
package require UTF::Test::ChannelSweep
package require UTF::Test::BigHammer
package require UTF::Test::IBSS
package require UTF::Test::DPT
package require UTF::Test::CalStability
package require UTF::Test::rssinoise
package require UTF::Test::BeaconRatio

package provide UTF::Test::PLC 2.0

UTF::Test PLC {args} {
    UTF::Getopts {
	{sta.arg "43228FC11A" "sta name"}
	{ap.arg "53581 4717A" "AP name"}
	{trx.arg "" "Router trx"}
	{tag.arg "" "Router release tag"}
	{statag.arg "" "STA release tag"}
	{bin.arg "" "STA dongle image"}
	{email.arg "" "Email Address"}
	{noapload "Don't load images"}
	{nostaload "Don't reload STA drivers"}
	{nostareload "Don't even reload STA drivers"}
	{norestore "Don't reset to defaults"}
	{noscan "No scan tests"}
	{nojoin "No join security tests"}
	{nopm "No Power Management tests"}
	{nopm1 "No Slow Power Management tests"}
	{nopm2 "No Fast Power Management"}
	{noframeburst "No Framebursting"}
        {nofb0 "No non-frameburst open tests"}
	{noperf "No Performance tests"}
	{noperf20 "Don't do 20MHz performance tests"}
	{noperf40 "Don't do 40MHz performance tests"}
	{nochannels "Don't scan channels"}
	{nosetup "No Setup"}
	{nobtests "Disable Bangalore tests"}
	{nopingtimes "Disable PingTimes test"}
	{norate "Disable Fixed Rate tests"}
	{norts "Disable RTS tests"}
	{nofrag "Disable Fragmentation test"}
	{nobeaconratio "Disable BeaconRatio test"}
	{date.arg "" "Image date"}
	{apdate.arg "" "AP Image date"}
        {history.arg 30 "History size for control charts"}
	{perfloop.arg 1 "Performance test loops"}
	{loop.arg 1 "Main test loops"}
	{nounload "Don't unload driver after test"}
	{nocache "Don't update performance cache"}
	{nowep "No WEP security"}
	{noshared "No shared security"}
	{notkip "No TKIP security"}
	{noaes "No AES security"}
	{nocal "No Calibration tests"}
	{nobighammer "No BigHammer tests"}
	{nobx "No Bidirectional Performance tests"}
	{noibss "No IBSS tests"}
	{nodpt "No DPT tests"}
	{title.arg "" "Title"}
	{branch.arg "auto" "Branch override"}
        {logdir.arg "" "Log directory override"}
	{chanspec.arg "" "Chanspec to use for all fixed-channel tests"}
	{nosetuptestbed "Don't run Setup Testbed hooks"}
	{noposttesthook "Don't run Post Test hooks"}
	{perfonly "Only run subset of performance tests"}
    }

    # If necessary, override the config file log directory setting.
    if {$(logdir) != ""} {
        set UTF::SummaryDir $(logdir)
        UTF::Message INFO "" "Using logdir: $UTF::SummaryDir"
    }

    if {$(nocache)} {
	set ::UTF::ControlChart::readonly 1
	set ::UTF::MemChart::readonly 1
    }

    if {$(nobtests)} {
	# Common disable for historical "Bangalore" tests, and others
	set (nopingtimes) 1
	set (nobeaconratio) 1
	set (norate) 1
	set (norts) 1
	set (nofrag) 1
    }

    set Router [lindex $(ap) 0]
    set AP2 [lindex $(ap) 1]
    set STA [lindex $(sta) 0]
    set IperfHost [lindex $(sta) 1]

    # Override default tags
    if {$(trx) ne ""} {
	$Router configure -image $(trx) -date {}
    } elseif {$(tag) ne ""} {
	$Router configure -tag $(tag) -date {}
    }
    if {$(apdate) ne ""} {
	$Router configure -date $(apdate)
    }

    if {$(bin) ne ""} {
	foreach STA $(sta) {
	    $STA configure -image $(bin) -date {}
	}
    }
    if {$(statag) ne ""} {
	foreach STA $(sta) {
	    $STA configure -tag $(statag) -date {}
	}
    }
    if {$(date) ne ""} {
	set date $(date)
	foreach S $(sta) {
	    $S configure -date $(date)
	}
	unset S
    } else {
	set date [clock format [clock seconds] -format "%Y.%-m.%-e"]
	# Clean up whitespace (RH9 compat)
	regsub -all {\s+} $date {} date
    }

    if {$(perfonly)} {
	# Enable perfonly on all STAs
	foreach S $(sta) {
	    $S configure -perfonly 1
	}
    }

    # Compact build list for title
    set build [UTF::BuildTitle $(sta)]

    if {$(title) eq ""} {
	if {[$STA hostis WinDHD Cygwin]} {
	    set (title) [$STA host whatami]
	} elseif {[$STA hostis LMAC DHD]} {
	    set (title) "Linux Dongle"
	} else {
	    set (title) [$STA hostis]
	}

	if {[regexp {(\d+sd)} $Router - c]} {
	    append (title) " with $c AP"
	}
    }
    set TITLE "UTF $(title) ($build)"
    UTF::Message INFO "" $TITLE

    # $build is used in the title.  For private builds this will
    # indicate special images.

    # (branch) is used for comparison over time.  For private builds
    # this should be specified explicitly so the tests know which
    # branch to test.

    if {$(branch) eq ""} {
	if {[regexp {/} $build]} {
	    error "Unable to determine branch name from build.  Please specify -branch"
	}
	set (branch) $build
    }
    unset build

    # Truncate build name for performance keys
    regsub {_.*} $(branch) {} (branch)

    proc systime {STA} {
	catch {
	    $STA rexec {vmstat 1 6 | awk 'FNR>3{print $14}'}

	}
    }

    proc pmperf {BUILD AP STA IperfHost MSG args} {
	upvar {} testopts
	UTF::Getopts {
	    {PM.arg "0" "Power Management"}
	    {fb.arg "" "Frameburst"}
	    {ch.arg "" "Chanspec"}
	    {security.arg "open" "security"}
	}

	if {$(fb) eq ""} {
	    # Frameburst default depends on OS
	    if {![$STA cget -noframeburst] && [$STA hostis MacOS]} {
		set (fb) 1
	    } else {
		set (fb) 0
	    }
	} else {
	    # canonicalize
	    set (fb) [string is true $(fb)]
	}

	if {$(PM) == 1} {
	    # Low performance tests may need longer to reduce
	    # quantization errors
	    set i 5
	} else {
	    set i 2
	}

	if {$(ch) ne ""} {
	    append MSG ": CH=$(ch)"
	}
	if {$(fb)} {
	    append MSG ": FB=$(fb)"
	}
	if {$(PM)} {
	    append MSG ": PM=$(PM)"
	}
	if {$(security) ne "open"} {
	    append MSG ": $(security)"
	}
	set setup 0
	UTF::Try "$MSG: WLAN<-LAN" {
	    # Put STAs into PM mode before association, to make sure
	    # we can associate in PM mode.
	    if {![$STA cget -apmode]} {
		if {[catch {$STA wl PM $(PM)} ret] &&
		    ([regexp {killed} $ret] ||
		     ($(PM) && ![regexp {Not STA} $ret]))} {
		    error $ret
		}
	    }
	    if {[$STA wl frameburst] ne $(fb)} {
		$STA wl frameburst $(fb)
		if {[$STA wl frameburst] ne $(fb)} {
		    if {$(fb)} {
			error "failed to enable frameburst"
		    } else {
			error "failed to disable frameburst"
		    }
		}
	    }
	    if {$(ch) ne ""} {
		if {[$STA cget -apmode]} {
		    APChanspec $STA $(ch)
		} else {
		    APChanspec $AP $(ch)
		}
	    }
	    if {$(security) ne [$AP cget -security]} {
		ConnectAPSTA $AP $STA -security $(security)
	    } elseif {[catch {$STA wl bssid} ret] || \
			  $ret eq "00:00:00:00:00:00"} {
		ConnectAPSTA $AP $STA
	    }
	    # Set frameburst after any AP restarts
	    $AP wl -u frameburst $(fb)

	    # If we're in SoftAP mode, set PM on the router.  Do this
	    # after assoc, since WET assoc may restart the router.
	    if {[$STA cget -apmode]} {
		$AP wl PM $(PM)
	    }

	    set k [concat $BUILD $AP $(PM)]
	    if {$(ch) ne ""} {
		lappend k "ch=$(ch)"
	    }
	    if {$(fb)} {
		lappend k "fb=$(fb)"
	    }

	    # Auto TCP window size setting based on phy rate
	    set w [$STA tcpautowindow]

	    if {$(security) ne "open"} {
		lappend k "$(security)"
	    }

	    if {[$STA cget -dosystime]} {
		after 5000 [namespace current]::systime $STA
	    }
	    set setup 1
	    controlchart [list $AP $STA] -key $k -i $i -window $w \
		-loop $testopts(perfloop) -history $testopts(history)
	}
	if {$setup} {
	    UTF::Try "$MSG: WLAN->LAN" {
		if {[$STA cget -dosystime]} {
		    after 5000 [namespace current]::systime $STA
		}
		controlchart [list $STA $AP] -key $k -i $i -window $w \
		    -loop $testopts(perfloop) -history $testopts(history)
	    }
            if {!$testopts(nobx)} {
                UTF::Try "$MSG: WLAN<>LAN" {
                    if {[$STA cget -dosystime]} {
                        after 5000 [namespace current]::systime $STA
                    }
                    controlchart [list $STA $AP $AP $STA] -key $k -i $i \
                        -window $w -loop $testopts(perfloop) \
                        -history $testopts(history)
                }
            }
            UTF::Try "$MSG: WLAN<-PLCURE" {
                if {[$STA cget -dosystime]} {
                    after 5000 [namespace current]::systime $STA
                }
                controlchart [list $IperfHost $STA] -key $k -i $i -window $w \
                    -loop $testopts(perfloop) -history $testopts(history)
            }
            UTF::Try "$MSG: WLAN->PLCURE" {
                if {[$STA cget -dosystime]} {
                    after 5000 [namespace current]::systime $STA
                }
                controlchart [list $STA $IperfHost] -key $k -i $i -window $w \
                    -loop $testopts(perfloop) -history $testopts(history)
            }
	    if {!$testopts(nobx)} {
		UTF::Try "$MSG: WLAN<>PLCURE" {
		    if {[$STA cget -dosystime]} {
			after 5000 [namespace current]::systime $STA
		    }
		    controlchart [list $STA $IperfHost $IperfHost $STA] -key $k -i $i \
			-window $w -loop $testopts(perfloop) \
			-history $testopts(history)
		}
	    }
            UTF::Try "$MSG: LAN<-PLCURE" {
                if {[$STA cget -dosystime]} {
                    after 5000 [namespace current]::systime $STA
                }
                controlchart [list $IperfHost $AP] -key $k -i $i -window $w \
                    -loop $testopts(perfloop) -history $testopts(history)
            }
            UTF::Try "$MSG: LAN->PLCURE" {
                if {[$STA cget -dosystime]} {
                    after 5000 [namespace current]::systime $STA
                }
                controlchart [list $AP $IperfHost] -key $k -i $i -window $w \
                    -loop $testopts(perfloop) -history $testopts(history)
            }
            if {!$testopts(nobx)} {
                UTF::Try "$MSG: LAN<>PLCURE" {
                    if {[$STA cget -dosystime]} {
                        after 5000 [namespace current]::systime $STA
                    }
                    controlchart [list $AP $IperfHost $IperfHost $AP] -key $k -i $i \
                        -window $w -loop $testopts(perfloop) \
                        -history $testopts(history)
                }
            }
	}
    }

    if {$(noscan)} {
	proc scan {AP STA MSG} {}
    } else {
	proc scan {AP STA MSG} {
	    UTF::Try "$MSG: Scan Tests" {
		UTF::Try "$MSG: Broadcast Scan" {
		    Scan $AP $STA
		}
		UTF::Try "$MSG: Scan directed to SSID" {
		    Scan $AP $STA -ssid
		}
		UTF::Try "$MSG: Scan directed to BSSID" {
		    Scan $AP $STA -bssid
		}
		UTF::Try "$MSG: Scan directed to SSID and BSSID" {
		    Scan $AP $STA -ssid -bssid
		}
		UTF::Try "$MSG: Passive Scan" {
		    Scan $AP $STA -passive
		}
		return
	    }
	}
    }
    if {$(nojoin)} {
	proc joinsec {AP STA MSG} {}
    } else {
	proc joinsec {AP STA MSG} {
	    # access option array
	    upvar {} {}
	    UTF::Try "$MSG: Association Tests" {
		if {!$(noshared) && ![$STA cget -nowep]} {
		    # use limited wep on some devices.
		    if {[$STA cget -usewep64]} {
			UTF::Try "$MSG: SHARED64 association" {
			    ConnectAPSTA $AP $STA -security shared64
			}
		    } else {
			UTF::Try "$MSG: SHARED association" {
			    ConnectAPSTA $AP $STA -security shared
			}
		    }
		}

		if {!$(notkip) && ![$STA cget -notkip]} {
		    UTF::Try "$MSG: TKIPPSK2 association" {
			ConnectAPSTA $AP $STA -security tkippsk2
		    }
		}
		if {!$(noaes) && ![$STA cget -noaes] && ![$AP hostis Airport]} {
		    UTF::Try "$MSG: AESPSK association" {
			ConnectAPSTA $AP $STA -security aespsk
		    }
		}
		catch {$STA wl disassoc}
		return
	    }
	}
    }

    proc main {Router STA IperfHost} {
	# access option array
	upvar {} {}
	upvar date date

	set phyname ""

	if {$(branch) eq "auto"} {
	    set branch [$STA branchname]
	} else {
	    set branch $(branch)
	}

	# Find images
	if {!$(nostaload)} {
	    UTF::Try "$STA Find STA Image" {
		UTF::CheckImage $STA $date unknown
	    }
	}
	if {!$(nosetup)} {
	    if {$(nostaload)} {
		if {!$(nostareload)} {
		    UTF::Try "$STA reload" {
			$STA reload
		    }
		}
	    } else {
		UTF::Try "$STA load" {
		    $STA load
		}
	    }
	    UTF::Try "$STA defaults" {

		$STA services stop
		catch {$STA wl msglevel +error +assoc}
		if {![$STA cget -nomimo_bw_cap]} {
		    catch {$STA wl down}
		    # Enable 40 in 2.4, if available.
		    # Doesn't work for LMAC since LMAC is never "down"
		    $STA wl -u mimo_bw_cap 1
		    $STA wl up
		    UTF::Sleep 1
		}

		$STA wl ver
		set what [$STA whatami]
		if {!$(nostaload)} {
		    # Pull out chip info and replace whitespace to
		    # make it easier for external parsers.
		    regsub -all {\s+} [lreplace $what 0 0] {_} w
		    if {[catch {$UTF::Summary header_update 1 $w} ret]} {
			UTF::Message WARN $STA $ret
		    }
		}
		set what
	    }

	    if {!$(nostaload) && [set reclaim [$STA reclaim]]} {
		UTF::Try "$STA: Reclaim" {
#		    if {$(bin) eq ""} {
#			# Only do MemSave for official builds
#			UTF::MemSave $reclaim "reclaim" [$STA imageinfo]
#		    }
		    # MemChart
		    memchart $reclaim -key [list $branch $STA reclaim] \
			-failonlow
		}
	    }
	}

	set perfchans [$STA cget -perfchans]


	if {$perfchans eq ""} {
	    # Try to guess a 40 and a 20 MHz channel

	    set 40chan ""
	    if {$(chanspec) ne ""} {
		# cmdline override
		set 20chan $(chanspec)
	    } else {
		# per device defaults
		set 20chan [$STA cget -chanspec220]
	    }

	    if {[catch {
		if {[regexp {36?l} [$Router wl chanspecs]] &&
		    [regexp {36?l} [$STA wl chanspecs]]} {
		    # 40 MHz channels are available
		    # check if we can use 5GHz band for 40MHz bw tests
		    set 40chan 3l
		    if {[catch {
			if {[lsearch [$Router wl bands] "a"] > -1 &&
			    [lsearch [$STA wl bands] "a"] > -1} {
			    set 40chan 36l
			}
		    } ret]} {
			UTF::Try "$STA: check for 5GHz band" {
			    error $ret
			}
		    }
		}
	    } ret]} {
		if {![regexp {Unsupported} $ret]} {
		    # If any of these commands are unsupported it's a safe bet
		    # that 40MHz isn't available.
		    UTF::Try "$STA: check for 40MHz channels" {
			error $ret
		    }
		}
	    }
	    if {$40chan eq ""} {
		UTF::Message INFO "" "No 40MHz testing"
	    } else {
		UTF::Message INFO "" "Using $40chan for 40MHz testing"
	    }

	    if {$40chan ne "" && !$(noperf40)} {
		lappend perfchans $40chan
	    }
	    if {!$(noperf20)} {
		lappend perfchans $20chan
	    }
	}

	# Find first and last channels, in case we have to wipe out
	# perfchans later
	set initchan [lindex $perfchans 0]
	set mainchan [lindex $perfchans end]

	# If performance tests are disabled, clean the performance
	# channel list, but leave the calibration channel list.
	set calchans $perfchans
	if {$(noperf)} {
	    set perfchans ""
	}

	if {![$STA cget -apmode]} {
	    UTF::Try "$Router: Home Channel $initchan" {
		APChanspec $Router $initchan
	    }
	}

	for {set i 0} {$i < $(loop)} {incr i} {
            # TEST CODE HERE
            pmperf $branch $Router $STA $IperfHost $STA -fb 1
	}
	if {!$(nounload)} {
	    UTF::Try "$STA: unload driver" {
		$STA unload
	    }
	}
	catch {$STA deinit}
    }

    UTF::WrapSummary $UTF::SummaryDir $TITLE "" $(email) {
	set ::UTF::Perfcache [file join $UTF::SummaryDir perfcache]

	if {!$(nosetuptestbed) && [info exists ::UTF::SetupTestBed]} {
	    UTF::Try "Setup testbed" {
		eval $::UTF::SetupTestBed
	    }
	}

	if {!$(noapload)} {
	    UTF::Try "$Router: Find Router Image" {
		UTF::CheckImage $AP2 $date unknown
		UTF::CheckImage $Router $date unknown
	    }

            # Load support AP image
            UTF::Try "$AP2: Load Image" {
                set ver [$AP2 load]
                set what [$AP2 whatami]
                # Pull out chip info and replace whitespace to make it
                # easier for external parsers.
                regsub -all {\s+} [lreplace $what 0 0] {_} w
                return "$what $ver"
            }

            # Load AP with URE and PLC enabled
	    UTF::Try "$Router: Load Image" {
		if {[$Router hostis Router Vx BSDAP DSL Airport]} {
		    if {[catch {$Router lan ifconfig [$Router lan cget -ipaddr]}]} {
			$Router lan ifconfig 192.168.1.50
		    }
		}
		set ver [$Router load]
		set what [$Router whatami]
		# Pull out chip info and replace whitespace to make it
		# easier for external parsers.
		regsub -all {\s+} [lreplace $what 0 0] {_} w
		if {[catch {$UTF::Summary header_update 1 $w} ret]} {
		    UTF::Message WARN $Router $ret
		}
		return "$what $ver"
	    }
	}
	if {!$(norestore)} {
            UTF::Try "$AP2: Restore Defaults For AP2" {
                if {[$AP2 hostis Router Vx BSDAP DSL Airport]} {
                    $AP2 restore_defaults
                } else {
                    $AP2 services stop
                    catch {$AP2 wl msglevel +error +assoc}
                    if {![$AP2 cget -nomimo_bw_cap]} {
                        catch {$AP2 wl down}
                        # Enable 40 in 2.4, if available.
                        $AP2 wl -u mimo_bw_cap 1
                        $AP2 wl up
                        UTF::Sleep 1
                    }

                    $Router chipname
                }
            }
	    UTF::Try "$Router: Restore Defaults for URE Router" {
		if {[$Router hostis Router Vx BSDAP DSL Airport]} {
		    $Router restore_defaults
		} else {
		    $Router services stop
		    catch {$Router wl msglevel +error +assoc}
		    if {![$Router cget -nomimo_bw_cap]} {
			catch {$Router wl down}
			# Enable 40 in 2.4, if available.
			$Router wl -u mimo_bw_cap 1
			$Router wl up
			UTF::Sleep 1
		    }

		    $Router chipname
		}
	    }
	}

        if {[catch {main $Router $STA $IperfHost} ret]} {
            UTF::Try "main loop" {
	    error $ret
        }

	PreservedReport

	if {!$(noposttesthook) && [info exists ::UTF::PostTestHook]} {
	    UTF::Try "Post Test" {
		eval $::UTF::PostTestHook
	    }
	}
    }
}
}
