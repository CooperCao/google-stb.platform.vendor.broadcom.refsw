#!/bin/env utf
# -*-tcl-*-
#

#
# UTF test script for a basic streams tests
#
# Written by: Robert J. McMahon September 2010
#
# $Id: 36219fd4207920c2d90dfdf9f4443587536aed93 $
# $Copyright Broadcom Corporation$
#
package require UTF
package require UTF::Streams
package require UTF::Test::APChanspec
package require UTF::Test::ConnectAPSTA
package require UTF::Test::Scan
package require UTF::RSSIMapper

package provide UTF::Test::HiddenNode 2.0

#
#  Make sure that UDP Streams with QOS are prioritized over
#  best effort TCP streams
#
UTF::Test HiddenNode {args} {
    UTF::Getopts {
	{title.arg "" "Title"}
	{branch.arg "" "Branch override"}
	{date.arg "" "Image date"}
	{tag.arg "" "Router release tag"}
	{statag.arg "" "STA release tag"}
	{bin.arg "" "STA image"}
	{stas.arg ""}
	{ap.arg ""}
	{hnsta.arg ""}
	{pktsize.arg "1472"}
	{holdtime.arg "30"}
	{competetime.arg "30"}
	{email.arg "" "Email Address"}
	{rts ""}
	{ampdu ""}
	{noapload "Don't load images"}
	{nostaload "Don't reload STA drivers"}
	{norestore "Don't reset to defaults"}
	{chanspec.arg "6"}
	{duration.arg "60"}
	{calrate.arg ""}
	{outputtype.arg "png"}
    }

    proc all_join_ssid {stas ssid {timeout 10} {numjoinattempts 3}} {
	if {$ssid ==  "" } {
	    return
	}
	for {set ix 0} {$ix < $numjoinattempts} {incr ix} {
	    set stas2check {}
	    foreach sta $stas {
		set ::__wlwatch 0
		after [expr {$timeout * 1000}] {set ::__wlwatch 1}
		set wlcmd_done 0
		while {!$wlcmd_done && !$::__wlwatch} {
		    if {![catch {$sta wl join $ssid} err]} {
			set wlcmd_done 1
		    } else {
			UTF::Sleep 1.0
		    }
		}
		if {$::__wlwatch} {
		    UTF::Message WARN "" "Timeout on wl join for $sta"
		} else {
		    lappend stas2check $sta
		}
	    }
	    set ::_joinwatchdog 0
	    after [expr {$timeout * 1000}] {set ::_joinwatchdog 1}
	    while {[llength $stas2check] && !$::_joinwatchdog} {
		UTF::Sleep 1
		foreach sta $stas2check {
		    if {![catch {$sta wl ssid} currsid] && $currsid == $ssid} {
			set stas2check [lsearch -all -not -inline $stas2check $sta]
		    }
		}
	    }
	    if {[llength $stas2check]} {
		UTF::Message WARN "" "join timeout for $stas2check and ssid $ssid"
	    }
	    set stas $stas2check
	}
    }
    proc enable_rtscts {{stas ""} ssid {size 32}} {
	if {![llength $stas]} {
	    set stas [UTF::STA info instances]
	}
	foreach sta $stas {
	    set ssid [$sta wl ssid]
	    $sta wl down
	    $sta wl rtsthresh $size
	    $sta wl up
	}
	all_join_ssid $stas $ssid
    }
    proc disable_rtscts {{stas ""} ssid {size 2347}} {
	if {![llength $stas]} {
	    set stas [UTF::STA info instances]
	}
	foreach sta $stas {
	    set ssid [$sta wl ssid]
	    $sta wl down
	    $sta wl rtsthresh $size
	    $sta wl up
	}
	all_join_ssid $stas $ssid
    }
    proc enable_ampdu {{stas ""} ssid} {
	if {![llength $stas]} {
	    set stas [UTF::STA info instances]
	}
	foreach sta $stas {
	    set ssid [$sta wl ssid]
	    $sta wl down
	    $sta wl ampdu 1
	    $sta wl up
	}
	all_join_ssid $stas $ssid
    }
    proc disable_ampdu {{stas ""} ssid} {
	if {![llength $stas]} {
	    set stas [UTF::STA info instances]
	}
	foreach sta $stas {
	    set ssid [$sta wl ssid]
	    $sta wl down
	    $sta wl ampdu 0
	    $sta wl up
	}
	all_join_ssid $stas $ssid
    }

    proc hn_discovery {stas} {
	foreach sta $stas {
	    $sta wl ap 1
	    $sta wl ssid hndiscovery_$sta
	    foreach peer $stas {
		if {$peer == $sta} {
		    continue
		} else {
		    if {![catch {UTF::Test::Scan $sta $peer} res]} {
			set map($peer) $sta
		    }
		}
	    }
	    $sta wl ap 0
	}
	set hnlist $stas
	foreach sta [array names map] {
	    set hnlist [lsearch -all -not -inline $hnlist $sta]
	}
	return $hnlist
    }

    foreach STA $(stas) {
	if {$(bin) ne ""} {
	    $STA configure -image $(bin) -date {}
	} elseif {$(statag) ne ""} {
	    $STA configure -tag $(statag)
	}
    }

    if {$(date) ne ""} {
	set date $(date)
	foreach sta $(stas) {
	    $sta configure -date $(date)
	}
    } else {
	set date [clock format [clock seconds] -format "%Y.%-m.%-e"]
    }


    # Compact build list for title
    # Include the WDS list, in case the AP list is empty.  Duplicates
    # will be removed automatically.
    set build [UTF::BuildTitle [concat $(ap) $(stas)]]

    set TITLE "UTF HiddenNode $(title) ($build)"
    UTF::Message INFO "" $TITLE
    unset build

    UTF::WrapSummary $UTF::SummaryDir $TITLE "" $(email) {
	if {[info proc ::hidden_node] == ""} {
	    UTF::Message ERROR "" "Must define ::hidden_node proc in utfconf file"
	    return
	}
	if {[info exists ::UTF::SetupTestBed]} {
	    UTF::Try "Setup testbed" {
		eval $::UTF::SetupTestBed
	    }
	}

	if {!$(noapload)} {
	    foreach Router $(ap) {
		UTF::Try "[$Router cget -name]: Find Router Image" {
		    UTF::CheckImage $Router $date unknown
		}
		UTF::Try "[$Router cget -name]: Load Image" {
		    $Router load
		}
		UTF::Try "[$Router cget -name]: Restore Defaults" {
		    $Router restore_defaults
		    set what [$Router whatami]
		    # Pull out chip info and replace whitespace to
		    # make it easier for external parsers.
		    regsub -all {\s+} [lreplace $what 0 0] {_} w
		    if {[catch {$UTF::Summary header_update 1 $w} ret]} {
			UTF::Message WARN $Router $ret
		    }
		    set what
		}
	    }
	}
	if {!$(nostaload)} {
	    foreach STA $(stas) {
		UTF::Try "[$STA cget -name]: Find STA Image" {
		    UTF::CheckImage $STA $date unknown
		}
		UTF::Try "[$STA cget -name]: load" {
		    $STA load
		}
		UTF::Try "[$STA cget -name]: defaults" {
		    $STA services stop
		    catch {$STA wl msglevel +error +assoc}
		    if {![$STA cget -nomimo_bw_cap]} {
			catch {$STA wl down}
			# Enable 40 in 2.4, if available.
			# Doesn't work for LMAC since LMAC is never "down"
			$STA wl -u mimo_bw_cap 1
			$STA wl up
			UTF::Sleep 1
		    }
		    $STA wl ver
		    set what [$STA whatami]
		    # Pull out chip info and replace whitespace to
		    # make it easier for external parsers.
		    regsub -all {\s+} [lreplace $what 0 0] {_} w
		    if {[catch {$UTF::Summary header_update 1 $w} ret]} {
			UTF::Message WARN $STA $ret
		    }
		    set what
		}
	    }
	}

	UTF::Try "RSSI Mapping HN=OFF" {
	    ::hidden_node off
	    UTF::RSSIMapper mapper -stas [concat $(stas) $(ap)]
	    mapper start
	    UTF::Sleep 60
	    mapper lookup
	    mapper stop
	}
	UTF::Try "RSSI Mapping HN=ON" {
	    ::hidden_node on
	    mapper start
	    UTF::Sleep 60
	    mapper lookup
	    mapper stop
	    mapper destroy
	}
	UTF::Try "Restore defaults $(ap)" {
	    $(ap) restore_defaults
	}
	UTF::Try "Hidden Node Discovery" {
	    ::hidden_node on
	    set hnsta [hn_discovery $(stas)]
	    ::hidden_node off
	    if {[llength $hnsta] < 1} {
		error "Hidden Node discovery failed - check RF topology."
	    } elseif {[llength $hnsta] > 1} {
		set hnsta [lindex $hnsta 0]
		UTF::Message INFO "" "Found more than one hidden node: using $hnsta as hidden node"
	    }

	    if {$(hnsta) != ""} {
		if {$hnsta != $(hnsta)} {
		    error "Hidden node STA mismatch: Expected/Actual $(hnsta) / $hnsta"
		}
	    }
	    return $hnsta
	}
	UTF::Try "ConnectAPSTA" {
	    foreach sta $(stas) {
		UTF::Test::ConnectAPSTA $(ap) $sta
	    }
	}
	set ssid [$(ap) wl ssid]
	set title "Hidden Node Testing - holdtime $(holdtime) compete time $(competetime) s"
	set lanpeer [$(ap) cget -lanpeer]
	set ix 0
	set bkstreams ""
	set hnstream ""
	foreach sta $(stas) {
	    incr ix
	    UTF::stream STA_${ix}(BK)->AP -transmitsta $sta -receivesta $lanpeer -tos 0x20 -rate 300M -pktsize $(pktsize)
	    set tmp [UTF::stream STA_${ix}(BE)->AP -transmitsta $sta -receivesta $lanpeer -tos 0x0 -rate 300M -pktsize $(pktsize)]
	    if {$sta != $hnsta} {
		lappend bkstreams $tmp
	    } else {
		set hnstream $tmp
	    }
	    UTF::stream STA_${ix}(VO)->AP -transmitsta $sta -receivesta $lanpeer -tos 0xC0 -rate 300M -pktsize $(pktsize)
	    UTF::stream STA_${ix}(VI)->AP -transmitsta $sta -receivesta $lanpeer -tos 0x80 -rate 300M -pktsize $(pktsize)
	}
	set rtsstates "0 1"
	set ampdustates "0 1"
	set hnstates "0 1"
	foreach ampdu $ampdustates {
	    foreach hn $hnstates {
		if {$hn} {
		    ::hidden_node on
		    set hmsg "Hidden Node ON"
		    set g "on"
		} else {
		    ::hidden_node off
		    set hmsg "Hidden Node OFF"
		    set g "off"
		}
		foreach rts $rtsstates {
		    if {$rts} {
			enable_rtscts $(stas) $ssid
		    } else {
			disable_rtscts $(stas) $ssid
		    }
		    UTF::Try "$hmsg (rts/amdpu ${rts}/${ampdu})" {
			if {$ampdu} {
			    enable_ampdu $(stas) $ssid
			} else {
			    disable_ampdu $(stas) $ssid
			}
			set rtslist ""
			set ampdus ""
			foreach sta $(stas) {
			    set rtsthresh [lindex [$sta wl rtsthresh] 0]
			    lappend rtslist $rtsthresh
			    set ampdustate [$sta wl ampdu]
			    lappend ampdus $ampdustate
			}
			set title "$hmsg \(pktsize $(pktsize)\)\\nSTAs rtsthresh: $rtslist ampdu: $ampdus"
			UTF::streamgraph rategraph -key rts${rts}_ampdu${ampdu}_hn_$g -title $title -streams [concat $bkstreams $hnstream] -outputtype $(outputtype)
			UTF::streamgraph jittergraph -key rts${rts}_ampdu${ampdu}_hn_$g -title $title -streams [concat $bkstreams $hnstream] -stat jitter -outputtype $(outputtype)
			foreach stream $bkstreams {
			    $stream start
			}
			UTF::Sleep 1.0
			foreach stream $bkstreams {
			    $stream stats -clear
			}
			UTF::StreamStatAggregate rate -range 1
			UTF::Sleep $(holdtime)
			$hnstream start
			UTF::Sleep $(competetime)
			$hnstream stop
			UTF::Sleep $(holdtime)
			rate stop
			set results "[rategraph plot] [string range [rate plot] 5 end] [string range [jittergraph plot] 5 end]"
			UTF::stream allstreams stop
			UTF::stream allstreams stats -clear
			rategraph destroy
			jittergraph destroy
			rate destroy
			return $results
		    }
		}
	    }
	}
    }
}
