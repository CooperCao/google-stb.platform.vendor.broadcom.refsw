#!/bin/env utf
# -*-tcl-*-

#
# UTF test script for Roaming nightly run
# $Id$
# $Copyright Broadcom Corporation$
#
# 5G@80 TCP Smooth Roaming:
# Test/RoamingNightly.test -utfconf utfconf/MCK.tcl -title "MCK 4360 7_10_TOB FC15 Roaming" -sta "4360-FC19-DUT" -src_ap "AP1-4331-4706 AP1-4360-4706" -dst_ap "AP3-4331-4706 AP3-4360-4706" -no2G40 -va "af" -sniffer "snif" -5G80_src_ap_attn "21-51" -5G80_dst_ap_attn "16-0" -5G80_sniffer_start_attn 26 -nofailoverroaming -novoiceroaming -no5G40 -no5G20 -no2G40 -no2G20 -noapload -norestore
# estimate:
# Test/RoamingNightly.test -utfconf utfconf/MCK.tcl -title "MCK 4360 7_10_TOB FC15 Roaming" -sta "4360-FC19-DUT" -src_ap "AP1-4331-4706 AP1-4360-4706" -dst_ap "AP3-4331-4706 AP3-4360-4706" -no2G40 -va "af" -sniffer "snif" -nofailoverroaming -no5G40 -no5G20 -no2G40 -no2G20 -noapload -norestore -estimate_attn
#


package require UTF
package require UTF::utils
package require UTF::Test::ConnectAPSTA
package require UTF::Test::APChanspec
package require UTF::Test::APConfigureSecurity
package require UTF::Test::Scan
package require UTF::Test::memchart
package require UTF::Test::ChannelSweep
package require UTF::Test::Roaming

namespace eval RoamingNightly {}
package provide UTF::Test::RoamingNightly 2.0

proc RoamingNightly::run_roaming_test {src_ap_chan dst_ap_chan ap_band SummaryLoc SrcAPAttn DstAPAttn SrcAPVoiceAttn DstAPVoiceAttn SnifferStartAttn SnifferVoiceStartAttn RoamTriggerValue} {
	# access option array
	upvar {} {}
	upvar branch branch

	#---------------------------------------------------
	#---------------	Src 5G or 2.4G AP	------------
	#---------------------------------------------------
	set src_ap_2g [lindex $(src_ap) 0]
	set src_ap_5g [lindex $(src_ap) end]
	UTF::Message LOG "" "src_ap_2g=$src_ap_2g" 		
	UTF::Message LOG "" "src_ap_5g=$src_ap_5g" 		

	if {[$src_ap_2g band $src_ap_chan] eq "b"} {
		set src_ap $src_ap_2g
	} else {
		set src_ap $src_ap_5g
	}
	UTF::Message LOG "" "Src AP Channel=$src_ap_chan Src Router=$src_ap" 		

	UTF::Test::APChanspec $src_ap $src_ap_chan

	#---------------------------------------------------
	#---------------	Dst 5G or 2.4G AP	------------
	#---------------------------------------------------
	set dst_ap_2g [lindex $(dst_ap) 0]
	set dst_ap_5g [lindex $(dst_ap) end]
	UTF::Message LOG "" "dst_ap_2g=$dst_ap_2g" 		
	UTF::Message LOG "" "dst_ap_5g=$dst_ap_5g" 		

	if {[$dst_ap_2g band $dst_ap_chan] eq "b"} {
		set dst_ap $dst_ap_2g
	} else {
		set dst_ap $dst_ap_5g
	}
	UTF::Message LOG "" "Dst AP Channel=$dst_ap_chan Src Router=$dst_ap" 		

	UTF::Test::APChanspec $dst_ap $dst_ap_chan

	# Get the correct wlN prefix for the Src AP
	set src_ap_wlname [$src_ap wlname]
	regsub -all {[a-zA-Z]} $src_ap_wlname "" src_ap_wlname
	UTF::Message INFO "" "src_ap_wlname=$src_ap_wlname"
	# Get the correct wlN prefix for the Dst AP
	set dst_ap_wlname [$dst_ap wlname]
	regsub -all {[a-zA-Z]} $dst_ap_wlname "" dst_ap_wlname
	UTF::Message INFO "" "dst_ap_wlname=$dst_ap_wlname"

	#####################################################
	# Turn off all APs radios
	#####################################################

	catch {$src_ap nvram set wl0_radio=0}
	catch {$src_ap nvram set wl1_radio=0}
	catch {$dst_ap nvram set wl0_radio=0}
	catch {$dst_ap nvram set wl1_radio=0}
	
	#####################################################
	# Turn on the correct APs radios
	#####################################################
	$src_ap nvram set wl$src_ap_wlname\_radio=1
	$dst_ap nvram set wl$dst_ap_wlname\_radio=1

	#####################################################
	# Both APs ssids must be the same for the roaming to work
	# set both src and dst APs to a same temporary ssid
	#####################################################
	UTF::Message INFO "" "######################## Modify SSIDs #############################"
	
	# Get AP current nvram ssid setting and save for later to restore
	set nvram_value [$src_ap nvram get wl$src_ap_wlname\_ssid]
	set saved_src_ap_ssid [string trim $nvram_value]
	UTF::Message INFO "" "saved_src_ap_ssid=$saved_src_ap_ssid"  

	UTF::Message INFO "" "Setting src_ap=$src_ap to ssid=roaming_test_temp_ssid"  
	$src_ap nvram set wl$src_ap_wlname\_ssid=roaming_test_temp_ssid
	$src_ap configure -ssid roaming_test_temp_ssid

	$src_ap nvram commit
	$src_ap restart
	UTF::Sleep 5

	#-----------------------------------------------------	
	UTF::Message INFO "" "-----------------------------------------------------"
	
	# Get AP current nvram ssid setting and save for later to restore
	set nvram_value [$dst_ap nvram get wl$dst_ap_wlname\_ssid]
	set saved_dst_ap_ssid [string trim $nvram_value]
	UTF::Message INFO "" "saved_dst_ap_ssid=$saved_dst_ap_ssid"  

	UTF::Message INFO "" "Setting dst_ap=$dst_ap to ssid=roaming_test_temp_ssid"  
	$dst_ap nvram set wl$dst_ap_wlname\_ssid=roaming_test_temp_ssid
	$dst_ap configure -ssid roaming_test_temp_ssid

	$dst_ap nvram commit
	$dst_ap restart
	UTF::Sleep 5

	UTF::Message INFO "" "#####################################################"
	#####################################################

	UTF::Sleep 5
	
	if {!$(nosmoothroaming)} {
		if {$(estimate_attn)} {
			UTF::Message LOG "" "*************************** Estimate Smooth Roaming Attn *****************************"
			UTF::Test::Roaming -branch $branch -src_ap $src_ap -dst_ap $dst_ap -sta $(sta) -sniffer $(sniffer) -va $(va) -chanspec1 $src_ap_chan -chanspec2 $dst_ap_chan -apband $ap_band -email $(email) -summaryloc $SummaryLoc -src_ap_attn $SrcAPAttn -dst_ap_attn $DstAPAttn -sniffer_start_attn $SnifferStartAttn -roam_trigger_value $RoamTriggerValue -estimate_attn
		} else {
			UTF::Message LOG "" "*************************** Smooth Roaming Test *****************************"
			UTF::Test::Roaming -branch $branch -src_ap $src_ap -dst_ap $dst_ap -sta $(sta) -sniffer $(sniffer) -va $(va) -chanspec1 $src_ap_chan -chanspec2 $dst_ap_chan -apband $ap_band -email $(email) -summaryloc $SummaryLoc -src_ap_attn $SrcAPAttn -dst_ap_attn $DstAPAttn -sniffer_start_attn $SnifferStartAttn -roam_trigger_value $RoamTriggerValue
		}

		if {!$(novoiceroaming)} {

			if {$(estimate_attn)} {
				UTF::Message LOG "" "*************************** Estimate Voice Smooth Roaming Attn *****************************"
				UTF::Test::Roaming -branch $branch -src_ap $src_ap -dst_ap $dst_ap -sta $(sta) -sniffer $(sniffer) -va $(va) -chanspec1 $src_ap_chan -chanspec2 $dst_ap_chan -apband $ap_band -email $(email) -summaryloc $SummaryLoc -voice_test -src_ap_attn $SrcAPVoiceAttn -dst_ap_attn $DstAPVoiceAttn -sniffer_start_attn $SnifferVoiceStartAttn -roam_trigger_value $RoamTriggerValue -estimate_attn
			} else {
				UTF::Message LOG "" "*************************** Voice Smooth Roaming Test *****************************"
				UTF::Test::Roaming -branch $branch -src_ap $src_ap -dst_ap $dst_ap -sta $(sta) -sniffer $(sniffer) -va $(va) -chanspec1 $src_ap_chan -chanspec2 $dst_ap_chan -apband $ap_band -email $(email) -summaryloc $SummaryLoc -voice_test -src_ap_attn $SrcAPVoiceAttn -dst_ap_attn $DstAPVoiceAttn -sniffer_start_attn $SnifferVoiceStartAttn -roam_trigger_value $RoamTriggerValue
			}
		}
	}
	
	if {!$(nofailoverroaming)} {
		UTF::Message LOG "" "*************************** Failover Roaming Test *****************************"
		UTF::Test::Roaming -branch $branch -src_ap $src_ap -dst_ap $dst_ap -sta $(sta) -sniffer $(sniffer) -va $(va) -chanspec1 $src_ap_chan -chanspec2 $dst_ap_chan -apband $ap_band -email $(email) -summaryloc $SummaryLoc -failover_roaming

		if {!$(novoiceroaming)} {
			UTF::Message LOG "" "*************************** Voice Failover Roaming Test *****************************"
			UTF::Test::Roaming -branch $branch -src_ap $src_ap -dst_ap $dst_ap -sta $(sta) -sniffer $(sniffer) -va $(va) -chanspec1 $src_ap_chan -chanspec2 $dst_ap_chan -apband $ap_band -email $(email) -summaryloc $SummaryLoc -failover_roaming -voice_test			
		}
	}

	#####################################################
	# Both APs ssids must be restored
	#####################################################
	UTF::Message INFO "" "####################### Restore SSIDs ##############################"
	UTF::Message INFO "" "Restoring src_ap=$src_ap to ssid=$saved_src_ap_ssid"  
	UTF::set_ap_nvram $src_ap wlN_ssid=$saved_src_ap_ssid
	$src_ap configure -ssid $saved_src_ap_ssid
	#-----------------------------------------------------	
	UTF::Message INFO "" "-----------------------------------------------------"
	UTF::Message INFO "" "Restoring dst_ap=$dst_ap to ssid=$saved_dst_ap_ssid"  
	UTF::set_ap_nvram $dst_ap wlN_ssid=$saved_dst_ap_ssid
	$dst_ap configure -ssid $saved_dst_ap_ssid
	UTF::Message INFO "" "#####################################################"
	#####################################################
}

UTF::Test RoamingNightly {args} {
	UTF::Getopts {
	{sta.arg "" "sta name"}
	{src_ap.arg "" "Router roaming from"}
	{dst_ap.arg ""  "Router roaming to"}
	{trx.arg "" "Router trx"}
	{tag.arg "" "Router release tag"}
	{statag.arg "" "STA release tag"}
	{bin.arg "" "STA dongle image"}
	{email.arg "" "Email Address"}
	{noapload "Don't load images"}
	{nostaload "Don't reload STA drivers"}
	{nostareload "Don't even reload STA drivers"}
	{norestore "Don't reset to defaults"}
	{nochannels "Don't scan channels"}
	{nosetup "No Setup"}
	{apdate.arg "" "AP Image date"}
	{stadate.arg "" "STA Image date"}
	{nounload "Don't unload driver after test"}
	{nocache "Don't update performance cache"}
	{title.arg "" "Title"}
		{reboot.arg "now" "The machine will reboot immedaitely after test is done"}
	{branch.arg "auto" "Branch override"}
	{logdir.arg "" "Log directory override"}
	{chanspec1.arg "1" "Chanspec to use for B band all fixed-channel tests"}
	{chanspec2.arg "1" "Chanspec to use for A band all fixed-channel tests"}
	{noroaming		"No roaming tests, default is run the roaming tests"}
	{no5G80		"No 5G 80Mhz Tests"}
	{no5G40		"No 5G 40Mhz Tests"}
	{no5G20		"No 5G 20Mhz Tests"}
	{no2G40		"No 2G 40Mhz Tests"}
	{no2G20		"No 2G 20Mhz Tests"}
	{va.arg "Aflex" "variable attenuator name"}
	{sniffer.arg "SNIF" "sniffer object name"}
	{nosmoothroaming "Don't do Smooth Roaming Test"}
	{nofailoverroaming "Don't do Failover Roaming Test"}
	{novoiceroaming "Don't do voice Roaming Test"}
	{estimate_attn "Display the estimated values for the attenuation on the report"}
	{5G80_sniffer_start_attn.arg "" "This is the attenuation level that the sniffer starts collecting data. Keep this as blank since the command line must set this parameter."}
	{5G40_sniffer_start_attn.arg "" "This is the attenuation level that the sniffer starts collecting data. Keep this as blank since the command line must set this parameter."}
	{5G20_sniffer_start_attn.arg "" "This is the attenuation level that the sniffer starts collecting data. Keep this as blank since the command line must set this parameter."}
	{2G40_sniffer_start_attn.arg "" "This is the attenuation level that the sniffer starts collecting data. Keep this as blank since the command line must set this parameter."}
	{2G20_sniffer_start_attn.arg "" "This is the attenuation level that the sniffer starts collecting data. Keep this as blank since the command line must set this parameter."}
	{5G80_sniffer_voice_start_attn.arg "" "This is the attenuation level that the sniffer starts collecting voice data. Keep this as blank since the command line must set this parameter."}
	{5G40_sniffer_voice_start_attn.arg "" "This is the attenuation level that the sniffer starts collecting voice data. Keep this as blank since the command line must set this parameter."}
	{5G20_sniffer_voice_start_attn.arg "" "This is the attenuation level that the sniffer starts collecting voice data. Keep this as blank since the command line must set this parameter."}
	{2G40_sniffer_voice_start_attn.arg "" "This is the attenuation level that the sniffer starts collecting voice data. Keep this as blank since the command line must set this parameter."}
	{2G20_sniffer_voice_start_attn.arg "" "This is the attenuation level that the sniffer starts collecting voice data. Keep this as blank since the command line must set this parameter."}
	{5G80_src_ap_attn.arg "" "This is the attenuation range for the source AP that the DUT is orginally connected to. Keep this as blank since the command line must set this parameter."}
	{5G40_src_ap_attn.arg "" "This is the attenuation range for the source AP that the DUT is orginally connected to. Keep this as blank since the command line must set this parameter."}
	{5G20_src_ap_attn.arg "" "This is the attenuation range for the source AP that the DUT is orginally connected to. Keep this as blank since the command line must set this parameter."}
	{2G40_src_ap_attn.arg "" "This is the attenuation range for the source AP that the DUT is orginally connected to. Keep this as blank since the command line must set this parameter."}
	{2G20_src_ap_attn.arg "" "This is the attenuation range for the source AP that the DUT is orginally connected to. Keep this as blank since the command line must set this parameter."}
	{5G80_src_ap_voice_attn.arg "" "This is the attenuation range for the source AP that the DUT is orginally connected to. Keep this as blank since the command line must set this parameter."}
	{5G40_src_ap_voice_attn.arg "" "This is the attenuation range for the source AP that the DUT is orginally connected to. Keep this as blank since the command line must set this parameter."}
	{5G20_src_ap_voice_attn.arg "" "This is the attenuation range for the source AP that the DUT is orginally connected to. Keep this as blank since the command line must set this parameter."}
	{2G40_src_ap_voice_attn.arg "" "This is the attenuation range for the source AP that the DUT is orginally connected to. Keep this as blank since the command line must set this parameter."}
	{2G20_src_ap_voice_attn.arg "" "This is the attenuation range for the source AP that the DUT is orginally connected to. Keep this as blank since the command line must set this parameter."}
	{5G80_dst_ap_attn.arg "" "This is the attenuation range for the dstination AP that the DUT is roaming to. Keep this as blank since the command line must set this parameter."}
	{5G40_dst_ap_attn.arg "" "This is the attenuation range for the dstination AP that the DUT is roaming to. Keep this as blank since the command line must set this parameter."}
	{5G20_dst_ap_attn.arg "" "This is the attenuation range for the dstination AP that the DUT is roaming to. Keep this as blank since the command line must set this parameter."}
	{2G40_dst_ap_attn.arg "" "This is the attenuation range for the dstination AP that the DUT is roaming to. Keep this as blank since the command line must set this parameter."}
	{2G20_dst_ap_attn.arg "" "This is the attenuation range for the dstination AP that the DUT is roaming to. Keep this as blank since the command line must set this parameter."}
	{5G80_dst_ap_voice_attn.arg "" "This is the attenuation range for the dstination AP that the DUT is roaming to. Keep this as blank since the command line must set this parameter."}
	{5G40_dst_ap_voice_attn.arg "" "This is the attenuation range for the dstination AP that the DUT is roaming to. Keep this as blank since the command line must set this parameter."}
	{5G20_dst_ap_voice_attn.arg "" "This is the attenuation range for the dstination AP that the DUT is roaming to. Keep this as blank since the command line must set this parameter."}
	{2G40_dst_ap_voice_attn.arg "" "This is the attenuation range for the dstination AP that the DUT is roaming to. Keep this as blank since the command line must set this parameter."}
	{2G20_dst_ap_voice_attn.arg "" "This is the attenuation range for the dstination AP that the DUT is roaming to. Keep this as blank since the command line must set this parameter."}
	{5G80_roam_trigger_value.arg "" "This is the roam trigger value. Default is blank."}
	{5G40_roam_trigger_value.arg "" "This is the roam trigger value. Default is blank."}
	{5G20_roam_trigger_value.arg "" "This is the roam trigger value. Default is blank."}
	{2G40_roam_trigger_value.arg "" "This is the roam trigger value. Default is blank."}
	{2G20_roam_trigger_value.arg "" "This is the roam trigger value. Default is blank."}
	}

	# If necessary, override the config file log directory setting.
	if {$(logdir) != ""} {
		set UTF::SummaryDir $(logdir)
		UTF::Message INFO "" "Using logdir: $UTF::SummaryDir"
	}

	if {$(nocache)} {
	set ::UTF::ControlChart::readonly 1
	set ::UTF::MemChart::readonly 1
	}

	set linuxver [$(sniffer) rexec uname -r]
    if {![string match -nocase "*FC15*" $linuxver]} {
		error "Invalid Sniffer OS. Only FC15 with BRCM wireshark is supported. Halting tests!"
    }

	set src_ap0 [lindex $(src_ap) 0]
	set dst_ap0 [lindex $(dst_ap) 0]
	set Routers "$src_ap0 $dst_ap0"

	set Router $src_ap0
	set STA [lindex $(sta) 0]

	# Override default tags
	if {$(trx) ne ""} {
	$src_ap0 configure -image $(trx) -apdate {}
	$dst_ap0 configure -image $(trx) -apdate {}
	} elseif {$(tag) ne ""} {
	$src_ap0 configure -tag $(tag) -apdate {}
	$dst_ap0 configure -tag $(tag) -apdate {}
	}
	if {$(bin) ne ""} {
	foreach STA $(sta) {
		$STA configure -image $(bin) -stadate {}
	}
	}
	if {$(statag) ne ""} {
	foreach STA $(sta) {
		$STA configure -tag $(statag) -stadate {}
	}
	}
	if {$(apdate) ne ""} {
		$src_ap0 configure -date $(apdate)
		$dst_ap0 configure -date $(apdate)
	}
	if {$(stadate) ne ""} {
	set date $(stadate)
	foreach S $(sta) {
		$S configure -date $(stadate)
	}
	unset S
	}
	
	set date [clock format [clock seconds] -format "%Y.%-m.%-e"]
	# Clean up whitespace (RH9 compat)
	regsub -all {\s+} $date {} date

	if {[set build [$STA cget -image]] eq ""} {
	set build [$STA cget -tag]
	}
	if {$build eq "NIGHTLY"} {
	set build "TOT"
	}
	if {$(title) eq ""} {
	if {[$STA hostis WinDHD Cygwin]} {
		set (title) [$STA host whatami]
	} elseif {[$STA hostis LMAC DHD]} {
		set (title) "Linux Dongle"
	} else {
		set (title) [$STA hostis]
	}

	if {[regexp {(\d+sd)} $Router - c]} {
		append (title) " with $c AP"
	}
	}
	set TITLE "UTF $(title) ($build)"
	UTF::Message INFO "" $TITLE

	# $build is used in the title. For private builds this will
	# indicate special images.

	# (branch) is used for comparison over time. For private builds
	# this should be specified explicitly so the tests know which
	# branch to test.

	if {$(branch) eq ""} {
	if {[regexp {/} $build]} {
		error "Unable to determine branch name from build. Please specify -branch"
	}
	set (branch) $build
	}
	unset build

	# Truncate build name for performance keys
	regsub {_.*} $(branch) {} (branch)

	proc systime {STA} {
	catch {
		$STA rexec {vmstat 1 6 | awk 'FNR>3{print $14}'}

	}
	}

	##################################################################
	
	proc main {src_ap dst_ap STA} {
	# access option array
	upvar {} {}
	upvar date date
	upvar Routers Routers

	if {$(branch) eq "auto"} {
		# Base branch on STA's tag, truncated
		regsub {_.*} [$STA cget -tag] {} branch
		if {$branch eq "NIGHTLY"} {
		set branch "TOT"
		}
	} else {
		set branch $(branch)
	}

	# Find images
	if {!$(nostaload)} {
		UTF::Try "$STA Find STA Image" {
		UTF::CheckImage $STA $date
		}
	}
	if {!$(nosetup)} {
		if {$(nostaload)} {
		if {!$(nostareload)} {
			UTF::Try "$STA reload" {
			$STA reload
			}
		}
		} else {
		UTF::Try "$STA load" {
			$STA load
		}
		}
		UTF::Try "$STA defaults" {
		$STA services stop
		catch {$STA wl msglevel +error +assoc}
		catch {$STA wl down}
		# Enable 40 in 2.4, if available.
		catch {$STA wl mimo_bw_cap 1}
		$STA wl up
		UTF::Sleep 1
		$STA wl ver
		$STA chipname
		}
	}

	foreach Router $Routers {
	
		UTF::Try "$Router: Open Security" {
			APConfigureSecurity $Router -security open
		}
	}

	if {!$(noroaming)} {
		# set SummaryLoc $UTF::SummaryDir
		set LogLoc $UTF::Logfile	

		set Index [string last "test.log" $LogLoc]

		if {$Index >= 0} {
			set SummaryLoc [string replace $LogLoc $Index end ""]
		}

		set src_ap0 [lindex $(src_ap) 0]
		catch "$src_ap0 wl band" ap_band
		
		set catch_resp [catch "$STA wl roam_trigger $ap_band" catch_msg]
		if {$catch_resp != 0} {
			UTF::Sleep 2
			set catch_resp [catch "$STA wl roam_trigger $ap_band" catch_msg]
		}
		if {$catch_resp != 0} {
			UTF::Message ERROR "" "***Failed. $catch_msg"
			error $catch_msg
		} else {
			# roam_trigger is 0xffb5(-75)
			regexp {roam_trigger is .*\((-[0-9]+)\)} $catch_msg match default_roam_trigger
			UTF::Message INFO "" "default roam_trigger=$default_roam_trigger"
		}

		if {!$(no5G80)} {
			if {$(5G80_roam_trigger_value) != ""} {
				set roam_trigger $(5G80_roam_trigger_value)
			} else {
				set roam_trigger $default_roam_trigger
			}
			RoamingNightly::run_roaming_test 36/80 36/80 5G $SummaryLoc $(5G80_src_ap_attn) $(5G80_dst_ap_attn) $(5G80_src_ap_voice_attn) $(5G80_dst_ap_voice_attn) $(5G80_sniffer_start_attn) $(5G80_sniffer_voice_start_attn) $roam_trigger
		}
		if {!$(no5G40)} {
			if {$(5G40_roam_trigger_value) != ""} {
				set roam_trigger $(5G40_roam_trigger_value)
			} else {
				set roam_trigger $default_roam_trigger
			}
			RoamingNightly::run_roaming_test 36l 36l 5G $SummaryLoc $(5G40_src_ap_attn) $(5G40_dst_ap_attn) $(5G40_src_ap_voice_attn) $(5G40_dst_ap_voice_attn) $(5G40_sniffer_start_attn) $(5G40_sniffer_voice_start_attn) $roam_trigger
		}
		if {!$(no5G20)} {
			if {$(5G20_roam_trigger_value) != ""} {
				set roam_trigger $(5G20_roam_trigger_value)
			} else {
				set roam_trigger $default_roam_trigger
			}
			RoamingNightly::run_roaming_test 36 36 5G $SummaryLoc $(5G20_src_ap_attn) $(5G20_dst_ap_attn) $(5G20_src_ap_voice_attn) $(5G20_dst_ap_voice_attn) $(5G20_sniffer_start_attn) $(5G20_sniffer_voice_start_attn) $roam_trigger
		}
		if {!$(no2G40)} {
			if {$(2G40_roam_trigger_value) != ""} {
				set roam_trigger $(2G40_roam_trigger_value)
			} else {
				set roam_trigger $default_roam_trigger
			}
			RoamingNightly::run_roaming_test 11u 11u 2G $SummaryLoc $(2G40_src_ap_attn) $(2G40_dst_ap_attn) $(2G40_src_ap_voice_attn) $(2G40_dst_ap_voice_attn) $(2G40_sniffer_start_attn) $(2G40_sniffer_voice_start_attn) $roam_trigger
		}
		if {!$(no2G20)} {
			if {$(2G20_roam_trigger_value) != ""} {
				set roam_trigger $(2G20_roam_trigger_value)
			} else {
				set roam_trigger $default_roam_trigger
			}
			RoamingNightly::run_roaming_test 3 3 2G $SummaryLoc $(2G20_src_ap_attn) $(2G20_dst_ap_attn) $(2G20_src_ap_voice_attn) $(2G20_dst_ap_voice_attn) $(2G20_sniffer_start_attn) $(2G20_sniffer_voice_start_attn) $roam_trigger
		}
	}

	#if {!$(nounload)} {
	#	UTF::Try "$STA: unload driver" {
	#	$STA unload
	#	}
	#}
	catch {$STA deinit}
	}

	##################################################################

	# Setup email option if necessary. UTF email utilities will 
	# set default to your username as necessary.
	if {$(email) == ""} {
		# Check for utf config file email default
		if {[info exists UTF::email_list]} {
			set (email) "$UTF::email_list"
		}
	}

	# Get testbed info.
	set ::UTF::trailer_info [UTF::setup_testbed_info $(email) $(logdir)]
	
	# Log testbed info. Although the trailer / testbed info is added to the
	# end of the summary web page, for development, a lot of the time the
	# script is deliberately aborted before this occurs. Logging the data
	# now ensures you can go see the data on your screen or the general log
	# file.
	UTF::Message INFO "" "$::UTF::trailer_info"

	UTF::WrapSummary $UTF::SummaryDir $TITLE "" $(email) {
	set ::UTF::Perfcache [file join $UTF::SummaryDir perfcache]

	# Add a web link to the test.log file
	UTF::Try "Link to test.log" {
		return "html: <a href=\"./test.log\">test.log</a>"
	}

	if {[info exists ::UTF::SetupTestBed]} {
	
		UTF::Try "Setup testbed" {
			eval $::UTF::SetupTestBed
		}
	}

	foreach Router $Routers {
	
		if {!$(noapload)} {
		
			UTF::Try "$Router: Find Router Image" {
			UTF::CheckImage $Router $date unknown
			}

			UTF::Try "$Router: Load Image" {
			if {[$Router hostis Router Vx BSDAP DSL Airport]} {
				UTF::Message LOG "" "*************************** $Router hostis Router Vx BSDAP DSL Airport *****************************"
				if {[catch {$Router lan ifconfig [$Router lan cget -ipaddr]}]} {
				UTF::Message LOG "" "*************************** $Router lan ifconfig *****************************"
				$Router lan ifconfig 192.168.1.50
				}
			}
			set ver [$Router load]
			set what [$Router whatami]
			# Pull out chip info and replace whitespace to make it
			# easier for external parsers.
			regsub -all {\s+} [lreplace $what 0 0] {_} w
			if {[catch {$UTF::Summary header_update 1 $w} ret]} {
				UTF::Message WARN $Router $ret
			}
			return "$what $ver"
			}
		}
		if {!$(norestore)} {
			UTF::Try "$Router: Restore Defaults" {
			if {[$Router hostis Router Vx BSDAP DSL Airport]} {
				UTF::Message LOG "" "*************************** $Router restore_defaults *****************************"
				$Router restore_defaults
			} else {
				UTF::Message LOG "" "*************************** $Router services stop *****************************"
				$Router services stop
				catch {$Router wl msglevel +error +assoc}
				if {![$Router cget -nomimo_bw_cap]} {
				catch {$Router wl down}
				# Enable 40 in 2.4, if available.
				$Router wl -u mimo_bw_cap 1
				$Router wl up
				UTF::Sleep 1
				}

				$Router chipname
			}
			}
		}
	}

	foreach STA $(sta) {
		if {[catch {main $(src_ap) $(dst_ap) $STA} ret]} {
		UTF::Try "main loop" {
			error $ret
		}
		}
	}

	PreservedReport
	}
}
