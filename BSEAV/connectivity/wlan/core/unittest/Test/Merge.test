#!/bin/env utf
# -*-tcl-*-

#
# Merge several test runs into one report
#
# Usage: Merge [-title title] [-email email] \
#    [list Test1 args1] [list Test2 args2] ...
#

package require UTF

UTF::Test Merge {args} {

#    # Custom option processing, since launch may put some options at
#    # the end.
#    array set {} {email "" title ""}
#    foreach opt [array names {}] {
#	if {[set i [lsearch $args -$opt]] >= 0} {
#	    set j [expr {$i + 1}]
#	    set ($opt) [lindex $args $j]
#	    set args [lreplace $args $i $j]
#	}
    #   }

    # Commandline may include
    # 1. Framework args - already parsed by framework
    # 2. Merge args, eg -title, -email may appear at beginning or end
    # 3. List of test commandlines
    # 4. Extra args to apply to all tests

    UTF::GetKnownopts {
	{title.arg "" "Test title"}
	{email.arg "" "Email address"}
    }
    set tests {}
    foreach C $args {
	if {[regexp {^-} $C]} {
	    break
	}
	lappend tests $C
	set args [lreplace $args 0 0]
    }
    UTF::GetKnownopts [subst {
	{title.arg "$(title)" "Test title"}
	{email.arg "$(email)" "Email address"}
    }]

    UTF::WrapSummary $UTF::SummaryDir "UTF $(title)" "" $(email) {

	# Scan test list and perform package requires early.
	foreach T $tests {
	    set Test [lindex $T 0]
	    set targs [lreplace $T 0 0]
	    lappend targs {*}$args

	    # Allow user to specify either the TCL name or the shell path for
	    # the test.
	    regsub {\.test} $Test {} Test
	    regsub -all {/} $Test {::} Test
	    if {![regexp :: $Test]} {
		set Test UTF::Test::$Test
	    } else {
		regsub {^Test::} $Test {UTF::Test::} Test
	    }

	    package require $Test
	    set T [lreplace $targs -1 -1 $Test]
	    UTF::Message INFO "" $T
	    lappend run $T
	}

	# Run all tests
	foreach r $run {
	    if {[catch $r]} {
		UTF::Message WARN "" $::errorInfo
	    }
	    $UTF::Summary header
	}
	PreservedReport
    }
}
