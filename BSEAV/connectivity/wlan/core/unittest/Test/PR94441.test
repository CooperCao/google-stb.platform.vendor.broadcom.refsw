#!/bin/env utf
# -*-tcl-*-

# Script for duplicating PR94441
# Appears that host loses interface or hangs on PM=1 tests
# 
# Assumes that STA and AP are loaded
#
# $Id$
# $Copyright Broadcom Corporation$


package require UTF
package require UTF::Test::ConnectAPSTA
package require UTF::Aeroflex


UTF::Test PR94441 {AP STA args} {
    UTF::Getopts {
	{count.arg 1 "Number of Loops to Try"}
	{attenuator.arg "" "Attenuator to Use"}
	{attenstart.arg 0 "Starting Attenuator Value to Use"}
	{email.arg "" "Email to Use"}
	}

    UTF::WrapSummary $UTF::SummaryDir "PR94441" "" "$(email)" {

        # Ensure Attenuation is set to attenstart
	UTF::Message LOG "" "Setting attenuator to $(attenstart)"
	if {[catch {ALL attn $(attenstart)} temp]} {
    	    UTF::Message WARN "" "Setting attenuator failed: $temp"
	}
        # Put the AP information on web page
        UTF::Try "Whatami AP $AP" {
            $AP whatami
        }
        UTF::Try "WlVer AP $AP" {
            $AP wl ver
        }
        # Put the STA information on web page
        UTF::Try "Whatami STA $STA" {
            $STA whatami
        }
        UTF::Try "WlVer STA $STA" {
            $STA wl ver
        }

        #set window size
        set w [$STA cget -tcpwindow]; # Default window size

        # Put STA message level for scan and assoc
        $STA wl msglevel +scan +assoc
        $STA wl down
        $STA wl up

	    # Loop here
        for {set i 1} {$i <= $(count)} {incr i} {
            UTF::Try "Try $i/$(count)" {

				# Put STA in PM1 mode
				catch {$STA wl PM 1}
				catch {$STA wl frameburst 0}
					
				# Connect AP and STA
	            catch {ConnectAPSTA $AP $STA -chanspec 36l -security open} connect
	
	            # dump rssi and status
	            catch {$STA wl rssi} rssi
	            catch {$STA wl status} status
	
	            # clear ampdu on router, also place for developer needed stats
	            catch {$STA wl ampdu_clear_dump}
	
	            # Devloper required stats
	            catch {$AP wl nrate}
	            catch {$STA wl nrate}
	            
	            # Do traffic and see what happens from STA to Lan
	            catch {UTF::Multiperf [list $STA [$AP lan]] -i 2 -w 512k} ret
	
	            #Dump ampdu after tests on STA, also place for developer needed stats
	            catch {$STA wl dump ampdu}
	
	            # clear ampdu on router, also place for developer needed stats
	            catch {$STA wl ampdu_clear_dump}
	
	            # Do traffic and see what happens from STA to Lan (downstream)
	            catch {UTF::Multiperf [list [$AP lan] $STA] -i 2 -w 512k} ret1                
	            
	            #Dump ampdu after tests on STA, also place for developer needed stats
	            catch {$STA wl dump ampdu}

		        # Do traffic and see what happens from BIDIRECT for 10 Min
	            #catch {UTF::Multiperf [list [$AP lan] $STA $STA [$AP lan]] -i 2 -t 600 -w 512k} ret2                

	            #Dump ampdu after tests on STA, also place for developer needed stats
	            #catch {$STA wl dump ampdu}

	            # break of if TP = 0 or Ping Failed
                if { $ret == 0 || $ret == "ping failed" || $ret1 == 0 || $ret1 == "ping failed" } {
                    set i $(count)
                    UTF::Message Info "" "Rate is: $ret,$ret1, RSSI is $rssi"
                    error "STA TX TP = $ret , STA RX TP = $ret1, RSSI = $rssi"
                }

                # Disassoc
	            catch {$STA wl disassoc}
	
	            # wl down
	            catch {$STA wl down}
	
	            # return the value of the performance test and rssi
	            set ret "html: PM=1, TP STA TX: $ret, TP STA RX $ret1, RSSI : $rssi"
	            
		        return $ret
	    	}
		}
	}
}
