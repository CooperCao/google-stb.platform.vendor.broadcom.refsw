# UTF test script for RTT.
# $Id$
# $Copyright Broadcom Corporation$
#

package require UTF
package require UTF::Test::ConnectAPSTA
package require UTF::Test::APChanspec
package require UTF::Test::APConfigureSecurity
package require UTF::Test::controlchart

package provide UTF::Test::RTT 2.0


UTF::Test RTT {REF1 REF2 DUT args} {
    UTF::Getopts {
	{chan1.arg "" "Primary chanspec <auto>"}
	{chan2.arg "161 11" "Secondary chanspecs"}
	{sec1.arg "open" "Primary Security"}
	{core2.arg "" "Core to attach secondary interface"}
	{i.arg 1 "Interval"}
	{s.arg 5 "Samples"}
	{sec2.arg "open" "Secondary Security"}
	{nosta "Skip STA mode tests"}
	{nocache "Don't update performance cache"}
	{reassocwar "Reassoc STA interface after creating AP interface"}
    {history.parg 30 "History size for control charts"}
	{loop.arg "" "Deprecated"}
	{perfcache.parg "" "Performance Cache"}
	{perfloop.parg 1 "Perf loops"}
	{history.parg 30 "History"}
	{key.arg "" "Key"}
	{macaddr.arg "" "mac addr"}
	}
	
	if {$(loop) ne  ""} {
	set (perfloop) $(loop)
    }
    if {$(nocache)} {
	set ::UTF::ControlChart::readonly 1
    }

    set branch [$DUT branchname]
    set key [concat $branch RTT $(key)]
    set skey [concat $branch STASTA $(key)]
	
	

    UTF::Try "$DUT Primary STA" {
	set rsdbmode [$DUT wl -u rsdb_mode]
	set csta [lindex [$DUT wl chanspec] 0]
	}
	    if {[info exists csta]} {
	    foreach c $(chan2) {
	    if {[regexp {rsdb} $rsdbmode] &&
		(![regexp {auto} $rsdbmode] ||
		 [$DUT band $c] ne [$DUT band $csta])} {
		set target $c
		set msg "$target"
	    } else {
		set target $csta
		set msg "$c->$target"
	    }
		UTF::Try "$DUT RTT $msg" {
		$DUT wl chanspec 161/80
		set STA2 [$DUT wl_interface_create ap #2 {*}$(core2) -m $(macaddr)]
		$STA2 wl chanspec $c
		$STA2 wl ssid [UTF::NewSSID]
		$STA2 wl status
		UTF::Sleep 1
		$STA2 wl proxd ftm enable
		UTF::Sleep 5
		set c [lindex [$STA2 wl chanspec] 0]
		# proxd settings
		$REF2 wl up
		UTF::Sleep 1
		$REF2 wl ap
		$REF2 wl proxd ftm enable
		$REF2 wl proxd ftm 1 config options +initiator
		$REF2 wl proxd ftm 1 config chanspec $c
		$REF2 wl proxd ftm 1 config peer $(macaddr)
		$REF2 wl proxd ftm 1 start
		UTF::Sleep 1
		$REF2 wl proxd ftm 1 result
		UTF::Sleep 1
		$REF2 wl proxd ftm 1 delete
		} finally {
		catch {
		    $REF2 wl disassoc
		    # Must give disassoc time to work before removing the
		    # interface.
		    UTF::Sleep 2
		}
		# Removing virtual interface
		$STA2 wl interface_remove
	    }
	}
	catch {$DUT wl msglevel -apsta}
	}
}
		
		
	
	
	
	


	
