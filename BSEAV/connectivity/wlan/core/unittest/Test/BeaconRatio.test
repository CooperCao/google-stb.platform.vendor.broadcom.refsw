#!/bin/env utf
# -*-tcl-*-

# UTF test script for checking beacon receive ratios
# $Id$
# $Copyright Broadcom Corporation$
#

package require UTF
package require UTF::ControlChart

package provide UTF::Test::BeaconRatio 2.0

UTF::Test BeaconRatio {AP STA args} {
    UTF::Getopts [subst {
	{s.arg 5 "Number of samples"}
	{t.arg 2 "Wait time in seconds"}
	{PM.arg 1 "PM mode"}
	{key.arg "" "Controlchart key"}
	{png.arg 1 "Use png file"}
	{perfloop.parg 1 "Perf loops"}
	{perfcache.parg "" "Performance Cache"}
	{history.parg 30 "Performance History"}
	{nocache "Don't update performance cache"}
	{prpkt "Log packets"}
	{branch.arg "[$STA branchname]" "Branch"}
    }]

    if {$(nocache)} {
	set ::UTF::ControlChart::readonly 1
    }

    # Fail criteria
    set FAILMATCH "HIGH|LOW|WIDE|ZERO"

    set key [concat $(branch) BeaconRatio PM=$(PM) $(key) $STA $AP]

    if {[catch {$STA ping $AP -c 1}]} {
	package require UTF::Test::ConnectAPSTA
	ConnectAPSTA $AP $STA -security open
    }

    if {[$STA cget -apmode]} {
	# Switch ends
	set s $STA
	set STA $AP
	set AP $s
	unset s
    }

    set oldPM [$STA wl -u PM]
    if {[regexp {Unsupported} $oldPM]} {
	# minioctl can set, but not get PM
	set oldPM 0
    }

    set msgactions [$STA cget -msgactions]

    try {
	$STA wl PM $(PM)
	# Beacons per msec, based on router beacon interval
	set bpms [expr {(1000.0 / (1024 * [$AP wl bi]))}]
	set dtim [$STA wl dtim]
	set oldkey $key
	lappend key $dtim
	UTF::ControlChart CC -s $(s) -oldkey $oldkey -key $key \
	    -perfcache $(perfcache) -history $(history) \
	    -title "PM $(PM) Beacon Ratio" \
	    -ylabel "Beacon Ratio" -units % \
	    -overridehistoricalmean [expr {100.0/$dtim}]

	# Make sure device is idle before sampling
	$STA idlewait $AP -warn

	$STA configure -msgactions [linsert $msgactions 1 {unaligned TBTT} WARN]
	if {$(prpkt)} {
	    $STA wl msglevel +prpkt
	}
	for {set i 0} {$i < $(perfloop)} {incr i} {
	    set before [$STA wl_counter rxbeaconmbss]
	    set start [clock clicks -milliseconds]
	    set samples {}

	    for {set s 0} {$s < $(s)} {incr s} {
		UTF::Sleep $(t)
		set after [$STA wl_counter rxbeaconmbss]
		set end [clock clicks -milliseconds]
		set bcns [expr {$after - $before}]
		set int [expr {($end - $start)}]
		set expected [expr {$int * $bpms}]
		set percent [expr {100 * $bcns / $expected}]
		UTF::Message LOG [$STA cget -name] \
		    [format {%dms: bcns: %d/%.1f (%.2f%%)} \
			 $int $bcns $expected $percent]
		lappend samples $percent
		set before $after
		set start $end
	    }
	    set ret [CC addsample [UTF::MeanMinMax $samples]]
	}
	if {$(prpkt)} {
	    $STA wl msglevel -prpkt
	}

	if {[regexp $FAILMATCH $ret]} {
	    UTF::Message FAIL "" $ret
	    set code 1
	} else {
	    UTF::Message PASS "" $ret
	    set code 0
	}

	if {![string is false $(png)]} {
	    set ret [CC plotcontrolchart $ret]
	}

	if {$code} {
	    throw FAIL $ret
	} else {
	    return $ret
	}
    } finally {
	$STA configure -msgactions $msgactions
	$STA wl PM $oldPM
    }
}
