#!/bin/env utf
# -*-tcl-*-
#

#
# UTF test script to demo streams events
#
# Written by: Robert J. McMahon January 2012
#
# $Copyright Broadcom Corporation$
#
package require UTF
package require UTF::Streams
package require UTF::ControlChart

#
#  Streams callback into test context
#
namespace eval UTF::Test {
    variable signal
    proc signal_test {args} {
	if {[lindex $args 0] eq "rx"} {
	    set ::UTF::Test::signal 1
	} else {
	    eval [concat [lindex $args 1] configure -trigger_armed 1]
	}
    }
}

UTF::Test DataRateDemo {args} {
    UTF::Getopts {
	{ap.arg "" "AP under test"}
	{sta.arg "" "STA under test"}
	{mrates.arg "15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0" ""}
	{key.arg "" ""}
	{perfcache.arg "" "Performance Cache"}
	{history.arg 30 "Performance History"}
	{s.arg 2 "Samples"}
    }
    set stream [UTF::stream %AUTO% -transmitsta $(sta) -receivesta [$(ap) cget -lanpeer] -pktsize 1460 -rate 800M -clearsynch 1 -trigger_callback "UTF::Test::signal_test" -udprx_winpktcnt 100]
    UTF::Try "Upstream" {
	$stream start
	foreach r $(mrates) {
	    UTF::Try "Rate=$r" {
		$(sta) wl nrate -m $r
		# Ignore the iperf sample immediately following
		# the nrate command.
		set ::UTF::Test::signal 0
		$stream configure -trigger_armed 1
		vwait ::UTF::Test::signal
		set rates [$stream stats -rate]
		#
		# In the case of a null samples transition
		# iperf can spew out a batch of zero values and
		# the first non zero value is inaccurate.
		# Filter these
		#
		if {[lindex $rates end] eq "-0"} {
		    $stream samplers -disable
		    UTF::Sleep [$stream cget -reportinterval]
		    $stream samplers -enable
		}
		#
		# Now read the next s samples but don't
		# clear the stats so the final
		# stream graph can the to plot the
		# continuous run from start to finish
		#
		set startcount [llength $rates]
		UTF::ControlChart CC -s $(s) -key [concat $(key) $(ap) $(sta) $r demo debug] -perfcache $(perfcache) -history $(history) -allowzero 1
		while {1} {
		    set thruput [$stream stats -rate]
		    if {[expr {[llength $thruput] - $startcount}] >= $(s)} {
			break
		    }
		    set ::UTF::Test::signal 0
		    $stream configure -trigger_armed 1
		    vwait ::UTF::Test::signal
		}
		set use [lrange $thruput end-[expr {$(s) - 1}] end]
		UTF::Message STATS "" "Samples used: $use"
		set values [UTF::MeanMinMax $use]
		#
		# Divide by 1M to get units into Mbs
		#
		set tmp {}
	        foreach value $values {
		    lappend tmp [expr {$value / 1000000}]
		}
		set mcsplot($r) [lindex $tmp 0]
 		set boundsresults [CC addsample $tmp]
		return [CC plotcontrolchart $boundsresults]
	    }
	}
	return "[UTF::Streamslib::grapharray mcsplot -title "Thruput vs MCS" -htmltxt "mcs"] [string range [[UTF::streamgraph %AUTO% -stat rate] plot] 5 end]"
    }
    UTF::stream exitstreams
}

