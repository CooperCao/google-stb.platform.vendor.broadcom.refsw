#!/bin/env utf
# -*-tcl-*-

#
# UTF test script for nightly run
# $Id$
# $Copyright Broadcom Corporation$
#

package require UTF
package require UTF::Test::ConnectAPSTA
package require UTF::Test::APChanspec
package require UTF::Test::APConfigureSecurity
package require UTF::Test::PingTimes
package require UTF::Test::DataRatePlot
package require UTF::Test::Fragmentation
package require UTF::Test::RTS
package require UTF::Test::Scan
package require UTF::Test::controlchart
package require UTF::Test::memchart
package require UTF::Test::ChannelSweep
package require UTF::Test::BigHammer
package require UTF::Test::IBSS
package require UTF::Test::Join
package require UTF::Test::TDLS
package require UTF::Test::CalStability
package require UTF::Test::rssinoise
package require UTF::Test::BeaconRatio
package require UTF::Test::Interrupts
package require UTF::Test::CPU
package require UTF::Test::chanswitch
package require UTF::Test::KPPSSweep

package provide UTF::Test::StaNightly 2.0

namespace eval UTF::Test::StaNightly {

    proc pmperf {BUILD AP STA MSG args} {
	upvar {} testopts
	UTF::Getopts [subst {
	    {PM.arg "$testopts(PM)" "Power Management"}
	    {fb.arg "" "Frameburst"}
	    {ch.arg "" "Chanspec"}
	    {security.arg "open" "security"}
	    {b.arg "0" "UDP"}
	    {kpps "" "Small packet PPS test"}
	    {ibss "Use IBSS instead of STA mode"}
	}]

	# test interval
	set i 2

	if {[$STA cget -apmode]} {
	    set APROLE $STA
	    set STAROLE $AP
	} else {
	    set APROLE $AP
	    set STAROLE $STA
	}

	if {$(fb) eq ""} {
	    # Frameburst default depends on OS
	    if {![$STA cget -noframeburst] &&
		([$STA hostis MacOS] || [$STA cget -perfonly] ||
		 [info exists UTF::FBDefault])} {
		set (fb) 1
		set fbmigrate 1
	    } else {
		set (fb) 0
	    }
	} else {
	    # canonicalize
	    set (fb) [string is true $(fb)]
	}

	if {$(ch) ne ""} {
	    append MSG ": $(ch)"
	}
	if {$(ibss)} {
	    append MSG ": IBSS"
	}
	if {$(fb)} {
	    append MSG ": FB"
	}
	if {$(PM)} {
	    append MSG ": PM=$(PM)"
	}
	if {$(security) ne "open"} {
	    append MSG ": $(security)"
	}
	if {$(kpps)} {
	    append MSG ": KPPS"
	} elseif {$(b) ne "0"} {
	    append MSG ": UDP"
	}

	set setup 0
	UTF::Try "$MSG: WLAN<-LAN" {
	    # Put STAs into PM mode before association, to make sure
	    # we can associate in PM mode.
	    if {![$STA cget -apmode]} {
		if {[catch {$STA wl PM $(PM)} ret] &&
		    ([regexp {killed} $ret] ||
		     ($(PM) && ![regexp {Not STA} $ret]))} {
		    error $ret
		}
	    }
	    if {[$STA wl frameburst] ne $(fb)} {
		$STA wl frameburst $(fb)
		if {[$STA wl frameburst] ne $(fb)} {
		    if {$(fb)} {
			error "failed to enable frameburst"
		    } else {
			error "failed to disable frameburst"
		    }
		}
	    }
	    if {$(ibss)} {
		if {$(ch) ne ""} {
		    APChanspec $AP $(ch) -loose -nobandlock
		    APChanspec $STA $(ch) -loose -nobandlock
		}
		Join $AP $STA -imode ibss
	    } else {
		if {$(ch) ne ""} {
		    APChanspec $APROLE $(ch)
		}
		if {$(security) ne [$AP cget -security]} {
		    ConnectAPSTA $AP $STA -security $(security)
		} elseif {[catch {$STAROLE wl bssid} ret] || \
			      $ret eq "00:00:00:00:00:00"} {
		    ConnectAPSTA $AP $STA
		}
	    }

	    # Set frameburst after any AP restarts
	    $AP wl -u frameburst $(fb)

	    # If we're in SoftAP mode, set PM on the router.  Do this
	    # after assoc, since WET assoc may restart the router.
	    if {[$STA cget -apmode]} {
		$AP wl PM $(PM)
	    }

	    set k [concat $BUILD $AP $(PM)]
	    if {$(ch) ne ""} {
		lappend k "ch=$(ch)"
	    }
	    if {$(ibss)} {
		lappend k "ibss"
	    }
	    if {$(fb)} {
		lappend k "fb=$(fb)"
	    }
	    if {$(kpps)} {
		lappend k "kpps"
	    }

	    if {[regexp {wep|shared|tkip} $(security)]} {
		# Deprecated security modes use legacy rates, even if
		# the rateset offers more.
		set w 0
	    } else {
		# Auto TCP window size setting based on phy rate
		set w [$STA tcpautowindow]
	    }

	    if {$(security) ne "open"} {
		lappend k "$(security)"
	    }
	    if {$(kpps)} {
		lappend k 128
	    } elseif {$(b) ne "0"} {
		lappend k "udp"
	    }

	    set ccopts [list -key $k -i $i -b $(b) -window $w \
			    -loop $testopts(perfloop) \
			    -history $testopts(history)]

	    if {[info exists fbmigrate]} {
		regsub { fb=1} $k {} oldk
		lappend ccopts -oldkey $oldk
	    }

	    if {$(PM) eq "1"} {
		# In powersave, a HIGH throughput may indicate a real
		# problem
		lappend ccopts -failonhigh
	    }
	    if {$(kpps)} {
		lappend ccopts -kpps -l 128
	    }
	    set setup 1
	    controlchart [list $AP $STA] {*}$ccopts
	}
	if {$setup} {
	    if {!$testopts(symmetric)} {
		UTF::Try "$MSG: WLAN->LAN" {
		    controlchart [list $STA $AP] {*}$ccopts
		}
	    }
	    if {!$testopts(nobx)} {
		UTF::Try "$MSG: WLAN<>LAN" {
		    controlchart [list $STA $AP $AP $STA] {*}$ccopts
		}
	    }
	}
    }

    proc scan {AP STA MSG} {
	UTF::Try "$MSG: Scan Tests" {
	    UTF::Try "$MSG: Broadcast Scan" {
		Scan $AP $STA -cache C -chanspec {3 36}
	    }
	    UTF::Try "$MSG: Scan directed to SSID" {
		Scan $AP $STA -ssid -cache C
	    }
	    UTF::Try "$MSG: Scan directed to BSSID" {
		Scan $AP $STA -bssid -cache C
	    }
	    UTF::Try "$MSG: Scan directed to SSID and BSSID" {
		Scan $AP $STA -ssid -bssid -cache C
	    }
	    UTF::Try "$MSG: Passive Scan" {
		Scan $AP $STA -passive -cache C
	    }
	    array unset C
	    return
	}
    }


    proc main {APS STA} {
	# access option array
	upvar {} upopts
	upvar date date

	# Copy option array and apply per-device overrides
	array set {} [array get upopts]
	if {[$STA cget -nochannels]} {
	    set (nochan) 1
	}
	if {[$STA cget -noframeburst]} {
	    set (noframeburst) 1
	}
	if {[$STA cget -nopm1]} {
	    set (nopm1) 1
	    set (nobeaconratio) 1
	    set (nointerrupts) 1
	}
	if {[$STA cget -nopm2]} {
	    set (nopm2) 1
	}
	set (PM) [$STA cget -pm]

	if {[$STA cget -noaes]} {
	    set (noaes) 1
	}
	if {[$STA cget -notkip]} {
	    set (notkip) 1
	}
	if {[$STA cget -nowep]} {
	    set (nowep) 1
	}
	if {[$STA cget -nobighammer]} {
	    set (nobighammer) 1
	}
	if {![$STA cget -docpu]} {
	    set (nocpu) 1
	}
	if {[$STA cget -nointerrupts]} {
	    set (nointerrupts) 1
	}

	if {[$STA cget -noibss]} {
	    set (noibss) 1
	}
	if {[$STA cget -nofragmentation]} {
	    set (nofrag) 1
	}
	if {[$STA cget -nocustom]} {
	    set (nocustom) 1
	}
	if {[$STA cget -nocal]} {
	    set (nocal) 1
	}
	if {[$STA cget -udp] eq "0"} {
	    set (noudp) 1
	    set (nokpps) 1
	}
	if {[$STA cget -nobx]} {
	    set (nobx) 1
	}
	if {[$STA cget -nokpps]} {
	    set (nokpps) 1
	}
	if {[$STA cget -perfonly]} {
	    if {!$(rateonly)} {
		set (norate) 1
	    }
	    if {!$(rvronly)} {
		set (norvr) 1
	    }
	    if {!$(chanonly)} {
		set (nochan) 1
	    }
	    set (nochanswitch) 1
	    set (notkip) 1
	    set (nowep) 1
	    set (noshared) 1
	    if {!$(pmonly)} {
		set (nopm1) 1
		set (nopm2) 1
	    }
	    if {!$(bighammeronly)} {
		set (nobighammer) 1
	    }
	    set (nobeaconratio) 1
	    set (norts) 1
	    set (nopingtimes) 1
	    if {!$(fragonly)} {
		set (nofrag) 1
	    }
	    set (nointerrupts) 1
	    if {!$(calonly)} {
		set (nocal) 1
	    }
	    if {!$(scanonly)} {
		set (noscan) 1
	    }
	    if {!$(ibssonly)} {
		set (noibss) 1
	    }
	    if {!$(noframeburst)} {
		set (nofb0) 1
	    }
	}

	set phyname ""

	if {$(branch) eq "auto"} {
	    set branch [$STA branchname]
	} else {
	    set branch $(branch)
	}

	# Find images
	if {!$(nostaload)} {
	    UTF::Try "$STA Find STA Image" {
		# Check primary image and start report header
		UTF::CheckImage $STA $date unknown
	    }
	}
	if {!$(nosetup)} {
	    if {$(nostaload)} {
		if {!$(nostareload)} {
		    UTF::Try "$STA reload" {
			$STA reload
		    }
		}
	    } else {
		UTF::Try "$STA load" {
		    $STA load
		}
		# Check secondary driver and update report header
		UTF::ReportDriver $STA $date
	    }
	    UTF::Try "$STA defaults" {

		$STA services stop
		# regulatory disabled as temporary WAR for EAGLE perf issues
		catch {$STA wl msglevel +error +assoc -regulatory}
		if {![$STA cget -nomimo_bw_cap]} {
		    catch {$STA wl down}
		    # Enable 40 in 2.4, if available.
		    if {[catch {$STA wl bw_cap 2 -1}]} {
			$STA wl -u mimo_bw_cap 1
		    }
		    $STA wl up
		    UTF::Sleep 1
		} else {
		    $STA wl up
		}
		$STA wl ver
		# Collect HW info and update report header + DB
		UTF::ReportWhatami $STA -role DUT -noload $(nostaload)
	    }

	    catch {
		# Pre reclaim checks
		foreach {s p} [$STA pre_reclaim] {
		    UTF::Try "$STA: pre_reclaim $s" {
			memchart [expr {$p / 1024.0}] -failonlow \
			    -key [list $branch $STA pre_reclaim $s] \
			    -history $(history) -units kb \
			    -title "Pre-Reclaim $s"
		    }
		}
	    }

	    if {![$STA cget -nomaxmem] && [$STA rte_available]} {
		UTF::Try "$STA: Load Free(K)" {
		    memchart [$STA freekb] -failonlow \
			-key [list $branch $STA loadfree] \
			-history $(history) -units kb -title "Load Free"
		}
	    }
	}

	if {[set perfchans $(chanspec)] eq "" &&
	    [set perfchans [$STA cget -perfchans]] eq ""} {
	    UTF::Try "$STA: Channel Selection" {
		set perfchans [UTF::PerfChans $APS $STA]
	    }
	}

	set AP2G [lindex $APS 0]
	set AP5G [lindex $APS end]

	# Find first and last channels, in case we have to wipe out
	# perfchans later
	set initchan [lindex $perfchans 0]
	set mainchan [lindex $perfchans end]

	# If performance tests are disabled, clean the performance
	# channel list, but leave the calibration channel list.
	set calchans $perfchans
	if {$(noperf)} {
	    set perfchans ""
	} else {
	    # Filter perfchans based on commandline options
	    if {$(noperf160) || $(perf80only) || $(perf40only) || $(perf20only)} {
		set perfchans \
		    [lsearch -inline -all -not -regexp $perfchans {/160$}]
	    }
	    if {$(perf160only) || $(noperf80) || $(perf40only) || $(perf20only)} {
		set perfchans \
		    [lsearch -inline -all -not -regexp $perfchans {/80$}]
	    }
	    if {$(perf160only) || $(perf80only) || $(noperf40) || $(perf20only)} {
		set perfchans \
		    [lsearch -inline -all -not -regexp $perfchans {[ul]$}]
	    }
	    if {$(perf160only) || $(perf80only) || $(perf40only) || $(noperf20)} {
		set perfchans \
		    [lsearch -inline -all -not -regexp $perfchans {^\d+$}]
	    }
	}

	if {[$AP2G band $initchan] eq "b"} {
	    set Router $AP2G
	} else {
	    set Router $AP5G
	}

	if {[$STA cget -apmode] && ![$Router hostis Router Vx BSDAP DSL Airport]} {
	    # If "STA" is in apmode, and "Router" is a SoftAP then
	    # make sure "Router" is un-bandlocked
	    UTF::Try "$Router: Home Channel auto" {
		$Router wl band auto
	    }
	}

	if {![$STA cget -nomaxmem] && [$STA rte_available]} {
	    UTF::Try "$STA: Assoc Free(K)" {
		ConnectAPSTA $Router $STA -chanspec $initchan -security open
		memchart [$STA freekb] -failonlow \
		    -key [list $branch $STA assocfree] \
		    -history $(history) -units kb -title "Assoc Free"
	    }
	} elseif {![$STA cget -apmode]} {
	    UTF::Try "$Router: Home Channel $initchan" {
		APChanspec $Router $initchan
		return
	    }
	}

	for {set i 0} {$i < $(loop)} {incr i} {
	    if {![$STA cget -apmode]} {
		UTF::Try "$Router: Open Security" {
		    APConfigureSecurity $AP2G -security open
		    APConfigureSecurity $AP5G -security open
		}
	    } else {
		UTF::Try "$STA: Open Security" {
		    APConfigureSecurity $STA -security open
		}
		if {[$Router cget -hasdhcpd]} {
		    UTF::Try "$Router: Restart DHCP" {
			$Router ifconfig [$Router cget -ipaddr]
			$Router rexec service dhcpd restart
			return
		    }
		}
	    }
	    # Scan all channels
	    if {!$(nochan)} {
		set csargs [list -dut $STA \
				-loop $(perfloop) -history $(history) \
				-symmetric $(symmetric)]
		if {$AP5G eq $AP2G} {
		    if {[catch {
			ChannelSweep $AP2G $STA {*}$csargs
		    } ret]} {
			set e $::errorInfo
			UTF::Try "$STA: Channel Sweep" {
			    error $ret $e
			} finally {
			    # Check for crashes
			    $STA :
			}
		    }
		} else {
		    if {[catch {
			ChannelSweep $AP2G $STA {*}$csargs -band b
		    } ret]} {
			set e $::errorInfo
			UTF::Try "$STA: Channel Sweep" {
			    error $ret $e
			}
		    }
		    if {[catch {
			ChannelSweep $AP5G $STA {*}$csargs -band a
		    } ret]} {
			set e $::errorInfo
			UTF::Try "$STA: Channel Sweep" {
			    error $ret $e
			}
		    }
		}
	    }
	    if {!$(nochanswitch)} {
		catch {
		    chanswitch $STA
		}
	    }
	    set donepps 0
	    # Loop through channels to be tested.
	    foreach c $perfchans {
		UTF::Try "$STA: Channel $c" {
		    if {![$STA cget -apmode]} {
			# Reset PM.
			if {$(PM) eq 0} {
			    if {[catch {$STA wl PM 3} ret] &&
				[regexp {Undefined error} $ret]} {
				catch {$STA wl PM 0}
			    }
			} else {
			    $STA wl PM $(PM)
			}
			catch {$STA wl disassoc}; # WAR for RSDBBNDLCK
		    }
		    if {[$AP2G band $c] eq "b"} {
			set Router $AP2G
		    } else {
			set Router $AP5G
		    }
		    ConnectAPSTA $Router $STA -chanspec $c -security open
		    rssinoise $Router $STA
		}
		if {!$(norate)} {
		    DataRatePlot $Router $STA -chanspec $c \
			-loop $(perfloop) -history $(history) \
			-symmetric $(symmetric)
		}
		if {!$(norvr)} {
		    if {[catch {
			package require UTF::Test::YART
			YART $Router $STA -chanspec $c
		    } ret]} {
			UTF::Message WARN "" $ret
		    }
		}

		# If the STA doesn't do frameburst then test UDP without
		if {[$STA cget -noframeburst]} {
		    set fb 0
		} else {
		    set fb 1
		}
		if {$fb ? !$(noframeburst) : !$(nofb0)} {
		    if {!$(noudp)} {
			pmperf $branch $Router $STA $STA \
			    -fb $fb -ch $c -b [$STA cget -udp]
		    }
		    if {!$(nokpps) && !$donepps} {
			set donepps 1
			pmperf $branch $Router $STA $STA \
			    -fb $fb -ch $c -b [$STA cget -udp] -kpps
			KPPSSweep $Router $STA -chanspec $c
		    }
		}
		if {!$(noframeburst) && !$(noopen)} {
		    pmperf $branch $Router $STA $STA -fb 1 -ch $c
		}
		if {!$(nopm2)} {
		    pmperf $branch $Router $STA $STA -PM 2 -ch $c
		}
		if {!$(nopm1)} {
		    pmperf $branch $Router $STA $STA -PM 1 -ch $c
		}
		if {!$(noaes)} {
		    pmperf $branch $Router $STA $STA -security aespsk2 \
			-ch $c
		}
		# HT is disabled in TKIP and WEP, so no point testing
		# them in 40MHz or 80MHz - unless this is the only
		# channel tested.
		if {[llength $perfchans] == 1 ||
		    (![regexp {[lu]} $c] &&
		     ![regexp {/80} $c] &&
		     ![regexp {/160} $c])} {
		    if {!$(notkip)} {
			pmperf $branch $Router $STA $STA -security tkippsk \
			    -ch $c
		    }
		    if {!$(nowep)} {
			# use limited wep on some devices.
			if {[$STA cget -usewep64]} {
			    set wep wep64
			} else {
			    set wep wep
			}
			pmperf $branch $Router $STA $STA -security $wep \
			    -ch $c
		    }
		}
		if {!$(nofb0) && !$(noopen)} {
		    pmperf $branch $Router $STA $STA -fb 0 -PM 0 \
			-security open -ch $c
		}
		if {!$(noibss) && ![$STA cget -apmode] &&
		    ![$Router hostis Router Vx DSL BSDAP STBAP]} {
		    if {![catch {$STA wl chan_info $c} ret] &&
			[regexp "Restricted" $ret]} {
			UTF::Message INFO $STA \
			    "Skipping IBSS test on restricted channel $c"
		    } else {
			if {!$(noudp)} {
			    pmperf $branch $Router $STA $STA \
				-fb $fb -ch $c -b [$STA cget -udp] -ibss
			}
			pmperf $branch $Router $STA $STA -ch $c -ibss
		    }
		}
		if {!$(nobighammer)} {
		    BigHammer $Router $STA -msg "BigHammer on $c"
		}
	    }
	    if {[llength $perfchans]} {
		# If we did some perf tests, check memory on STA.  If
		# we're using a Dongle SoftAP, check memory on the AP
		# too.
		foreach S [list $STA $Router] {
		    if {![$S cget -nomaxmem] && [$S rte_available]} {
			UTF::Try "$S: MaxMem in use" {
			    memchart [expr {[$S maxmem] / 1024.0}] \
				-key [list $branch $S maxkb] \
				-oldkey [list $branch $S maxmem] \
				-history $(history) -units kb -konvert
			}
		    }
		}
	    }

	    if {!$(nocpu)} {
		CPU $Router $STA -dut $STA
	    }

	    # Reset home channel and PM.
	    UTF::Try "$STA: Home Channel $mainchan" {
		if {[$STA cget -apmode]} {
		    APChanspec $STA $mainchan
		    APConfigureSecurity $STA -security open
		} else {
		    if {[$AP2G band $mainchan] eq "b"} {
			set Router $AP2G
		    } else {
			set Router $AP5G
		    }
		    APChanspec $Router $mainchan
		    APConfigureSecurity $Router -security open
		    catch {$STA wl PM $(PM)}
		    return
		}
	    }

	    if {!$(noscan)} {
		if {![$STA cget -apmode]} {
		    scan [list $AP2G $AP5G $(ap2)] $STA $STA
		} else {
		    # AP and STA are reversed
		    scan $STA $Router $STA
		}
	    }
	    if {!$(noshared) &&
		![$STA cget -nowep] && ![$STA cget -nosharedwep]} {
		# use limited wep on some devices.
		if {[$STA cget -usewep64]} {
		    UTF::Try "$STA: SHARED64 association" {
			ConnectAPSTA $Router $STA -security shared64
		    } finally {
			catch {$STA wl disassoc}
		    }
		} else {
		    UTF::Try "$STA: SHARED association" {
			ConnectAPSTA $Router $STA -security shared
		    } finally {
			catch {$STA wl disassoc}
		    }
		}
	    }
	    if {!$(nobtests)} {
		if {[$STA cget -apmode]} {
		    UTF::Try "$STA: Configure open security" {
			APConfigureSecurity $STA -security open
		    }
		} else {
		    UTF::Try "$Router: Configure open security" {
			APConfigureSecurity $Router -security open
		    }
		}
	    }

	    if {!$(nobeaconratio) && !$(nopm1)} {
		UTF::Try "$STA: Beacon Ratio PM=1" {
		    BeaconRatio $Router $STA -PM 1 -history $(history)
		}
	    }

	    if {!$(nopingtimes)} {
		# Check ping times
		PingTimes $Router $STA -history $(history) \
		    -nopm1 $(nopm1) -nopm2 $(nopm2)
	    }

	    if {!$(nointerrupts) && !$(nopm1)} {
		Interrupts $Router $STA -history $(history)
	    }

	    if {!$(norts)} {
		UTF::Try "$STA: RTS" {
		    RTS $Router $STA
		}
	    }

	    if {!$(nofrag)} {
		UTF::Try "$STA: Fragmentation" {
		    Fragmentation $Router $STA -dut $STA
		}
	    }

	    catch {$STA wl disassoc}; # WAR for RSDBBNDLCK

	    if {!$(nocustom)} {
		eval $::UTF::StaNightlyCustom
	    }

	}
	if {[$STA cget -apmode]} {
	    # For reverse tests, disassoc AP to avoid lots of roaming
	    # messages when STA goes away.
	    catch {$Router wl disassoc}
	}

	if {$(noibss)} {
	    set ibsswith ""
	} else {
	    set ibsswith [lindex [$STA cget -ibsswith] 0]
	}
	if {$(notdls)} {
	    set tdlswith ""
	} else {
	    set tdlswith [$STA cget -tdlswith]
	}

	if {$ibsswith ne ""} {
	    UTF::Try "$ibsswith: reload" {
		$ibsswith reload
	    }
	    IBSS $STA {*}[$STA cget -ibsswith]
	    if {!$(nounload) && $ibsswith ne $tdlswith} {
		UTF::Try "$ibsswith: unload" {
		    $ibsswith unload
		}
	    }
	    if {$ibsswith ne $tdlswith} {
		catch {$ibsswith deinit}
	    }
	}
	if {$tdlswith ne ""} {
	    if {$ibsswith ne $tdlswith} {
		UTF::Try "$tdlswith: reload" {
		    $tdlswith reload
		}
	    }
	    if {[catch {UTF::PerfChans $Router $STA $tdlswith} ret]} {
		UTF::Message WARN $STA $ret
		set comchan ""
	    } else {
		set comchan [lindex $ret 0]
		TDLS $Router $STA $tdlswith -chanspec $comchan
	    }
	    if {!$(nounload)} {
		UTF::Try "$tdlswith: unload" {
		    $tdlswith unload
		}
	    }
	    catch {$tdslwith deinit}
	}
	if {!$(nodual) && [set DB [$STA cget -dualband]] ne ""} {
	    package require UTF::Test::DualBand
	    # First word of DB is supporting AP, which will need to be
	    # loaded unless it's already defined as -ap2.  Remainder
	    # is any additional args
	    set Router2 [lindex $DB 0]
	    set STA2 [lindex $DB 1]
	    set DB [lreplace $DB 0 1]
	    if {$Router2 ne $(ap2)} {
		UTF::Try "$Router2 load" {
		    $Router2 load
		}
	    }
	    DualBand $STA $STA2 $Router $Router2 -stamode {*}$DB \
		-loop $(perfloop) -history $(history)
	    if {[$STA cget -udp] > 0 || [lsearch $DB -b1] > -1} {
		# If main DualBand was UDP, add TCP
		DualBand $STA $STA2 $Router $Router2 -stamode {*}$DB \
		    -loop $(perfloop) -history $(history) -b1 0 -b2 0
	    }
	    if {$Router2 ne $(ap2)} {
		UTF::Try "$Router2: unload" {
		    $Router2 unload
		}
	    }
	    catch {$Router2 deinit}
	    catch {$STA2 deinit}
	}

	if {!$(nocal)} {
	    # CalStability will check phytype itself to determine if
	    # it should run.
	    foreach c $calchans {
		CalStability $STA -chanspec $c
	    }
	}

	# Needs more thought
	# - reinit counter is not available in all branches
	# - need to track how many times we call BigHammer ourselves
	#UTF::Try "$STA: reinits" {
	#    memchart [$STA wl_counter reinit] -key [list $branch $STA reinit] \
	#	-units "" -format %.0f -history $(history) \
	#	-failcriteria NONE
	#}
    }

}

UTF::Test StaNightly {args} {
    UTF::Getopts {
	{sta.arg "4325sdio" "sta name"}
	{ap.arg "4704/4318"
	    "AP name.  For simultaneous dualband routers, use a pair '2g 5g'"}
	{trx.arg "" "Router trx"}
	{ap2.arg "" "2nd AP.  May be used for MultiSTA tests, etc"}
	{trx2.arg "" "2nd AP image"}
	{tag.arg "" "Router release tag"}
	{ap2tag.arg "" "2nd AP tag"}
	{statag.arg "" "STA release tag"}
	{bin.arg "" "STA dongle image"}
	{email.arg "" "Email Address"}
	{noapload "Don't load images"}
	{nostaload "Don't reload STA drivers"}
	{nostareload "Don't even reload STA drivers"}
	{norestore "Don't reset to defaults"}
	{nojoin "(obsolete)"}
	{nopm1 "No Slow Power Management tests"}
	{nopm2 "No Fast Power Management"}
	{noframeburst "No Framebursting"}
        {nofb0 "No non-frameburst open tests"}
	{nochannels "DEPRECATED: use -nochan"}
	{nosetup "No Setup"}
	{nobtests "Disable Bangalore tests"}
	{nopingtimes "Disable PingTimes test"}
	{norts "Disable RTS tests"}
	{nobeaconratio "Disable BeaconRatio test"}
	{date.arg "" "Image date"}
	{apdate.arg "" "AP Image date"}
	{ap2date.arg "" "AP2 Image date"}
        {history.arg 30 "History size for control charts"}
	{perfloop.arg 1 "Performance test loops"}
	{loop.arg 1 "Main test loops"}
	{nounload "Don't unload driver after test"}
	{nocache "Don't update performance cache"}
	{nowep "No WEP security"}
	{noshared "No shared security"}
	{notkip "No TKIP security"}
	{noaes "No AES security"}
	{noopen "No Open security TCP perf tests"}
	{nobx "No Bidirectional Performance tests"}
	{symmetric "Don't need to test both directions"}
	{notdls "No TDLS tests"}
	{nointerrupts "No Interrupt tests"}
	{title.arg "" "Title"}
	{branch.arg "auto" "Branch override"}
        {logdir.arg "" "Log directory override"}
	{chanspec.arg "" "Override perfchans"}
	{nosetuptestbed "Don't run Setup Testbed hooks"}
	{noposttesthook "Don't run Post Test hooks"}
	{nochanswitch "No Chan Switch Times test"}
	{paironly "Only run tests involving two STAs"}
	{dual.nonly "Symmetric Dualband tests"}
	{chan.nonly "Channelsweep tests"}
	{custom.nonly "custom tests"}
	{perf.nonly "Performance tests"}
	{rate.nonly "Fixed Rate tests"}
	{rvr.nonly "RvR tests"}
	{pm.nonly "Power Management tests"}
	{ibss.nonly "IBSS tests"}
	{bighammer.nonly "BigHammer tests"}
	{scan.nonly "scan tests"}
	{frag.nonly "fragmentation tests"}
	{cal.nonly "calibration tests"}
	{udp.nonly "UDP performance tests (UDP may still be used for rates/rvr if configured)"}
	{kpps.nonly "KPPS tests"}
	{perf20.nonly "20MHz performance tests"}
	{perf40.nonly "40MHz performance tests"}
	{perf80.nonly "80MHz performance tests"}
	{perf160.nonly "160MHz performance tests"}
	{cpu.nonly "CPU tests"}
    }

    set today [join [clock format [clock seconds] -format "%Y %N %e"] .]

    # If necessary, override the config file log directory setting.
    if {$(logdir) != ""} {
        set UTF::SummaryDir $(logdir)
        UTF::Message INFO "" "Using logdir: $UTF::SummaryDir"
    }

    # Backwards compat
    if {$(nojoin)} {
	set noshared 1
    }

    if {$(nochannels)} {
	unset (nochannels)
	set (nochan) 1
    }

    if {$(nopm)} {
	set (nopm1) 1
	set (nopm2) 1
    }

    if {$(nocache)} {
	set ::UTF::ControlChart::readonly 1
	set ::UTF::MemChart::readonly 1
    }

    if {$(ap) eq "" || [llength $(ap)] > 2} {
	error "-ap should be one band-selectable device, or a '2g 5g' pair"
    }

    if {![info exists ::UTF::StaNightlyCustom]} {
	set (nocustom) 1
    }

    if {$(chanonly) || $(customonly) || $(dualonly) || $(rvronly) ||
	$(pmonly) || $(ibssonly) || $(bighammeronly) || $(scanonly) ||
	$(fragonly) || $(calonly) || $(udponly) || $(kppsonly) || $(cpuonly)} {
	if {!$(rateonly)} {
	    set (norate) 1
	}
	set (rateonly) 1
    }

    if {$(rateonly)} {
	if {!$(bighammeronly)} {
	    set (nobighammer) 1
	}
	if {!$(calonly)} {
	    set (nocal) 1
	}
	set (notdls) 1
	if {!$(fragonly)} {
	    set (nofrag) 1
	}
	if {!$(ibssonly)} {
	    set (noibss) 1
	}
	if {!$(pmonly)} {
	    set (nopm1) 1
	    set (nopm2) 1
	    set (nopingtimes) 1
	}
	set (norts) 1
	if {!$(scanonly)} {
	    set (noscan) 1
	}
	if {!$(perfonly)} {
	    if {!$(udponly)} {
		set (noudp) 1
	    }
	    if {!$(kppsonly)} {
		set (nokpps) 1
	    }
	    set (noopen) 1
	    set (noaes) 1
	    if {!$(dualonly)} {
		set (nodual) 1
	    }
	}
	set (notkip) 1
	set (nowep) 1
	set (noshared) 1
	if {!$(cpuonly)} {
	    set (nocpu) 1
	}
	set (nochanswitch) 1
	if {!$(rvronly)} {
	    set (norvr) 1
	}
	if {!$(customonly)} {
	    set (nocustom) 1
	}
	if {!$(chanonly)} {
	    set (nochan) 1
	}
    }

    if {$(nobtests)} {
	# Common disable for historical "Bangalore" tests, and others
	set (nopingtimes) 1
	set (nobeaconratio) 1
	set (norate) 1
	set (norts) 1
	set (nofrag) 1
    }

    if {$(paironly)} {
	set (noscan) 1
	set (noshared) 1
	set (noperf) 1
	set (nochan) 1
	set (nochanswitch) 1
	set (nocal) 1
	set (nopingtimes) 1
	set (norate) 1
	set (norts) 1
	set (nofrag) 1
	set (nocpu) 1
	set (nobeaconratio) 1
	set (nobighammer) 1
	set (nointerrupts) 1
	set (norvr) 1
	set (nocustom) 1
    }

    set Router [lindex $(ap) 0]
    set STA [lindex $(sta) 0]

    if {[$Router cget -extsup]} {
	# We don't yet know how to handle external authentication on
	# SoftAP
	set (noaes) 1
	set (notkip) 1
    }

    # Override default tags
    if {$(trx) ne ""} {
	$Router configure -image $(trx) -date {}
    } elseif {$(tag) ne ""} {
	$Router configure -tag $(tag) -date {}
    }
    if {$(apdate) ne ""} {
	set apdate($Router) $(apdate)
	$Router configure -date $(apdate)
    } else {
	set apdate($Router) $today
    }

    if {$(ap2) ne ""} {
	if {$(trx2) ne ""} {
	    $(ap2) configure -image $(trx2) -date {}
	}
	if {$(ap2tag) ne ""} {
	    $(ap2) configure -tag $(ap2tag) -date {}
	}
	if {$(ap2date) ne ""} {
	    set apdate($(ap2)) $(ap2date)
	    $(ap2) configure -date $(ap2date)
	} else {
	    set apdate($(ap2)) $today
	}
    }

    if {$(bin) ne ""} {
	foreach STA $(sta) {
	    $STA configure -image $(bin) -date {}
	}
    }
    if {$(statag) ne ""} {
	foreach STA $(sta) {
	    $STA configure -tag $(statag) -date {}
	}
    }
    if {$(date) ne ""} {
	set date $(date)
	foreach S $(sta) {
	    $S configure -date $(date)
	}
	unset S
    } else {
	set date $today
    }

    if {$(perfonly)} {
	# Enable perfonly on all STAs
	foreach S $(sta) {
	    $S configure -perfonly 1
	}
    }

    # Compact build list for title
    set build [UTF::BuildTitle $(sta)]

    if {$(title) eq ""} {
	if {[$STA hostis WinDHD Cygwin]} {
	    set (title) [$STA host whatami]
	} elseif {[$STA hostis LMAC DHD]} {
	    set (title) "Linux Dongle"
	} else {
	    set (title) [$STA hostis]
	}

	if {[regexp {(\d+sd)} $Router - c]} {
	    append (title) " with $c AP"
	}
    }
    set TITLE "UTF $(title) ($build)"
    UTF::Message INFO "" $TITLE

    # $build is used in the title.  For private builds this will
    # indicate special images.

    # (branch) is used for comparison over time.  For private builds
    # this should be specified explicitly so the tests know which
    # branch to test.

    if {$(branch) eq ""} {
	if {[regexp {/} $build]} {
	    error "Unable to determine branch name from build.  Please specify -branch"
	}
	set (branch) $build
    }
    unset build

    # Truncate build name for performance keys
    regsub {_.*} $(branch) {} (branch)



    UTF::WrapSummary $UTF::SummaryDir $TITLE "" $(email) {
	set ::UTF::Perfcache [file join $UTF::SummaryDir perfcache]

	if {!$(nosetuptestbed)} {
	    UTF::Try "Setup testbed" {
		UTF::SetupTestBed
	    }
	}

	foreach AP [concat $Router $(ap2)] {
	    if {!$(noapload)} {
		UTF::Try "$AP: Find AP Image" {
		    # Check primary image and start report header
		    UTF::CheckImage $AP $apdate($AP) unknown
		}

		UTF::Try "$AP: Load Image" {
		    if {[$AP hostis Router Vx BSDAP DSL Airport STBAP]} {
			if {[catch {$AP lan ifconfig [$AP lan cget -ipaddr]}]} {
			    $AP lan ifconfig 192.168.1.50
			}
		    }
		    $AP load
		}
		# Check secondary driver and update report header
		UTF::ReportDriver $AP $apdate($AP)
	    } elseif {[$AP hostis Linux]} {
		UTF::Try "$AP: reload" {
		    $AP reload
		}
	    }
	    if {!$(norestore)} {
		UTF::Try "$AP: Restore Defaults" {
		    if {[$AP wlconf_by_nvram]} {
			$AP restore_defaults
		    } else {
			$AP services stop
			if {[info exists ::UTF::Use11h]} {
			    # regulatory disabled as temporary WAR for EAGLE perf issues
			    catch {$AP wl msglevel +error +assoc -regulatory}
			} else {
			    catch {$AP wl msglevel +error +assoc}
			}
			if {![$AP cget -nomimo_bw_cap]} {
			    catch {$AP wl down}
			    # Enable 40 in 2.4, if available.
			    if {[catch {$AP wl bw_cap 2 -1}]} {
				$AP wl -u mimo_bw_cap 1
			    }
			    $AP wl up
			    UTF::Sleep 1
			}
		    }
		    # Collect HW info and update report header + DB
		    UTF::ReportWhatami $AP -role REF -noload $(noapload)
		}
	    }
	}
	foreach STA $(sta) {
	    if {[catch {main $(ap) $STA} ret]} {
		set e $::errorInfo
		UTF::Try "main loop" {
		    error $ret $e
		}
	    }
	    if {!$(nounload)} {
		UTF::Try "$STA: unload driver" {
		    $STA unload
		}
	    }
	    catch {$STA deinit}
	}

	foreach AP [concat $Router $(ap2)] {
	    if {!$(nounload) && ![$AP hostis Router Vx BSDAP DSL Airport]} {
		UTF::Try "$AP: unload driver" {
		    $AP unload
		}
	    }

	    $AP deinit
	}

	PreservedReport

	if {!$(noposttesthook) && [info exists ::UTF::PostTestHook]} {
	    UTF::Try "Post Test" {
		eval $::UTF::PostTestHook
	    }
	}
    }
}
