#!/bin/env utf
# -*-tcl-*-
#
# UTF test script for testing router uplinks using a SoftAP and
# without going into Bridge mode.
# $Id$
#

package require UTF
package require UTF::Test::ConnectAPSTA
package require UTF::Test::controlchart

package provide UTF::Test::MiniMu 2.0

UTF::Test MiniMu {AP STAs args} {

    # If FBDefault is set, and devices support it, enable fb
    if {[info exists ::UTF::FBDefault]} {
	set fbdefault 1
    } else {
	set fbdefault 0
    }
    set defb ""
    foreach S $STAs {
	lappend defb [$S cget -udp]
    }

    UTF::Getopts [subst {
	{msg.arg "MuMimo" "Message"}
	{chanspec.arg "36/80" "Chanspec"}
	{security.arg "open" "Security"}
	{nocache "Don't update performance cache"}
	{perfcache.parg "" "Performance Cache"}
	{perfloop.parg 1 "Perf loops"}
	{history.parg 30 "History"}
	{frameburst.arg "$fbdefault" "Use frameburst"}
	{key.arg "" "Key"}
	{i.arg 1 "Interval"}
	{s.arg 4 "Samples"}
	{PM.arg "" "PM"}
 	{b.arg "$defb"
	    "UDP data rate (0 for TCP) defaults to the list of the STAs' -udp options"}
	{nojoin "Assume already set up and connected"}
	{nodisassoc "Don't disassoc after the test"}
    }]

    if {$(nocache)} {
	set ::UTF::ControlChart::readonly 1
    }

    set key [concat mu $(key)]
    if {$(b) ne "0"} {
	set oldkey $key
	lappend key "udp"
    } else {
	lappend key "tcp"
	# don't want to inherit if perf would go down.
	set oldkey $key
    }

    UTF::Try "$AP $STAs $(msg)" {
	if {!$(nojoin)} {
	    ConnectAPSTA $AP $STAs -security $(security) -chanspec $(chanspec)
	}
	array set parm {};
	$AP wl frameburst $(frameburst)
	foreach S $STAs {
	    $S wl frameburst $(frameburst)
	    if {$(PM) ne ""} {
		set oldpm($S) [$S wl PM]
		$S wl PM $(PM)
	    }
	    lappend pairs $AP $S
	}
	# Auto TCP window size setting based on phy rate
	set w [[lindex $STAs 0] tcpautowindow]
	if {[catch {$AP wl mutx_clear_dump}]} {
	    catch {$AP wl dump_clear mutx}
	}
	set code [catch {
	    controlchart $pairs -comp C \
		-perfcache $(perfcache) -history $(history) \
		-key $key -oldkey $oldkey -i $(i) -s $(s) \
		-window $w \
		-loop $(perfloop) -b $(b) -callback {
		    UTF::Sleep $(i)
		    $AP wl mu_group
		    $AP wl dump vasip_counters
		}
	} ccret]

	set p 0
	foreach c $C {
	    set mmm [UTF::MeanMinMax $c]
	    foreach m $mmm {
		UTF::XPASS $AP $m [concat [UTF::ParmStrip parm] pair $p]
	    }
	    incr p
	}
	set dump [$AP wl dump mutx]
	foreach S $STAs {
	    catch {$S wl -u dump murx}
	}
	set mupcs {}
	foreach {- qued mued} [regexp -line -inline -all \
				   {^mutx: tot_tx (\d+) tx_as_mu (\d+)} $dump] {
	    set mup [expr {$mued ? (100.0 * $mued / $qued) : 0}]
	    set ret [format {%.1f%%} $mup]
	    lappend mupcs $ret
	    if {$mup < 50} {
		set code 1
	    }
	}
	if {[llength $mupcs]} {
	    set ccret "$ccret mu [join $mupcs]"
	}
	if {$code} {
	    throw FAIL $ccret
	} else {
	    return $ccret
	}
    } finally {
	if {!$(nodisassoc)} {
	    foreach S $STAs {
		if {[info exists oldpm($S)]} {
		    $S wl PM $oldpm($S)
		}
		catch {$S wl disassoc}
		# Clear cache in case we switch to AP mode
		$S configure -ssid ""
	    }
	}
    }
}

