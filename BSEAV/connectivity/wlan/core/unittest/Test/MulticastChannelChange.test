#!/bin/env utf
# -*-tcl-*-
#

#
# UTF test script to simulate multicast channel changes
#
# Written by: Robert J. McMahon May 2011
#
# $Copyright Broadcom Corporation$
#
package require UTF
package require UTF::Streams
package require UTF::Multicast
package require UTF::IGMPQuerier
UTF::Test MulticastChannelChange {args} {
    UTF::Getopts {
	{ap.arg "iptv_ap"}
	{wets.arg "iptv_br1 iptv_br2 iptv_br3"}
	{testruns.arg "10"}
	{streams.arg "200"}
	{streamsactive.arg "3"}
	{pps.arg "100"}
	{dwell.arg "0.5"}
	{showrates ""}
    }
    UTF::Try "Multicast Channel Changes" {
	if {[info command igmpq] ne "igmpq"} {
	    UTF::IGMPQuerier igmpq -ap $(ap)
	}
	igmpq start
	UTF::stream logginglevel ANALYZE
	foreach wet $(wets) {
	    lappend wetstas [$wet cget -lanpeer]
	}
	set txsta [$(ap) cget -lanpeer]
	foreach wetsta $wetstas {
	    for {set ix 0} {$ix < $(streams)} {incr ix} {
		lappend channels($wetsta) [UTF::stream %AUTO% -transmitsta $txsta -receivesta $wetsta -pktsize 500 -pps $(pps) -multicast on]
	    }
	}
\
	foreach wetsta $wetstas {
	    set streamselect [lindex $channels($wetsta) [expr {int(rand() * [llength $channels($wetsta)])}]]
	   $streamselect start
	   set livestreams($wetsta) $streamselect
       }
	set testruns $(testruns)
	while {$testruns} {
	    incr testruns -1
	    set wetselect [lindex $wetstas [expr {int(rand() * [llength $wetstas])}]]
	    set streamselect [lindex $channels($wetsta) [expr {int(rand() * [llength $channels($wetsta)])}]]
	    $livestreams($wetsta) stop
	    $streamselect start
	    set livestreams($wetsta) $streamselect
	    if {$(showrates) || ![expr {$testruns % 10}]} {
		UTF::Multicast::show_emfdb_rates -ap [concat $(ap) $(wets)]
	    } else {
		UTF::Sleep $(dwell)
	    }
	}
    }
    igmpq destroy
    UTF::stream exitstreams
    UTF::Try "Wl mem leak check" {
	foreach dut [concat $(ap) $(wets)] {
	    if {[catch {$dut rmmod wl} err]} {
		UTF::Message ERROR $dut $err
		append errmsg "$dut: $err "
	    }
	}
	if {[info exists errmsg]} {
	    error $errmsg
	}
    }
}
