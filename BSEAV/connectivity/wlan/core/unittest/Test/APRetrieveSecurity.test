#!/bin/env utf
# -*-tcl-*-

# UTF test script for retrieving security settings from an AP.
#
# $Id$
#
# Usage:  APRetrieveSecurity AP
#
# Security settings are stored in the AP object for later retrieval by
# ConnectAPSTA.
#
# Note that in real tests it is better to use APConfigureSecurity,
# since a test should not trust the DUT to remain consistent, however
# this provides a useful fallback when running partial tests by hand.

package require UTF

package provide UTF::Test::APRetrieveSecurity 2.0

UTF::Test APRetrieveSecurity {AP} {

    set SSID ""
    set WEPKEY ""
    set WPAKEY ""
    set WEPIDX ""
    set SECURITY ""

    if {[$AP hostis Airport]} {
	# Apple
	set wlname [$AP wlname]

	set SSID [$AP acp -q getplistvalue WiFi "$wlname.raNm"]
	set WEPKEY [$AP acp -q getplistvalue WiFi "$wlname.raWE"]
	set WEPIDX 0
	set WPAKEY [$AP acp -q getplistvalue WiFi "$wlname.raCr"]
	switch [$AP acp -q getplistvalue WiFi "$wlname.raWM"] {
	    0 {
		set SECURITY "open"
	    }
	    2 {
		if {[$AP acp -q getplistvalue WiFi "$wlname.raSk"]} {
		    set SECURITY "shared"
		} else {
		    set SECURITY "wep"
		}
	    }
	    3 {
		set SECURITY "tkippsk"
	    }
	    4 {
		set SECURITY "tkippsk2"
	    }
	    5 {
		set SECURITY "aespsk2"
	    }
	}
    } elseif {[$AP wlconf_by_nvram]} {
	# Devices with nvram

	set wlname [$AP wlname]
	set SSID [$AP nvram get ${wlname}_ssid]
	set WEPKEY [$AP nvram get ${wlname}_key1]
	set index [$AP nvram get ${wlname}_key]
	if {$index eq ""} {
	    set index 1
	}
	set WEPIDX [expr {$index -1}]
	set WPAKEY [$AP nvram get ${wlname}_wpa_psk]

	set wep [$AP nvram get ${wlname}_wep]
	set auth [$AP nvram get ${wlname}_auth]
	set akm [string trim [$AP nvram get ${wlname}_akm]]
	set crypto [$AP nvram get ${wlname}_crypto]

	if {$wep eq "enabled"} {
	    if {[string is true $auth]} {
		set SECURITY "shared"
	    } else {
		set SECURITY "wep"
	    }
	} elseif {$akm eq ""} {
	    set SECURITY "open"
	} else {
	    set SECURITY "$crypto$akm"
	}
    } else {
	# Fall back to wl.  Can't retrieve PSK from the in-driver
	# suppplicant
	set SSID [$AP wl ssid]
	set sec {}

	if {![catch {$AP wl keys} ret]} {
	    regexp -line \
		{(\d+): .* WEP.* data (0x[[:xdigit:]]+)} $ret \
		- WEPIDX WEPKEY
	}
	if {[regexp {WPA2} [$AP wl wpa_auth]]} {
	    set psk "psk2"
	} else {
	    set psk "psk"
	}
	set wsec [$AP wl wsec]

	if {$wsec > 1} {
	    # can't recover the PSK, so make up a new one
	    set WPAKEY [UTF::NewWPAPassphrase]
	    $AP wl set_pmk $WPAKEY
	}
	if {$wsec & 4} {
	    lappend sec "aes$psk"
	}
	if {$wsec & 2} {
	    lappend sec "tkip$psk"
	}
	if {$wsec & 1} {
	    if {[$AP wl auth] eq "1"} {
		lappend sec "shared"
	    } else {
		lappend sec "wep"
	    }
	}
	if {$sec eq ""} {
	    set SECURITY "open"
	} else {
	    set SECURITY [join $sec +]
	}
    }

    UTF::Message INFO $AP "SSID $SSID, security mode $SECURITY"
    $AP configure -ssid $SSID
    $AP configure -wepkey $WEPKEY
    $AP configure -wepidx $WEPIDX
    $AP configure -wpakey $WPAKEY
    $AP configure -security $SECURITY
}
