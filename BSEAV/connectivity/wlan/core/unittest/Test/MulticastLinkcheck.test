#!/bin/env utf
# -*-tcl-*-

# Perform a multicast link check with fault isolation
# supports  AP, STAs and bridges
#
# Written by: Robert J. McMahon February 2013
#
# $Id: 6f15e02f36a011ee759717b2e5c155737ce2d9ad $
#

package require UTF
package require UTF::Streams
package require UTF::Multicast
package require UTF::IGMPQuerier

package provide UTF::Test::MulticastLinkcheck 2.0

UTF::Test MulticastLinkcheck {args} {
    UTF::Getopts {
	{stream.arg "" "stream to use"}
	{ap.arg "" "ap to use"}
	{sta.arg "" "sta(s) to use"}
	{group.arg "239.1.1.1" "group ip"}
	{wlpktdebug "Enable wl packet level debugging"}
	{etpktdebug "Enable et packet level debugging"}
    }
    proc ip2x {ip {validate 0}} {
	set octets [split $ip .]
	if {[llength $octets] != 4} {
	    set octets [lrange [concat $octets 0 0 0] 0 3]set
	}
	if {$validate} {
	    foreach oct $octets {
		if {$oct < 0 || $oct > 255} {
		    return -code error "invalid ip address"
		}
	    }
	}
	binary scan [binary format c4 $octets] H8 x
	return $x
    }

    UTF::Try "MCAST linkcheck" {
	set BRIDGES ""
	set STAS ""
	set destroy 0
	if {$(stream) ne "" } {
	    set (sta) [$(stream) cget -rx]
	    set AP [$(stream) cget -tx]
	} else {
	    set destroy 1
	    set AP $(ap)
	    if {$(group) ne ""} {
		set (stream) [UTF::stream %AUTO% -tx $(ap) -rx $(sta) -multicast 1 -dstgrpip $(group)]
	    } else {
		set (stream) [UTF::stream %AUTO% -tx $(ap) -rx $(sta) -multicast 1]
	    }
	}
	# Discover and separate STAs from Bridges
	foreach STA $(sta) {
	    if {[$STA hostis Router] && [lsearch $BRIDGES $STA] == -1} {
		lappend BRIDGES $STA
	    } elseif {![$STA hostis Router] && [lsearch $STAS $STA] == -1} {
		lappend STAS $STA
	    }
	}
	# only check EMF related entries for devices with emf enabled
	set emflist {}
	foreach dut [concat $AP $BRIDGES] {
	    if {![catch {$dut emf status [$dut brname]}]} {
		lappend emflist $dut
	    }
	}
	$(stream) id
	$(stream) sniff on -igmp
	$AP igmp_querier enable
	$(stream) start
	$AP igmp_querier send
	set GRPIP [$(stream) cget -dstgrpip]
	UTF::Try "Dump HOST groups" {
	    UTF::Message INFO "" "Group = $GRPIP"
	    foreach sta [concat [$(stream) cget -transmitsta] [$(stream) cget -receivesta]] {
		catch {$sta rexec netstat --groups -n}
		catch {$sta rexec netstat -rn}
	    }
	    return
	}
	UTF::Try "Check RTPORT" {
	    $AP igmp_querier send
	    set aps ""
	    foreach dut $emflist {
		if {[catch {::UTF::Multicast::test_rtport_empty $dut}]} {
		    lappend aps $dut
		}
	    }
	    if {$aps ne ""} {
		error "$aps"
	    }
	    return
	}
	foreach dut $emflist {
	    UTF::Try "Check IGS $dut" {
		$AP igmp_querier send
		set igserr {}
		set erraddr {}
		foreach DOWN [concat $STAS $BRIDGES] {
		    if {[lsearch $BRIDGES $DOWN] ne "-1"} {
			set SRCIP [[$DOWN lan] ipaddr]
		    } else {
			set SRCIP [$DOWN ipaddr]
		    }
		    set hexaddrs "([ip2x $GRPIP]/[ip2x $SRCIP]) "
		    if {![::UTF::Multicast::test_sdb_entry $dut $GRPIP $SRCIP]} {
			if {![::UTF::Multicast::test_sdb_entry $dut $GRPIP $SRCIP]} {
			    lappend erraddr "${dut}:$hexaddrs "
			    if {$igserr eq ""} {
				set  igserr "IGSERR:$dut"
			    } else {
				append igserr " $dut "
			    }
			}
			if {![::UTF::Multicast::test_sdb_entry $AP $GRPIP $SRCIP]} {
			    lappend erraddr "$AP:$hexaddrs] "
			    if {$igserr eq ""} {
				set  igserr "IGSERR:${AP}/$dut"
			    } else {
				append igserr " ${AP}/$dut"
			    }
			}
		    }
		    if {$igserr ne ""} {
			append err " $igserr"
			UTF::Message ERROR "" "Addresses: $erraddr"
			error $igserr
		    }
		    return
		}
		UTF::Try "Check WMF $dut" {
		    set output [$dut emf show stats [$dut brname]]
		    if {[regexp {MFDBCacheMisses.+[0-9]+\s+[0-9]+\s+([0-9]+)\s+} $output - ahits]} {
			UTF::Sleep 1
			set output [$dut emf show stats [$dut brname]]
			if {[regexp {MFDBCacheMisses.+[0-9]+\s+[0-9]+\s+([0-9]+)\s+} $output - bhits]} {
			    set delta [expr {$bhits - $ahits}]
			    if {$delta <= 0} {
				error "WMF not working per cache hits"
			    } else {
				UTF::Message INFO "" "Cache hit delta = $delta"
			    }
			} else {
			    error "emf parse failure"
			}
		    } else {
			error "emf parse failure"
		    }
		}
	    }
	    UTF::Try "Traffic Check" {
		# et msg level 5 (err | prhdrs), 9 (err | prpkt)
		# Note: Use MFDBCache hits for wmf counter proxy (2 per packet)
		if {$(etpktdebug)} {
		    UTF::Try "et debug" {
			catch {$(stream) stop}
			set curpps [$(stream) cget -pps]
			set grp [$(stream) cget -dstgrpip]
			$(stream) configure -pps 2
			$(stream) configure -dstgrpip 239.11.202.254
			foreach dut [concat $BRIDGES $AP] {
			    catch {$dut rexec et msglevel 0x5}
			}
			$dut igs show stats [$dut brname]
			for {set ix 0} {$ix < 2} {incr ix} {
			    $AP igmp_querier send
			}
			UTF::Sleep 1.0
			catch {$(stream) start}
			UTF::Sleep 0.25
			foreach dut [concat $AP $BRIDGES] {
			    catch {::UTF::Multicast::test_rtport_empty $dut} res
			    $dut igs show stats [$dut brname]
			    $dut igs list sdb [$dut brname]
			    $dut emf show stats [$dut brname]
			    $dut emf list mfdb [$dut brname]
			    if {$res} {
				UTF::Message ERROR $dut "No rtport learned"
			    }
			}
			catch {$(stream) stop}
			UTF::Sleep 1.0
			foreach dut [concat $BRIDGES $AP] {
			    catch {$dut rexec et msglevel 0x0}
			}
			$(stream) configure -pps $curpps
			$(stream) configure -dstgrpip $grp
		    }
		}
		if {$(wlpktdebug)} {
		    UTF::Try "wl debug" {
			catch {$(stream) stop}
			set curpps [$(stream) cget -pps]
			$(stream) configure -pps 2
			$(stream) configure -dstgrpip 239.11.202.254
			foreach dut $BRIDGES {
			    catch {$dut rexec et msglevel 0x9}
			    catch {$dut rexec wl msglevel +prhdrs}
			}
			catch {$AP rexec wl msglevel +prhdrs}
			catch {$(stream) start}
			UTF::Sleep 1.0
			$AP igmp_querier send
			UTF::Sleep 1.0
			set output [$dut igs list sdb [$dut brname]]
			foreach dut $BRIDGES {
			    catch {$dut rexec et msglevel 0x0}
			    catch {$dut rexec wl msglevel -prhdrs}
			}
			catch {$AP rexec wl msglevel -prhdrs}
			$(stream) configure -pps $curpps
		    }
		}
		if {[catch {$(stream) linkcheck -now} err]} {
		    if {[llength $BRIDGES]} {
			UTF::Try "Dump STP" {
			    foreach dut [concat $AP $BRIDGES] {
				catch {$dut rexec brctl showstp [$dut brname]}
			    }
			}
		    }
		    error "$err"
		}
	    }
	}
    }
    if {$destroy} {
	UTF::Try "Test exit" {
	    $AP igmp_querier disable
	    $(stream) destroy
	}
    }
}