#!/bin/env utf
# -*-tcl-*-

# Make sure one or more bridge is assoicate to the AP and STP is forwarding
#
# Written by: Robert J. McMahon February 2013
#
# $Id$
#

package require UTF

package provide UTF::Test::BridgeCheck 2.0

UTF::Test BridgeCheck {args} {
    UTF::Getopts {
	{ap.arg "" "ap to use"}
	{br.arg "" "bridge(s) to use"}
	{wait.arg "30" "time to wait in seconds"}
	{noblock "don't block on full wait time"}
	{debug "debug assoc state machine"}
	{linkcheck "verify the bridge supports traffic"}
    }
    UTF::Try "Verify Bridge(s) associated w/AP" {
	foreach BR $(br) {
	    if {$(debug)} {
		$BR wl -u phy_percal 3
		$BR wl -u phy_forcecal 1
		$BR wl -u dump phycal
		$(ap) wl -u phy_percal 3
		$(ap) wl -u phy_forcecal 1
		$(ap) wl -u dump phycal
		UTF::Sleep 2.0
		$BR wl -u phy_percal 2
		$(ap) wl -u phy_percal 2
		UTF::Message DEBUG "" "JOIN START"
		$(ap) configure -prhdrparse 1
		$BR configure -prhdrparse 1
		$BR wl msglevel +prhdrs +assoc
		$(ap) wl msglevel +prhdrs +assoc
		$BR wl disassoc
		$BR wl join [$(ap) wl ssid]
		UTF::Sleep 2.0
		$BR wl msglevel 0x0
		$(ap) wl msglevel 0x0
		UTF::Message DEBUG "" "JOIN DONE"
		$(ap) configure -prhdrparse 0
		$BR configure -prhdrparse 0
	    }
	    set apbssid [$(ap) wl bssid]
	    set bridges $(br)
	    foreach BR $bridges {
		$BR wl status
	    }
	    set tries $(wait)
	    while {$tries > 0 && [llength $bridges]} {
		foreach BR $bridges {
		    if {![catch {$BR wl bssid} bssid] &&  $bssid eq $apbssid } {
			set bridges [lsearch -all -not -inline $bridges $BR]
		    }
		}
		if {[llength $bridges]} {
		    incr tries -1; UTF::Sleep 1.0
		    catch {$(ap) wl sta_info [$BR macaddr]}
		    catch {$(ap) wl sta_info [$BR lan macaddr]}
		    catch {$(ap) wl assoc_list}
		}
	    }
	    if {[llength $bridges]} {
		foreach BR $bridges {
		    UTF::Message DEBUG $BR "Scanning to help isolate bridge failed assoc"
		    catch {$BR wl_escanresults}
		}
		error "$bridges failed to associate"
	    }
	}
	if {[llength $bridges]} {
	    UTF::Try "WARN: Retry w/single phase phycal" {
		#-Nitin
		# Following are the details reagarding wl phy_percal
		#	0, disable
		#	1, enable, singlephase cal only,
		#	2, enable mutliphase cal allowed
		#	3, manual (testing mode), blocking all driver initiated
		#      periodical cal, give phy_forcecal the full control
		foreach BRIDGE $bridges {
		    $BRIDGE wl -u phy_percal 1
		}
		UTF::Sleep 2.0
		foreach BRIDGE $bridges {
		    $BRIDGE wl -u dump phycal
		}
		foreach BRIDGE $bridges {
		    $BRIDGE wl join [$(ap) wl ssid]
		}
		UTF::Sleep 30
		foreach BRIDGE $bridges {
		    $BRIDGE wl -u phy_percal 2
		}
		foreach BR $bridges {
		    if {![catch {$BR wl bssid} bssid] &&  $bssid eq $apbssid } {
			set bridges [lsearch -all -not -inline $bridges $BR]
		    }
		}
		if {[llength $bridges]} {
		    error "$bridges still  failed to associate"
		}
	    }
	}
	UTF::Try "Dump STP" {
	    foreach dut [concat $(ap) $(br)] {
		catch {$dut rexec brctl showstp [$dut brname]}
	    }
	}
	if {$(linkcheck)} {
	    foreach BRIDGE $(br) {
		UTF::Try "Traffic Check $BRIDGE" {
		    $BRIDGE wl status
		    [$(ap) lan] ping [$BRIDGE lan]
		    set errmsg {}
		    set stream [UTF::stream %AUTO% -tx $(ap) -rx $BRIDGE]
		    $stream start
		    if {[catch {$stream linkcheck -now} err]} {
			append errmsg "$err "
		    }
		    $stream destroy
		    if {$errmsg ne ""} {
			error $errmsg
		    }
		}
	    }
	}
    }
}

