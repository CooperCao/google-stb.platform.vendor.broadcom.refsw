#!/bin/env utf
# -*-tcl-*-
#
# Dec 2010 Sheida Otmishi
# Do not Use for explorations
# UTF test script for stream error checks
# $Id: 862169ee35810a4d920a7d37c8227f4c2d39a466 $
# $Copyright Broadcom Corporation$
# This test does bad things to AP/STA like cutting off power abruptly.

package require UTF
package require UTF::Test::ConnectAPSTA
package require UTF::Test::APConfigureSecurity
package require UTF::Streams
package require UTF::Power

UTF::Test streamtester {args} {
    UTF::Getopts {
	{sta.arg "X9" "STA is required to have power cycling setup"}
        {ap.arg "4717" "AP"}
	{wait.arg "30" "Wait for command completion"}
	{mulcount.arg "10" "ping duration"}
    }

    set sta $(sta)
    if {[$sta cget -power] eq {}} {
	error "This test requires the power cycling setup for the STA"
    }

    set wait $(wait)
    set mulcount $(mulcount)
    set ap $(ap)
    set end [$ap lan]
    set APIP [$ap ipaddr]
    set stawait 30

    set streamstartblock {
        UTF::Try "Stream Start" { 
	    UTF::stream allstreams stop
	    UTF::stream allstreams destroy
	    UTF::stream create astream
	    astream configure -receivesta $sta
	    astream configure -transmitsta $end
	    UTF::stream create bstream
	    bstream configure -receivesta $end
	    bstream configure -transmitsta $sta
	    astream start
	    bstream start
	    astream stats -rate
	    bstream stats -rate
	    astream stats -jitter
	    bstream stats -jitter
	    astream stats -loss
	    bstream stats -loss
	}
    }

    set stadownblock {
	$sta power off
	set count 0
	while {(![catch {eval $sta rexec -t 1 -n :}]) && ($count < $mulcount)} {
	    UTF::Message INFO "" "Inside stadownblock"
	    UTF::Sleep $wait
	    incr count
	}
    }

    set apdownblock {
	$ap power off
	set count 0
	while {(![catch {eval $end ping $APIP}]) && ($count < $mulcount)} {
	    UTF::Message INFO "" "Inside apdownblock"
	    UTF::Sleep $wait
	    incr count
	}
    }

    UTF::WrapSummary $UTF::SummaryDir [concat {Stream Tester } ] "" "" {
	try {

	    UTF::Try "STA offline/AP online" {
		eval $stadownblock
		$ap power on
		UTF::Sleep $wait
		set count 0
		while {([catch {eval $end ping $APIP}]) && ($count < $mulcount)} {
		    UTF::Message INFO "" "Inside STA off/AP on"
		    UTF::Sleep $wait
		    incr count
		}
		if {([catch {eval $sta rexec -t 1 -n :}]) && (![catch {eval $end ping $APIP}])} {
		    UTF::Message INFO "" "STA off/AP on is fine"
		    eval $streamstartblock
		} else {
		    UTF::Message ERROR "" "Can not power up the AP or power down the STA host"
		}
	    }

	    UTF::Try "STA and AP offline" {
		eval $apdownblock
		if {([catch {eval $end ping $APIP}]) && ([catch {eval $sta rexec -t 1 -n :}])} {
		    UTF::Message INFO "" "Inside AP/STA off"
		    eval $streamstartblock
		} else {
		    UTF::Message ERROR "" "Can not power down both STA host and AP"
		}
	    }

	    UTF::Try "AP offline/STA online" {
		$sta power on
		UTF::Sleep $wait
		set count 0
		while {([catch {eval $sta rexec -t 1 -n :}]) && ($count < $mulcount)} {
		    UTF::Message INFO "" "Inside AP off /STA on"
		    UTF::Sleep $wait
		    incr count
		}
		if {([catch {eval $end ping $APIP}]) && (![catch {eval $sta rexec -t 1 -n :}])} {
		    UTF::Message INFO "" "AP off / STA on is fine"
		    eval $streamstartblock
		} else {
		    UTF::Message ERROR "" "Can not power down the AP or power on the STA host"
		}
	    }

	    UTF::Try "AP online/STA online" {
		$ap power on
		UTF::Sleep $wait
		set count 0
		while {([catch {eval $end ping $APIP}]) && ($count < $mulcount)} {
		    UTF::Message INFO "" "Inside AP on / STA on"
		    UTF::Sleep $wait
		    incr count
		}
		if {(![catch {eval $end ping $APIP}]) && (![catch {eval $sta rexec -t 1 -n :}])} {
		    UTF::Message INFO "" "AP on / STA on is fine"
		    eval $streamstartblock
		} else {
		    UTF::Message ERROR "" "Both AP STA are not powered on"
		}
	    }

	    UTF::Try "Driver loaded/STA not associated" {
		if {(![catch {eval $sta load}]) && (![catch {eval $ap load}])} {
		    UTF::Message INFO "" "Drivers loaded is fine"
		    eval $streamstartblock	
		} else {
		    UTF::Message ERROR "" "Can not load either the sta or the ap"
		}
	    }

	    UTF::Try "Driver loaded/STA associated" {
		if {(![catch {eval UTF::Test::ConnectAPSTA $ap $sta}])} {
		    UTF::Message INFO "" "STA associated is fine"
		    eval $streamstartblock
		    UTF::Try "Check the Link" {
			astream linkcheck
			bstream linkcheck
		    }
		} else {
		    UTF::Message ERROR "" "Can not load either the sta or the ap"
		}
	    }

	    UTF::Try "Check Both Status" {
		astream status
		bstream status
	    }

	    UTF::Try "Check TX Status" {
		astream status -tx
		bstream status -tx
	    }

            UTF::Try "Check TX Status" {
		astream status -rx
		bstream status -rx
	    }
														
	    UTF::Try "STA disassociated" {
		if {(![catch {eval $sta wl disassoc}])} {
		    UTF::Message INFO "" "STA disassociated is fine"
		    eval $streamstartblock
		} else {
		    UTF::Message ERROR "" "Can not disassociate the STA"
		}
	    }

	    UTF::Try "STA unloaded" {
		if {(![catch {$sta unload}])} {
		    UTF::Message INFO "" "STA unloaded is fine"
		    eval $streamstartblock
		} else {
		    UTF::Message ERROR "" "Can not disassociate the STA"
		}
	    }
	} finally {
	    if {[catch {eval $end ping $APIP}]} {
		$ap power on
	    }
	    if {[catch {eval $sta rexec -t 1 -n :}]} {
		$sta power on
	    }
            UTF::stream allstreams stop
	    UTF::stream allstreams destroy
	}
    }
}

