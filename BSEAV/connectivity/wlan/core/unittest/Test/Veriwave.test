#!/bin/env utf
# -*-tcl-*-

#
# UTF Veriwave Wrapper
#
# $Copyright Broadcom Corporation$
#

# Usage:
# Test/Veriwave.test -ap <ap>  -script_names <script_names> -noapload 
#
# Example:
# Test/Veriwave.test -ap 4717  -script_names <script_names> -noapload 


#mesage == ### END run of testcase 1
#mesage == ### END Testcase 1
#mesage == ### Testcase 1 Aborted at 20111104-032933.
#mesage == ### Intermediate Results: PASS: 0 FAIL: 0 ABORT: 1 Skipped: 0  
#mesage == 
#mesage == #### Automated test run completed at 20111104-032933.
#mesage == #### Config file used: ../conf/rvr.tcl
#mesage == 
#mesage == #### Test Summary: 0 failure(s), 1 abort(s), 0 skip(s) during 1 test(s).



package require UTF

proc timedvwait {var {timeout 60000}} {
    set t [after $timeout [list set $var "Timeout"]]
    vwait $var
    after cancel $t
}



proc getdata {fd} {

    if {![eof $fd]} {
        set msg [gets $fd]

            # MFGC log file
            set ::UTF::Test::Tick [clock seconds]
            if {[regexp {Path Loss(.*)Trial} $msg - t]} {
                puts "message matched $msg "
                UTF::Message LOG "VW" "$msg"
                 puts "now set the variable"
                set ::UTF::Test::VWcurrenttest $t
            }
            if {[regexp {ABORT(.*)} $msg - t]} {
                # Output status line
                puts "test ABORTED ***\n"
                # Update global test state (do this last, since
                # someone may be vwaiting on it.)
                set ::UTF::Test::VWcurrenttest $t
            } elseif {[regexp {#### Full logs are at:(.*)} $msg - t]} {
                # Output status line
                #UTF::Message INFO $options(-name) $msg
                # Update global test state (do this last, since
                # someone may be vwaiting on it.)
                set ::UTF::Test::VWcurrenttest $t
            } elseif {[regexp {>\s*(.*(?:,.*){19},(Pass|Fail))$} \
                           $msg - res]} {
                # Output results line
                UTF::Message INFO $options(-name) $msg
                lappend ::UTF::Test::MFGCresults $res
            } else {

                #puts "mesage == $msg\n"
                UTF::Message LOG "VW" "$msg"

                #UTF::Message LOG $options(-name) $msg
            }
    } else {
        # Leave non-blocking for safer close.  Any error messages
        # should have been collected earlier.
        set status "DONE"
        close $fd
        #UTF::Message LOG $options(-name) "Log closed $fd"
        #nset msgfile($request)
    }
}

UTF::Test Veriwave {args} {


    # Get command line options
    UTF::Getopts {
	{ap.arg "4717" "AP names to use in test"}
	{email.arg "arvindke" "Email Address"}
	{script_names.arg "rvr.tcl" "Script type to br run by Veriwave"}
	{apbranch.arg "NIGHTLY" "AP Branch to load"}
        {noapload "Don't load images"} 
        {reboot_chasis "Reboot Veriwave Chasis"} 
    }

    set TestType "Veriwave"

   set ap $(ap)
   set Router $(ap)

    set script_names $(script_names)

    # Reporting 
    set summaryinfo ""
    set TITLE "Veriwave:  $script_names "
    UTF::WrapSummary $UTF::SummaryDir $TITLE $summaryinfo $(email) {
    set ::UTF::Perfcache [file join $UTF::SummaryDir perfcache]

    # Add a web link to the test.log file
    UTF::Try "Link to test.log" {
        return "html: <a href=\"./test.log\">test.log</a>"
    }


    if {$(reboot_chasis)} {
        # Reboot Veriwave chasis
        UTF::Try "Reboot Veriwave Chasis" {
            # Resetting Veriwave chasis     
            # $VW "wtcmd reset [$VW lan cget -ipaddr]
            UTF::Sleep 60
        }
    }

    # Load AP image
    UTF::Try "Load AP image" {

        if {!$(noapload)} {
            UTF::Try "$Router: Find Router Image" {
                UTF::CheckImage $Router $date unknown
            }

            UTF::Try "$Router: Load Image" {
                if {[$Router hostis Router Vx BSDAP DSL Airport]} {
                    if {[catch {$Router lan ifconfig [$Router lan cget -ipaddr]}]} {
                        $Router lan ifconfig 192.168.1.50
                    }
                }
                set ver [$Router load]
                set what [$Router whatami]
                # Pull out chip info and replace whitespace to make it
                # easier for external parsers.
                regsub -all {\s+} [lreplace $what 0 0] {_} w
                if {[catch {$UTF::Summary header_update 1 $w} ret]} {
                    UTF::Message WARN $Router $ret
                }
                return "$what $ver"
            }
        }
    }


    # Now select the band on the AP
    UTF::Try "Enable band a" {

 	foreach AP $ap {
            $AP wl down
            $AP wl band a
            $AP wl up
        }

        return "$ap wl band"
    }


set script_name $script_names

set vw_bin_dir "/cygdrive/c/WA/automation_4.6-WT-3.9.3_2010.10.28.12_win32/automation/bin"
set vw_cmd_line "cd ${vw_bin_dir}; tclsh vw_auto.tcl -f ../conf/${script_name}.tcl --nopause"

    set fd [VWstation rpopen ${vw_cmd_line}]
    # Set up nonblocking reader event
    fconfigure $fd -blocking 0 -buffering line
    fileevent $fd readable [list getdata $fd]
    UTF::Sleep 30

           set status "Test In Progress" 
                    set currenttest "setup"

		while {[regexp {Test In Progress} $status]} {


                    if { [info exists ::UTF::Test::VWcurrenttest] } {
		    set currenttest "$::UTF::Test::VWcurrenttest"
                    }

                    set DUT "VW" 
		    UTF::Try "$DUT: Path Loss   $currenttest" {
			#set key [regsub -all {\s+} \ "$branch $DUT $currenttest" { }]
			# If MFGC reports the test is still running, but we
			# are not getting any results then something is wrong.

		            UTF::Message LOG "$DUT" "Path Loss   $currenttest" 
			    # Wait for the MFGC report parser to indicate
			    # the next test is starting
                            puts "now waiting on the vwait..."
			    timedvwait ::UTF::Test::VWcurrenttest
                            puts "var is $::UTF::Test::VWcurrenttest"
                            puts "now waiting on the vwait done"

            if { [regexp  "WaveApps/Results" $::UTF::Test::VWcurrenttest]} {
            set time-stamp-dir [file tail [file dir $::UTF::Test::VWcurrenttest]]
            # results dir
            set results_dir "/cygdrive/c/Documents*Settings/user/VeriWave/WaveApps/Results/${time-stamp-dir}"
            #$VWstation copyfrom "${results_dir}/*" $UTF::SummaryDir
            puts "scp cmd: scp -p -r user@172.19.12.239:${results_dir}/* $::UTF::Logdir"
            exec scp -p -r "user@172.19.12.239:${results_dir}/*" $::UTF::Logdir
            exec chmod -R 777 $::UTF::Logdir
                                   set status "DONE"
                                   set status_line "Passed"
                                   set currenttest "last"
                                   break;
            }
			    if {[regexp {ABORT} \
				     $::UTF::Test::VWcurrenttest]} {
                                   puts "Run ABORTED..."
                                   set status "DONE"
                                   set status_line "ABORTED"
                                   break;
			    } 



			    if {[regexp {Timeout} \
				     $::UTF::Test::VWcurrenttest]} {
                                   puts "Encountered time out..."
                                   set status "DONE"
                                   set status_line "Passed"
                                   set currenttest "last"
                                   break;
				# Else try again
			    } 

                     if { $status == "DONE" } { 
                                   set currenttest "last"
                         break;
                     } 

		    }
                     if { $status == "DONE" } { 
                                   set currenttest "last"
                         break;
                     } 
		}

    UTF::Message INFO "" $TITLE

    set header "1"

    if { $script_name == "rvr" } { 

       set script_name "rate_vs_range_s2" 

    } 

    # Add a PDF report to the logs
    UTF::Try "Link to $script_name PDF Report" {
        return "html: <a href=\"$script_name/Report_${script_name}.pdf\">Report_${script_name}.pdf</a>"
    }

    }

}

