#!/bin/env utf
# -*-tcl-*-
#

#
# UTF test script for a basic streams tests
#
# Written by: Robert J. McMahon April 2010
#
# $Id: 0ac1f95038744a63afa7393d3026d13e202531c6 $
# $Copyright Broadcom Corporation$
#
package require UTF
package require UTF::Streams
package require UTF::Test::APChanspec
package require UTF::Test::ConnectAPSTA
package require UTF::IGMPQuerier
package require UTF::Multicast

package provide UTF::Test::MulticastQoSBasic 1.1

#
#  Make sure that UDP Streams with QOS are prioritized over
#  best effort TCP streams
#
UTF::Test MulticastQoSBasic {args} {
    UTF::Getopts {
	{txsta.arg ""}
	{rxsta.arg ""}
	{nostaload ""}
	{noapload ""}
	{nosetup ""}
	{chanspec.arg "6"}
	{duration.arg "60"}
	{calrate.arg ""}
    }

    set upaplist ""
    set downaplist ""
    set wlstalist ""
    set bridgedev "br0"
    foreach device $(txsta) {
	set stapeer [$device cget -peer]
	if {$stapeer != "disconnected!" && $stapeer != ""} {
	    lappend upaplist $stapeer
	}
    }
    foreach device $(rxsta) {
	set stapeer [$device cget -peer]
	if {$stapeer != "disconnected!" && $stapeer != ""} {
	    lappend downaplist $stapeer
	} else {
	    lappend wlstalist $stapeer
	}
    }
    set aplist [concat $upaplist $downaplist]

    if {!$(nosetup)} {
	if {!$(nostaload)} {
	    foreach sta $wlstalist {
		$sta load
	    }
	}

        if {!$(noapload)} {
            foreach ap [concat $upaplist $downaplist] {
                $ap load
            }
        }

	#
	# Set chanpsec and enable EMF
	#
	foreach ap $upaplist {
	    $ap restore_defaults
	    APChanspec $ap $(chanspec)
	    UTF::Multicast::ConfigEMF -ap $ap -mode AP -ssid MCAST_QOS
	}
	foreach ap $downaplist {
	    $ap restore_defaults
	    APChanspec $ap $(chanspec) -loose
	    UTF::Multicast::ConfigEMF -ap $ap -mode WET -ssid MCAST_QOS
	}

	#
	# Note: Check connectAPSTA for multiple STAs and non open security
	#
	foreach sta $wlstalist {
	    UTF::Test::ConnectAPSTA [lindex $aplist end] $sta
	}
    }

    #
    # Create a UDP mcast video stream and a background TCP best effort stream
    #
    foreach rx $(rxsta) {
	set tcp($rx) [::UTF::stream create %AUTO%]
	$tcp($rx) configure -protocol tcp
	$tcp($rx) configure -reportinterval 1.0
	$tcp($rx) configure -receivesta $rx
	$tcp($rx) configure -transmitsta $(txsta)
	$tcp($rx) configure -advancedstats on
    }
    #
    # Measure the tcp best effort rate without the videostream,
    # i.e. a besteffort rating
    #
    UTF::Message INFO+green "" "Taking best effort measurement"
    ::UTF::stream allstreams start
    UTF::Sleep 30
    set besteffortrating 0
    foreach $rx $(rxsta) {
	set avg [lindex [$tcp($rx) stats -rate -mma] 0]
	UTF::Message INFO $tcp($rx) "Rate: $avg"
	if {$avg != {}} {
	    incr besteffortrating [expr {int($avg)}]
	} else {
	    UTF::Message WARN $rx "No rate measurments for TCP stream."
	}
	if {$besteffortrating == {}} {
	    ::UTF::stream allstreams destroy
	    error "null best effort rating for $rx"
	}
    }
    UTF::Message INFO+blue "TCP-streams" "Besteffort rating is $besteffortrating"
    ::UTF::stream allstreams stop
    #
    # Create the multicast video stream
    #
    set vs [::UTF::stream create videostream]
    $vs configure -traffictype HDVIDEO
    $vs configure -receivesta $(rxsta)
    $vs configure -transmitsta $(txsta)

    if {$(calrate) == {}} {
	# Set to unicast for calibration
	$vs configure -multicast off
	$vs configure -receivesta [lindex $(rxsta) 0]
	set udpmaxrate [$vs calibrate_actualoffered]
	UTF::Message INFO+blue "$vs" "UDP rate: $udpmaxrate"
	# Reset back to multicast
	$vs configure -receivesta $(rxsta)
	$vs configure -multicast on
    } else {
	set udpmaxrate $(calrate)
    }

    # Create and start the IGMP querier in UTF
    set upstream_ap [$(txsta) cget -peer]
    set igmpq [UTF::IGMPQuerier create %AUTO% -ap $upstream_ap]
    $igmpq start
    $igmpq send

    #
    #  Now start the UDP video stream and make sure it's ok
    #
    $vs start
    set ns [namespace current]
    set ${ns}::watchdog 0
    after 3000 [list set ${ns}::watchdog 1]
    while {[$vs stats -count] != {} && ![set ${ns}::watchdog]} {
	UTF::Sleep 1.0
    }
    if {[set ${ns}::watchdog]} {
	UTF::Message WARN $vs "No stats captured"
    }
    UTF::Message INFO allstream "Clearing all stats"
    ::UTF::stream allstreams stats -clear
    UTF::Sleep 3
    set videostreamloststats [$vs stats -lost -meanminmax]
    set videostreamratestats [$vs stats -rate -meanminmax]
    foreach videostreamlost $videostreamloststats {
	set maxlost [lindex [lindex $videostreamlost end] end]
	UTF::Message INFO "" "vs: $videostreamlost $maxlost"
	if {$maxlost > 4} {
	    # UTF::Interact
	    ::UTF::stream allstreams destroy
	    error "Video stream losing packets: $videostreamloststats"
	}
    }
    $vs stop
    UTF::Message PASS+green "videostream" "stream ok: lost stats=$videostreamloststats"
    UTF::Message INFO "vidoestream" "Rates: $videostreamratestats"
    #
    #  Create UDPs stream with lowest QoS
    #
    foreach rx $(rxsta) {
	set udp($rx) [::UTF::stream create %AUTO%]
	$udp($rx) configure -protocol udp
	$udp($rx) configure -receivesta $rx
	$udp($rx) configure -transmitsta $(txsta)
	$udp($rx) configure -advancedstats on
	$udp($rx) configure -traffictype BESTEFFORT
	set tmp [expr {int(($besteffortrating * 2 / [llength $(rxsta)]) / 1000000)}]M
	$udp($rx) configure -rate $tmp
	UTF::Message INFO "stream" "UDP low priority for $(txsta)->$rx at $tmp"
    }
    #
    # Run with no QoS
    #
    $vs configure -tos 0x0
    ::UTF::stream allstreams start
    UTF::Message INFO allstream "Clearing all stats"
    ::UTF::stream allstreams stats -clear
    foreach apdevice $aplist {
	set output [$apdevice emf show stats $bridgedev]
    }
    UTF::Sleep 10
    UTF::Message INFO+blue videostream "Lost stats: [$vs stats -lost]"
    UTF::Message INFO+blue videostream "Rate stats: [$vs stats -rate -mma]"
    UTF::Message INFO+blue videostream "NoQos: Actual/Offered: [$vs stats -offeredactual -mma]"
    foreach apdevice $aplist {
	set output [$apdevice emf show stats $bridgedev]
    }
    ::UTF::stream allstreams stop
    UTF::Sleep 10

    #
    # Turn on QoS
    #
    $vs configure -tos 0x80
    #
    #  Run alll streams (best effort tcp streams and multicast video)
    #
    ::UTF::stream allstreams start
    UTF::Message INFO+cyan allstream "Clearing all stats"
    ::UTF::stream allstreams stats -clear
    foreach apdevice $aplist {
	set output [$apdevice emf show stats $bridgedev]
    }
    #
    # Loop polling stats every 10 seconds
    #
    set loopcount [expr {int($(duration) / 10)}]
    for {set ix 0} {$ix < $loopcount} {incr ix} {
	UTF::Sleep 10
	foreach apdevice $aplist {
	    set output [$apdevice emf show stats $bridgedev]
	}
	#
	#  Check videostream
	#
	set videostreamloststats [$vs stats -lost -meanminmax]
	foreach videostreamlost $videostreamloststats {
	    set maxlost [lindex [lindex $videostreamlost end] end]
	    if {$maxlost > 4} {
		UTF::Message INFO+red $vs "Lost stats: $videostreamloststats"
		UTF::Message INFO+red $vs "Rate stats: [$vs stats -rate -mma]"
		UTF::Message INFO+red $vs "Actual/Offered: [$vs stats -offeredactual -mma]"
		#		::UTF::stream allstreams stop
		#		::UTF::stream allstreams destroy
		#	error "Video stream losing packets: $videostreamloststats"
	    }
	    set offeredactuals [$vs stats -offeredactual -mma]
	    foreach offeredactual $offeredactuals {
		set rx [lindex $offeredactual 0]
		set value [lindex [lindex $offeredactual end] 0]
		if {[string is double $value] && $value < 88} {
		    if {![info exists errmsg]} {
			set errmsg "Multicast QoS fail: "
		    }
		    UTF::Message WARN+red $vs "Actual/Offered less than 90%"
		    ::UTF::stream allstreams stop
		    ::UTF::stream allstreams destroy
		    append errmsg " $rx $value :"
		}
	    }
	    if {[info exists errmsg]} {
		error "Video stream multicast QoS not working, $rx $value"
	    }
	}
	UTF::Message INFO videostream "Lost stats: $videostreamloststats"
	UTF::Message INFO videostream "Actual/Offered: [$vs stats -offeredactual -mma]"
    }
    UTF::Message PASS+green "QoS Test" "Videostream=[$vs stats -rate -mma]"
    #
    # Clean up
    #
    $imgpq stop
    ::UTF::stream allstreams destroy
}
