#!/bin/env utf
# -*-tcl-*-
#

#
# UTF test script to test using a turntable
#
#
# $Copyright Broadcom Corporation$
#
package require UTF
package require UTF::Test::MultilinkTraffic

UTF::Test TurnTable {args} {
    UTF::Getopts {
	{title.arg "" "UTF title"}
	{email.arg "" "Email Address"}
	{ap.arg "4708mch5" "AP under test"}
	{stas.arg "psta2mch5 psta3mch5 psta4mch5 psta5mch5 psta6mch5" "STAs for test"}
	{angles.arg "0 45 90 135 180 225 270 315" "turn table positions"}
	{scheme.arg "idle" "Pseudo concurrency scheme"}
	{skiptest "Issue turn commands but skip perf test"}
    }
    [snit::enum %AUTO% -values [list idle async]] validate $(scheme)

    ## Setting the title.
    set TITLE "UTF $(title)"
    UTF::WrapSummary $UTF::SummaryDir $TITLE "" $(email) {
	UTF::Message INFO "" $TITLE
	if {$(scheme) ne "async"} {
	    # Issue a connect command to initialize fsh and help with
	    # recursion Normally not needed, being done for recursion
	    # later in the script
	    foreach relay [concat $(ap) $(stas)] {
		$relay lan connect
	    }
	}
	foreach CW $(angles) {
	    set CCW [expr (360 - $CW)]
	    UTF::Try "Turn table command AP=$CW STAs=$CCW" {
		switch $(scheme) {
		    "idle" {
			# Bob's approach
			# Use after idle so TCL can schedule all of the
			# turns to run pseudo concurrently
			# First post the commands
			set aids {}
			set cmd [list $(ap) lan -n -t 60 turn $CW]
			UTF::Message INFO $(ap) "TurnTable to $CW with $cmd"
			lappend  aids [after idle $cmd]
			foreach STA $(stas) {
			    set cmd [list $STA lan -n -t 60 turn $CCW]
			    UTF::Message INFO $STA "TurnTable to $CCW with $cmd"
			    lappend aids [after idle $cmd]
			}
			# Now invoke the TCL scheduler with update
			# idletasks so the posted after idle commands
			# can run.  Wait until they all complete
			# before moving to the actual traffic test.
			# Note: Only one call to 'update idletasks' is
			# needed as they all should complete at then
			# end of the update.  The while loop provides
			# "belts and suspenders" and isn't needed.
			# Leave it for now as it doesn't hurt
			# anything.
			while {[llength [UTF::Common $aids [after info]]]} {
			    update idletasks
			}
		    }
		    "async" {
			UTF::Message INFO $(ap) "TurnTable to $CW"
			set rexecs [$(ap) lan rexec -async -n -t 60 turn $CW]
			foreach STA $(stas) {
			    UTF::Message INFO $STA "TurnTable to $CCW"
			    lappend rexecs [$STA lan rexec -async -n -t 60 turn $CCW]
			}
			foreach r $rexecs {
			    $r close
			}
		    }
		}
	    }
	    if {$(skiptest)} {
		UTF::Sleep 10
	    } else {
		# Run the traffic test for this turntable position
		UTF::Test::MultilinkTCPTraffic -ap $(ap) -stas $(stas)
	    }
	}
    }
}
