#!/bin/env utf
# -*-tcl-*-
#

#
# UTF test script to qualify TCP
#
# Written by: Robert J. McMahon January 2016
#
# $Copyright Broadcom Corporation$
#
package require UTF
package require UTF::Streams
package require UTF::MemChart
package require UTF::Test::ConnectAPSTA
package require UTF::Test::APChanspec
package require math::statistics

namespace eval UTF::Test {
    variable _previous_timestamp
    proc rtt_check {args} {
	set handler [lindex $args 0]
	set stream [lindex $args 1]
	if {$handler eq "tx" && [expr {[lindex [$stream stats -rtt -silent] end] > 7000}]} {
	    UTF::Message TRIG [$stream cget -name] {RTT greater than 7 milliseconds}
	    $stream configure -trigger_callback {} -trigger_armed 0
	    set tx [$stream cget -transmitsta]
	    after 1 "$tx wl dump ampdu;"
	}
    }
    proc induce_variance {args} {
	set handler [lindex $args 0]
	set stream [lindex $args 1]
	if {[expr {[$stream stats -uptime] > [$stream cget -t] / 2}]} {
	    $stream configure -trigger_armed 0
	    set rx [$stream cget -receivesta]
	    # after 1 "$tx wl scan;"
	    set count 10; set suspend 10
	    set spacing [expr {5 * $suspend}]
	    UTF::Message TRIG [$stream cget -name] "Induce $suspend ms latency $count times with $spacing ms spacing"
	    for {set ix 0} {$ix < $count}  {incr ix} {
		after [expr {($ix * $spacing) + 1}]  "$rx wl suspend_mac $suspend;"
	    }
	}
    }
    proc cpu_stats {args} {
	set handler [lindex $args 0]
	set stream [lindex $args 1]
	if {$handler eq "tx"} {
	    set now [clock click -milliseconds]
	    if {![info exists ::UTF::Test::_previous_timestamp]} {
		set ::UTF::Test::_previous_timestamp $now
	    } else {
		if {[expr {($now - $::UTF::Test::_previous_timestamp) > 1000}]} {
		    set stream [lindex $args 1]
		    set ::UTF::Test::_previous_timestamp $now
		    after 1 [list catch "[$stream cget -transmitsta] rexec mpstat -P ALL; [$stream cget -transmitsta] rexec mpstat -P ALL -I SUM"]
		}
	    }
	}
    }
    proc amsdu_enable {dut} {
	after 1 "$dut wl amsdu_aggsf 2"
    }
    proc amsdu_disable {dut} {
	after 1 "$dut wl amsdu_aggsf 1"
    }
    proc amsdu_auto_enable {args} {
	set handler [lindex $args 0]
	set stream [lindex $args 1]
	if {$handler eq "tx"} {
	    if {[expr {([$stream stats -silent -uptime] * 1000) > $::UTF::Test::_amsdu_enable_delay}]} {
		$stream configure -trigger_armed 0
		::UTF::Test::amsdu_enable [$stream cget -transmitsta]
		$stream set_userdata [list a [expr {[UTF::stream clock] - [$stream stats -silent -starttime]}]]
	    }
	}
    }
}

UTF::Test TCPPerf {args} {
    UTF::Getopts {
	{email.arg "" "Email Addrss"}
	{title.arg "" "Title"}
	{date.arg "" "Image date"}
	{bin.arg "" "STA image"}
	{tag.arg "" "tag override"}
	{dhd_tag.arg "" "dhd tag override"}
	{noload "don't load the images"}
	{noapload "don't load the ap image"}
	{nosetup "don't run testbed setup routine"}
	{ap.arg "SoftAP" "APs under test"}
	{sta.arg "fc19 fc22" "STA(s) under test"}
	{msglevel.arg "-scan" "wl msglevel to apply"}
	{mpdudense.arg "64 32 8" "mpdu densities"}
	{frameburst.arg "0 1" "frameburst values"}
	{chanspec.arg "161/80" "Chanspecs to use in the tests, support for 'random'"}
	{security.arg "open" "Default security"}
	{direction.arg "up" "Traffic direction"}
	{w.arg "4M" "Window size"}
	{i.arg "0.025" "Report interval"}
	{holdtime.arg "30" "Total traffic time"}
	{loop.arg "3" "Number of iterations of test vector"}
	{readdelay.arg "0" "Time in milliseconds to delay before first read"}
	{tcptrace "Capture tcp pcaps and run tcptrace"}
	{txop "Override txop"}
	{rtt_trigger "Enable rtt mean shift detection and actions"}
	{initcwnd.arg "-1" "init cwnd"}
	{initrtt.arg "-1" "init rtt"}
	{initrttvar.arg "-1" "init rttvar"}
	{cpu "issue cpu command"}
	{var "induce variance"}
	{target.arg "20ms" "Codel target"}
	{qdisc "Enable qdisc settings"}
	{amsdu.arg "1 agg_off 0 auto " "AMSDU settings"}
	{atf.arg "0 1" "ATF settings"}
	{auto_amsdu_delay.arg "500" "time in ms to enable amsdu"}
	{tcp_output_bytes_limit.arg "1280K" "TCP's output byte limit setting"}
    }

    set procmsgtag [namespace tail [lindex [info level 0] 0]]

    #    set (mpdudense) [lsort -decreasing $(mpdudense)]

    if {$(tag) ne ""} {
	foreach STA $(sta) {
	    $STA configure -tag $(tag) -date {}
	}
    }
    if {$(dhd_tag) ne ""} {
	foreach STA $(sta) {
	    $STA configure -dhd_tag $(dhd_tag)
	}
    }
    if {$(bin) ne ""} {
	foreach STA $(sta) {
	    $STA configure -image $(bin) -date {}
	}
    }
    set today [join [clock format [clock seconds] -format "%Y %N %e"] .]
    if {$(date) ne ""} {
	foreach STA $(sta) {
	    $STA configure -date $(date)
	    if {[$STA hostis DHD]} {
		$STA configure -dhd_date $(date)
	    }
	}
    } else {
	set (date) $today
    }
    if {$(direction) eq "up"} {
	set txs $(sta)
	set rxs $(ap)
	set mode ap
    } else {
	set txs $(ap)
	set rxs $(sta)
	set mode sta
    }
    # Compact build list for title
    # Include the WDS list, in case the AP list is empty.  Duplicates
    # will be removed automatically.
    set build [UTF::BuildTitle [concat $(sta) $(ap)]]
    set TITLE "TCP Performance\([file rootname [file tail $::utfconf]]\) $(title) ($build) (ch=${(chanspec)},$(security))"
    UTF::Message INFO "" $TITLE
    unset build

    UTF::WrapSummary $UTF::SummaryDir $TITLE "" $(email) {
	set ::UTF::__tryid "auto"
	UTF::Try "Iperf -v" {
	    foreach STA $(sta) {
		catch {$STA rexec iptables -F}
		catch {$STA rexec iperf -v}
	    }
	    catch {$(ap) rexec iperf -v} ver
	    return $ver
	}
	if {!$(noload)} {
	    foreach STA $(sta) {
		if {$(bin) ne ""} {
		    $STA configure -image $(bin) -date {}
		}
		UTF::Try "$STA Find STA Image" {
		    UTF::CheckImage $STA $(date) unknown
		}
		UTF::Try "$STA load" {
		    $STA load
		}
		if {[$STA hostis Linux DHD]} {
		    UTF::Try "$STA modules" {
			$STA lsmod
			return
		    }
		}
		UTF::ReportDriver $STA $(date)
		UTF::Try "[$STA cget -name]: defaults, logs" {
		    $STA services stop
		    catch {$STA wl msglevel +error +assoc +regulatory}
		    set what [$STA whatami]
		    # Pull out chip info and replace whitespace to
		    # make it easier for external parsers.
		    regsub -all {\s+} [lreplace $what 0 0] {_} w
		    if {[catch {$UTF::Summary header_update 1 $w} ret]} {
			UTF::Message WARN $STA $ret
		    }
		    $STA dbrecord DUT
		    set what
		}
	    }
	}
	foreach STA $(sta) {
	    UTF::Try "$STA Model/OS " {
		set model "unknown"
		set osver "unknown"
		set os "unknowns"
		if {[$STA hostis Linux DHD]} {
		    set osver "[$STA rexec uname -r]"
		    if {[regexp {Manufacturer:\s+(.+)\n\s+Product Name:\s+(.+)\n\sVersion:} [$STA rexec dmidecode -t 2] - mfg board]} {
			set model [string map {" " _} "[string trim ${mfg}]/[string trim $board]"]
		    }
		    set os [$STA rexec uname]
		    $STA rexec dmidecode -t 4
		    $STA rexec lscpu
		}
		return "${model}/${osver}"
	    }
	}
	UTF::Try "Connect $(ap) $(sta) $(security) $(chanspec)" {
	    UTF::Test::ConnectAPSTA $(ap) $(sta) -security $(security) -chanspec $(chanspec)
	}
	UTF::Try "Phy Verification" {
	    foreach STA $(sta) {
		UTF::Try "PhyChan $STA" {
		    package require UTF::PhyChanEst
		    set phyestimator [UTF::PhyChanEst %AUTO% -ap $(ap) -sta $STA -mode $mode]
		    for {set ix 0} {$ix < 2} {incr ix} {
			UTF::Try "Phy estimate $ix" {
			    $phyestimator sample
			    $phyestimator mylink
			}
		    }
		    set text "[$phyestimator bestrate]"
		    return [$phyestimator condition $text]
		}
		foreach p [UTF::PhyChanEst info instances] {
		    $p destroy
		}
	    }
	}

	foreach RX $rxs {
	    foreach frameburst $(frameburst) {
		foreach AMSDU $(amsdu) {
		    if {$AMSDU eq "auto" && $(auto_amsdu_delay) > 0} {
			set AUTOAMSDUTXT "AMSDU=auto($(auto_amsdu_delay) ms)"
		    } else {
			set AUTOAMSDUTXT "AMSDU=$AMSDU"
		    }
		    foreach ATF $(atf) {
			foreach mpdudense $(mpdudense) {
			    set TRYTXTBASE "MDENSE=$mpdudense FB=$frameburst $AUTOAMSDUTXT ATF=$ATF OB=$(tcp_output_bytes_limit) [string toupper $(direction)]"
			    if {$(initcwnd) ne "-1"} {
				append TRYTXTBASE " CWND=$(initcwnd)"
			    }
			    UTF::Try "+$TRYTXTBASE" {
				set rdtoggle 2
				set rdcolor 2
				foreach RD $(readdelay) {
				    UTF::Try "+ReadDelay=${RD} Loop=$(loop)" {
					set rdcolor [expr {$rdcolor^$rdtoggle}]
					for {set loopix 0} {$loopix < $(loop)} {incr loopix} {
					    set txcolor 0
					    array unset Compare *
					    catch {unset comparecolor}
					    set COMPARETITLE "FB=$frameburst MDense=$mpdudense $AUTOAMSDUTXT"
					    set colors(1) "Purple"
					    set colors(2) "Green"
					    set colors(3) "Blue"
					    set colors(4) "Orange"
					    foreach TX $txs {
						incr txcolor
						set linecolor [expr {($rdcolor * [llength $txs]) + ($frameburst * [llength $txs]) + $txcolor}]
						if {![info exists comparecolor]} {
						    set comparecolor $linecolor
						}
						set TRYTXT "[string toupper $TX] $TRYTXTBASE"
						set TRYTXT [string map {_ " "} $TRYTXT]
						append COMPARETITLE " $TX=$colors($txcolor)"
						UTF::Try $TRYTXT {
						    $TX wl down
						    $TX wl atf $ATF
						    if {$AMSDU eq "auto"} {
							$TX wl amsdu 1
							amsdu_disable $TX
						    } elseif {$AMSDU eq "agg_off"} {
							$TX wl amsdu 1
							amsdu_disable $TX
						    } else {
							$TX wl amsdu $AMSDU
							amsdu_enable $TX
						    }
						    $TX wl up
						    $TX wl join [$(ap) wl ssid]
						    set apbssid [$(ap) wl bssid]
						    set watchdog [after [expr {20 * 1000}] "::UTF::Message ERROR $TX {join timeout}"]
						    while {![set timeout [catch {after info $watchdog}]]} {
							if {[catch {$TX wl bssid} bssid] ||  $bssid ne $apbssid } {
							    UTF::Sleep 0.25 quiet
							} else {
							    break
							}
						    }
						    if {$timeout} {
							error "$TX join failed"
						    } else {
							catch {after cancel $watchdog}
						    }
						    $TX wl ampdu_mpdu $mpdudense
						    $TX wl frameburst $frameburst
						    set STREAM [UTF::stream %AUTO% -name ${TX}-$(direction) -protocol tcp -w $(w) -tx $TX -rx $RX -reportinterval $(i) -tcptrace $(tcptrace) -t $(holdtime) -linetype $linecolor -readdelay $RD -initcwnd $(initcwnd) -initrtt $(initrtt)]
						    if {$(txop)} {
							$TX wl -u wme_ac sta be txop 5e ecwmin 1 ecwmax 1
							set cwmin "unk"
							set cwmax "unk"
							if {![catch {$TX wl dump wme} output]} {
							    if {![regexp {AC_BE: txop [0-9x]+\s+cwmin\s+([0-9x]+)\s+cwmax\s+([0-9x]+)} $output - cwmin cwmax]} {
								UTF::Message WARN $hnsta "Could not find cwmin/cwmax"
							    }
							}
						    }
						    $TX -x sysctl -w net.ipv4.tcp_limit_output_bytes=[UTF::kexpand $(tcp_output_bytes_limit)]
						    if {$(qdisc)} {
							$TX rexec tc qdisc replace dev [$TX cget -device] root fq_codel target $(target)
							$TX rexec tc qdisc replace dev [$TX cget -device] root fq nopacing
						    }
						    $TX rexec tc -s -d qd
						    if {[catch {$TX wl ampdu_clear_dump}]} {
							$TX wl dump_clear ampdu
							$TX wl dump_clear amsdu
						    }
						    catch {$TX wl dump ampdu}
						    catch {$TX wl dump amsdu}
						    set rttyrange "0:30000"
						    if {$(rtt_trigger)} {
							$STREAM configure -trigger_callback "::UTF::Test::rtt_check" -trigger_armed 1
						    }
						    if {$(cpu)} {
							$STREAM configure -trigger_callback "::UTF::Test::cpu_stats" -trigger_armed 1
						    }
						    if {$(var)} {
							$STREAM configure -trigger_callback "::UTF::Test::induce_variance" -trigger_armed 1
							set rttyrange "0:30000"
						    }
						    if {$AMSDU eq "auto" && $(auto_amsdu_delay) > 0} {
							set ::UTF::Test::_amsdu_enable_delay $(auto_amsdu_delay)
							$STREAM configure -trigger_callback "::UTF::Test::amsdu_auto_enable" -trigger_armed 1
						    }
						    catch {$STREAM test}
						    if {![catch {$TX wl dump ampdu} ampduoutput]} {
							if {[regexp {MPDUdens(:.+)TX MCS SGI:} $ampduoutput - densetable]} {
							    set densetable [string map {: {} \n {} } $densetable]
							    if {[llength $densetable] ne 128} {
								UTF::Message WARN "" "Parital mdense in ampdu output"
							    }
							    set ix 1
							    array unset MPDUDense *
							    foreach {A B} $densetable {
								set MPDUDense($ix) $A
								lappend Compare($ix) $A
								incr ix
							    }
							    for {set jx $ix} {$jx <= 64} {incr jx} {
								lappend Compare($jx)  0
							    }
							    set densegraph [UTF::Streamslib::grapharray MPDUDense -style impulses -title "MPDUDense $TRYTXT" -yprecision 1 -append -linetype $linecolor -xtics "0,2,64" -xrange {[0:65]}]
							}
						    }
						    catch {$TX wl dump amsdu}
						    if {$(tcptrace)} {
							UTF::Try "tcptrace" {
							    return "html:<a href=\"[$STREAM tcptrace xfer]\">pcap</a>"
							}
						    }
						    set rate_text "Avg Rate=[lindex [$STREAM stats -rate -meanminmax -h] 0]"
						    set rttdata [$STREAM stats -rtt -silent]
						    set rttresults {}
						    foreach stattype "mean max stdev" {
							set r "[expr [math::statistics::$stattype $rttdata]/1000.0]"
							if {$stattype eq "stdev"} {
							    lappend rttresults [format %0.2f $r]
							} else {
							    lappend rttresults [format %0.1f $r]
							}
						    }
						    set rtt_text "RTT(Mean/Max/Stdev)=[join $rttresults /] ms"
						    set cwnd_text "CWND"
						    set graph "[$STREAM plot -yrange 0:1200000000 -stat rate -text $rate_text -title $TRYTXT][$STREAM plot -stat cwnd -append -text $cwnd_text -yrange 0:6000 -title "CWND $TRYTXT"][$STREAM plot -stat rtt -append -text $rtt_text -yrange $rttyrange -title "$rtt_text $TRYTXT"] $densegraph"
						    if {$TX ne [lindex $txs 0]} {
							set COMPARETITLE [string map {_ " "} $COMPARETITLE]
							append graph [UTF::Streamslib::grapharray Compare -style histogram -title $COMPARETITLE -yprecision 1 -append -linetype $comparecolor -xtics "0,2,64" -xrange {[0:65]}]
						    }
						    $STREAM destroy
						    return $graph
						}
					    }
					}
				    }
				}
			    }
			}
		    }
		}
	    }
	}
	UTF::stream exitstreams
    }
}
