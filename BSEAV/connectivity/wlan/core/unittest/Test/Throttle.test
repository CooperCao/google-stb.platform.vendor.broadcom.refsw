#!/bin/env utf
# -*-tcl-*-
#
#
# UTF test script for Power and Thermal Throttling features
#
# Written by: Robert J. McMahon April 2013
#
# $Copyright Broadcom Corporation$
package require UTF
package require UTF::Streams
package require UTF::math
package require UTF::MemChart
package require UTF::ControlChart
package require UTF::Test::TemperatureConvergence

package provide UTF::Test::Throttle 2.0

UTF::Test Throttle {args} {
    UTF::Getopts {
	{ap.arg "" "AP under test"}
	{sta.arg "" "STA under test"}
	{protocol.arg "tcp" "IP protocol"}
	{pktsize.arg "1460" "UDP packet size to use"}
	{key.arg "" "Control chart key"}
	{history.arg "30" "History"}
	{measuretemps "Do temperature measurements"}
	{nothermalthrottle "Don't run thermal throttle test"}
	{nopowerthrottle "Don't run power throttle test"}
    }
    if {$(key) eq ""} {
	UTF::Try "NULL Key" {
	    error "please pass -key"
	}
    }
    set (protocol) [string toupper $(protocol)]
    # Create traffic stream
    set traffic [UTF::stream %AUTO% -protocol $(protocol) -rx $(ap) -tx $(sta) -pktsize $(pktsize) -w 1M -tcptune 1]
    set (key) [concat $(key) [$traffic id] [$(sta) wl chanspec]]
    # Take baseline measurements with feature(s) off
    set footnote ""
    UTF::Try "Features OFF : $(protocol) Thruput" {
	set dosleep 0
	if {[lindex [$(sta) wl phy_tempsense_override] 0]} {
	    $(sta) wl phy_tempsense_override 0
	    set dosleep 1
	}
	if {[$(sta) wl pwrthrottle] ne "-1"} {
	    $(sta) wl pwrthrottle -1
	    set dosleep 1
	}
	if {$dosleep} {
	    UTF::Sleep 10
	}
	if {![catch {$(sta) wl txchain} chainmask]} {
	    set numchains [UTF::CountBitsSet $chainmask]
	    UTF::Message INFO "" "txchain mask $chainmask, number chains $numchains"
	}
	if {$(protocol) eq "TCP"} {
	    $traffic start
	} else {
	    set sendrate [expr {1.1 * [$traffic calibrate_actualoffered]}]
	    $traffic configure -rate "[expr {int($sendrate)}]M"
	    $traffic start
	}
	UTF::Sleep 2.0
	$(sta) wl -u ampdu_clear_dump
	$traffic stats -clear
	UTF::Sleep 3.0
	set tmp [$traffic stats -rate -meanminmax]
	foreach d $tmp {
	    lappend mmm [format %0.1f [expr {$d / 1000000.0}]]
	}
	set baserate [lindex $mmm 0]
	UTF::Message INFO "" "Base thruput = $baserate Mbs"
	$(sta) wl -u dump ampdu
	$(sta) wl -u curpower
	$(sta) wl -u txpwr
	set cc [UTF::ControlChart %AUTO% -key "$(key) base" -history $(history) -perfcache "" -title "$(protocol) thruput" -units "Mbs"]
	set boundsresults [$cc addsample $mmm]
	if {[regexp {(HIGH|LOW|WIDE|ZERO)} $boundsresults - match]} {
	    set footnote "*"
	    error [$cc plotcontrolchart "$match ${baserate} Mbs"]
	} else {
	    return [$cc plotcontrolchart "${baserate} Mbs" ]
	}
    }
    if {$(measuretemps)} {
	UTF::Try "Features OFF : Temps" {
	    $traffic start
	    if {[catch {UTF::Test::TemperatureConvergence -sta $(sta)} res]} {
		UTF::Message ERROR "" "Temp convergence failed"
	    }
	    set basetemp [lindex $res 1]
	    set cc [UTF::MemChart %AUTO% -key "$(key) base temps" -history $(history) -perfcache "" -title "Temperature" -units "C"]
	    set boundsresults [$cc addsample $basetemp]
	    if {[regexp {(HIGH|LOW|WIDE|ZERO)} $boundsresults - match]} {
		error [$cc plotcontrolchart "$basetemp $match"]
	    } else {
		return [$cc plotcontrolchart "$basetemp"]
	    }
	}
    }
    if {!$(nothermalthrottle)} {
	UTF::Try "Thermal throttle$footnote" {
	    set thresh [lindex [$(sta) wl phy_tempthresh] 0]
	    $(sta) wl phy_tempsense_override [expr {int($thresh + 200)}]
	    UTF::Sleep 10
	    if {[info exists numchains]} {
		set chains [UTF::CountBitsSet [$(sta) wl txchain]]
		if {[expr {$numchains - $chains }] != 1} {
		    error "txchains not reduced properly: $numchains to $chains"
		}
	    }
	    if {$(measuretemps)} {
		if {[catch {UTF::Test::TemperatureConvergence -sta $(sta)} res]} {
		    UTF::Message ERROR "" "Temp convergence failed"
		}
	    }
	    $traffic stats -clear
	    UTF::Sleep 3.0
	    set rate [format %0.1f [expr {[lindex [$traffic stats -rate -meanminmax] 0] / 1000000.0}]]
	    UTF::Message INFO "" "Thermal thruput = $rate Mbs"
	    $(sta) wl -u curpower
	    $(sta) wl -u txpwr
	    $(sta) wl phy_tempsense_override 0
	    UTF::Sleep 10
	    if {[info exists numchains]} {
		set chains [UTF::CountBitsSet [$(sta) wl txchain]]
		if {$numchains != $chains} {
		    error "txchains not restored, got $chains expected $numchains"
		}
	    }
	    set perc [format %0.2f [expr {100.0 - (100.0 * ($baserate - $rate) / $baserate)}]]
	    set cc [UTF::MemChart %AUTO% -key "therm perc $(key)" -history $(history) -perfcache "" -title "Therm $(protocol) thruput decrease" -units "%"]
	    set boundsresults [$cc addsample $perc]
	    if {[regexp {(HIGH|LOW|WIDE|ZERO)} $boundsresults - match]} {
		error [$cc plotcontrolchart "$match $rate Mbs ${perc}%"]
	    } else {
		return [$cc plotcontrolchart "$rate Mbs ${perc}%" ]
	    }
	}
    }
    if {!$(nopowerthrottle)} {
	UTF::Try "Power throttle$footnote" {
	    $(sta) wl pwrthrottle 1
	    UTF::Sleep 10
	    if {[info exists numchains]} {
		set chains [UTF::CountBitsSet [$(sta) wl txchain]]
		if {[expr {$numchains - $chains }] != 1} {
		    error "txchains not reduced properly: $numchains to $chains"
		}
	    }
	    $traffic stats -clear
	    UTF::Sleep 3.0
	    set rate [format %0.1f [expr {[lindex [$traffic stats -rate -meanminmax] 0] / 1000000.0}]]
	    UTF::Message INFO "" "Power throttled thruput = $rate Mbs"
	    $(sta) wl -u curpower
	    $(sta) wl -u txpwr
	    $(sta) wl pwrthrottle -1
	    UTF::Sleep 10
	    if {[info exists numchains]} {
		set chains [UTF::CountBitsSet [$(sta) wl txchain]]
		if {$numchains != $chains} {
		    error "txchains not restored, got $chains expected $numchains"
		}
	    }
	    set perc [format %0.2f [expr {100.0 - (100.0 * ($baserate - $rate) / $baserate)}]]
	    set cc [UTF::MemChart %AUTO% -key "power perc $(key)" -history $(history) -perfcache "" -title "Power $(protocol) thruput decrease" -units "%"]
	    set boundsresults [$cc addsample $perc]
	    if {[regexp {(HIGH|LOW|WIDE|ZERO)} $boundsresults - match]} {
		error [$cc plotcontrolchart "$match $rate Mbs ${perc}%"]
	    } else {
		return [$cc plotcontrolchart "$rate Mbs ${perc}%" ]
	    }
	}
    }
    if {!$(nopowerthrottle) && !$(nothermalthrottle)} {
	UTF::Try "Thermal & Power$footnote" {
	    set thresh [lindex [$(sta) wl phy_tempthresh] 0]
	    $(sta) wl phy_tempsense_override [expr {int($thresh + 200)}]
	    $(sta) wl pwrthrottle 1
	    UTF::Sleep 10
	    $traffic stats -clear
	    UTF::Sleep 3.0
	    set rate [format %0.1f [expr {[lindex [$traffic stats -rate -meanminmax] 0] / 1000000.0}]]
	    UTF::Message INFO "" "Power/Thermal throttled thruput = $rate Mbs"
	    $(sta) wl -u curpower
	    $(sta) wl -u txpwr
	    $(sta) wl pwrthrottle -1
	    $(sta) wl phy_tempsense_override 0
	    set perc [format %0.2f [expr {100.0 - (100.0 * ($baserate - $rate) / $baserate)}]]
	    set cc [UTF::MemChart %AUTO% -key "power/therm perc $(key)" -history $(history) -perfcache "" -title "PowerTherm $(protocol) thruput decrease" -units "%"]
	    set boundsresults [$cc addsample $perc]
	    if {[regexp {(HIGH|LOW|WIDE|ZERO)} $boundsresults - match]} {
		error [$cc plotcontrolchart "$match $rate Mbs ${perc}%"]
	    } else {
		set powerpass 1
		return [$cc plotcontrolchart "$rate Mbs ${perc}%" ]
	    }
	}
    }
    UTF::Try "Features OFF: Recover" {
	if {[lindex [$(sta) wl phy_tempsense_override] 0]} {
	    $(sta) wl phy_tempsense_override 0
	}
	if {[$(sta) wl pwrthrottle] ne "-1"} {
	    $(sta) wl pwrthrottle -1
	}
	UTF::Sleep 10
	if {[info exists numchains]} {
	    set chains [UTF::CountBitsSet [$(sta) wl txchain]]
	    if {[expr {$numchains - $chains}]} {
		error "txchains not recovered properly: got $chains expected $numchains"
	    }
	}
	$traffic stats -clear
	$(sta) wl -u ampdu_clear_dump
	UTF::Sleep 3.0
	set rate [expr {int([lindex [$traffic stats -rate -meanminmax] 0] / 1000000)}]
	UTF::Message INFO "" "Power/Thermal throttled thruput = $rate Mbs"
	$(sta) wl -u dump ampdu
	$(sta) wl -u curpower
	$(sta) wl -u txpwr
	if {[expr {int(100 * ($baserate - $rate) / $baserate)}] > 5} {
	    error "Thruput of $rate Mbs did not recover to $baserate Mbs"
	} else {
	    return "$rate Mbs"
	}
    }
    UTF::Try "Exit Test" {
	$traffic destroy
    }
}

