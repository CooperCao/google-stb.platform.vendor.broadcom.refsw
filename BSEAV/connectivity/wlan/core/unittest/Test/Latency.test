#!/bin/env utf
# -*-tcl-*-
#

#
# UTF test script to test packet latency
#
# Written by: Robert J. McMahon January 2012
#
# $Copyright Broadcom Corporation$
#
package require UTF
package require UTF::Streams
package require UTF::ControlChart
package require UTF::MemChart
package require UTF::Test::ConnectAPSTA
package require UTF::Test::APChanspec
package require UTF::Test::APConfigureSecurity


package provide UTF::Test::Latency 2.0

#
#  Graph packet latency
#
UTF::Test Latency {args} {
    UTF::Getopts {
	{ap.arg "" "AP under test"}
	{sta.arg "" "STA under test"}
	{pktsize.arg "1460" "UDP payload size"}
	{holdtime.arg "60"}
	{recovertime.arg "2"}
	{clockip.arg ""}
	{key.arg "" ""}
	{perfcache.arg "" "Performance Cache"}
	{history.arg 30 "Performance History"}
	{s.arg 25 "Samples"}
	{congestrate.arg 1000 "Congestion rate (units M)"}
	{scansuppress ""}
	{nosetup ""}
	{nophycal "Disable phycal and lengthen glacial timer"}
	{noframeburst ""}
	{mrate.arg ""}
	{email.arg ""}
	{noload ""}
	{chanspec.arg "6" "Chanspec to use"}
	{security.arg "open" "Default security"}
	{brand.arg "" "Brand override"}
	{apbrand.arg "" "AP brand override"}
 	{date.arg "" "Image date"}
	{tag.arg "" "Image tag"}
	{rtrtag.arg "" "Router tag"}
	{statag.arg "" "STA tag"}
	{bin.arg "" "STA dongle image"}
	{title.arg "" "Title"}
	{graphtype.arg "" "png"}
	{teststreams.arg "" "streams to test"}
	{rcvlazy.arg "0x30000040 0x30000080 0x30000100" "test rcvlazy feature"}
	{nobidir "Test sta->ap only"}
	{congestonly ""}
	{roamoff ""}
	{noampdu "Disable AMPDU"}
	{loglevel.arg "DISPLAY" "logging level"}
	{roamtrigger.arg "-100" "Roam trigger (default set to -100 for no roaming)"}
    }

    UTF::stream logginglevel $(loglevel)
    if {$(rtrtag) ne "" && [$(ap) hostis Router]} {
	$(ap) configure -tag $(rtrtag)
    }
    if {$(bin) ne ""} {
	foreach STA $(sta) {
	    $STA configure -image $(bin) -date {}
	}
    }
    if {$(tag) ne ""} {
	$(sta) configure -tag $(tag)
    }
    if {$(statag) ne ""} {
	$(sta) configure -tag $(statag)
	if {![$(ap) hostis Router]} {
	    $(ap) configure -tag $(statag)
	}
    }
    if {$(brand) ne ""} {
	$(sta) configure -brand $(brand)
	if {![$(ap) hostis Router]} {
	    $(ap) configure -brand $(brand)
	}
    }
    if {$(apbrand) ne "" && [$(ap) hostis Router]} {
	$(ap) configure -brand $(apbrand)
    }
    set (key) [concat $(key) [list [$(ap) cget -tag] [$(ap) cget -brand] [$(sta) cget -tag] [$(sta) cget -brand]]]

    if {$(date) ne ""} {
	set date $(date)
	$(ap) configure -date $(date)
	if {![$(ap) hostis Router]} {
	    $(sta) configure -date $(date)
	}
    } else {
	set date [clock format [clock seconds] -format "%Y.%-m.%-e"]
    }
    if {$(title) eq "" && $(sta) ne ""} {
	if {[$(sta) hostis WinDHD Cygwin]} {
	    set (title) [$(sta) host whatami]
	} elseif {[$(sta) hostis LMAC DHD]} {
	    set (title) "Linux Dongle"
	} else {
	    set (title) [$(sta) hostis]
	}
	if {[regexp {(\d+sd)} $(ap) - c]} {
	    append (title) " with $c AP"
	}
    }
    set build [UTF::BuildTitle [concat $(sta) $(ap)]]

    set TITLE "UTF Latency $(title) ($build)"
    UTF::Message INFO "" $TITLE

    UTF::WrapSummary $UTF::SummaryDir $TITLE "" $(email) {
	if {[info exists ::UTF::SetupTestBed]} {
	    UTF::Try "Setup testbed" {
		eval $::UTF::SetupTestBed
	    }
	}
	set APMSG "AP"
	set date [clock format [clock seconds] -format "%Y.%-m.%-e"]
	# Use SoftAP for case of STA/STA
	if {![$(ap) hostis Router]} {
	    $(ap) configure -ap 1
	    $(ap) configure -ipaddr 192.168.100.60
	    $(ap) configure -ssid "SoftAP"
	    $(sta) configure -ipaddr 192.168.100.61
	    $(ap) configure -wlinitcmds "ifconfig [$(ap) cget -device] 192.168.100.60; wl ssid SOFTAP"
	    $(sta) configure -wlinitcmds "ifconfig [$(sta) cget -device] 192.168.100.61"
	    set APMSG "(soft)AP"
	}
	if {!$(noload)} {
	    UTF::Try "[$(ap) cget -name]: Find AP Image" {
		UTF::CheckImage $(ap) $date unknown
	    }
	    UTF::Try "[$(ap) cget -name]: Load Image" {
		$(ap) load
	    }
	    if {[$(ap) hostis Router]} {
		UTF::Try "[$(ap) cget -name]: Restore Defaults" {
		    $(ap) restore_defaults
		}
	    } else {
		$(ap) services stop
		catch {$(ap) wl msglevel +error +assoc}
		if {![$(ap) cget -nomimo_bw_cap]} {
		    catch {$(ap) wl down}
		    # Enable 40 in 2.4, if available.
		    # Doesn't work for LMAC since LMAC is never "down"
		    $(ap) wl -u mimo_bw_cap 1
		    $(ap) wl up
		    UTF::Sleep 1
		}
		$(ap) wl ver
	    }
	    UTF::Try "[$(ap) cget -name]: whatami" {
		set what [$(ap) whatami]
		# Pull out chip info and replace whitespace to
		# make it easier for external parsers.
		regsub -all {\s+} [lreplace $what 0 0] {_} w
		if {[catch {$UTF::Summary header_update 1 $w} ret]} {
		    UTF::Message WARN $Router $ret
		}
		set what
	    }
	    UTF::Try "$(sta) Find STA Image" {
		UTF::CheckImage $(sta) $date unknown
	    }
	    UTF::Try "$(sta) load" {
		$(sta) load
	    }
	    UTF::Try "[$(sta) cget -name]: defaults" {
		$(sta) services stop
		catch {$(sta) wl msglevel +error +assoc}
		if {![$(sta) cget -nomimo_bw_cap]} {
		    catch {$(sta) wl down}
		    # Enable 40 in 2.4, if available.
		    # Doesn't work for LMAC since LMAC is never "down"
		    $(sta) wl -u mimo_bw_cap 1
		    $(sta) wl up
		    UTF::Sleep 1
		}
		if {$(roamoff)} {
		    catch {$(sta) wl roam_off 1}
		}
		$(sta) wl ver
		set what [$(sta) whatami]
		# Pull out chip info and replace whitespace to
		# make it easier for external parsers.
		regsub -all {\s+} [lreplace $what 0 0] {_} w
		if {[catch {$UTF::Summary header_update 1 $w} ret]} {
		    UTF::Message WARN $(sta) $ret
		}
		set what
	    }
	}
	UTF::Try "Chanspec: $(chanspec)" {
	    UTF::Test::APChanspec $(ap) $(chanspec)
	}
	UTF::Try "Security: $(security)" {
	    UTF::Test::APConfigureSecurity $(ap) -security $(security)
	}
	if {$(noframeburst)} {
	    set fb 0
	} else {
	    set fb 1
	}
	if {$(scansuppress)} {
	    set ss 1
	} else {
	    set ss 0
	}
	if {$(roamtrigger) eq ""} {
	    set rt "default"
	} else {
	    set rt $(roamtrigger)
	}
	if {$(noampdu)} {
	    set ampdu 0
	} else {
	    set ampdu 1
	}
	if {$(nophycal)} {
	    set nophycal 0
	} else {
	    set nophycal 1
	}
	lappend cckey_common "fb=$fb ss=$ss rt=$rt ampdu=$ampdu nophycal=$nophycal"
	UTF::Try "AMPDU=$ampdu FB=$fb Roam=$rt SS=$ss" {
	    set failmsg ""
	    if {[catch {$(ap) wl frameburst $fb} err]} {
		UTF::Message ERROR $(ap) "wl frameburst: $err"
		lappend failmsg "FB$(ap)=$err"
	    }
	    foreach STA [concat $(ap) $(sta)] {
		if {[catch {$STA wl frameburst $fb} err]} {
		    UTF::Message ERROR $STA "wl frameburst: $err"
		    lappend failmsg "FB($STA)=$err"
		}
		# catch {$STA wl msglevel +psta}
		if {[catch {$STA wl scansuppress $ss} err]} {
		    UTF::Message ERROR $STA "wl scansuppress: $err"
		    lappend failmsg "SS($STA)=$err"
		}
		if {$rt ne "default"} {
		    if {[catch {$STA wl roam_trigger $rt all} err]} {
			UTF::Message ERROR $STA "wl roamtrigger: $err"
			lappend failmsg "RT($STA)=$err"
		    }
		}
	    }
	    if {$(noampdu)} {
		foreach STA [concat $(sta) $(ap)] {
		    $STA wl down
		    $STA wl -u ampdu 0
		    $STA wl up
		}
	    }
	    if {$(nophycal)} {
		UTF::Try "phycal disable" {
		    foreach STA [concat $(ap) $(sta)] {
			$STA wl -u phy_cal_disable 0
			$STA wl -u glacial_timer 1
			$STA wl -u phy_watchdog 1
		    }
		    UTF::Sleep 3.0
		    foreach STA [concat $(ap) $(sta)] {
			set glacialtime [expr {int((5 * $(holdtime)) + 10)}]
			$STA wl -u glacial_timer $glacialtime
			$STA wl -u phy_cal_disable 1
			$STA wl -u phy_watchdog 0
		    }
		}
	    }
	    if {$failmsg ne ""} {
		error $failmsg
	    } else {
		return
	    }
	}
	if {![$(sta) hostis Router]} {
	    UTF::Try "Assoc: [$(sta) cget -name] w/[$(ap) cget -name]  SS=$ss" {
		$(sta) wl -u scansuppress 0
		UTF::Test::ConnectAPSTA $(ap) $(sta)
		$(sta) wl -u status
		$(sta) wl -u scansuppress $ss
		return
	    }
	}
	# Empty queues
	UTF::Try "Test streams" {
	    # destroy any streams defined in the utconfig file
	    foreach STREAM [UTF::stream info instances] {
		$STREAM destroy
	    }
	    UTF::stream vi_1M -tx $(sta) -rx $(ap) -pktsize $(pktsize) -rate 1M -tos 0x80 -clockip $(clockip) -latencycount $(s) -latency 1
	    UTF::stream vo_1M -tx $(sta) -rx $(ap) -pktsize $(pktsize) -rate 1M -tos 0xc0 -clockip $(clockip) -latencycount $(s) -latency 1
	    UTF::stream be_1M -tx $(sta) -rx $(ap) -pktsize $(pktsize) -rate 1M -tos 0x0 -clockip $(clockip) -latencycount $(s) -latency 1
	    UTF::stream bk_1M -tx $(sta) -rx $(ap) -pktsize $(pktsize) -rate 1M -tos 0x20 -clockip $(clockip) -latencycount $(s) -latency 1
	    # Oversubscribed queues
	    UTF::stream vi_congest -tx $(sta) -rx $(ap) -pktsize $(pktsize) -rate ${(congestrate)}M -tos 0x80 -clockip $(clockip) -latencycount $(s) -latency 1
	    UTF::stream vo_congest -tx $(sta) -rx $(ap) -pktsize $(pktsize) -rate ${(congestrate)}M -tos 0xc0 -clockip $(clockip) -latencycount $(s) -latency 1
	    UTF::stream be_congest -tx $(sta) -rx $(ap) -pktsize $(pktsize) -rate ${(congestrate)}M -tos 0x0 -clockip $(clockip) -latencycount $(s) -latency 1
	    UTF::stream bk_congest -tx $(sta) -rx $(ap) -pktsize $(pktsize) -rate ${(congestrate)}M -tos 0x20 -clockip $(clockip) -latencycount $(s) -latency 1
	    # G711
	    UTF::stream G711 -tx $(sta) -rx $(ap) -traffictype G711 -clockip $(clockip) -latencycount $(s) -latency 1
	    if {[$(ap) hostis Router] && !$(nobidir)} {
		foreach streaminstance [UTF::stream info instances] {
		    UTF::stream "[namespace tail $streaminstance]_d" -tx $(ap) -rx $(sta) -tos [$streaminstance cget -tos] -clockip $(clockip) -latencycount $(s) -latency 1 -pktsize [$streaminstance cget -pktsize]
		}
	    }
	    foreach STREAM [UTF::stream info instances] {
		$STREAM id
	    }
	}
	if {$(mrate) eq {}} {
	    set (mrate) "unspecified"
	}
	foreach r $(mrate) {
	    UTF::Try "MCS Rate=$r" {
		if {$r eq "auto"} {
		    set chanspec [$(sta) wl chanspec]
		    if {[regexp {^\d+} $chanspec c] && $c > 15} {
			set lrate a_rate
		    } else {
			set lrate bg_rate
		    }
		    $(sta) wl $lrate auto
		} elseif {$r ne "unspecified"} {
		    $(sta) wl nrate -m $r
		}
	    }
	    if {!$(congestonly)} {
		if {$(rcvlazy) ne {}} {
		    UTF::Try "rcvlazy" {
			UTF::stream udplazy -tx $(ap) -rx $(sta) -pktsize 1460 -latency 1 -clockip $(clockip) -latencycount $(s)
			set t [$(sta) wl rcvlazy]
			regexp {\((0x[0-9A-F]{1,8})\)} $t - def
			set gtitle "[$(sta) whatami] [$(sta) uname -r]"
			set ltitle "0-30s=$def "
			udplazy start; udplazy linkcheck -now; udplazy stats -clear;
			UTF::Sleep 30
			set ix 1
			foreach lazy $(rcvlazy) {
			    append ltitle "[expr {(30 * $ix) + 1}]-[expr {30*($ix + 1)}]=$lazy "
			    $(sta) wl rcvlazy $lazy
			    UTF::Sleep 30
			    incr ix
			}
			udplazy samplers -disable
			set lazychart [UTF::MemChart %AUTO% -key [concat $(key) [udplazy id] rcvlazy] -history $(history) -perfcache "" -title "Latency Sum" -units "time"]
			set boundsresults [$lazychart addsample [udplazy stats -latency -sum]]
			if {[regexp {(HIGH|LOW|WIDE|ZERO)} $boundsresults]} {
			    set failtry 1
			} else {
			    set failtry 0
			}
			set lazyplot [$lazychart plotcontrolchart $boundsresults]
			UTF::streamgraph latency -stat latency -title "$gtitle\\n$ltitle" -streams udplazy -outputtype canvas
			set g [latency plot]
			$(sta) wl rcvlazy $def
			UTF::Sleep 2.0
			udplazy destroy
			latency destroy
			if {$failtry} {
			    error "$g [string range $lazyplot 5 end]"
			} else {
			    return "$g [string range $lazyplot 5 end]"
			}
		    }
		}
		if {$(teststreams) eq {}} {
		    set (teststreams) [UTF::stream info instances]
		}
		foreach teststream $(teststreams) {
		    UTF::Try "[namespace tail $teststream]" {
			$teststream start
			if {[catch {$teststream linkcheck -now} err]} {
			    catch {[$testream -rx] wl status}
			    catch {[$testream -tx] wl status}
			    error $err
			}
			catch {$(sta) wl rcvlazy}
			$teststream stats -clear
			set ::UTF::__done 0
			after [expr {$(holdtime) * 1000}] {set ::UTF::__done 1}
			vwait ::UTF::__done
			$teststream stop
			set x [UTF::MeanMinMax [$teststream stats -latency]]
			set x2 {}
			if {[lindex $x end] > 0.001} {
			    set units ms
			    set scalefactor 1000
			} else {
			    set units us
			    set scalefactor 1000000
			}
			foreach y $x {
			    lappend x2 [format %0.0f [expr {$y * $scalefactor}]]
			}
			UTF::Sleep $(recovertime)
			UTF::ControlChart CC -s $(s) -key [concat $(key) $r [$teststream id] $(holdtime)] -perfcache $(perfcache) -history $(history) -title "Latency" -units $units -allowzero 1
			set boundsresults [CC addsample [UTF::MeanMinMax $x2]]
			if {[regexp {(HIGH|LOW|WIDE|ZERO)} $boundsresults]} {
			    set failtry 1
			} else {
			    set failtry 0
			}
			set cc [CC plotcontrolchart $boundsresults]
			CC destroy
			set p [UTF::MeanMinMax [$teststream stats -pps]]
			set perc [format %.2f [expr {[lindex $p 0] / [lindex [UTF::MeanMinMax [$teststream stats -txpps]] 0]}]]
			set pstr "pps(${perc})=[format %.0f [lindex $p 0]] [lindex $p 1] [lindex $p 2]"
			set graph [[UTF::streamgraph %AUTO% -stat latency -streams "$teststream" -outputtype $(graphtype) -title "TOS=[$teststream cget -tos] len=$(pktsize) $pstr MCS=$r"] plot]
			UTF::Try "Min BiModal?" {
			    set minchart [UTF::MemChart %AUTO% -key [concat $(key) [$teststream id] $(holdtime) min] -history $(history) -perfcache "" -title "Latency Min" -units $units]
			    set results [$minchart addsample [lindex [UTF::MeanMinMax $x2] 1]]
			    return [$minchart plotcontrolchart $results]
			}
			UTF::Try "Max BiModal?" {
			    set maxchart [UTF::MemChart %AUTO% -key [concat $(key) [$teststream id] $(holdtime) max] -history $(history) -perfcache "" -title "Latency Max" -units $units]
			    set results [$maxchart addsample [lindex [UTF::MeanMinMax $x2] 2]]
			    return [$maxchart plotcontrolchart $results]
			}
			if {$failtry} {
			    error "$graph [string range $cc 5 end]"
			} else {
			    return "$graph [string range $cc 5 end]"
			}
		    }
		}
		UTF::Try "G711 w/data" {
		    be_congest start
		    G711 start
		    be_congest linkcheck -now
		    G711 linkcheck -now
		    UTF::stream allstreams stats -clear
		    set ::UTF::__done 0
		    after [expr {$(holdtime) * 1000}] {set ::UTF::__done 1}
		    vwait ::UTF::__done
		    UTF::stream allstreams stop
		    set x [UTF::MeanMinMax [G711 stats -latency]]
		    set x2 {}
		    if {[lindex $x end] > 0.001} {
			set units ms
			set scalefactor 1000
		    } else {
			set units us
			set scalefactor 1000000
		    }
		    foreach y $x {
			lappend x2 [format %0.0f [expr {$y * $scalefactor}]]
		    }
		    UTF::ControlChart CC -s $(s) -key [concat $(key) [G711 id] $r G711p $(holdtime)] -perfcache $(perfcache) -history $(history) -title "Latency" -units $units -allowzero 1
		    set boundsresults [CC addsample [UTF::MeanMinMax $x2]]
		    if {[regexp {(HIGH|LOW|WIDE|ZERO)} $boundsresults]} {
			set failtry 1
		    } else {
			set failtry 0
		    }
		    set cc [CC plotcontrolchart $boundsresults]
		    CC destroy
		    set p [UTF::MeanMinMax [G711 stats -pps]]
		    set pstr "[G711 cget -pps]/[format %.0f [lindex $p 0]] [lindex $p 1] [lindex $p 2]"
		    set graph [[UTF::streamgraph %AUTO% -stat latency -streams "G711 be_congest" -outputtype $(graphtype) -title "G711w/data MCS=$r pps=$pstr"] plot]
		    if {$failtry} {
			error "$graph [string range $cc 5 end]"
		    } else {
			return "$graph [string range $cc 5 end]"
		    }
		}
		UTF::Try "G711 vs all priorities (${(holdtime)}s)" {
		    bk_congest configure -latency 0
		    be_congest configure -latency 0
		    vi_congest configure -latency 0
		    UTF::stream allstreams stats -clear
		    G711 start
		    UTF::Sleep [expr {$(holdtime) / 2}]
		    vi_congest start
		    UTF::Sleep $(holdtime)
		    vi_congest configure -rate [expr {int($(congestrate) / 2)}]M
		    be_congest configure -rate [expr {int($(congestrate) / 2)}]M
		    be_congest start;
		    UTF::Sleep $(holdtime)
		    vi_congest configure -rate [expr {int($(congestrate) / 3)}]M
		    be_congest configure -rate [expr {int($(congestrate) / 3)}]M
		    bk_congest configure -rate [expr {int($(congestrate) / 3)}]M
		    bk_congest start;
		    UTF::Sleep $(holdtime)
		    vi_congest stop;
		    bk_congest stop;
		    be_congest stop;
		    UTF::Sleep [expr {$(holdtime) / 2}]
		    G711 samplers -disable
		    set x [UTF::MeanMinMax [G711 stats -latency]]
		    set x2 {}
		    if {[lindex $x end] > 0.001} {
			set units ms
			set scalefactor 1000
		    } else {
			set units us
			set scalefactor 1000000
		    }
		    foreach y $x {
			lappend x2 [format %0.0f [expr {$y * $scalefactor}]]
		    }
		    UTF::ControlChart CC -s $(s) -key [concat $(key) [G711 id] $r G711vAll $(holdtime)] -perfcache $(perfcache) -history $(history) -title "Latency" -units $units -allowzero 1
		    set boundsresults [CC addsample [UTF::MeanMinMax $x2]]
		    if {[regexp {(HIGH|LOW|WIDE|ZERO)} $boundsresults]} {
			set failtry 1
		    } else {
			set failtry 0
		    }
		    set cc [CC plotcontrolchart $boundsresults]
		    CC destroy
		    G711 stop
		    set p [UTF::MeanMinMax [G711 stats -pps]]
		    set pstr "[G711 cget -pps]/[format %.0f [lindex $p 0]] [lindex $p 1] [lindex $p 2]"
		    set graph [[UTF::streamgraph %AUTO% -stat latency -streams "G711" -outputtype $(graphtype) -title "G711w/All MCS=$r pps=$pstr"] plot]
		    if {$failtry} {
			error "$graph [string range $cc 5 end]"
		    } else {
			return "$graph [string range $cc 5 end]"
		    }
		}
		if {[$(ap) hostis Router] && !$(nobidir)} {
		    UTF::Try "G711_d vs all priorities (${(holdtime)}s)" {
			bk_congest_d configure -latency 0
			be_congest_d configure -latency 0
			vi_congest_d configure -latency 0
			UTF::stream allstreams stats -clear
			G711_d start
			UTF::Sleep [expr {$(holdtime) / 2}]
			vi_congest_d start
			UTF::Sleep $(holdtime)
			vi_congest_d configure -rate [expr {int($(congestrate) / 2)}]M
			be_congest_d configure -rate [expr {int($(congestrate) / 2)}]M
			be_congest_d start;
			UTF::Sleep $(holdtime)
			vi_congest_d configure -rate [expr {int($(congestrate) / 3)}]M
			be_congest_d configure -rate [expr {int($(congestrate) / 3)}]M
			bk_congest_d configure -rate [expr {int($(congestrate) / 3)}]M
			bk_congest_d start;
			UTF::Sleep $(holdtime)
			vi_congest_d stop;
			bk_congest_d stop;
			be_congest_d stop;
			UTF::Sleep [expr {$(holdtime) / 2}]
			G711_d samplers -disable
			set x [UTF::MeanMinMax [G711_d stats -latency]]
			set x2 {}
			if {[lindex $x end] > 0.001} {
			    set units ms
			    set scalefactor 1000
			} else {
			    set units us
			    set scalefactor 1000000
			}
			foreach y $x {
			    lappend x2 [format %0.0f [expr {$y * $scalefactor}]]
			}
			UTF::ControlChart CC -s $(s) -key [concat $(key) [G711_d id] $r G711vAll_down $(holdtime)] -perfcache $(perfcache) -history $(history) -title "Latency" -units $units -allowzero 1
			set boundsresults [CC addsample [UTF::MeanMinMax $x2]]
			if {[regexp {(HIGH|LOW|WIDE|ZERO)} $boundsresults]} {
			    set failtry 1
			} else {
			    set failtry 0
			}
			set cc [CC plotcontrolchart $boundsresults]
			CC destroy
			G711_d stop
			set p [UTF::MeanMinMax [G711_d stats -pps]]
			set pstr "[G711_d cget -pps]/[format %.0f [lindex $p 0]] [lindex $p 1] [lindex $p 2]"
			set graph [[UTF::streamgraph %AUTO% -stat latency -streams "G711_d" -outputtype $(graphtype) -title "G711_d/All MCS=$r pps=$pstr"] plot]
			if {$failtry} {
			    error "$graph [string range $cc 5 end]"
			} else {
			    return "$graph [string range $cc 5 end]"
			}
		    }
		}
	    }
	    UTF::Try "All priorities (${(holdtime)}s)" {
		bk_congest configure -latency 0
		be_congest configure -latency 0
		vi_congest configure -latency 0
		UTF::stream allstreams stats -clear
		catch {$(ap) wl counters} ap_cnt_a(be_1M)
		catch {$(sta) wl counters} sta_cnt_a(be_1M)
		bk_congest start
		be_1M stats -clear; be_1M start
		set s(be_1M) [UTF::stream clock]
		UTF::Sleep $(holdtime)
		lappend s(be_1M) [UTF::stream clock]
		catch {$(ap) wl counters} ap_cnt_b(be_1M)
		catch {$(sta) wl counters} sta_cnt_b(be_1M)
		be_1M stop; be_congest start;
		catch {$(ap) wl counters} ap_cnt_a(vi_1M)
		catch {$(sta) wl counters} sta_cnt_a(vi_1M)
		vi_1M stats -clear; vi_1M start
		set s(vi_1M) [UTF::stream clock]
		UTF::Sleep $(holdtime)
		lappend s(vi_1M) [UTF::stream clock]
		catch {$(ap) wl counters} ap_cnt_b(vi_1M)
		catch {$(sta) wl counters} sta_cnt_b(vi_1M)
		vi_1M stop; vi_congest start
		catch {$(ap) wl counters} ap_cnt_a(vo_1M)
		catch {$(sta) wl counters} sta_cnt_a(vo_1M)
		vo_1M stats -clear; vo_1M start
		set s(vo_1M) [UTF::stream clock]
		UTF::Sleep $(holdtime)
		lappend s(vo_1M) [UTF::stream clock]
		catch {$(ap) wl counters} ap_cnt_b(vo_1M)
		catch {$(sta) wl counters} sta_cnt_b(vo_1M)
		vo_1M stop;
		catch {$(ap) wl counters} ap_cnt_a(G711)
		catch {$(sta) wl counters} sta_cnt_a(G711)
		G711 stats -clear; G711 start
		set s(G711) [UTF::stream clock]
		UTF::Sleep $(holdtime)
		lappend s(G711) [UTF::stream clock]
		catch {$(ap) wl counters} ap_cnt_b(G711)
		catch {$(sta) wl counters} sta_cnt_b(G711)
		UTF::stream allstreams stop
		foreach t [array names s] {
		    set t1 [lindex $s($t) 0]
		    set t2 [lindex $s($t) 1]
		    if {[regexp {txbcnfrm\s+([0-9]+)} $ap_cnt_a($t) - b1] && \
			    [regexp {txbcnfrm\s+([0-9]+)} $ap_cnt_b($t) - b2]} {
			set apb [expr {1.0 * ($b2 - $b1) / ($t2 - $t1)}]
			UTF::Message INFO $t "$(ap) tx beacon rate=[format %.2f $apb] beacon/s"
		    }
		    if {[regexp {rxbeaconmbss\s+([0-9]+)} $sta_cnt_a($t) - b1] && \
			    [regexp {rxbeaconmbss\s+([0-9]+)} $sta_cnt_b($t) - b2]} {
			set sb [expr {1.0 * ($b2 - $b1) / ($t2 - $t1)}]
			UTF::Message INFO $t "$(sta) rx beacon rate=[format %.2f $sb] beacon/s"
		    }
		    UTF::Message INFO $t "Ratio Rx/Tx=[format %.2f [expr {$sb / $apb}]]"
		}
		catch {unset cc}
		catch {unset boundsresults}
		foreach t [array names s] {
		    set t1 [lindex $s($t) 0]
		    set t2 [lindex $s($t) 1]
		    set mmm [$t stats -latency -meanminmax -include $t1 $t2]
		    if {$mmm ne ""} {
			set cc($t) [UTF::ControlChart %AUTO% -s $(s) -key [concat $(key) [$t id] ${t}_seg $(holdtime)] -perfcache $(perfcache) -history $(history) -title "Latency" -allowzero 1 -units "time"]

			set boundsresults($t) [$cc($t) addsample [lrange $mmm 0 end]]
		    }
		}
		set graph [[UTF::streamgraph %AUTO% -stat latency -streams "[namespace current]::be_1M [namespace current]::vi_1M [namespace current]::vo_1M [namespace current]::G711" -outputtype $(graphtype) -title "All priorities (congestion)"] plot]
		set failmsg {}
		foreach t [array names cc] {
		    UTF::Try "$t Control Chart" {
			set chart [$cc($t) plotcontrolchart $boundsresults($t)]
		    }
		    if {[regexp {(HIGH|LOW|WIDE|ZERO)} $boundsresults($t)]} {
			append failmsg " [string range $chart 5 end]"
		    }
		}
		catch {array unset boundsresults}
		catch {array unset cc}
		if {$failmsg ne {}} {
		    error "${graph}$failmsg"
		} else {
		    return $graph
		}
	    }
	    if {[$(ap) hostis Router] && !$(nobidir)} {
		UTF::Try "All priorities down (${(holdtime)}s)" {
		    bk_congest_d configure -latency 0
		    be_congest_d configure -latency 0
		    vi_congest_d configure -latency 0
		    UTF::stream allstreams stats -clear
		    bk_congest_d start
		    be_1M_d stats -clear; be_1M_d start
		    UTF::Sleep $(holdtime)
		    be_1M_d stop; be_congest_d start;
		    vi_1M_d stats -clear; vi_1M_d start
		    UTF::Sleep $(holdtime)
		    vi_1M_d stop; vi_congest_d start
		    vo_1M_d stats -clear; vo_1M_d start
		    UTF::Sleep $(holdtime)
		    vo_1M_d stop;
		    G711_d stats -clear; G711_d start
		    UTF::Sleep $(holdtime)
		    UTF::stream allstreams stop
		    set graph [[UTF::streamgraph %AUTO% -stat latency -streams "[namespace current]::be_1M_d [namespace current]::vi_1M_d [namespace current]::vo_1M_d [namespace current]::G711_d" -outputtype $(graphtype) -title "All priorities (down)"] plot]
		    return $graph
		}
	    }
        }
	UTF::Try "Exit" {
	    UTF::stream exitstreams
	}
    }
}
