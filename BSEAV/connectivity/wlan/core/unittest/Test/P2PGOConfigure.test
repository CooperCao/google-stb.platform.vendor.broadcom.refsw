#!/bin/env utf
# -*-tcl-*-

#
# P2P Smoke test GO Setup script
#

# $Id$
# $Copyright Broadcom Corporation$
#

# Test description:
#	Create a Direct P2P connection between GO & GC and ping the P2P IP addresses
#

package require UTF

package provide UTF::Test::P2PGOConfigure 2.0

#################################################################################
#################################################################################

UTF::Test P2PGOConfigure {GO args} {
    UTF::Getopts {
	{chanspec.arg "36/80" "P2P Chanspec"}
	{security.arg "open" "security"}
    }

    set amode open
    set wsec 0
    switch $(security) {
	open {
	}
	aespsk2 {
	    set wsec 4
	    set amode wpa2psk
	}
	default {
	    error "unsupported -security type: $(security)"
	}
    }
    set mac [string replace [$GO macaddr] 0 1 02]

    UTF::Message INFO $GO "Clean up any pre-existing interface"
    if {![catch {$GO wl p2p_if $mac}]} {
	$GO wl p2p_ifdel $mac
    }

    UTF::Message INFO "" "setup GO apsta"
    $GO wl down
    #UTF::Sleep 1
    $GO wl apsta 1
    $GO wl up
    #UTF::Sleep 2

    UTF::Message INFO "" "setup P2P go"

    $GO wl p2p_ifadd $mac go $(chanspec)
	UTF::Sleep 1

    # get the new P2P GO interface name
    set ifname [lindex [$GO wl p2p_if $mac] 1]

    set GOI "[namespace tail $GO]#1"
    UTF::STA ::$GOI -host [$GO cget -host] -device $ifname


    # Fetch current data
    set SSID [$GOI cget -ssid]
    set WPAKEY [$GOI cget -wpakey]

    # Initialise, if necessary
    if {$SSID eq ""} {
	set SSID "DIRECT-[namespace tail $GOI]"
	$GOI configure -ssid $SSID
    }
    if {$WPAKEY eq ""} {
	set WPAKEY [UTF::NewWPAPassphrase]
	$GOI configure -wpakey $WPAKEY
    }
    $GOI configure -security $(security)


    $GOI ifconfig local

    regsub -all {:} $mac "" mac_strip

    # constants
    set OUI "50:6F:9A"; # WFA
    set magic2 "000400010050F204000600101100045032502D0E010000"

    $GOI wl add_ie 0x01 18 $OUI 090202000409030600${mac_strip}
    $GOI wl add_ie 0x02 41 $OUI 0902020004090D1900${mac_strip}$magic2

    $GOI wl wsec $wsec
    # Need to explicitly disable WPA, otherwise power save may not work
    # It will be re-enabled by join if needed.
    catch {$GOI wl wpa_auth 0}

    if {[regexp {psk} $amode]} {
	# Enable the indriver authenticator.  Not needed on older
	# branches.  Dongles require the idauth feature.
	catch {$GOI wl auth_wpa 1}

	$GOI wl set_pmk "\"$WPAKEY\""
    } else {
	# We're turning the authenticator off, so non-supported is
	# ok
	catch {$GOI wl auth_wpa 0}
    }

    UTF::Message INFO $GOI "Create P2PGO $SSID"

    $GOI wl join $SSID imode bss amode $amode

    UTF::Message INFO "" "Dump GO interfaces for debugging"
    $GO rexec ip addr

    # Confirm chanspec
    set go_chan [lindex [$GOI wl chanspec] 0]

    if {$(chanspec) != $go_chan} {
	error "GO chan is $go_chan instead of $(chanspec)"
    } else {
	UTF::Message PASS $GOI "P2P GO interface '$ifname' for $(chanspec) created."
    }

    set GOI
}

