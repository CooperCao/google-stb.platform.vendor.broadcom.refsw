#!/bin/env utf
# -*-tcl-*-
#

#
# UTF test script for a multicast fast sweep RvR using byte count
# as a result indicator.
#
# Written by: Robert J. McMahon February 2011
#
# $Copyright Broadcom Corporation$
#
package require UTF
package require UTF::Streams
package require UTF::Test::APChanspec
package require UTF::Test::ConnectAPSTA
package require UTF::ControlChart
package require UTF::Multicast
package require UTF::IGMPQuerier

#
#  Test the RvR with a sweep keeping the stream alive
#
UTF::Test RvRMcastFastSweep {args} {
    UTF::Getopts {
	{ap.arg "iptv_ap" "AP under test"}
	{stas.arg "" "STA(s) under test"}
	{wets.arg "iptv_br1 iptv_br2 iptv_br3" "WET(s) under test"}
	{branch.arg "" "Branch override"}
 	{date.arg "" "Image date"}
	{tag.arg "" "Router release tag"}
	{email.arg "" "Email Address"}
	{title.arg "" "Title"}
	{noapload "Don't load images"}
	{nostaload "Don't reload STA drivers"}
	{norestore "Don't reset to defaults"}
	{trx.arg "" "Router trx"}
        {history.arg 30 "History size for control charts"}
	{perfloop.arg 1 "Performance test loops"}
	{security.arg "open" "Default security"}
	{chanspec.arg "157l" "Default chanspec"}
	{nosecurity  "Don't do security tests"}
	{nochannels  "Don't do all channels supported tests"}
	{noperf      "Don't run performance tests"}
	{debugging "Working in a debugging mode"}
	{key.arg "" "cc key"}
	{baseattn.arg "20" "base attenuation"}
	{filtertimingerrors "" }
	{scansuppress "Suppress scans during test run"}
	{jitter "Run jitter test"}
	{nocache "Don't update performance cache"}
    }

    proc stepattn {attndev stepprofile {base 20}} {
	$attndev configure -version "v2"
	foreach stepcmd $stepprofile {
	    set stepsize [lindex $stepcmd 0]
	    $attndev attnincr $stepsize
	    UTF::Sleep [lindex $stepcmd 1] "attn step $stepsize"
	}
	$attndev attn $base
	# Sleep delay to see if the rate recovers
	# UTF::Sleep 0.0 "Recover"
	return
    }

    proc generatesamples {stream {count 5}} {
	set timeresults ""
	set byteresults ""
	set stepprofilea {{3 1} {3 1} {3 1} {3 1} {3 1} {3 1} {1 0.5} {1 0.5} {1 0.5} {1 0.5} {1 0.5} {1 0.5} {1 0.5} {1 0.5} {1 0.5} {1 0.5} {1 0.5} {1 0.5} {1 0.75} {1 0.75} {1 0.75} {1 0.75} {1 0.75} {1 0.75} {1 0.75} {1 0.75}}
	set stepprofilea1 {{4 1} {3 1} {3 1} {3 1} {3 1} {3 1} {1 0.5} {1 0.5} {1 0.5} {1 0.5} {1 0.5} {1 0.5} {1 0.5} {1 0.5} {1 0.5} {1 0.5} {1 0.5} {1 0.5} {1 0.75} {1 0.75} {1 0.75} {1 0.75} {1 0.75} {1 0.75} {1 0.75} {1 0.75}}
	set stepprofileb {{7 1} {6 1} {5 1} {4 1} {3 1} {1 1} {1 1} {1 1} {1 1} {1 1} {1 1.5} {1 1.5} {1 1.5} {1 1.5} {1 1.5} {1 1.5} {1 1.5} {1 1.5}}
	set stepprofileb1 {{8 1} {6 1} {5 1} {4 1} {3 1} {1 1} {1 1} {1 1} {1 1} {1 1} {1 1.5} {1 1.5} {1 1.5} {1 1.5} {1 1.5} {1 1.5} {1 1.5} {1 1.5}}
	set stepprofiled {{8 1} {6 1} {5 1} {4 1} {3 1} {1 1} {1 1} {1 1} {1 1} {1 1} {1 1.5} {1 1.5} {1 1.5} {1 1.5} {1 3.0} {1 3.0} {1 3.0} {1 3.0}}
	for {set ix 0} {$ix < 38} {incr ix} {
	    lappend stepprofilef [list 1 3]
	}
	for {set ix 0} {$ix < 18} {incr ix} {
	    lappend stepprofileg [list 1 3]
	}
	set minsamples ""
	for {set ix 0} {$ix < $count} {incr ix} {
	    $stream stats -clear
	    igmpq send
	    set numsamples ""
	    UTF::Sleep 2.0
	    set starttime [clock clicks -milliseconds]
	    catch {stepattn L1 $stepprofileb 20}
	    set bytes($ix) [$stream stats -bytes]
	    set runtime [expr {[clock clicks -milliseconds] - $starttime}]
	    foreach rx $bytes($ix) {
		lappend numsamples [llength [lindex $rx 1]]
	    }
	    UTF::Message INFO "" "NoSamples:$numsamples  Bytes: [lindex $bytes($ix) 1]"
	    lappend timeresults $runtime
	    UTF::streamgraph tput -streams $stream -stat rate -title "Tx 240M Attn Stepping Profile B"
	    UTF::streamgraph xferbytes -streams $stream -stat bytes -title "Tx 240M Attn Stepping Profile B"
	    set tputresults "[tput plot] [string range [xferbytes plot] 5 end]"
	    tput destroy; xferbytes destroy;
	    UTF::Try "Thruput Graph" {
		return $tputresults
	    }
	    igmpq send
	    UTF::Sleep 10.0 "PostRunWait"
	}
	# UTF::Message STATs "" "Samples for xfer: $minsamples"
	for {set ix 0} {$ix < $count} {incr ix} {
	    foreach rxsamples $bytes($ix) {
		set rxsta [lindex $rxsamples 0]
		set rxdata [lindex $rxsamples 1]
		set sum 0.0
		foreach data $rxdata {
		   set sum [expr {$sum + $data}]
		}
		UTF::Message STATS+blue "" "$rxsta bytes Xfered: $sum"
		lappend staresults($rxsta) $sum
	    }
	}
	foreach rxsta [array names staresults] {
	    lappend tmp [list $rxsta $staresults($rxsta)]
	}
	return [list $tmp $timeresults]
    }

    proc noise {{state start} {stream ucast2}} {
	set entertime [clock clicks -milliseconds]
	$stream $state
	if {$state eq "stop"} {
	    UTF::Sleep 1.5 "Noise-None"
	} else {
	    UTF::Sleep 1.0 "Noise-Insert"
	}
	UTF::Message INFO+green "" "Noise window closed"
	$stream stop
	set exittime [clock clicks -milliseconds]
	set noisetime [expr {($exittime - $entertime) / 1000.0}]
	UTF::Sleep [expr {2.0 - $noisetime}]
    }

    if {$(nocache)} {
	set ::UTF::ControlChart::readonly 1
#	set ::UTF::MemChart::readonly 1
    }

    UTF::Try "RVR Multicast Fast Sweep Test" {
	set ::UTF::_llogfile ""
	UTF::Message INFO "" "Logging enhancement enabled"
	L1 configure -silent 1
	foreach STA [concat $(ap) $(wets) $(stas)] {
	    $STA wl scansuppress $(scansuppress)
	}
	UTF::stream logginglevel "ANALYZE"
	set txsta [$(ap) cget -peer]
	set rxstas ""
	foreach wet $(wets) {
	    lappend rxstas [$wet cget -peer]
	}
	foreach rxsta $rxstas {
	    UTF::Multicast::force_igmp_version $rxsta 2
	}
	$txsta rexec "iptables -F"
	$txsta rexec "iptables -L"
	set stream [UTF::stream mcast -transmitsta $txsta -receivesta $rxstas -pktsize 1460 -rate 80M -advancedstats 0 -clearsynch 1]
	UTF::stream ucast2 -transmitsta vlan152_if -receivesta $txsta -pktsize 1460 -rate 100M
	UTF::IGMPQuerier igmpq -ap $(ap) -reportinterval 0
	foreach router [concat $(ap) $(wets)] {
	    UTF::Multicast::enable_wmf $router
	}
	# roaming
	foreach router $(wets) {
	    $router wl roam_trigger -100 all
	}
	igmpq start
	mcast start
	UTF::Sleep 2.0 "Priming"
	set results [generatesamples $stream]
	igmpq destroy
	mcast destroy
	ucast2 destroy
	return $results
    }

    UTF::Try "RVR Execution Times (ms)" {
	set FAILMATCH "HIGH|LOW|WIDE|ZERO"
	set cckey [list $ "time" "ucast" "$(key)"]
	set ccname "bytes_thruput_rvr"
	UTF::ControlChart $ccname -s 5 -key $cckey -history  30 -perfcache "" -norangecheck 1
	$ccname configure -title "RvR Runtime"
	$ccname configure -units ""
	set boundsresults [$ccname addsample [UTF::MeanMinMax [lindex $results 1]]]
	set timingok 1
	if {$(filtertimingerrors) && [regexp $FAILMATCH $boundsresults x1]} {
	    set timingok 0
	    error $boundsresults
	}
	set plot [$ccname plotcontrolchart "$boundsresults"]
	return $plot
    }

    UTF::Try "RVR Bytes Results" {
	if {!$timingok} {
	    error "Test execution time out of range"
	}
	set FAILMATCH "HIGH|LOW|WIDE|ZERO"
	set perrxbytes [lindex $results 0]
	set rxstaresults [lindex $results 0]
	set tryfail 0
	foreach rxstaresult $rxstaresults {
	    set rxsta [lindex $rxstaresult 0]
	    set data [UTF::MeanMinMax [lindex $rxstaresult 1]]
	    set cckey [list $ "$rxsta" "Xferbytes" "mcast" "$(key)"]
	    set ccname "mcast_bytes_thruput_rvr"
	    UTF::ControlChart $ccname -s 5 -key $cckey -history  30 -perfcache "" -norangecheck 1
	    $ccname configure -title "Mcast RvR Bytes"
	    $ccname configure -units ""
	    set boundsresults [$ccname addsample $data]
	    set ccharts($rxsta) [$ccname plotcontrolchart "$boundsresults"]
	    if {[regexp $FAILMATCH $boundsresults x1]} {
		set testfailed($rxsta) 1
		set tryfail 1
	    } else {
		set testfailed($rxsta) 0
	    }
	}
	if {$tryfail} {
	    error ""
	} else {
	    return
	}
    }
    foreach cchart [array names ccharts] {
	UTF::Try "$cchart contrl chart" {
	    if {$testfailed($cchart)} {
		error $ccharts($cchart)
	    } else {
		return $ccharts($cchart)
	    }
	}
    }
    if {$(jitter)} {
	UTF::Try "RVR Multicast Jitter Test" {
	    set ::UTF::_llogfile ""
	    L1 configure -silent 1
	    L1 attn 20
	    UTF::Message INFO "" "Logging enhancement enabled"
	    UTF::stream logginglevel "ANALYZE"
	    set txsta [$(ap) cget -peer]
	    set rxstas ""
	    foreach wet $(wets) {
		lappend rxstas [$wet cget -peer]
	    }
	    foreach rxsta $rxstas {
		UTF::Multicast::force_igmp_version $rxsta 2
	    }
	    $txsta rexec "iptables -F"
	    $txsta rexec "iptables -L"
	    set stream [UTF::stream mcastjitter -transmitsta $txsta -receivesta $rxstas -pktsize 1460 -rate 20M -advancedstats 0 -clearsynch 1 -tos 0x80]
	    UTF::stream ucast2 -transmitsta vlan152_if -receivesta $txsta -pktsize 1460 -rate 100M
	    UTF::IGMPQuerier igmpq -ap $(ap) -reportinterval 0
	    foreach router [concat $(ap) $(wets)] {
		UTF::Multicast::enable_wmf $router
	    }
	    # roaming
	    foreach router $(wets) {
		$router wl roam_trigger -100 all
	    }
	    igmpq start
	    mcastjitter start
	    igmpq send
	    UTF::Sleep 2.0 "Priming"
	    mcastjitter stats -clear
	    UTF::Sleep 15.0
	    set numsamples ""
	    set jitter [$stream stats -jitter]
	    foreach rx $jitter {
		lappend numsamples [llength [lindex $rx 1]]
	    }
	    UTF::Message INFO "" "NoSamples:$numsamples  Bytes: [lindex $jitter 1]"
	    set jg [UTF::streamgraph jittergraph -streams $stream -stat jitter -title "Tx 240M Jitter"]
	    # UTF::streamgraph xferbytes -streams $stream -stat bytes -title "Tx 240M Attn Stepping Profile B"
	    set results [$jg plot]
	    $jg destroy
	    return $results
	}
    }
    UTF::stream exitstreams
}
