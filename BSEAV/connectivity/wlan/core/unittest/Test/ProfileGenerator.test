#!/bin/env utf
# -*-tcl-*-
#

#
# UTF test script to detect attenuation steps which trigger MCS rate adaptions
#
# Written by: Robert J. McMahon August 2011
#
# $Copyright Broadcom Corporation$
#
package require UTF
package require UTF::Streams
package require UTF::Test::ConnectAPSTA

UTF::Test ProfileGenerator {args} {
    UTF::Getopts {
	{ap.arg "" "AP under test"}
	{sta.arg "" "STA(s) under test"}
	{branch.arg "" "Branch override"}
	{brand.arg "" "Brand override"}
 	{date.arg "" "Image date"}
	{tag.arg "" "Router release tag"}
	{email.arg "" "Email Address"}
	{title.arg "" "Title"}
	{security.arg "open" "Default security"}
	{chanspec.arg "157l 36" "Chanspec list to test"}
	{noload "Don't load images"}
	{nostaload "Don't load STA images"}
	{norestore "Don't reset to defaults"}
	{trx.arg "" "Router trx"}
	{frameburst ""}
	{baseattn.arg "" "base attenuation"}
	{scansuppress.arg "0" "Scan suppress setting during test run"}
	{roamtrigger.arg "-100" "Roaming RSSI for wet devices"}
	{tcpwindowsize.arg "2M" "tcp window size"}
	{scalefactor.arg "1" "scale factor for the hold times per step"}
	{udprate.arg "10M" "UDP offered rate"}
	{pktsize.arg "1460" "UDP packet size"}
	{rtrdate.arg "" "Desired Router build date, format: yyyy.mm.dd"}
	{rtrtag.arg "" "Router release tag"}
	{stadate.arg "" "Desired STA build date, format: yyyy.mm.dd"}
	{statag.arg "" "STA release tag"}
	{attngrp.arg "" "Attenuator group to use for test"}
	{debugging "Working in a debugging mode"}
	{rejoin_wait.arg "4" "wait time is seconds for rejoin"}
    }
    proc unitscalefactor {units} {
	switch -exact $units {
	    "M" {
		return 1000000.0
	    }
	    "K" {
		return 1000.0
	    }
	    "" {
		return 1
	    }
	    "G" {
		return 1000000000.0
	    }
	    default {
		error "Unknown units $units"
	    }
	}
    }
    proc rate2numeric {value} {
	if {[string is double $value]} {
	    return [expr {round($value)}]
	}
	set scale [unitscalefactor [string index $value end]]
	set numeric [string range $value 0 end-1]
	return [expr {$scale * $numeric}]
    }

    if {$(attngrp) ne {}} {
	set attndev $(attngrp)
    } else {
	set attndev [$(ap) cget -attngrp]
    }
    if {[info exists ::UTF::SetupTestBed]} {
	UTF::Try "Setup testbed" {
	    eval $::UTF::SetupTestBed
	}
    }
    UTF::Try {"Associate"} {
	UTF::Test::ConnectAPSTA $(ap) $(sta)
    }
    UTF::Try "MCS detect setup" {
	# Turn off periodic calibrations, since this will be a long test
	# and we don't want random impacts.  Instead we will manually
	# calibrate between cycles.
	catch {$(sta) wl nphy_percal 3}
	catch {$(ap) wl nphy_percal 3}
	UTF::stream udp -transmitsta $(sta) -receivesta [$(ap) cget -lanpeer] -pktsize $(pktsize) -rate $(udprate)
	udp start
	UTF::Sleep 1.0
	catch {$(sta) wl nphy_forcecal 1}
	catch {$(ap) wl nphy_forcecal 1}
	udp linkcheck
    }
    UTF::Try "MCS Sweep" {
	set baseattn [expr {int([lindex [$attndev attn?] 0])}]
	set expectedrate [rate2numeric $(udprate)]
	set results ""
	set mcs(24) $baseattn
	for {set ix 23} {$ix >= 0} {incr ix -1} {
	    UTF::Message INFO $(sta) "*** MCS set to $ix ***"
	    udp stats -clear
	    $(sta) wl nrate -m $ix
	    while {1} {
		UTF::Sleep 1.0
		set rate [lindex [udp stats -rate] end]
		if {[expr {($expectedrate - $rate)}] > [expr {$expectedrate * 0.1}]} {
		    set currattn [expr {int([lindex [$attndev attn?] 0])}]
		    set mcs($ix) [expr {$currattn - 1}]
		    lappend results "$ix=[expr {$currattn - 1}]/[expr {$currattn - 1} - $mcs([expr {$ix + 1}])]"
		    eval $attndev attn [expr {int($mcs($ix) - 3)}]
		    UTF::Message INFO $attndev "decr attenuation 3 dB"
		    UTF::Sleep 1.0
		    set rate [lindex [udp stats -rate] end]
		    if {[expr {$expectedrate - $rate}] > [expr {$expectedrate * 0.1}]} {
			eval $attndev attn $baseattn
			UTF::Message INFO $attndev "reset attenuation to $baseattn"
			UTF::Sleep 10
		    }
		    break
		} else {
		    $attndev incr 1
		    UTF::Message INFO $attndev "incr attenuation 1 dB"
		}
	    }
	}
	set msg "Base=$baseattn MCS=AbsAttn/RelAttn $results"
	UTF::Message INFO "" $msg
	return $msg
    }
    UTF::Try "Graph" {
	unset mcs(24)
	return [UTF::Streamslib::grapharray mcs -title MCS]
    }
    UTF::Try "Set MCS rate to auto" {
	set chanspec [$(sta) wl chanspec]
	# Figure out what band we're using so that we know how to set rate
	# to "auto".  Can't just use "rate" since we may not be bandlocked.
	if {[regexp {^\d+} $chanspec c] && $c > 15} {
	    set lrate a_rate
	} else {
	    set lrate bg_rate
	}
	$(sta) wl $lrate auto
    }
    UTF::Try "Association Detect" {
	eval $attndev attn 103
	set ssid [$(ap) wl ssid]
	set currtime [clock seconds]
	while {![string equal [$(sta) wl bssid] "00:00:00:00:00:00"]} {
	    if {[expr {[clock seconds] - $currtime}] > 10} {
		set msg "bssid not equal to 00:00:00:00:00:00"
		UTF::Message ERROR $(sta) $msg
		error $msg
	    }
	    UTF::Sleep 0.25
	}
	set retrytime [expr {[clock seconds] + $(rejoin_wait)}]
	while {[string equal [$(sta) wl bssid] "00:00:00:00:00:00"]} {
	    if {[clock seconds] > $retrytime} {
		if {![expr {int([lindex [$attndev attn?] 0])}]} {
		    set msg "failed on associate"
		    UTF::Message ERROR $(sta) $msg
		    error $msg
		}
		eval $attndev incr -1
		set retrytime [expr {[clock seconds] + $(rejoin_wait)}]
		UTF::Message INFO $attndev "decr attn 1 dB"
		$(sta) wl join $ssid
	    }
	    UTF::Sleep 0.5
	}
	catch {$(sta) wl status}
	return [expr {int([lindex [$attndev attn?] 0])}]
    }
    UTF::stream exitstreams
}
