#!/bin/env utf
# -*-tcl-*-

# Configure tx beam forming
#
# Written by: Robert J. McMahon February 2013
#
# $Id$
#

package require UTF
package require UTF::Streams
package require UTF::Test::BridgeCheck

package provide UTF::Test::ConfigTXBF 2.0

UTF::Test ConfigTXBF {args} {
    UTF::Getopts {
	{ap.arg "" "ap to use"}
	{sta.arg "" "sta(s) to use"}
	{value.arg "1" "txbf value"}
	{off "disable txbf"}
	{on "enable txbf"}
	{nss.arg "default" "num spatial streams"}
	{txpwr.arg "default" "output power"}
	{spatial.arg "default" "spatial policy"}
	{soundcheck "Send traffic and verify sounding"}
    }
    # Discover and separate STAs from Bridges
    set BRIDGES ""
    set stas ""
    foreach STA $(sta) {
	if {[$STA hostis Router] && [lsearch $BRIDGES $STA] == -1} {
	    lappend BRIDGES $STA
	} elseif {![$STA hostis Router] && [lsearch $stas $STA] == -1} {
	    lappend stas $STA
	}
    }
    set STAS $stas
    if {$(off) && $(on)} {
	error "illegal parameters"
    } elseif {$(off)} {
	set (value) 0
    } elseif {$(on)} {
	set (value) 1
    }
    UTF::Try "CFG TXBF=$(value) NSS=$(nss)" {
	set doreconnect 1
	if {[catch {$(sta) wl bssid} bssid] || $bssid ne [$(ap) macaddr]} {
	    set doreconnect 0
	}
	foreach dut [concat $(ap) $(sta)] {
	    $dut wl down
	    $dut wl -u txbf_bfe_cap 1
	    $dut wl -u txbf_bfr_cap 1
	    $dut wl -u txbf $(value)
	}
	if {[string is integer $(spatial)]} {
	    $(ap) wl spatial_policy $(spatial)
	}
	if {[string is integer $(nss)]} {
	    foreach dut [concat $(ap) $(sta)] {
		$dut wl -u ratesel_nss $(nss)
	    }
	}
	if {[string is integer $(txpwr)]} {
	    $(ap) wl -u txpwr1 -o $(txpwr)
	}
	UTF::Sleep 2.0
	foreach dut [concat $(ap) $(sta)] {
	    catch {$dut wl up}
	}
	UTF::Sleep 2.0
	if {$doreconnect || ($(soundcheck) && $(value))}  {
	    set reconnect_time 10
	    while {$reconnect_time} {
		if {[catch {$(sta) wl bssid} bssid] || $bssid ne [$(ap) macaddr]} {
		    UTF::Sleep 1.0
		    incr reconnect_time -1
		} else {
		    break
		}
	    }
	    if {!$reconnect_time} {
		if {![$(sta) hostis Router]} {
		    package require UTF::Test::ConnectAPSTA
		    UTF::Test::ConnectAPSTA $(ap) $(sta)
		} elseif {[catch {$(sta) wl psta} pstaflag] || !$pstaflag} {
		    package require UTF::Test::ConfigBridge
		    UTF::Test::ConfigBridge -ap $(ap) -br $(sta)
		} else {
		    $(sta) wl join [$(ap) wl ssid]
		    UTF::Sleep 10
		}
	    }
	    if {[llength $BRIDGES]} {
		UTF::Test::BridgeCheck -ap $(ap) -br $BRIDGES
	    }
	}
	foreach dut [concat $(ap) $(sta)] {
	    $dut wl -u dump txbf
	}
	if {$(soundcheck) && $(value)} {
	    UTF::Message INFO "" "sounding check"
	    set stream [UTF::stream %AUTO% -tx $(ap) -rx $(sta)]
	    $stream start
	    set output [$(ap) wl -u dump txbf]
	    $stream destroy
	}
	foreach dut [concat $(ap) $(sta)] {
	    $dut wl -u dump txbf
	    $dut wl -u dump rssi
	    $dut wl -u curpower
	    $dut wl -u spatial_policy
	    $dut wl -u country
	}
	return
    }
}
