#!/bin/env utf
# -*-tcl-*-

#
# UTF test script for checking stability of Calibration coefficients.
# $Id: 266aaed8c892ee8df87ad36c9b9706f35385c0d9 $
# $Copyright Broadcom Corporation$
#

package require UTF
package provide UTF::Test::CalOnly 2.0

UTF::Test CalOnly {SRC args} {

    UTF::Getopts {
	{chanspec.arg "36al" "Chanspec"}
	{noreload "Don't reload images/drivers"}
	{loop.arg "10000" "Loop Count"}
	{txpwrctrl.arg "" "nphy_txpwrctrl"}
	{txpwrindex.arg "" "nphy_txpwrindex"}
	{per_cal.arg "" "per_cal timer"}
	{fast "Fast, no kernel logging"}
	{glacial_timer.arg "" "Glacial Timer"}
    }

    regsub {/} "cal_$SRC.log" {.} UTF::Logfile

    set SRCis [$SRC hostis]

    if {$SRCis ne "Router" && !$(noreload)} {
	$SRC reload
    }

    # Make sure "up" really means "up"
    $SRC wl mpc 0

    if {$(txpwrctrl) ne {}} {
	$SRC wl up
	$SRC wl nphy_txpwrctrl $(txpwrctrl)
    }
    if {$(txpwrindex) ne {}} {
	$SRC wl nphy_txpwrindex $(txpwrindex)
    }

    if {$(fast)} {
	catch {$SRC wl msglevel error}
	$SRC close_messages
    } else {
	# Report more calibration details
	catch {$SRC wl msglevel +info}
    }
    $SRC wl down
    $SRC wl band auto
    $SRC wl chanspec $(chanspec)
    $SRC wl up

    if {$(glacial_timer) ne ""} {
	$SRC wl glacial_timer $(glacial_timer)
    } else {
	$SRC wl -u phy_percal 3
    }
    $SRC wl phy_watchdog 1

    # NPHY can fall back to older dump name
    if {[catch {$SRC wl dump phycal} ret] && [regexp {Unsupported} $ret]} {
	set phycal "nphycal"
    } else {
	set phycal "phycal"
    }

    set phyname [$SRC phyname]

    for {set i 0} {$i < $(loop)} {incr i} {
	UTF::Message INFO "" "Loop $i/$(loop)"
	if {$(glacial_timer) eq ""} {
	    $SRC wl phy_forcecal 1
	}
	if {!$(fast)} {
	    UTF::Sleep 1
	}

	switch $phyname {
	    NPHY {
		set ret [$SRC wl dump $phycal]
		if {[regexp {OFDM PHY:\nA0=([-\d]+), B0=([-\d]+), A1=([-\d]+), B1=([-\d]+)} \
			 $ret - A0 B0 A1 B1] &&
		    [regexp {a0=([-\d]+), b0=([-\d]+), a1=([-\d]+), b1=([-\d]+)} \
			 $ret - a0 b0 a1 b1]} {
		    set parm(A0) $A0
		    set parm(B0) $B0
		    set parm(A1) $A1
		    set parm(B1) $B1
		    set parm(a0) $a0
		    set parm(b0) $b0
		    set parm(a1) $a1
		    set parm(b1) $b1
		} else {
		    error "Unable to parse dump nphycal"
		}
	    }
	    LCNPHY -
	    LCN40PHY {
		set parm(rxiqcc0) [10bits [$SRC wl phyreg 0x645 $band]]
		set parm(rxiqcc1) [10bits [$SRC wl phyreg 0x646 $band]]

		catch {
		    set txiqcc [$SRC wl phy_txiqcc]
		    set parm(txiqcc0) [lindex $txiqcc 0]
		    set parm(txiqcc1) [lindex $txiqcc 1]

		    set txlocc [$SRC wl phy_txlocc]
		    set parm(txlocc0) [lindex $txlocc 0]
		    set parm(txlocc1) [lindex $txlocc 1]
		    set parm(txlocc2) [lindex $txlocc 2]
		    set parm(txlocc3) [lindex $txlocc 3]
		}
	    }
	    ACPHY -
	    HTPHY {
		set ret [$SRC wl dump phycal]
		foreach {- c a b} \
		    [regexp -inline -all -line \
			 {core-(\d):\sa/b:\s\(\s*([-\d]+),\s*([-\d]+)\),\s} \
			 $ret] {
			     set parm(ta$c) [UTF::clean_number $a]
			     set parm(tb$c) [UTF::clean_number $b]
			 }
		if {![info exists c]} {
		    error "Unable to parse tx coefs from dump nphycal"
		}
		unset c
		foreach {- c a b} \
		    [regexp -inline -all -line \
			 {core-(\d):\sa/b\s=\s\(\s*([-\d]+),\s*([-\d]+)} \
			 $ret] {
			     set parm(ra$c) [UTF::clean_number $a]
			     set parm(rb$c) [UTF::clean_number $b]
			 }
		if {![info exists c]} {
		    error "Unable to parse rx coefs from dump nphycal"
		}
	    }
	}
	UTF::XPASS $SRC 0 [array get parm]
    }
}
