#!/bin/env utf
# -*-tcl-*-

# UTF test script for stress testing MBSS16 by sending traffic in all
# directions

# $Id: 73314e35d5dd1527345d139b6c1c4d6729f56c70 $
#

package require UTF
package require UTF::Test::controlchart
package require UTF::Test::APConfigureSecurity
package require UTF::Test::ConnectAPSTA
package require UTF::Test::Mbss::APAddInterface

package provide UTF::Test::Mbss::Mbss16 2.0

UTF::Test Mbss::Mbss16 {AP STA args} {

    UTF::Getopts {
	{loops.arg "12" "Stress test Loops"}
	{branch.arg "TOT" "Branch"}
	{min.arg "0" "Lowest interface to test"}
	{nodisassoc "Don't disassoc first"}
	{lanonly "Only test lan connectivity, not STA to STA"}
    }

    set max [expr {$(min) + [llength $STA]}]

    UTF::WrapSummary $UTF::SummaryDir "Mbss16" "" "" {
	set ::UTF::Perfcache [file join $UTF::SummaryDir perfcache]

	UTF::Record "$AP Check for MBSS" {
	    if {![regexp {mbss(\d+)} [$AP wl cap] - mbss]} {
		error "No mbss"
	    } else {
		return $mbss
	    }
	}


	if {!$(nodisassoc)} {
	    UTF::Try "disassoc" {
		foreach S $STA {
		    $S wl up
		    $S wl disassoc
		}
	    }
	}

	UTF::Record "$AP Configure open security" {
	    UTF::Test::APConfigureSecurity $AP -security open
	}

	UTF::Record "$AP enable $mbss interfaces" {
	    if {$(min) == 0} {
		set APS $AP
		set testAPS $AP
		incr (min)
	    }
	    set lan [$AP lan]

	    set wlname [$AP wlname]
	    set host [$AP cget -host]
	    if {[$AP hostis Vx]} {
		regexp {\d+} $wlname vxbase
		set vxbase [expr {$vxbase*256}]
	    }

	    for {set i 1} {$i < $mbss} {incr i} {
		if {[info exists vxbase]} {
		    set wl "wlmbss[expr {$vxbase + $i}]"
		} else {
		    set wl "${wlname}.$i"
		}
		UTF::STA "::$AP.$i" -host $host -device $wl
		if {$i >= $(min) && $i < $max} {
		    lappend testAPS "$AP.$i"
		}
		lappend APS "$AP.$i"
	    }

	    APAddInterface -lan {*}$APS

	}

	foreach A $testAPS S $STA {
	    if {$A ne "" && $S ne ""} {
		UTF::Try "$S connect to $A" {
		    if {[catch {$A wl bssid} as] ||
			[catch {$S wl bssid} ss] ||
			$as ne $ss} {
			UTF::Test::ConnectAPSTA $A $S
		    }
		    lappend pairs $S lan
		    return
		}
	    } else {
		UTF::Message WARN "" "skipping AP=$AP, STA=$STA"
	    }
	}
	if {$(lanonly)} {
	    UTF::Try "LAN Stress" {
	    UTF::Test::controlchart $pairs \
		-loop $(loops) -key [list $(branch) "Mbss16" $AP] \
		-history $(loops) -nopretest
	    }
	} else {
	    UTF::Try "Cross Connect Stress" {
		UTF::Test::controlchart \
		    [concat {*}[UTF::Permutations 2 $STA]] \
		    -loop $(loops) -key [list $(branch) "Mbss16" $AP] \
		    -history $(loops) -nopretest
	    }
	}
    }
}
