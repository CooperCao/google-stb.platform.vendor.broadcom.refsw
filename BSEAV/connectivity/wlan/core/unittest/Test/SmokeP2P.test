#!/bin/env utf
# -*-tcl-*-

set __doc__ "Smoke point-to-point test helper script."
set __version__  {$Id: 813c241a2758545d444c40821dfea5a55a0048af $}

package provide UTF::Test::SmokeP2P 2.0

package require UTF
package require UTF::Test::ConnectSTA
package require UTF::Test::P2PSmokeTest

UTF::Test SmokeP2P {AP STA args} {

    set gc_p2p_conn_stat "FAIL"
    set gc_ap_conn_stat "FAIL"
    set gc_ap_disc_stat "FAIL"
    set gc_p2p_disc_stat "FAIL"

    set gc_p2p_ip_base "192.168.5.210"
    set gc_p2p_mac_base "22:22:22:22:22:30"

    # Evaluate STA number.
    regexp {(.)$} $STA sta_no
    # Evaluate GC IP and MAC from bases and STA number.
    set strl [expr [string length $gc_p2p_ip_base] - 1]
    set gc_p2p_ip [string replace $gc_p2p_ip_base $strl end $sta_no]
    set strl [expr [string length $gc_p2p_mac_base] - 1]
    set gc_p2p_mac [string replace $gc_p2p_mac_base $strl end $sta_no]

    # Connect GC to GO and test.
    UTF::Try "GC $STA connect to GO." {
        eval P2PSmokeTest -sta_gc $STA \
	    -gc_p2p_ip $gc_p2p_ip -gc_p2p_mac_address $gc_p2p_mac $args
	set gc_p2p_conn_stat "PASS"
    }
    # Test connection from GC to AP.
    UTF::Try "GC $STA ping AP." {
	if {[$AP hostis StaticAP]} {
	    $STA ping $AP
	} else {
	    ConnectSTA $AP $STA "ignore" "ignore" -pingonly
	}
	set gc_ap_conn_stat "PASS"
    }
    # Disconnect GC from AP.
    UTF::Try "GC $STA disassociate from AP" {
        $STA wl disassoc
	set gc_ap_disc_stat "PASS"
    }
    # Disconnect GC from GO.
    UTF::Try "GC $STA disassociate from P2P connection" {
        set rc [$STA wl p2p_if $gc_p2p_mac]
        regexp -nocase { (.*)} $rc match gc_p2p_ifname
	$STA wl -i $gc_p2p_ifname disassoc
	set gc_p2p_disc_stat "PASS"
    }
    # Report status.
    set all_stats [list $gc_p2p_conn_stat $gc_ap_conn_stat \
		       $gc_ap_disc_stat $gc_p2p_disc_stat]
    set all_stat_names [list "gc_p2p_conn" "gc_ap_conn" "gc_ap_disc" "gc_p2p_disc" ]
    foreach stat $all_stats {
        if {$stat ne "PASS"} {
            break
        }
    }
    set msg ""
    if {$stat ne "PASS"} {
        for {set i 0} {$i < [llength $all_stats]} {incr i} {
            set msg [concat $msg " " [lindex $all_stat_names $i] " " \
			 [lindex $all_stats $i]]
        }
    }
    return $msg
}
