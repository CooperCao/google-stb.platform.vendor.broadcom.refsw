#!/bin/env utf
# -*-tcl-*-
#

#
# UTF test script to verify multicast learning
#
# Written by: Robert J. McMahon June 2012
#
# $Copyright Broadcom Corporation$
#
package require UTF
package require UTF::Multicast

package provide UTF::Test::EMFLearn 2.0

UTF::Test EMFLearn {args} {
    UTF::Getopts {
	{ap.arg "" "APs under test"}
	{wets.arg "" "Bridges under test"}
	{stream.arg "" "Multicast stream to use for test"}
    }
    UTF::Try "EMF Learning" {
	$(ap) igmp_querier enable
	$(ap) igmp_querier send
	set mrouter [[$(ap) lan] ipaddr]
	foreach AP [concat $(ap) $(wets)] {
	    UTF::Try "RTPORT clear" {
		set output [$AP emf list rtport [$AP brname]]
		set devs ""
		if {[regexp "RTPORT list of [$AP brname]:(.)*" $output - devs]} {
		    foreach dev $devs {
			$AP del rtport [$AP brname] $dev
		    }
		} else {
		    set msg "Could not parse RTPORT output"
		    UTF::Message ERROR $AP $msg
		    error $msg
		}
		if {[llength $devs] && ![UTF::Multicast::test_rtport_empty $AP]} {
		    set msg "Could not clear RTPORT for $AP"
		    UTF::Message ERROR $AP $msg
		    error $msg
		}
	    }
	}
	UTF::Try "RTPORT learn" {
	    foreach AP [concat $(ap) $(wets)] {
		$AP emf show stats [$AP brname]
		$AP igs show stats [$AP brname]
	    }
	    $(ap) igmp_querier send
	    UTF::Sleep 0.1
	    $(ap) igmp_querier send
	    UTF::Sleep 0.1
	    UTF::Try "EMF RTPORT" {
		foreach AP [concat $(ap) $(wets)] {
		    $AP emf show stats [$AP brname]
		}
		foreach AP [concat $(ap) $(wets)] {
		    if {[UTF::Multicast::test_rtport_empty $AP]} {
			set msg "Empty emf list for the RTPORT"
			error $msg
		    }
		}
	    }
	    UTF::Try "IGS RTPORT" {
		foreach AP [concat $(ap) $(wets)] {
		    $AP igs show stats [$AP brname]
		}
		if {![UTF::Multicast::test_igs_rtport $AP $mrouter]} {
		    set msg "igs miss for RTPORT: $AP $mrouter"
		    error $msg
		}
	    }
	}
    }
    if {$(stream) ne "" && [$(stream) cget -multicast]} {
	set grp [$(stream) cget -dstgrpip]
	UTF::Try "IGS Learning" {
	    set err ""
	    $(ap) igmp_querier send
	    $(stream) start
	    foreach RX [$(stream) cget -receivesta] {
		set ip [$RX ipaddr]
		if {![UTF::Multicast::test_sdb_entry $(ap) $grp $ip]} {
		    append err "$(ap) $grp $ip miss "
		}
	    }
	    #RJM Add WET testing
	    $(stream) linkcheck -now
	    $(stream) stop
	    if {$err ne ""} {
		error $err
	    }
	}
    }
}
