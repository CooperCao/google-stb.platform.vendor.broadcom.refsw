#!/bin/env utf
# -*-tcl-*-

# UTF test script for testing multista
#
#
# $Id$
# $Copyright Broadcom Corporation$
#

package require UTF
package require UTF::Test::APChanspec
package require UTF::Test::ConnectAPSTA
package require UTF::Test::Join
package require UTF::Multiperf

UTF::Test RvRWaterfall {AP STA args} {

    # No point unless we have a log file.
    if {$UTF::Logfile eq ""} {
	UTF::Logfile "test.log"
    }


    # If FBDefault is set, and devices support it, enable fb
    if {[info exists ::UTF::FBDefault] &&
	![$STA cget -noframeburst] && ![$AP cget -noframeburst]} {
	set fbdefault 1
    } else {
	set fbdefault 0
    }

    # Pick defaults based on STA capabilities
    UTF::Getopts [subst {
	{i.arg 0.5 "Iperf Interval"}
	{t.arg 2 "Iperf test time"}
	{group.arg "[lindex [concat \
				[$STA cget -attngrp] [$AP cget -attngrp]] 0]" \
	     "Attenuator group"}
	{attn.arg "0-103" "Attenuator values"}
	{chanspec.arg "36/80" "Chanspec"}
	{frameburst.arg "$fbdefault" "Frameburst"}
	{title.arg "" "Report title"}
	{b.arg "1.8g" "bandwidth"}
	{outline "Only display auto rate"}
	{png.arg "Plot results directly to the named png file"}
	{png_size.arg "1280x1024" "Image size for png output"}
    }]

    set (attn) [UTF::Numexpand $(attn)]

    set band [$STA band $(chanspec)]

    if {$(group) eq ""} {
	error "No attenuator group specified.\nUse -group <group>, or add the -attngrp <group> property to the AP or STA."
    }
    $(group) attn [lindex $(attn) 0]
    $STA txrate $band auto

    if {[$AP hostis Router]} {
	ConnectAPSTA $AP $STA -chanspec $(chanspec)
    } else {
	Join $AP $STA -chanspec $(chanspec)
    }

    $AP wl frameburst $(frameburst)
    $STA wl frameburst $(frameburst)

    set bigwindow [$STA tcpautowindow]
    set window $bigwindow

    set parm(chanspec) $(chanspec)
    set parm(fb) $(frameburst)
    set parm(title) $(title)
    set parm(b) $(b)

    # Build rate table
    array set rtable {}
    foreach r [$STA allrates -auto] {
	$STA txrate a $r
	lappend rtable([lindex [$STA wl rate] 0]) $r
	if {![regexp {\(} $r]} {
	    # check SGI
	    $STA txrate a ${r}s
	    lappend rtable([lindex [4366 wl rate] 0]) ${r}s
	}
    }
    set ratemb [lsort -real [array names rtable]]
    foreach n $ratemb {
	UTF::Message LOG $STA [format "%4.1f: %s" $n $rtable($n)]
    }

    # Give the first test more time to settle since we may have just
    # changed the attenuation a long way.
    set settletime 2

    foreach parm(attn) $(attn) {
	$(group) attn $parm(attn)

	$STA txrate $band auto
	set parm(rate) "auto"

	# pretest to settle rates, etc
	UTF::Multiperf [list $STA $AP] -b $(b) -t $settletime -noping
	set settletime 0.5

	# No point trying performance test if we're already roaming
	if {[$STA wl bssid] eq "00:00:00:00:00:00"} {
	    continue
	}

	set rate [lindex [$STA wl rate] 0]
	if {$rate < 100 || $bigwindow == 0} {
	    set window 0
	} elseif {$rate < 400} {
	    set window 512k
	} else {
	    set window $bigwindow
	}
	UTF::Message LOG $STA "Window: $window"

	# Clear APMDU stats
	$STA wl ampdu_clear_dump

	set cmd [list UTF::Multiperf [list $STA $AP] \
		     -b $(b) -i $(i) -t $(t) -w $window -noping]

	set samples [eval $cmd]
	foreach ret $samples {
	    UTF::XPASS $AP $ret [UTF::ParmStrip parm]
	}

	set dump [$STA wl dump ampdu]
	if {$(outline)} {
	    continue
	}

	# Estimate lowest phy rate that could better the observed
	# throughput.  1.2 magnifier is to account for protocol
	# efficiency.
	lassign [UTF::MeanMinMax $samples] mean
	set minkb [expr {$mean * 1.2}]

	# Check rates above minkb up to one rate group above the
	# current rate
	set upper "0"
	set lower "0"
	for {set ix 0} {$ix < [llength $ratemb]} {incr ix} {
	    set r [lindex $ratemb $ix]
	    if {$r <= $minkb} {
		set lower $ix
	    }
	    if {$r <= $rate} {
		set upper $ix
	    }
	}

	set spanmb [lrange $ratemb $lower $upper+1]
	set spanrates ""
	foreach sb $spanmb {
	    set ratestocheck $rtable($sb)
	    lappend spanrates {*}$ratestocheck
	    UTF::Message DEBUG $STA "rates to check: $sb => $ratestocheck"
	}
	foreach m $spanrates {
	    UTF::Message INFO $STA "Probe $m"
	    $STA txrate $band $m

	    set parm(rate) $m
	    foreach ret [eval $cmd] {
		UTF::XPASS $AP $ret [UTF::ParmStrip parm]
	    }
	}

	# Update image
	if {$(png) ne ""} {
	    localhost $UTF::unittest/cgi/plotperformance.cgi "pngfile=$(png);GnuplotVersion=[UTF::GnuplotVersion];FileList=$UTF::Logfile;X-Axis=attn;Size=$(png_size);Ignore=path"
	}

    }
}

