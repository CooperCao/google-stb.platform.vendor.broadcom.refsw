#!/bin/env utf
# -*-tcl-*-
#

#
# UTF test script to test multilink traffic
#
#
# $Copyright Broadcom Corporation$
#
package require UTF
package require UTF::Streams
package require UTF::wlstats

# [TIMA] disabled due to packaging conflict
# Please choose a consistent name for package, test and filename
#package provide UTF::Test::hh_MultilinkTraffic 2.0

UTF::Test MultilinkTCPTraffic {args} {
    UTF::Getopts {
	{ap.arg "4708mch5" "AP under test"}
	{stas.arg "psta2mch5 psta3mch5 psta4mch5 psta5mch5 psta6mch5" "STAs for test"}
	{holdtime.arg "30" "time to hold traffic in seconds"}
	{pollfrequency.arg "1" "interval to poll stats"}
	{rate.arg "" "shaped rate"}
	{tcptrace "enable tcptrace and pcap capture"}
	{graphtype.arg "svg" "optionally set to 'canvas' for mouseable plot"}
	{graphsize.arg "1024,768" "set the graph size"}
	{title.arg "" "Title used for graphs"}
	{w.arg "4M" "TCP window size"}
	{txbf.arg "-1" "Beamforming"}
	{pspretend.arg "-1" "pspretend"}
	{atf.arg "-1" "ATF setting"}
	{amsdu.arg "-1" "AMSDU setting"}
	{taf_bypass.arg "-1" "TAF bypass setting"}
	{frameburst.arg  "-1" "Frameburst setting"}
	{directions.arg "down up" "traffic directions"}
	{nopktqstats "disable pktqstat polling"}
	{proto.arg "tcp" "protocol tcp or udp"}
    }
    UTF::Try "wl status" {
	foreach dut [concat $(ap) $(stas)] {
	    $dut wl status
	}
	if {$(title) eq ""} {
	    set (title) "[$(ap) wl chanspec] [concat $(ap) $(stas)]"
	} else {
	    append (title) "\\n[$(ap) wl chanspec] [concat $(ap) $(stas)]"
	}
	return
    }

	if {$(txbf) ne "-1"} {
	lappend trytext TXBF=$(txbf)
    }
    if {$(pspretend) ne "-1"} {
	lappend trytext PS=$(pspretend)
    }
    if {$(atf) ne "-1"} {
	lappend trytext ATF=$(atf)
    }
    if {$(amsdu) ne "-1"} {
	lappend trytext AMSDU=$(amsdu)
    }
    if {$(taf_bypass) ne "-1"} {
	lappend trytext TAF_bypass=$(taf_bypass)
    }
    if {$(frameburst) ne "-1"} {
	lappend trytext FB=$(frameburst)
    }
    if {$(proto) ne "tcp"} {
		lappend trytext PROTO=$(proto)
    }
    if {$(rate) ne "-1"} {
	lappend trytext shapedrate=$(rate)
    }
    if {![info exists trytext]} {
	set trytext "defaults"
    }

    UTF::Try "$(ap) $trytext" {
	if {$(txbf) ne "-1"} {
	    $(ap) wl txbf $(txbf)
	}
	if {$(pspretend) ne "-1"} {
	    $(ap) wl pspretend_retry_limit $(pspretend)
	}
	if {$(atf) ne "-1"} {
	    $(ap) wl atf $(atf)
	}
	if {$(amsdu) ne "-1"} {
	    $(ap) wl amsdu_aggblock $(amsdu)
	}
	if {$(taf_bypass) ne "-1"} {
	    $(ap) wl taf bypass $(taf_bypass)
	}
	if {$(frameburst) ne "-1"} {
	    $(ap) wl frameburst $(frameburst)
	}
	}
    foreach direction $(directions) {
	UTF::Try "Instantiate [string tolower ${direction}]stream objects" {
	    UTF::stream allstreams destroy
	    set streamlist {}
	    if {[string tolower $direction] eq "up"} {
		set apdir "-rx"
		set stadir "-tx"
	    } else {
		set stadir "-rx"
		set apdir "-tx"
	    }
	    foreach STA $(stas) {
			if {$(proto) ne "tcp"} {
				set txflow($STA) [UTF::stream %AUTO% $apdir $(ap) $stadir $STA -protocol $(proto) -name "$(proto)->$STA" -w $(w) -reportinterval 0.5 -rate $(rate)]
			} else {
				set txflow($STA) [UTF::stream %AUTO% $apdir $(ap) $stadir $STA -protocol $(proto) -name "$(proto)->$STA" -w $(w) -reportinterval 0.5]
				lappend streamlist $txflow($STA)
				if {$(rate) ne {}} {
					$txflow($STA) configure -shaperrate $(rate)
				}
				if {$(tcptrace)} {
					$txflow($STA) configure -trace 1
				}
			}
			$txflow($STA) configure -pktsize 1470
			set skey [$txflow($STA) id]
			if {!$(nopktqstats) && ![info exists pktqstats($STA)]} {
				$STA wl msglevel +time +taf
				set pktqstats($STA) [UTF::wlstats::pktqstat %AUTO% -key "sta,$skey" -wlcmd "$STA wl pktq_stats" -name $STA]
				set pktqstats($(ap)) [UTF::wlstats::pktqstat %AUTO% -key "ap,$skey" -wlcmd "$(ap) wl pktq_stats" -name $(ap)]
				set pktqstats(${(ap)},${STA}) [UTF::wlstats::pktqstat %AUTO% -key "ap,$skey" -wlcmd "$(ap) wl pktq_stats a:[[$STA lan] macaddr]" -name $(ap)]
				#set pktqstats(${(ap)}) [UTF::wlstats::pktqstat %AUTO% -key "ap,$skey" -wlcmd "$(ap) wl taf atos dump" -name $(ap)]
			}
	    }
	    UTF::stream allstreams id
	    return
	}
	UTF::Try "Start traffic" {
	    $(ap) wl msglevel +time
	    foreach STA $(stas) {
			$txflow($STA) start
	    }
	    UTF::Sleep 2.0
	    foreach STA $(stas) {
			$txflow($STA) stats -clear
	    }
	    foreach STA $(stas) {
			$txflow($STA) linkcheck -now
	    }
	}
	UTF::Try "Hold traffic $(holdtime)s" {
	    set start [clock clicks -milliseconds]
	    while {[expr {[clock clicks -milliseconds] - $start}] <= [expr {int($(holdtime) * 1000)}]} {
		set wlcmdstart [clock clicks -milliseconds]
		foreach STAT [array names pktqstats] {
		    $pktqstats($STAT) sample
		}
		set adj [expr {([clock clicks -milliseconds] - $wlcmdstart) / 1000.0}]
		UTF::Sleep [expr {$(pollfrequency) - $adj}]
	    }

	    foreach STA $(stas) {
			catch {$txflow($STA) stop}
	    }
	    UTF::streamgraph graph -stat rate -title "$(title) $trytext" -outputtype $(graphtype) -graphsize $(graphsize) -streams $streamlist
	    set final [graph plot]
	    catch {graph destroy}
	    if {$(tcptrace)} {
			UTF::Try "TCPTraces" {
				foreach index [array names txflow] {
				set pcapfile [$txflow($index) trace xfer -unzip]
				UTF::Try "PCAP [file tail $pcapfile]" {
					return "html:<a href=\"$pcapfile\">$proto$index</a>"
					}
				}
			}
	    }
	    foreach STA $(stas) {
		catch {$txflow($STA) destroy}
	    }
	    return $final
	}
	UTF::Try "Stat check: no rtrydrops" {
	    foreach FLOW [array names pktqstats] {
			UTF::Try "$FLOW" {
				$pktqstats($FLOW) write
				set pktstatqueue [$pktqstats($FLOW) get -queue]
				set htmllink [$pktqstats($FLOW) myhtmllink -text "$pktstatqueue"]
		    if {$pktstatqueue ne "COMMON" && [$pktqstats($FLOW) interesting -show -search "rtrydrop"]} {
				error $htmllink
				} else {
				return $htmllink
				}
			}
	    }
	}
    }
    UTF::Try "Exit test" {
		UTF::stream allstreams exit
		foreach STA $(stas) {
			[$STA lan] killall iperf
		}
#		[$(ap) lan] killall iperf
    }
}
