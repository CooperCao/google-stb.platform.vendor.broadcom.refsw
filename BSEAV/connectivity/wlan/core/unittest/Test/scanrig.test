#!/bin/env utf
# -*-tcl-*-

#
# UTF test script for scanning between several devices to measure
# their RF seperation.
# $Id: ad7d9d6b76879eea9578d945341de65c673d1e88 $
#

package require UTF

UTF::Test scanrig {STA args} {
    UTF::Getopts {
	{passive "Use passive scans"}
	{chanspec.arg "" "Chanspec to beacon on"}
	{rxchanspec.arg "" "Chanspec list to listen on"}
    }

    # Setup
    foreach S $STA {
	# Select channel
	$S wl radio on
	$S wl down
	if {$(chanspec) ne ""} {
	    $S wl band auto
	    $S wl chanspec $(chanspec)
	}
	$S wl up
	if {[regexp {sta} [$S wl cap]]} {
	    # STAs and APs with STA functionality get put in IBSS mode
	    $S wl ap 0
	    $S wl join $S imode ibss
	} else {
	    # Pure APs stay in AP mode
	    $S wl ap 1
	    $S wl ssid $S
	}
    }
    # Give devices time to start beaconing
    UTF::Sleep 6

    set scancmd "wl scan"
    if {$(passive)} {
	lappend scancmd -t passive
    }
    if {$(rxchanspec) ne ""} {
	lappend scancmd -c $(rxchanspec)
    }

    # Scan
    foreach S $STA {
	eval $S $scancmd
	# If this fails with Busy then you probably tried to use the
	# same STA twice!
    }

    # Scanresults
    set seen $STA; # prepopulate seen list to keep entries in order
    foreach S $STA {
	while {[catch {$S wl scanresults} ret] && [regexp {Not Ready} $ret]} {
	    UTF::Sleep 1
	}
	foreach {- ssid rssi} [regexp -all -inline -expanded -line {
	    SSID:\s"(.*?)"\n
	    Mode:\s.*\sRSSI:\s(-?\d+)\sdBm} $ret] {
	    set map($S,$ssid) $rssi
	    if {[lsearch $seen $ssid] < 0} {
		lappend seen $ssid
	    }
	}
    }

    # Report
    set csv "TX/RX     , [join $seen ", "]"

    foreach S $STA {
	set row [list [format {%-10s} $S]]
	foreach r $seen {
	    if {[info exists map($S,$r)]} {
		lappend row [format {%4d} $map($S,$r)]
	    } elseif {$S eq $r} {
		lappend row "   0"
	    } else {
		lappend row "    "
	    }
	}
	append csv "\n[join $row ", "]"
    }
    puts $csv
}
