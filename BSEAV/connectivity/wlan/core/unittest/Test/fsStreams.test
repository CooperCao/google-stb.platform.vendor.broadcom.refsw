#!/bin/env utf
# -*-tcl-*-

#
# Streams-based test script for testing 10 STAs communicating with 1 soft AP
#
# Need to add handler for STAs that aren't up
# Need a handler for DHD drivers that are already loaded


package require UTF
package require UTF::Streams
package require UTF::Test::Scan
package require UTF::Test::APChanspec
package require UTF::Test::ConnectAPSTA

# package require UTF::ControlChart

# package provide UTF::Test::Fragmentation 2.0

UTF::Test fsStreams {args} {
    UTF::Getopts {
    	{sta.arg "4325sdio" "Sta list name"}
    	{ap.arg "4704/4318" "AP name"}
		{security.arg "" "Security Type"}
		{chanspec.arg "" "Test Channel"}
	}
    
	UTF::WrapSummary $UTF::SummaryDir "fsStreams" "" "jeffg@broadcom.com" {
		
	UTF::Try "Stop and destroy any existing Streams" { 
	# Try to kill any currently running streams before we get started	
	::UTF::stream allstreams stop
    ::UTF::stream allstreams destroy
    }

	
    UTF::Try "Load the AP $(ap)" { 
    # I need to look into doing a check and unload if necessary before the load
	# Load the AP
	$(ap) load
	}
	
	# Load and associate each member of stalist...one STA at a time
    foreach STA $(sta) {
    
#    	UTF::Try "Reload the STA $STA" { 
      	# Reload the next STA in the list
#     	$STA reload
#    	}
    	
#    	UTF::Sleep 2
    	
    	# make sure STA is ready before we associate it to the AP
#    	$STA wl ver
    	
    	UTF::Try "Connect the STA $STA to the AP $(ap)" { 
    	# Associate the next STA in the list with the ap
		ConnectAPSTA $(ap) $STA  -security open -chanspec 3
		}
    }
        	
    	$(ap) wl status    
        
    # Create a stream between each sta and the ap
    set ix 0
    foreach STA $(sta) {
		UTF::Try "Create a stream between the STA $STA and the AP $(ap)" { 
    	set streamarray($ix) [UTF::stream %AUTO% -transmitsta $STA -receivesta $(ap)]
    	    	
    	    	# check the stream status
    	    	UTF::Sleep 2.0
    	    	$streamarray($ix) linkcheck
    	    	incr ix
		}
    	
    }	
    
    # Build a list of Streams to pass to allgraph
    set STRM [lindex $(sta) 0]
    set streamlist ""
    set ix 0
    foreach STRM $streamarray($ix) {
    	lappend streamlist $STRM
    	incr ix
    }
    
    UTF::Try "Turn off the display to the console" { 
    # shutoff the display to the console
     ::UTF::stream allstreams configure -txdisplay off
     ::UTF::stream allstreams configure -rxdisplay off
    }
     
     UTF::Try "Set the Streams statistics type(s)" { 
    # I need to set a shorter time limit for streams...where?
     # set the statistics type that will be gathered for graphing
     ::UTF::stream allstreams stats -rate -meanminmax -clearsynch
     }
     
     UTF::Try "Configure the graph for displaying the statistics" { 
     # Configure a graph for displaying the statistics 
     # ::UTF::streamgraph allgraph -stat rate 
     
     
     # set which of the statistics gathered by allstreams will be displayed ...only at instance creation?
     #allgraph configure -graphcache graphcache
     
     # map the graph to the stream(s) name
     # UTF::streamgraph allgraph configure -streams $streamlist
     }
     
    UTF::Try "Start all of the streams" {
    ::UTF::stream allstreams start
	}    
 
	UTF::Try "Clear the Stats" {
	# Clear the stats after the start to get rid of any anomalous spikes
    ::UTF::stream allstreams stats -clear
    UTF::Sleep 10
    }
      
    # UTF Message with parray
    #UTF::Message StreamList STREAMS "The following Streams should start parray $streamarray"
     
    
    set rplot [[UTF::streamgraph allgraph -yticsynch 1 -graphsize "1024,768" -stat rate -streams $streamlist -title "Soft AP Streams"] plot]

    # Fail: Graph the Streams ::UTF::Test::stream1 with 10 samples: invalid command name "html:
    UTF::Try "Graph the Streams $streamlist with 10 samples" {
    # plot the graph once every 5 seconds, 10 times total
    set ix 0
    while {$ix < 10} {
    # 	[UTF::streamgraph allgraph] plot
    $rplot
    UTF::Sleep 5
    incr ix
     }
     }
     
     
    UTF::Try "Stop and Exit the Streams" {
    ::UTF::stream allstreams stop
	    
    # need to determine how this is different from UTF::stream allstreams destroy
    # Be sure to clean up after ourselves to avoid leftover Iperf processes
    ::UTF::stream exitstreams
    }
     
     
    UTF::Try "Unload the AP $(ap)" {
    # need to change this because it it not getting executed
    # Should always unload the ap driver after a test
    $(ap) unload
	}       
    }
    }
    # end of fsStreams


