#!/bin/env utf
# -*-tcl-*-

#
# P2P Smoke test script 
#

# $Id: f2df4bb53857fc120319fbf96d218f3b01b0ec8e $
# $Copyright Broadcom Corporation$
#

# Test description:
#	Create a Direct P2P connection between GO & GC and ping the P2P IP addresses
# To run the test:	
#	------------------------
#	One time run to setup GO:
#	1)	Load the driver on GO
#	2)	Test/P2PSmokeTestGOSetup.test -sta_go 4335-Panda-GO
#	------------------------
#	Daily run of the P2P test:
#	1)	Load the driver on GC
#	2)	Test/P2PSmokeTest.test -sta_gc 4335-Panda-DUT -gc_p2p_ip "192.168.5.241" -gc_p2p_mac_address "22:22:22:22:22:23"
#		Test/P2PSmokeTest.test -sta_gc 4335-Panda-DUT -gc_p2p_ip "192.168.5.242" -gc_p2p_mac_address "22:22:22:22:22:24"
#		...
#	3)	Repeat steps 1 & 2 as many times as you like
#	------------------------
#

package require UTF

package provide UTF::Test::P2PSmokeTest 2.0

#################################################################################
#################################################################################
UTF::Test P2PSmokeTest {args} {
	UTF::Getopts {
		{email.arg "" "Email Address"}
		{title.arg "" "Title"}
		{sta_gc.arg "" "Group Client GC sta name"}
		{p2p_chan.arg "36" "P2P Channel"}
		{p2p_ssid.arg "DIRECT-GO" "P2P SSID"}
		{go_p2p_ip.arg "192.168.5.235"	"GO P2P IP address"}
		{gc_p2p_ip.arg "192.168.5.237"	"GC P2P IP address"}
		{gc_p2p_mac_address.arg "22:22:22:22:22:21"	"GC P2P Mac address"}
	}

	#####################################################
	##############        Setup GC       ################
	#####################################################
	proc setup_gc {sta_gc p2p_chan gc_p2p_ip gc_p2p_macaddr} {
		UTF::Message INFO "" "************************Func:setup_gc***************************"

		$sta_gc wl up
		UTF::Sleep 1

		UTF::Message INFO "" "Check to see if P2P GC interface already exists"
		set catch_resp [catch {$sta_gc wl p2p_if $gc_p2p_macaddr} catch_msg]
		if {$catch_resp == 0} {
			set gc_p2p_ifname ""
			regexp -nocase { (.*)} $catch_msg match gc_p2p_ifname
			if {$gc_p2p_ifname != ""} {
				UTF::Message ERROR "" "P2P GC interface '$gc_p2p_ifname' already exists. You must re-load GC driver"
				error "P2P GC interface '$gc_p2p_ifname' already exists. You must re-load GC driver"
			}
		}
				
		UTF::Message INFO "" "setup P2P gc"		
		$sta_gc wl p2p_ifadd $gc_p2p_macaddr client $p2p_chan
		UTF::Sleep 1

		# get the new P2P GC interface name
		# For Linux gc_p2p_ifname should be "wl0.1"
		set rc [$sta_gc wl p2p_if $gc_p2p_macaddr]
		regexp -nocase { (.*)} $rc match gc_p2p_ifname
		UTF::Message INFO "" "P2P GC interface '$gc_p2p_ifname' is created"
		
		$sta_gc rexec ifconfig $gc_p2p_ifname $gc_p2p_ip netmask 255.255.255.0 up

		regsub -all {:} $gc_p2p_macaddr "" gc_p2p_macaddr_strip
		
		$sta_gc wl -i $gc_p2p_ifname add_ie 0x10 14 50:6F:9A 090202000400060200000B
		
		set tmp "0902020004000D1900$gc_p2p_macaddr_strip"
		append tmp "000400010050F204000600101100045032502D0E010000" 
		$sta_gc wl -i $gc_p2p_ifname add_ie 2 41 50:6F:9A $tmp
		set tmp "0902020004000D1900$gc_p2p_macaddr_strip"
		append tmp "000400010050F204000600101100045032502D0E010000" 
		$sta_gc wl -i $gc_p2p_ifname add_ie 0x20 41 50:6F:9A $tmp

		UTF::Message INFO "" "Dump GC interfaces for debugging"		
		$sta_gc rexec ifconfig

		UTF::Message INFO "" "PASS. P2P GC interface '$gc_p2p_ifname' is created successfully."
		
		return "$gc_p2p_ifname"
	}
	
	#####################################################
	##############       GC Join GO      ################
	#####################################################
	proc gc_join_go {sta_gc p2p_chan p2p_ssid gc_p2p_ifname} {
		UTF::Message INFO "" "************************Func:gc_join_go***************************"
		
		UTF::Message INFO "" "GC joins GO"		
		UTF::Sleep 15
		$sta_gc wl -i $gc_p2p_ifname join $p2p_ssid -p
		UTF::Sleep 10
		
		$sta_gc wl -i $gc_p2p_ifname assoc

		set catch_resp [catch {$sta_gc wl -i $gc_p2p_ifname bssid} catch_msg]
		if {[string first "Not Associated" $catch_msg] != -1 || [string first "00:00:00:00:00:00" $catch_msg] != -1} {
			if {[string first "Not Associated" $catch_msg] != -1} {
				UTF::Message INFO "" "Failed. Not Associated."
				catch {$sta_gc wl -i $gc_p2p_ifname scan}
				UTF::Sleep 10
				catch {$sta_gc wl -i $gc_p2p_ifname scanresults}
				set catch_resp2 [catch {$sta_gc wl -i $gc_p2p_ifname scanresults} catch_msg2]
				UTF::Message INFO "" "catch_resp2=$catch_resp2 catch_msg2=$catch_msg2"
				if {[string first $p2p_ssid $catch_msg2] == -1} {
					UTF::Message INFO "" "Failed. Could not find $p2p_ssid SSID. Check the GO machine"
					error "Could not find $p2p_ssid SSID. Check the GO machine"
				} else {
					UTF::Message INFO "" "P2P association failed but $p2p_ssid SSID exists. Check for GO & GC P2P code mismatch"
					error "P2P association failed but $p2p_ssid SSID exists. Check for GO & GC P2P code mismatch"
				}
			}

			error $catch_msg
		}

		# Confirm chanspec
		set temp [$sta_gc wl -i $gc_p2p_ifname chanspec]
		regexp {(\S+) } $temp match gc_chan
		
		if {$p2p_chan != $gc_chan} {
			error "GC chan is $gc_chan instead of $p2p_chan" 
		} else {
			UTF::Message INFO "" "PASS. P2P GC is joined GO SSID $p2p_ssid successfully."
		}
	}

	#####################################################
	##############        Ping P2P       ################
	#####################################################
	proc ping_p2p {sta_gc go_p2p_ip} {
		UTF::Message INFO "" "************************Func:ping_p2p***************************"
		
		UTF::Message INFO "" "Ping P2P GO (group owner)"
		set catch_resp [catch {$sta_gc ping $go_p2p_ip} catch_msg]
		UTF::Message INFO "" "catch_resp=$catch_resp catch_msg=$catch_msg"

		if {[string first "No IP" $catch_msg] != -1 || [string first "0 packets received" $catch_msg] != -1 || [string first "No route" $catch_msg] != -1 || [string first "ping failed" $catch_msg] != -1} {
			error "GC pinging GO failed with '$catch_msg'" 
		} else {
			UTF::Message INFO "" "PASS. P2P GC pinged GO successfully."
		}
	}
	
	proc smoketest_p2p {sta_gc p2p_chan p2p_ssid go_p2p_ip gc_p2p_ip gc_p2p_macaddr} {
	
		set error_msg ""
		
		#####################################################
		##############        Setup GC       ################
		#####################################################
		set catch_resp [catch {setup_gc $sta_gc $p2p_chan $gc_p2p_ip $gc_p2p_macaddr} catch_msg]
		if {$catch_resp == 0} {
			UTF::Message INFO "" "PASS. setup_gc catch_resp=$catch_resp catch_msg=$catch_msg"
			UTF::Message INFO "" "----------------------------------------------------------"
			set gc_p2p_ifname $catch_msg
		} else {
			UTF::Message ERROR "" "***Failed. Setup GC failed with '$catch_msg'"
			error "setup_gc failed with '$catch_msg'"
		}

		#####################################################
		##############       GC Join GO      ################
		#####################################################
		# GC joining GO fails randomly, therefore
		# retry is added for now till this issue is fixed
		for {set retry_cnt 0} {$retry_cnt < 5} {incr retry_cnt} {

			UTF::Message INFO "" "gc_join_go retry count $retry_cnt"

			set catch_resp [catch {gc_join_go $sta_gc $p2p_chan $p2p_ssid $gc_p2p_ifname} catch_msg]
			if {$catch_resp == 0} {
				UTF::Message INFO "" "PASS. gc_join_go catch_resp=$catch_resp catch_msg=$catch_msg"
				UTF::Message INFO "" "----------------------------------------------------------"
				set error_msg ""
				break
			} else {
				UTF::Message ERROR "" "***Failed. GC join GO retry count $retry_cnt failed with '$catch_msg'"
				set error_msg "gc_join_go failed with '$catch_msg'"
				UTF::Sleep 5
				# retry
				continue
			}
		}

		if {$error_msg != ""} {
			error "$error_msg"							
		}

		#####################################################
		##############        Ping P2P       ################
		#####################################################
		set catch_resp [catch {ping_p2p $sta_gc $go_p2p_ip} catch_msg]
		UTF::Message INFO "" "Disassociate the P2P connection"
		catch {$sta_gc wl -i $gc_p2p_ifname disassoc}
		if {$catch_resp == 0} {
			UTF::Message INFO "" "PASS. ping_p2p catch_resp=$catch_resp catch_msg=$catch_msg"
			UTF::Message INFO "" "----------------------------------------------------------"
		} else {
			UTF::Message ERROR "" "***Failed. ping_p2p failed with '$catch_msg'"
			set error_msg "ping_p2p failed with '$catch_msg'"
		}

		#####################################################
		##############   Disassociate P2P    ################
		#####################################################
		UTF::Message INFO "" "Disassociate the P2P connection"
		set catch_resp [catch {$sta_gc wl -i $gc_p2p_ifname disassoc} catch_msg]
		if {$catch_resp == 0} {
			UTF::Message INFO "" "PASS. P2P Disassociated catch_resp=$catch_resp catch_msg=$catch_msg"
			UTF::Message INFO "" "----------------------------------------------------------"
		} else {
			UTF::Message ERROR "" "***Failed. P2P Disassociate failed with '$catch_msg'"
			if {$error_msg == ""} {
				set error_msg "P2P Disassociate failed with '$catch_msg'"
			}
		}
		
		if {$error_msg == ""} {
			return ""
		} else {
			error "$error_msg"							
		}		
	}
	
	#################################################################################
	#                                  M A I N
	#################################################################################
    set test_name [file tail $::argv0]
    set test_name [file rootname $test_name]
    set TITLE "UTF $(title) $test_name"
    UTF::Message INFO "" $TITLE

#    UTF::WrapSummary $UTF::SummaryDir $TITLE "" $(email) {
		set ::UTF::Perfcache [file join $UTF::SummaryDir perfcache]

#		UTF::Try "SmokeTest P2P" {
			smoketest_p2p $(sta_gc) $(p2p_chan) $(p2p_ssid) $(go_p2p_ip) $(gc_p2p_ip) $(gc_p2p_mac_address)
#		}
#	}
}
