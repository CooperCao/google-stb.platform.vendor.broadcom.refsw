#!/bin/env utf
# -*-tcl-*-
# Dec 2010 Sheida Otmishi
# UTF test script for tracking problematic build.
# $Id$
# $Copyright Broadcom Corporation$
#

package require UTF
package require UTF::Test::ConnectAPSTA
package require UTF::Test::Perf-MIMO

# This test helps tracking available STA builds for a common throughput problem.
# The STA load options require equal number of full STA names, full STA tags, and STA dates or '-1' for using the latest build.

# Use lower case letters for private tests
UTF::Test buildbacktrack {args} {
    UTF::Getopts {
	{stas.arg "4322mcMac-krn" "STAs to test"}
	{statags.arg "KIRIN_BRANCH_5_100" "STA tags to use"}
	{stadates.arg "-1" "Build dates"}
	{securities.arg "open aespsk2" "Securities to test"}
	{fbs.arg "0 1" "Frameburst"}
	{pms.arg "0 2" "PMs"}
	{channels.arg "36l 3" "Channels to test"}
	{ap.arg "4717" "AP"}
	{aptag.arg "NIGHTLY" "AP Tag"}
	{apdate.arg "-1" "AP date"}
	{duration.arg "50" "Iperf duration"}
	{sampletime.arg "2" "Sampling interval"}
	{noapsetup ""}
	{nostaload ""}
	{nostaunload ""}
    }

    set ap $(ap)

    if {!$(noapsetup)} {
	UTF::Try  "$ap load" {
	    set aploadargs "-tag $(aptag)"
	    if {$(apdate) ne "-1"} {
		append aploadargs " -date $(apdate)"
	    }	
	    eval $ap load $aploadargs
	}

	UTF::Try  "Restore AP" {
	    $ap restore_defaults
	}
    }

    foreach sta $(stas) statag $(statags) stadate $(stadates) {
	if {!$(nostaload)} {
	    UTF::Try  "$sta load" {
		set staloadargs {-tag $statag}
		if {$stadate ne "-1"} {
		    append staloadargs { -date $stadate}
		    set retdate $stadate
		} else {
		    regexp {(201\d\.\d.*\.\d.*\.\d)\.*\/} [eval $sta findimages] - retdate
		}
		eval $sta load $staloadargs  
		return [concat [$sta whatami] $retdate]
	    }
	}

	foreach channel $(channels) {
	    foreach security $(securities) {
		UTF::Try  "Connect $ap $sta $channel $security " {
		    UTF::Test::ConnectAPSTA $ap $sta -security $security -chanspec $channel
		}
		foreach pm $(pms) {
		    foreach fb $(fbs) {
			UTF::Try  "FB=$fb PM=$pm" {
			    $sta wl frameburst $fb
			    $ap wl frameburst $fb
			    $sta wl PM $pm
			}	
			UTF::Try  "Chan=$channel FB=$fb PM=$pm Security=$security $sta->$ap" {
			    return [UTF::Multiperf [list $sta [$ap lan]] -t $(duration) -i $(sampletime)]
			}
			UTF::Try  "Chan=$channel FB=$fb PM=$pm Security=$security $ap->$sta" {
			    return [UTF::Multiperf [list [$ap lan] $sta] -t $(duration) -i $(sampletime)]
			}
		    }
		}
	    }
	}
	UTF::Try  "$sta Unload" {
	    $sta unload
	    $sta deinit
	}
    }
}
