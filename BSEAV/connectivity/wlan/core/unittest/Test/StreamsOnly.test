#!/bin/env utf
# -*-tcl-*-

# AP and STA for all channel and rates.
# fsStreams Test...Starts any number of streams between STA and AP by Jeff Galiotto
#

package require UTF
package require UTF::Test::Scan
package require UTF::Test::ConnectAPSTA
package require UTF::Streams

# package provide UTF::Test::Fragmentation 2.0

   
UTF::Test StreamsOnly {args} {
    UTF::Getopts {
    	{sta.arg "4325sdio" "Sta list name"}
    	{ap.arg "4704/4318" "AP name"}
    	{chanspec.arg "3" "Test Channel"}
		{duration.arg "60" "Test Duration"}
    	{email.arg "" "Email Address"}
    	{noapunload "Don't unload driver AP after test"}
    	{nostaunload "Don't unload STA driver after test"}
		{pktsize.arg "512" "Packet Size"}
		{rated.arg "1500K" "Downstream Rate"}
		{rateu.arg "500K" "Upstream Rate"}
		{security.arg "" "Security Type"}
		
	}
    
	UTF::WrapSummary $UTF::SummaryDir "UTF StreamsOnly" "" $(email) {
 	    
	UTF::stream logginglevel "DEBUG"
	
	UTF::Try "Stop and destroy any existing Streams" { 
		# Try to kill any currently running streams before we get started	
		UTF::stream allstreams stop
    	UTF::stream allstreams destroy
    }
	
		  
    # I should use the STA names as the index
      # Should I link fsConnect results or verif connection here with linkcheck to avoid null elements?
    set ix 0
    foreach STA $(sta) {
		UTF::Try "Create a stream between the STA $STA and the AP $(ap)" { 
        	set upstreamarray($ix) [UTF::stream create %AUTO% -transmitsta $STA -receivesta $(ap)]
            $upstreamarray($ix) configurelist "-rate $(rateu) -pktsize $(pktsize)"
        	
    		set downstreamarray($ix) [UTF::stream create %AUTO% -transmitsta $(ap) -receivesta $STA]
		    $downstreamarray($ix) configurelist "-rate $(rated) -pktsize $(pktsize)"
    	    
    		# check the stream status and start
    	    UTF::Sleep 2.0
    	    $upstreamarray($ix) linkcheck
 #     	$upstreamarray($ix) start
    	    $downstreamarray($ix) linkcheck
 #   	    $downstreamarray($ix) start
    	    incr ix
		}
	}	
    
    # Build a list of Streams to pass to allgraph
    
    set upstreamlist ""
    set staNum [llength $(sta)]
    UTF::Try "Place array of Upstreams into a list for allgraph to plot" {
    	for {set ix 0} {$ix < $staNum} {incr ix} { 
			lappend upstreamlist $upstreamarray($ix)
    		UTF::Message INFO  $upstreamarray($ix) "passed to $upstreamlist upsteam list"
    }
    }
    
    set downstreamlist ""

    UTF::Try "Place array of Downstreams into a list for allgraph to plot" {
    for {set ix 0} {$ix < $staNum} {incr ix} { 
       	lappend downstreamlist $downstreamarray($ix)
    	UTF::Message INFO  $downstreamarray($ix) "passed to $downstreamlist downstream list"
    }
    }
    
    
    UTF::Try "Turn off the display to the console" { 
     ::UTF::stream allstreams configure -txdisplay off
     ::UTF::stream allstreams configure -rxdisplay off
     ::UTF::stream allstreams configure -nice 1
    }

    # UTF::Try "Set the stream values to rate $(rate) chanspec $(chanspec) pktsize $(pktsize)" {
    #	::UTF::stream allstreams configurelist "-rate $(rate) -pktsize $(pktsize)"
    # }

     UTF::Try "Set the Streams statistics type(s)" { 
        # set the statistics type that will be gathered for graphing
     	::UTF::stream allstreams stats -rate -meanminmax -clearsynch
     }
     
          
    UTF::Try "Start all of the streams" {
    ::UTF::stream allstreams start
	}    
 
	UTF::Try "Clear the Stats" {
		# Clear the stats after the start to get rid of any anomalous spikes
    	::UTF::stream allstreams stats -clear
    	# Record the iperf throughput test run for "$duration" seconds 
    	UTF::Sleep $(duration)
    }
     
    UTF::Try "Configure the graph for displaying the statistics" {  
    	UTF::Message INFO  $upstreamlist "UPSTA list passed to streamgraph function"
    	UTF::Message INFO  $downstreamlist "DOWNSTA list passed to streamgraph function"
     
    	set upplot [UTF::streamgraph upgraph -graphsize "1024,768" -stat rate -streams $upstreamlist -title "Up Stream Traffic"]
    	set downplot [UTF::streamgraph downgraph -graphsize "1024,768" -stat rate -streams $downstreamlist -title "Down Stream Traffic"]
    
    }
    
    set retupplot [$upplot plot]
    set retdownplot [$downplot plot]
    
    UTF::Try "Graph [lindex $upstreamlist 0] ... [lindex $upstreamlist end]" {
    
    	return $retupplot
    }
     
    UTF::Try "Graph [lindex $downstreamlist 0] ... [lindex $downstreamlist end]" {
    
    	return $retdownplot
    }
     
    UTF::Try "Stop and Exit the Streams" {
    	::UTF::stream allstreams stop
	    
    	# Be sure to clean up after ourselves to avoid leftover Iperf processes
    	::UTF::stream exitstreams
    }
     
    foreach S [list $STA $ap] {
		    if {[$S hostis DHD WinDHD PXA LMAC] &&
			![$S cget -nomaxmem] && [$S cget -console] ne ""} {
			UTF::Try "$S: MaxMem in use" {
			    memchart [$S maxmem] \
				-key [list $branch $S maxmem] \
				-history $(history)
			}
		    }
		}
    
    
    if {!$(nostaunload)} {
      foreach STA $(sta) {
   
	     UTF::Try "$STA unload" { 
            	 $STA unload
	     }    	
       }
     }
     
     if {!$(noapunload)} {
      UTF::Try "Unload the AP $(ap)" {
      $(ap) unload
	  }     
	 }
	  
    }
    }
    # end of fsStreams


