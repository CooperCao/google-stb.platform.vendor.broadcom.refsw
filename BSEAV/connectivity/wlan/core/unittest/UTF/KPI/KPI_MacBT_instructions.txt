
1. Add the following in your UTF config file:

package require UTF::MacBT

UTF::MacOS MacBookPro\
		-lan_ip 10.19.61.191 \
		-sta {md15tst1 en0}
		
UTF::MacOS MacBookPro1\
		-lan_ip 10.19.61.192 \
		-sta {md15tst2 en0}
	
UTF::MacOS MacBookPro2\
		-lan_ip 10.19.61.193 \
		-sta {md15tst3 en0}
		
UTF::MacOS MacBookAir\
		-lan_ip 10.19.61.194 \
		-sta {md15tst4 en0}
			
UTF::BTSpeaker md15tst1_s -sta md15tst1 -address 04-88-e2-82-03-f6
UTF::BTSpeaker md15tst2_s -sta md15tst2 -address 04-88-e2-81-53-96
UTF::BTSpeaker md15tst3_s -sta md15tst3 -address 04-88-e2-81-3b-be
UTF::BTSpeaker md15tst4_s -sta md15tst4 -address 04-88-e2-8f-8a-12
UTF::BTMouse md15tst1_m -sta md15tst1 -address 9c-35-eb-18-3d-88
UTF::BTMouse md15tst2_m -sta md15tst2 -address 9c-35-eb-18-02-6e
UTF::BTMouse md15tst3_m -sta md15tst3 -address 9c-35-eb-18-5b-80
UTF::BTMouse md15tst4_m -sta md15tst4 -address  ac-bc-32-dd-20-02
UTF::BTKeyboard md15tst1_k -sta md15tst1 -address 98-5a-eb-b5-7a-cd
UTF::BTKeyboard md15tst2_k -sta md15tst2 -address 98-5a-eb-b6-2a-ff
UTF::BTKeyboard md15tst3_k -sta md15tst3 -address 68-d9-3c-ed-72-d1
UTF::BTKeyboard md15tst4_k -sta md15tst4 -address 04-69-f8-c1-7c-6f

2. The above lines instantiate the speaker, mouse and keyboard objects paired to the various hosts. For instance md15tst1_k refers to the instance of keyboard paired to host md15tst1.

3. The following are a list of useful methods for each object type (speaker, mouse and keyboard) to get started in your BlueTooth tests:
a. Use "md15tst1_s play" to start music in iTunes. (Make sure that the music files are installed in the host file system. Default is /Users/user/Music/iTunes folder.)
   For instance, "md15tst1_s play" starts music playing on the speaker paired to host md15tst1.
b. To start playing iTunes music file and measure A2DPBitRate, use "play_and_measure". The following starts music play and measure A2DPBitRate for 30 seconds, after power cycling the BT radio (reinit):
   "md15tst1_s play_and_measure -rtime 30 -reinit"
   Note: the A2DPBitRate measurement runs in the background. And the results returns after the test is complete. Use "-outfile" option to capture the result in a file in /tmp folder under the controller's local file system.
c. To check the status of the device, use: "isconnected?" and "ispaired" to see if it is connected (active), or paired.
d. The same methods are available for mouse and keyboard: play_and_measure, isconnected?, ispaired?
   To run HIDPacketErrorRate test in the foreground, use "runMyTraffic".
e. The common options for play_and_measure methods for all three object types include:
	-rtime (run time in seconds)
	-reinit (power cycling the BT Radio at the host before starting traffic)
	-noHRTimeStamps (turns off micro-second precision time stamps)
	-outfile (name of output file in /tmp folder)
f. For speaker object only:
    -filename (name of iTunes file to play, or it would play the first one in the music library)
g. For mouse and keyboard only:
    -onlyMe (runs HIDPacketErrorRate test exclusively on the calling device; default is to run HIDPacketErrorRate test on any active HID devices)
    -all (specifically run HIDPacketErrorRate on all known HID devices)

4. Here is a selected list of methods available for each object type:
# speakers
    method isconnected? {}
    method stopMyTraffic {} (stops iTunes, if already running)
    method ispaired? {} 
	method reinit {} 
	method play { {fName ""} } 
    method measure { args } 
    method getRate { fd {rtime ""} } 
    method play_and_measure { args } 
    
# mouse
    method isconnected? {} 
    method ispaired? {}
    method runMyTraffic { {rtime ""} }
	method reinit {}
    method play_and_measure { args }
    
# keyboard
    method ispaired? {} 
    method isconnected? {}
    method runMyTraffic { {rtime ""} }
	method reinit {}
    method play_and_measure { args }
    
5. The quickest way to experiment with all these, prior to including them in your script: at the system prompt on the controller, traverse to the unittest folder, then:
   "UTF.tcl -utfconf utfcon/[conf] [object_name] [method]"
   For instance: "UTF.tcl -utfconf utfconf/mc32_mac.tcl md15tst2_m runMyTraffic 30" (runs HIDPacketErrorRate on mouse paired with md15tst2 for 30 seconds)
                 "UTF.tcl -utfconf utfconf/mc32_mac.tcl md15tst2_s play_and_measure -rtime 60 -filename /Users/user/rxWave.wav -reinit" (starts iTunes with file rxWave.wav after power cycling BT radio, and capture A2DPBitRate results for 60 seconds)
 