#!/usr/bin/expect
# -*-tcl-*-
#
# $Copyright Broadcom Corporation$
# $Id: cb63122b4290474ad93c52c250591fa2c724bc72 $
#

proc connect {} {
    global spawn_id
    interact {
	"\u0004" {
	    return
	}
    }
    send_user "\r"
}

proc logger {} {
    global spawn_id
    # don't want timeouts to interrupt logging, but if a test is still
    # running after a day then something has gone wrong.
    set timeout 86400
    expect {
	-re {..*} {
	    puts -nonewline "$expect_out(buffer)"
	    exp_continue
	}
    }
}

proc command {args} {
    set cmd [join $args " "]
    global spawn_id

    set code 0
    expect -re {\n\r> $}
    exp_send "$cmd\r"
    expect -re {(.*)\n\r> $} {
	# TCL can handle \n, \r, or \r\n but MFGC uses \n\r!
	regsub -all "\n\r" $expect_out(1,string) "\r\n" ret
	if {[regexp {Unknown Command} $ret]} {
	    set code 1
	}
	exp_send_user -- "$ret"
    }
    # Send some data - workaround for expect's long-standing 1-second
    # close down bug
    exp_send "\0"
    exit $code
}

proc usage {} {
    puts stderr "Usage: $::argv0 \[-\](ip:port) \[cmd \[args ...\]\]"
    exit 1
}

# Args
if {[llength $argv] > 0 && [set host [lindex $argv 0]] != "-man"} {

    if {[info exists env(EXP_INTERNAL)]} {
	exp_internal 1
    } else {
	exp_internal 0
    }
    log_user 0
    set logger [regexp {^-(.*)} $host - host]
    if {[catch {
	# Telnet gets a new session so no reset needed
	if {![regexp {(.*):(.*)} $host - host port]} {
	    set port 7130
	}
	spawn -noecho -open [socket $host $port]

	set argv [lreplace $argv 0 0]
	set timeout 60

	if {[llength $argv] == 0} {
	    connect
	} elseif {$argv eq "logger"} {
	    logger
	} else {
	    eval command $argv
	}
    } ret]} {
	puts stderr $ret
	exit 1
    }
    exit 0
}

# Leave this 'til last to improve performance
lappend auto_path . /projects/hnd/tools/linux/share/unittest
package require UTF::doc

UTF::doc {
    # [manpage_begin mfgcshell n 1.0]
    # [moddesc {HND Wireless Test Framework}]
    # [titledesc {tool for managing an MFGC remote control tool}]
    # [copyright {2009 Broadcom Corporation}]
    # [description]
    # [para]

    # [cmd mfgcshell] is a command for communicating with an MFGC
    # remote control tool.

    # [list_begin arguments]

    # [arg_def "" connection]

    # Every [cmd mfgcshell] command requires a [arg connection]
    # argument which specifies the mechanism for communicating with
    # the MFGC remote control tool.  Various alternative connection
    # mechanisms are available:

    # [list_begin arguments]

    # [arg_def "" address]

    # The hostname or IP address of the MFGC DUT.  In this case [cmd
    # mfgcshell] will use the MFGC [cmd telnet] interface on port 7130

    # [arg_def "" address:port]

    # The hostname or IP address and TCP port of the MFGC [cmd telnet]
    # interface or a [cmd consolelogger] session connected to such an
    # interface.

    # [list_end]

    # [para]

    # If [cmd consolelogger] is not running only one [cmd mfgcshell]
    # process can access a device at a time.  This can cause problems
    # when background logging processes compete with foreground
    # command processes.  [cmd consolelogger] avoids this problem by
    # allowing multiple [cmd mfgcshell] processes to access the same
    # device.

    # [para]

    # [arg connection] may be prefixed with [cmd -] to indicate this
    # is a background process and therefore requires [cmd
    # consolelogger].  If [cmd consolelogger] is not running then
    # attempts to connect to [arg -connection] will fail silently.

    # [list_end]

    # [list_begin definitions]

    # [call [cmd mfgcshell] [arg connection] [lb][cmd {cmd ...}][rb]]

    # Execute [cmd {cmd ...}] on MFGC.

    # [list_begin arguments]

    # [arg_def "" {cmd ...}]

    # [list_end]

    # Optional command and arguments to be run.  If a command line is
    # not specified, an interactive terminal session is started.  To
    # disconnect from the session use ^D.

    # [call [cmd starttest]]

    # Start Test.

    # [call [cmd canceltest]]

    # Cancel test.

    # [call [cmd getstatus]]

    # Get the status of the last test.

    # eg: [example_begin]
} {{
    $ mfgcshell 192.168.21.60:7130 getStatus
    Fail
    ErrorCodes:
    ,,Tue Sep 08 16:59:26 2009,-5.11876,0.139509,60,0.0553303,51,-9999,-9999,-9999,-9999,-9999,-9999,-9999,-9999,-9999,-9999,-9999,-9999,-9999,-9999,-9999,-9999,16.172
    $
}} {
    # [example_end]

    # [list_end]

    # [see_also [uri APdoc.cgi?consolelogger consolelogger]]
    # [see_also [uri APdoc.cgi?apshell apshell]]
    # [see_also [uri APdoc.cgi?vxshell vxshell]]

    # [manpage_end]
}

UTF::man
exit

